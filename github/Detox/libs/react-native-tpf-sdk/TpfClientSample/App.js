/**
 * Sample React Native App
 *
 * adapted from App.js generated by the following command:
 *
 * react-native init example
 *
 * https://github.com/facebook/react-native
 */

import React, { useCallback, useEffect, useRef, useState } from 'react';
import {
  ScrollView,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
  TextInput,
  Button,
  Alert,
  StatusBar,
  Dimensions
} from 'react-native';
import TpfSdk from 'react-native-tpf-sdk';
import useTheme, { THEME_TYPE } from './hooks/useTheme';
import { setMainLocaleLanguage } from './i18n';
import { translate } from './i18n';
import { ICCheck, ICUncheck } from '../src/assets/icons';
import { CUSTOM_COLOR } from '../src/constants/colors';
const { width } = Dimensions.get('window');
const remoteAddress = 'https://htf-sdk-tpl-integration-uat.topenfintech.com/';

const Shadow = {
  shadowColor: '#636466',
  shadowOffset: {
    width: 0,
    height: 2
  },
  shadowOpacity: 0.2,
  shadowRadius: 6,
  elevation: 4
};

const MainFeature = [
  {
    title: 'Tín dụng BĐS',
    code: 'tin_dung',
    data: {}
  },
  {
    title: 'Thiết kế nội thất',
    code: 'noi_that',
    data: {}
  },
  {
    title: 'Bảo hiểm',
    code: 'bao_hiem',
    data: {}
  },
  {
    title: 'Thẩm định giá BĐS',
    code: 'tham_dinh_gia',
    data: {}
  },
  {
    title: 'Tư vấn pháp lý BĐS',
    code: 'phap_ly',
    data: {}
  },
  {
    title: 'Công chứng theo yêu cầu',
    code: 'cong_chung',
    data: {}
  },
  {
    title: 'Cấp chứng nhận TPL',
    code: 'cap_chung_nhan',
    data: {}
  },
  {
    title: 'Thiết bị điện gia dụng',
    code: 'thiet_bi_dien',
    data: {}
  },
  {
    title: 'Tư vấn thủ tục BĐS',
    code: 'thu_tuc_bds',
    data: {}
  },
  {
    title: 'Dịch vụ theo yêu cầu',
    code: 'dich_vu_khac',
    data: {}
  }
];

const ViewFeature = [
  {
    title: 'Gửi yêu cầu nhanh',
    code: 'create_request',
    data: {}
  },
  {
    title: 'Quản lý hồ sơ - tài chính',
    code: 'application_list',
    data: { tab: 'credit' }
  },
  {
    title: 'Quản lý hồ sơ - bảo hiểm',
    code: 'application_list',
    data: { tab: 'insurance' }
  },
  {
    title: 'Quản lý hồ sơ - DVCT',
    code: 'application_list',
    data: { tab: 'extra_service' }
  },
  {
    title: 'Quản lý hồ sơ - yêu cầu',
    code: 'application_list',
    data: { tab: 'request' }
  },
  {
    title: 'Quản lý hồ sơ - yêu cầu hỗ trợ',
    code: 'application_list',
    data: { tab: 'request_support' }
  },
  {
    title: 'Xem lịch sử giao dịch',
    code: '004',
    data: {}
  },
  {
    title: 'Hoa hồng',
    code: '006',
    data: {}
  },
  {
    title: 'Hoàn trả',
    code: '007',
    data: {}
  }
];

const Actions = [
  { label: 'Support', value: 'member.supportrequest.tocustomer', id: '2532' },
  { label: 'Lead', value: 'transaction.lead', id: '9304' },
  { label: 'Deal credit', value: 'transaction.deal.credit', id: '4107' },
  { label: 'Order credit', value: 'transaction.order.credit', id: '4107' },
  { label: 'Order extra service', value: 'transaction.order.extraservice', id: '9307' },
  { label: 'Insurance', value: 'transaction.order.insurance', id: '9309' },
  { label: 'Balance', value: 'transaction.balance', id: '9308' }
];

const ThemeType = [
  {
    title: 'Mặc định',
    code: THEME_TYPE.DEFAULT,
    data: {}
  },
  {
    title: 'Theme 1',
    code: THEME_TYPE.OPTION1,
    data: {}
  },
  {
    title: 'Theme 2',
    code: THEME_TYPE.OPTION2,
    data: {}
  },
  {
    title: 'Theme 3',
    code: THEME_TYPE.OPTION3,
    data: {}
  }
];

const SETTINGS = {
  scheme: 'topenfintech:/',
  appId:
    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTW9iaWxlLVNkayIsImlhdCI6MTUxNjIzOTAyMn0.1O9ZQYhtyw40zeSYjaSrGzMJl4BrMqrXcAl96xbvILs'
};

const TouchItem = ({ title, code, data, onPress }) => {
  return (
    <TouchableOpacity onPress={() => onPress({ title, code, data })} style={styles.item}>
      <Text style={styles.itemTitle}>{title}</Text>
    </TouchableOpacity>
  );
};

const Group = ({ title, items, onPress }) => {
  return (
    <View style={styles.groupContainer}>
      <Text style={styles.groupTitle}>{title}</Text>
      <View style={styles.groupItem}>
        {items.map((item, index) => (
          <TouchItem key={index + ''} {...item} onPress={onPress} />
        ))}
      </View>
    </View>
  );
};

const ItemTheme = ({ data }) => {
  const themes = Object.entries(data);
  return themes.map((theme, index) => {
    const [nameTheme, valueTheme] = theme;
    if (typeof valueTheme !== 'object') {
      return (
        <Text key={index + ''} style={styles.textColor}>
          {nameTheme}:{' '}
          <Text style={valueTheme?.includes('#') && { color: valueTheme }}>{valueTheme}</Text>
        </Text>
      );
    }

    const themeArray = Object.entries(valueTheme);

    return (
      <View style={{ marginTop: 10 }}>
        <Text style={styles.themeSubTitle}>{nameTheme}</Text>
        {themeArray.map((obj, index) => {
          const [name, value] = obj;
          return (
            <Text key={index + ''} style={styles.textColor}>
              {name}: <Text style={value?.includes('#') && { color: value }}>{value}</Text>
            </Text>
          );
        })}
      </View>
    );
  });
};

const GroupTheme = ({ items }) => {
  const themes = Object.entries(items);

  return themes.map((item, index) => {
    const [keyTheme, valueTheme] = item;
    return (
      <View key={index + ''} style={styles.themeContainer}>
        <Text style={styles.themeTitle}>{keyTheme}</Text>
        <ItemTheme data={valueTheme} />
      </View>
    );
  });
};

const App = () => {
  const [userInfo, setUserInfo] = useState(null);
  // const [refreshToken, setRefreshToken] = useState('');
  const [inputTriggerCode, setInputTriggerCode] = useState('M163644799HSWJY');
  const [productCode, setProductCode] = useState('P01');
  const [notificationAction, setNotificationAction] = useState(Actions[0].value);
  const [notificationId, setNotificationID] = useState(Actions[0].id);

  const [userName, setUserName] = useState('084270938');
  const [password, setPassword] = useState('Test@123');
  const [first_name, setFirstName] = useState('test');
  const [last_name, setLastName] = useState('user');
  const [phone, setPhone] = useState('0921251777');
  const [isLogin, setLogin] = useState(false);
  const [reConnect, setReconnect] = useState(null);
  const [loginByToken, setLoginByToken] = useState(false);
  const [accessToken, setAccessToken] = useState(
    'eyJhbGciOiJQUzI1NiIsImtpZCI6IjE5ZGZiNmE0ZTVhNzQ2MDNiZmEzZmI5MmFjYzIyMzBlIiwidHlwIjoiYXQrand0In0.eyJuYmYiOjE2NTU5ODI4MDAsImV4cCI6MTY1NTk4NjQwMCwiaXNzIjoiaHR0cHM6Ly9pZC11YXQtY2l0dXMudG9wZW5sYW5kLmNvbSIsImF1ZCI6IklkZW50aXR5U2VydmVyQXBpIiwiY2xpZW50X2lkIjoiVkRCd1pXNUpSREl3TWpJaElRPT0iLCJzdWIiOiIwYzg0MmZjYS00NTBiLTQxMTctOTZkOS0xYmUzOTYzOGNhN2IiLCJhdXRoX3RpbWUiOjE2NTU5ODI4MDAsImlkcCI6ImxvY2FsIiwidXNlcm5hbWUiOiIwOTIxMjUxNzMzIiwiZmlyc3Rsb2dpbiI6ZmFsc2UsImNyZWF0ZWRieWFkbWluIjpmYWxzZSwidG9rZW5kZWFjdGl2ZXVzZXIiOiJBQ1M4SzB1RU85KzZKazVyWm16VE1pejkrVW56Y1lRZ3VTam5jMFFYRjE1MHh2Ti9CV25Iait1U2pNT1paZUZ4OWRIdDhRcGREM2RMLzJuc3NNeVhtdz09IiwicGxhdGZvcm10eXBlIjoxLCJkZXZpY2UiOiJkZDM1Nzk3NC02NDkzLTQwYWQtOGQwYS00MjE1NTE1MzFiYTgiLCJpYXQiOjE2NTU5ODI4MDAsInNjb3BlIjpbIklkZW50aXR5U2VydmVyQXBpIiwiZW1haWwiLCJvcGVuaWQiLCJwaG9uZSIsInByb2ZpbGUiXSwiYW1yIjpbInBhc3N3b3JkIl19.ANNOI1LNqo3kybA1ybAeJj6l1UVf565XWoz67Z4OiHkmL8h_eHkOw2PPaz4s-w0mT870QOtCSMNNYkyKNhOyvAC1onsyIEvIfDC9XqDN4V40p9Ue5TTHLrO8WcA8TfsFcQV3RQGkJmBuUhoYkMUBK1TAHKvkxpbNK5m8sbbE_lFrMyZwBQaA6KICnA6SWhxP8cFQdqKIR229H71jD9nP03WWmUoblePMYB05Kyuv-XVvCPe9gFMewJdMgfMhkvALsv4d3wamSMJyXAfqnZzXs6UD2GQm834cL-X5SQB2AKmc-Z_QpzqRWNdRE0jYpbcpknxe5cHX7i9H_TRFzo4JaQ'
  );
  const client = useRef();

  const { theme, onChangeTheme } = useTheme();
  useEffect(() => {
    setMainLocaleLanguage('vi');
  }, []);

  const onConnect = data => {
    const { userInfo } = data;
    setLogin(true);
    setUserInfo(userInfo);
  };
  const onDisConnect = data => {};

  const onFailWithError = data => {
    alert(JSON.stringify(data));
  };
  const onRequestAccessToken = () => {
    alert('token expired. Please login again');
    return 'new_access_token';
  };

  const onRequestLogin = data => {
    setReconnect(data);
  };

  const onEventChange = object => {
    // console.log('onEventChange', object);
  };

  const clientEventHandlers = {
    onConnect,
    onDisConnect,
    onFailWithError,
    onRequestAccessToken,
    onEventChange,
    onRequestLogin
  };
  const apiLogin = async body => {
    try {
      let formBody = [];
      for (var key in body) {
        var encodedKey = encodeURIComponent(key);
        var encodedValue = encodeURIComponent(body[key]);
        formBody.push(encodedKey + '=' + encodedValue);
      }
      formBody = formBody.join('&');

      let response = await fetch('https://id-uat-citus.topenland.com/connect/token', {
        method: 'post',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',
          Authorization: 'Basic VkRCd1pXNUpSREl3TWpJaElRPT06VDBwM25MQG5kISE='
        },
        body: formBody
      });

      let result = await response.json();
      return {
        status: response.status,
        message: response.statusText,
        data: result
      };
    } catch (error) {
      return error;
    }
  };

  const onAuthorize = async () => {
    try {
      if (loginByToken) {
        client?.current?.connect({
          token: accessToken,
          user: {
            first_name,
            last_name,
            phone
          }
        });
        if (reConnect) {
          reConnect?.showSdk();
          setReconnect(null);
        }
        Alert.alert('Login success');
        //Alert.alert('Login success');
        return;
      }

      const response = await apiLogin({
        grant_type: 'password',
        scope: 'openid profile email phone IdentityServerApi',
        username: userName,
        password
      });

      if (response.status === 200) {
        let data = response.data;
        const token = data.access_token || '';
        client?.current?.connect({
          token,
          user: {
            first_name,
            last_name,
            phone
          }
        });
        if (reConnect) {
          reConnect?.showSdk();
          setReconnect(null);
        }
        Alert.alert('Login success');
      } else {
        Alert.alert('Failed to login', `${response?.data?.error_description}`);
      }
    } catch (error) {
      Alert.alert('Failed to login', `${error?.code}\n${error?.message}`);
    }
  };

  const onFireEvent = data => {
    client?.current?.showProducts({ triggerCode: data.code });
  };

  const onOtherEvent = data => {
    if (data.code === 'create_request') {
      client?.current?.showApplications(data);
    }
    if (data.code === 'application_list') {
      client?.current?.showApplications(data);
    }
    if (data.code === '004') {
      client?.current?.showHistorys();
    }
    if (data.code === '006') {
      client?.current?.showBalance();
    }
    if (data.code === '007') {
      client?.current?.showRefund();
    }
  };

  const onLogout = () => {
    setUserInfo(null);
    setLogin(false);
    client?.current?.disConnect();
  };

  const onShowDetailNotification = useCallback(() => {
    if (!notificationAction || !notificationId) {
      alert('Action and Id is required');
      return;
    }

    client?.current?.showDetailNotification({
      action: notificationAction,
      id: notificationId
    });
  }, [notificationAction, notificationId, client]);

  const onOtherTheme = useCallback(
    async data => {
      const { code: type } = data;
      await onChangeTheme({ type });
      alert(`Set ${type} is success!`);
    },
    [onChangeTheme]
  );
  return (
    <>
      <StatusBar translucent={true} />
      <TpfSdk
        ref={client}
        eventHandlers={clientEventHandlers}
        theme={theme}
        remoteAddress={remoteAddress}
        setting={SETTINGS}
      />
      <ScrollView style={styles.container} contentContainerStyle={styles.wrapper}>
        <TouchableOpacity>
          <Text style={styles.welcome}>TpfSdk example</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={{ flexDirection: 'row', alignItems: 'center', marginBottom: 10 }}
          onPress={() => setLoginByToken(prevState => !prevState)}>
          {loginByToken ? <ICCheck fill={'blue'} /> : <ICUncheck fill={CUSTOM_COLOR.Bombay} />}
          <Text style={{ marginLeft: 5 }}>login by access Token</Text>
        </TouchableOpacity>

        {userInfo ? (
          <View style={styles.userInfo}>
            <Text style={styles.blackText}>{`TopenID: ${userInfo?.topenID}`}</Text>
            <Text style={styles.blackText}>{`Full name: ${userInfo?.name}`}</Text>
            <Text style={styles.blackText}>{`Phone: ${userInfo?.phone}`}</Text>
          </View>
        ) : null}
        {loginByToken ? (
          <>
            <View>
              <Text>access Token</Text>
              <TextInput
                style={[
                  styles.textInput,
                  { padding: 10, height: 120, width: width - 50, marginTop: 10, marginBottom: 20 }
                ]}
                value={accessToken}
                multiline
                onChangeText={setAccessToken}
              />
            </View>
            <TouchableOpacity style={[styles.loginButton]} onPress={() => setAccessToken('')}>
              <Text style={styles.loginTitle}>Clear token</Text>
            </TouchableOpacity>
          </>
        ) : (
          <View>
            <Text>Username</Text>
            <TextInput
              style={[styles.textInput, { height: 45, marginVertical: 15 }]}
              value={userName}
              onChangeText={setUserName}
            />
            <Text>Password</Text>
            <TextInput
              style={[styles.textInput, { height: 45, marginVertical: 15 }]}
              value={password}
              onChangeText={setPassword}
            />
            {!isLogin && (
              <>
                <Text>Phone</Text>
                <TextInput
                  style={[styles.textInput, { height: 45, marginVertical: 15 }]}
                  value={phone}
                  onChangeText={setPhone}
                  autoCapitalize="none"
                />
                <Text>First name</Text>
                <TextInput
                  style={[styles.textInput, { height: 45, marginVertical: 15 }]}
                  value={first_name}
                  onChangeText={setFirstName}
                />
                <Text>Last name</Text>
                <TextInput
                  style={[styles.textInput, { height: 45, marginVertical: 15 }]}
                  value={last_name}
                  onChangeText={setLastName}
                />
              </>
            )}
          </View>
        )}

        <TouchableOpacity style={styles.loginButton} onPress={isLogin ? onLogout : onAuthorize}>
          <Text style={styles.loginTitle}>{isLogin ? 'Logout' : 'Login'}</Text>
        </TouchableOpacity>
        <Group title={translate('common.me')} items={MainFeature} onPress={onFireEvent} />
        <View>
          <Text>TriggerCode</Text>
          <TextInput
            style={styles.textInput}
            value={inputTriggerCode}
            onChangeText={text => {
              setInputTriggerCode(text);
            }}
          />
          <Button
            onPress={() => {
              if (!inputTriggerCode) {
                alert('Trigger code is Required');
                return;
              }
              client?.current?.showProducts({ triggerCode: inputTriggerCode });
            }}
            title={'Trigger'}
          />
        </View>
        <Group title="Xem sản phẩm gọi ý" items={[]} onPress={onOtherEvent} />
        <View>
          <Text>ProductCode</Text>
          <TextInput style={styles.textInput} value={productCode} onChangeText={setProductCode} />
          <Button
            onPress={() => {
              if (!productCode) {
                alert('product code is required');
                return;
              }
              client?.current?.showProductSuggest({ productCode });
            }}
            title={'Xem sản phẩm gợi ý'}
          />
        </View>
        <Group title="Xem danh sách khác" items={ViewFeature} onPress={onOtherEvent} />

        {/* <Group title="Xem chi tiết thông báo" items={[]} onPress={onOtherEvent} />
        <View>
          <Text>Action</Text>
          <Dropdown
            style={styles.dropdown}
            placeholderStyle={styles.placeholderStyle}
            selectedTextStyle={styles.selectedTextStyle}
            inputSearchStyle={styles.inputSearchStyle}
            iconStyle={styles.iconStyle}
            data={Actions}
            maxHeight={300}
            labelField="label"
            valueField="value"
            placeholder="Select item"
            searchPlaceholder="Search..."
            value={notificationAction}
            onChange={item => {
              setNotificationAction(item.value);
              setNotificationID(item.id);
            }}
          />

          <Text>Id</Text>
          <TextInput
            style={styles.textInput}
            value={notificationId}
            onChangeText={setNotificationID}
          />
          <Button onPress={onShowDetailNotification} title={'Xem chi tiết thông báo'} />
        </View> */}

        <Group title="Thay đổi theme" items={ThemeType} onPress={onOtherTheme} />
        <GroupTheme items={theme} />
      </ScrollView>
    </>
  );
};

export default App;

const styles = StyleSheet.create({
  container: { backgroundColor: 'white', flex: 1 },
  wrapper: {
    // marginTop: 40,
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
    paddingBottom: 100
  },
  blackText: {
    color: 'black'
  },
  welcome: {
    marginTop: 30,
    paddingVertical: 20,
    fontWeight: '700',
    fontSize: 24,
    color: 'black'
  },
  groupContainer: {
    width: '100%',
    alignItems: 'center',
    paddingHorizontal: 12,
    marginTop: 40
  },
  groupTitle: {
    fontWeight: '700',
    fontSize: 20,
    color: 'black'
  },
  groupItem: {
    paddingVertical: 12,
    width: '100%',
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between'
  },
  item: {
    ...Shadow,
    backgroundColor: '#fff',
    width: 80,
    padding: 12,
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 12,
    borderRadius: 6
  },
  itemTitle: {
    fontWeight: '400',
    fontSize: 14,
    textAlign: 'center',
    color: 'black'
  },
  textInput: {
    width: 250,
    padding: 5,
    borderRadius: 5,
    borderColor: '#acacac',
    backgroundColor: '#F0F0F0',
    color: 'black'
  },
  row: {
    flexDirection: 'row'
  },
  loginButton: {
    backgroundColor: '#009CB1',
    padding: 15,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loginTitle: { color: '#FFF' },
  userInfo: { paddingHorizontal: 10, paddingBottom: 10 },

  dropdown: {
    marginVertical: 20,
    height: 40,
    borderBottomColor: 'gray',
    borderBottomWidth: 0.5
  },
  icon: {
    marginRight: 5
  },
  placeholderStyle: {
    fontSize: 14,
    color: 'black'
  },
  selectedTextStyle: {
    fontSize: 14,
    color: 'black'
  },
  iconStyle: {
    width: 20,
    height: 20
  },
  inputSearchStyle: {
    height: 40,
    fontSize: 16,
    color: 'black'
  },

  themeContainer: {
    width: '100%',
    paddingHorizontal: 20
  },
  themeTitle: {
    textTransform: 'capitalize',
    fontSize: 16,
    fontWeight: '700',
    marginTop: 5,
    color: 'black'
  },
  themeSubTitle: {
    textTransform: 'capitalize',
    fontSize: 15,
    fontWeight: '500',
    color: 'black'
  },
  textColor: {
    marginTop: 10,
    color: 'black'
  }
});
