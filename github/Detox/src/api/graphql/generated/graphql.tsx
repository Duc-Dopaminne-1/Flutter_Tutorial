import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/client';
import * as ApolloReactHooks from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `Byte` scalar type represents non-fractional whole numeric values. Byte can represent values between 0 and 255. */
  Byte: any;
  /** The `Date` scalar represents an ISO-8601 compliant date type. */
  Date: any;
  /** The `DateTime` scalar represents an ISO-8601 compliant date time type. */
  DateTime: any;
  /** The built-in `Decimal` scalar type. */
  Decimal: any;
  /** The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1. */
  Long: any;
  /** The multiplier path scalar represents a valid GraphQL multiplier path string. */
  MultiplierPath: any;
  /** The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types. */
  Name: any;
  PaginationAmount: any;
  /** The `Short` scalar type represents non-fractional signed whole 16-bit numeric values. Short can represent values between -(2^15) and 2^15 - 1. */
  Short: any;
  Url: any;
  Uuid: any;
};






export type ActionNotificationDto = {
  __typename?: 'ActionNotificationDto';
  actionNotificationId?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type ActionNotificationDtoFilter = {
  AND?: Maybe<Array<ActionNotificationDtoFilter>>;
  content?: Maybe<Scalars['String']>;
  content_contains?: Maybe<Scalars['String']>;
  content_ends_with?: Maybe<Scalars['String']>;
  content_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_not?: Maybe<Scalars['String']>;
  content_not_contains?: Maybe<Scalars['String']>;
  content_not_ends_with?: Maybe<Scalars['String']>;
  content_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  content_not_starts_with?: Maybe<Scalars['String']>;
  content_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ActionNotificationDtoFilter>>;
};

export type ActionNotificationDtoSort = {
  content?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
};

export type ActiveAgentSubscriptionPackageForAllUsersDto = {
  __typename?: 'ActiveAgentSubscriptionPackageForAllUsersDto';
  agentId?: Maybe<Scalars['String']>;
  agentSubscriptionPackageId?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  packageBoughtTime?: Maybe<Scalars['Long']>;
  staffCode?: Maybe<Scalars['String']>;
  subscriptionInvoiceId?: Maybe<Scalars['String']>;
  subscriptionPackageEndTime?: Maybe<Scalars['Long']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackageName?: Maybe<Scalars['String']>;
  subscriptionPackageStartTime?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
};

export type ActiveAgentSubscriptionPackageForAllUsersDtoFilter = {
  AND?: Maybe<Array<ActiveAgentSubscriptionPackageForAllUsersDtoFilter>>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ActiveAgentSubscriptionPackageForAllUsersDtoFilter>>;
  packageBoughtTime?: Maybe<Scalars['Long']>;
  packageBoughtTime_gt?: Maybe<Scalars['Long']>;
  packageBoughtTime_gte?: Maybe<Scalars['Long']>;
  packageBoughtTime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  packageBoughtTime_lt?: Maybe<Scalars['Long']>;
  packageBoughtTime_lte?: Maybe<Scalars['Long']>;
  packageBoughtTime_not?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_gt?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_gte?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  packageBoughtTime_not_lt?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_lte?: Maybe<Scalars['Long']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
  subscriptionPackageEndTime?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageEndTime_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageEndTime_not_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackageId_contains?: Maybe<Scalars['String']>;
  subscriptionPackageId_ends_with?: Maybe<Scalars['String']>;
  subscriptionPackageId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPackageId_not?: Maybe<Scalars['String']>;
  subscriptionPackageId_not_contains?: Maybe<Scalars['String']>;
  subscriptionPackageId_not_ends_with?: Maybe<Scalars['String']>;
  subscriptionPackageId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPackageId_not_starts_with?: Maybe<Scalars['String']>;
  subscriptionPackageId_starts_with?: Maybe<Scalars['String']>;
  subscriptionPackageStartTime?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageStartTime_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageStartTime_not_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_lte?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
  userName_contains?: Maybe<Scalars['String']>;
  userName_ends_with?: Maybe<Scalars['String']>;
  userName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not?: Maybe<Scalars['String']>;
  userName_not_contains?: Maybe<Scalars['String']>;
  userName_not_ends_with?: Maybe<Scalars['String']>;
  userName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not_starts_with?: Maybe<Scalars['String']>;
  userName_starts_with?: Maybe<Scalars['String']>;
};

export type ActiveAgentSubscriptionPackageForAllUsersDtoSort = {
  fullName?: Maybe<SortOperationKind>;
  packageBoughtTime?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
  subscriptionPackageEndTime?: Maybe<SortOperationKind>;
  subscriptionPackageName?: Maybe<SortOperationKind>;
  subscriptionPackageStartTime?: Maybe<SortOperationKind>;
  userName?: Maybe<SortOperationKind>;
};

export type AddStaffIntoAllocationRuleInput = {
  allocationRuleId?: Maybe<Scalars['String']>;
  userIds?: Maybe<Scalars['String']>;
};

export type AddStaffIntoAllocationRuleResponse = {
  __typename?: 'AddStaffIntoAllocationRuleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AddStaffIntoMultiAllocationRulesInput = {
  allocationRuleIds?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type AddStaffIntoMultiAllocationRulesResponse = {
  __typename?: 'AddStaffIntoMultiAllocationRulesResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AddStaffIntoMultiGroupsInput = {
  staffGroupIds?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type AddStaffIntoMultiGroupsResponse = {
  __typename?: 'AddStaffIntoMultiGroupsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AddStaffsIntoGroupInput = {
  staffGroupId?: Maybe<Scalars['String']>;
  userIds?: Maybe<Scalars['String']>;
};

export type AddStaffsIntoGroupResponse = {
  __typename?: 'AddStaffsIntoGroupResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AddStandardSubscriptionPackageInput = {
  agentId?: Maybe<Scalars['String']>;
  attachments?: Maybe<Scalars['String']>;
  emailNoti?: Maybe<Scalars['Boolean']>;
  paymentDepartmentId?: Maybe<Scalars['String']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentNote?: Maybe<Scalars['String']>;
  purchaseDate?: Maybe<Scalars['Long']>;
  pushNoti?: Maybe<Scalars['Boolean']>;
  smsNoti?: Maybe<Scalars['Boolean']>;
  startDate?: Maybe<Scalars['Long']>;
};

export type AddStandardSubscriptionPackageResponse = {
  __typename?: 'AddStandardSubscriptionPackageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AddressDto = {
  __typename?: 'AddressDto';
  addressId?: Maybe<Scalars['String']>;
};

export type AddressDtoFilter = {
  AND?: Maybe<Array<AddressDtoFilter>>;
  block?: Maybe<Scalars['String']>;
  block_contains?: Maybe<Scalars['String']>;
  block_ends_with?: Maybe<Scalars['String']>;
  block_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  block_not?: Maybe<Scalars['String']>;
  block_not_contains?: Maybe<Scalars['String']>;
  block_not_ends_with?: Maybe<Scalars['String']>;
  block_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  block_not_starts_with?: Maybe<Scalars['String']>;
  block_starts_with?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  building_contains?: Maybe<Scalars['String']>;
  building_ends_with?: Maybe<Scalars['String']>;
  building_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  building_not?: Maybe<Scalars['String']>;
  building_not_contains?: Maybe<Scalars['String']>;
  building_not_ends_with?: Maybe<Scalars['String']>;
  building_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  building_not_starts_with?: Maybe<Scalars['String']>;
  building_starts_with?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  fullAddress?: Maybe<Scalars['String']>;
  fullAddress_contains?: Maybe<Scalars['String']>;
  fullAddress_ends_with?: Maybe<Scalars['String']>;
  fullAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullAddress_not?: Maybe<Scalars['String']>;
  fullAddress_not_contains?: Maybe<Scalars['String']>;
  fullAddress_not_ends_with?: Maybe<Scalars['String']>;
  fullAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullAddress_not_starts_with?: Maybe<Scalars['String']>;
  fullAddress_starts_with?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  landmark_contains?: Maybe<Scalars['String']>;
  landmark_ends_with?: Maybe<Scalars['String']>;
  landmark_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  landmark_not?: Maybe<Scalars['String']>;
  landmark_not_contains?: Maybe<Scalars['String']>;
  landmark_not_ends_with?: Maybe<Scalars['String']>;
  landmark_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  landmark_not_starts_with?: Maybe<Scalars['String']>;
  landmark_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<AddressDtoFilter>>;
  wardId?: Maybe<Scalars['Int']>;
  wardId_gt?: Maybe<Scalars['Int']>;
  wardId_gte?: Maybe<Scalars['Int']>;
  wardId_in?: Maybe<Array<Scalars['Int']>>;
  wardId_lt?: Maybe<Scalars['Int']>;
  wardId_lte?: Maybe<Scalars['Int']>;
  wardId_not?: Maybe<Scalars['Int']>;
  wardId_not_gt?: Maybe<Scalars['Int']>;
  wardId_not_gte?: Maybe<Scalars['Int']>;
  wardId_not_in?: Maybe<Array<Scalars['Int']>>;
  wardId_not_lt?: Maybe<Scalars['Int']>;
  wardId_not_lte?: Maybe<Scalars['Int']>;
};

export type AddressDtoSort = {
  block?: Maybe<SortOperationKind>;
  building?: Maybe<SortOperationKind>;
  fullAddress?: Maybe<SortOperationKind>;
  landmark?: Maybe<SortOperationKind>;
};

export type AddressInfoDto = {
  __typename?: 'AddressInfoDto';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  addressId: Scalars['Int'];
  addressTypeId?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  countryId: Scalars['Int'];
  directional?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  floor?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  propertyPostId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetId: Scalars['Int'];
  wardId: Scalars['Int'];
};

export type AddressModel = {
  __typename?: 'AddressModel';
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  formatAddressModelToString?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  placeId?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId: Scalars['Int'];
  wardName?: Maybe<Scalars['String']>;
};

export type AddressTypeDto = {
  __typename?: 'AddressTypeDto';
  addressTypeDescription?: Maybe<Scalars['String']>;
  addressTypeId?: Maybe<Scalars['String']>;
  addressTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
};

export type AddressTypeDtoFilter = {
  addressTypeName?: Maybe<Scalars['String']>;
  addressTypeName_contains?: Maybe<Scalars['String']>;
  addressTypeName_ends_with?: Maybe<Scalars['String']>;
  addressTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressTypeName_not?: Maybe<Scalars['String']>;
  addressTypeName_not_contains?: Maybe<Scalars['String']>;
  addressTypeName_not_ends_with?: Maybe<Scalars['String']>;
  addressTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  addressTypeName_not_starts_with?: Maybe<Scalars['String']>;
  addressTypeName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AddressTypeDtoFilter>>;
  OR?: Maybe<Array<AddressTypeDtoFilter>>;
};

export type AddressTypeDtoSort = {
  addressTypeName?: Maybe<SortOperationKind>;
};

export type AddressTypeInfoDto = {
  __typename?: 'AddressTypeInfoDto';
  addressTypeDescription?: Maybe<Scalars['String']>;
  addressTypeId?: Maybe<Scalars['String']>;
  addressTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
};

export type AfterUpdateCustomerInfoForDepositTransactionPostProcessorDtoInput = {
  customerId?: Maybe<Scalars['String']>;
  customerInfoChangeHistoryId?: Maybe<Scalars['String']>;
  executorId?: Maybe<Scalars['String']>;
  transactionDate?: Maybe<Scalars['String']>;
  transactionIdOld?: Maybe<Scalars['String']>;
};

export type AgentContactDto = {
  __typename?: 'AgentContactDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentRankingDegreeOrder: Scalars['Int'];
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isAgent: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['String']>;
};

export type AgentDto = {
  __typename?: 'AgentDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDegreeOrder: Scalars['Int'];
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  campaignCode?: Maybe<Scalars['String']>;
  contactAddress?: Maybe<Scalars['String']>;
  correlationId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  imageSizes?: Maybe<Scalars['String']>;
  initialAccountCode?: Maybe<Scalars['String']>;
  instruction?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  isCompletedProfile?: Maybe<Scalars['Boolean']>;
  isFastSync: Scalars['Boolean'];
  isInitialAccount: Scalars['Boolean'];
  isVerifyProfilePhoto: Scalars['Boolean'];
  lastedViewTime?: Maybe<Scalars['Long']>;
  lastName?: Maybe<Scalars['String']>;
  lastReviewedDate?: Maybe<Scalars['Long']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  nextReviewedDate?: Maybe<Scalars['Long']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  propertyAllocates?: Maybe<Scalars['Boolean']>;
  pushNotificationEnable?: Maybe<Scalars['Boolean']>;
  pushNotificationId?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
  referralCode?: Maybe<Scalars['String']>;
  referralUser?: Maybe<SimpleUserInfoDto>;
  sellingTotal?: Maybe<Scalars['Int']>;
  soldTotal?: Maybe<Scalars['Int']>;
  taxIdentificationNumber?: Maybe<Scalars['String']>;
  topenerServiceTypes?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
  userStatus?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
  workingAreasInfo?: Maybe<Array<Maybe<WorkingAreasInfo>>>;
};

export type AgentDtoFilter = {
  agentCode?: Maybe<Scalars['String']>;
  agentCode_contains?: Maybe<Scalars['String']>;
  agentCode_ends_with?: Maybe<Scalars['String']>;
  agentCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentCode_not?: Maybe<Scalars['String']>;
  agentCode_not_contains?: Maybe<Scalars['String']>;
  agentCode_not_ends_with?: Maybe<Scalars['String']>;
  agentCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentCode_not_starts_with?: Maybe<Scalars['String']>;
  agentCode_starts_with?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupId_contains?: Maybe<Scalars['String']>;
  agentGroupId_ends_with?: Maybe<Scalars['String']>;
  agentGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupId_not?: Maybe<Scalars['String']>;
  agentGroupId_not_contains?: Maybe<Scalars['String']>;
  agentGroupId_not_ends_with?: Maybe<Scalars['String']>;
  agentGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupId_not_starts_with?: Maybe<Scalars['String']>;
  agentGroupId_starts_with?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentGroupName_contains?: Maybe<Scalars['String']>;
  agentGroupName_ends_with?: Maybe<Scalars['String']>;
  agentGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupName_not?: Maybe<Scalars['String']>;
  agentGroupName_not_contains?: Maybe<Scalars['String']>;
  agentGroupName_not_ends_with?: Maybe<Scalars['String']>;
  agentGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupName_not_starts_with?: Maybe<Scalars['String']>;
  agentGroupName_starts_with?: Maybe<Scalars['String']>;
  agentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_gt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_gte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_in?: Maybe<Array<Scalars['Int']>>;
  agentRankingDegreeOrder_lt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_lte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_gt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_gte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  agentRankingDegreeOrder_not_lt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_lte?: Maybe<Scalars['Int']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingId_contains?: Maybe<Scalars['String']>;
  agentRankingId_ends_with?: Maybe<Scalars['String']>;
  agentRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankingId_not?: Maybe<Scalars['String']>;
  agentRankingId_not_contains?: Maybe<Scalars['String']>;
  agentRankingId_not_ends_with?: Maybe<Scalars['String']>;
  agentRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankingId_not_starts_with?: Maybe<Scalars['String']>;
  agentRankingId_starts_with?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  agentRankName_contains?: Maybe<Scalars['String']>;
  agentRankName_ends_with?: Maybe<Scalars['String']>;
  agentRankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankName_not?: Maybe<Scalars['String']>;
  agentRankName_not_contains?: Maybe<Scalars['String']>;
  agentRankName_not_ends_with?: Maybe<Scalars['String']>;
  agentRankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankName_not_starts_with?: Maybe<Scalars['String']>;
  agentRankName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AgentDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  instruction?: Maybe<Scalars['String']>;
  instruction_contains?: Maybe<Scalars['String']>;
  instruction_ends_with?: Maybe<Scalars['String']>;
  instruction_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  instruction_not?: Maybe<Scalars['String']>;
  instruction_not_contains?: Maybe<Scalars['String']>;
  instruction_not_ends_with?: Maybe<Scalars['String']>;
  instruction_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  instruction_not_starts_with?: Maybe<Scalars['String']>;
  instruction_starts_with?: Maybe<Scalars['String']>;
  isAgentLeader?: Maybe<Scalars['Boolean']>;
  isAgentLeader_not?: Maybe<Scalars['Boolean']>;
  isFastSync?: Maybe<Scalars['Boolean']>;
  isFastSync_not?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalId_contains?: Maybe<Scalars['String']>;
  nationalId_ends_with?: Maybe<Scalars['String']>;
  nationalId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nationalId_not?: Maybe<Scalars['String']>;
  nationalId_not_contains?: Maybe<Scalars['String']>;
  nationalId_not_ends_with?: Maybe<Scalars['String']>;
  nationalId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nationalId_not_starts_with?: Maybe<Scalars['String']>;
  nationalId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<AgentDtoFilter>>;
  permanentAddress?: Maybe<Scalars['String']>;
  permanentAddress_contains?: Maybe<Scalars['String']>;
  permanentAddress_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not?: Maybe<Scalars['String']>;
  permanentAddress_not_contains?: Maybe<Scalars['String']>;
  permanentAddress_not_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not_starts_with?: Maybe<Scalars['String']>;
  permanentAddress_starts_with?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
};

export type AgentDtoSort = {
  agentCode?: Maybe<SortOperationKind>;
  agentGroupId?: Maybe<SortOperationKind>;
  agentGroupName?: Maybe<SortOperationKind>;
  agentRankingDegreeOrder?: Maybe<SortOperationKind>;
  agentRankingId?: Maybe<SortOperationKind>;
  agentRankName?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  email?: Maybe<SortOperationKind>;
  firstName?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  instruction?: Maybe<SortOperationKind>;
  isAgentLeader?: Maybe<SortOperationKind>;
  lastName?: Maybe<SortOperationKind>;
  nationalId?: Maybe<SortOperationKind>;
  permanentAddress?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
};

export type AgentForPublicDto = {
  __typename?: 'AgentForPublicDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDegreeOrder: Scalars['Int'];
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  instruction?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  isInitialAccount: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  lastReviewedDate?: Maybe<Scalars['Long']>;
  nationalId?: Maybe<Scalars['String']>;
  nextReviewedDate?: Maybe<Scalars['Long']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
  referralUser?: Maybe<SimpleUserInfoDto>;
  sellingTotal?: Maybe<Scalars['Int']>;
  soldTotal?: Maybe<Scalars['Int']>;
  topenerServiceTypes?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userBiography?: Maybe<Scalars['String']>;
  userRecordVersion?: Maybe<Scalars['Int']>;
  userStatus?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
  workingAreasInfo?: Maybe<Array<Maybe<WorkingAreasInfo>>>;
};

export type AgentGroupAndMembersInfoDto = {
  __typename?: 'AgentGroupAndMembersInfoDto';
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  allMembers?: Maybe<Array<Maybe<AgentProfileDto>>>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentGroupAndMembersInfoDto>;
  familyGroupNames?: Maybe<Array<Maybe<Scalars['String']>>>;
  needViewMore: Scalars['Boolean'];
  numberOfMembers: Scalars['Int'];
  parentAgentGroupId?: Maybe<Scalars['String']>;
};

export type AgentGroupDto = {
  __typename?: 'AgentGroupDto';
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupLevel?: Maybe<Scalars['Int']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentGroupStatus?: Maybe<Scalars['String']>;
  numberOfMember?: Maybe<Scalars['Int']>;
  parentAgentGroupId?: Maybe<Scalars['String']>;
};

export type AgentGroupDtoFilter = {
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupDescription_contains?: Maybe<Scalars['String']>;
  agentGroupDescription_ends_with?: Maybe<Scalars['String']>;
  agentGroupDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupDescription_not?: Maybe<Scalars['String']>;
  agentGroupDescription_not_contains?: Maybe<Scalars['String']>;
  agentGroupDescription_not_ends_with?: Maybe<Scalars['String']>;
  agentGroupDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupDescription_not_starts_with?: Maybe<Scalars['String']>;
  agentGroupDescription_starts_with?: Maybe<Scalars['String']>;
  agentGroupLevel?: Maybe<Scalars['Int']>;
  agentGroupLevel_gt?: Maybe<Scalars['Int']>;
  agentGroupLevel_gte?: Maybe<Scalars['Int']>;
  agentGroupLevel_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  agentGroupLevel_lt?: Maybe<Scalars['Int']>;
  agentGroupLevel_lte?: Maybe<Scalars['Int']>;
  agentGroupLevel_not?: Maybe<Scalars['Int']>;
  agentGroupLevel_not_gt?: Maybe<Scalars['Int']>;
  agentGroupLevel_not_gte?: Maybe<Scalars['Int']>;
  agentGroupLevel_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  agentGroupLevel_not_lt?: Maybe<Scalars['Int']>;
  agentGroupLevel_not_lte?: Maybe<Scalars['Int']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentGroupName_contains?: Maybe<Scalars['String']>;
  agentGroupName_ends_with?: Maybe<Scalars['String']>;
  agentGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupName_not?: Maybe<Scalars['String']>;
  agentGroupName_not_contains?: Maybe<Scalars['String']>;
  agentGroupName_not_ends_with?: Maybe<Scalars['String']>;
  agentGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupName_not_starts_with?: Maybe<Scalars['String']>;
  agentGroupName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AgentGroupDtoFilter>>;
  OR?: Maybe<Array<AgentGroupDtoFilter>>;
  parentAgentGroupId?: Maybe<Scalars['String']>;
  parentAgentGroupId_contains?: Maybe<Scalars['String']>;
  parentAgentGroupId_ends_with?: Maybe<Scalars['String']>;
  parentAgentGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  parentAgentGroupId_not?: Maybe<Scalars['String']>;
  parentAgentGroupId_not_contains?: Maybe<Scalars['String']>;
  parentAgentGroupId_not_ends_with?: Maybe<Scalars['String']>;
  parentAgentGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  parentAgentGroupId_not_starts_with?: Maybe<Scalars['String']>;
  parentAgentGroupId_starts_with?: Maybe<Scalars['String']>;
};

export type AgentGroupDtoSort = {
  agentGroupDescription?: Maybe<SortOperationKind>;
  agentGroupName?: Maybe<SortOperationKind>;
  parentAgentGroupId?: Maybe<SortOperationKind>;
};

export type AgentGroupInfo = {
  __typename?: 'AgentGroupInfo';
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentGroupInfo>;
  id?: Maybe<Scalars['String']>;
};

export type AgentGroupInfoDto = {
  __typename?: 'AgentGroupInfoDto';
  childAgentGroups?: Maybe<Array<Maybe<AgentGroupAndMembersInfoDto>>>;
  numberOfMembersInAllGroups: Scalars['Int'];
  parentAgentGroup?: Maybe<AgentGroupAndMembersInfoDto>;
};

export type AgentGroupTrackingDto = {
  __typename?: 'AgentGroupTrackingDto';
  agentId?: Maybe<Scalars['String']>;
  changingGroupReason?: Maybe<Scalars['String']>;
  movementDate?: Maybe<Scalars['Long']>;
  newAgentGroupDescription?: Maybe<Scalars['String']>;
  newAgentGroupId?: Maybe<Scalars['String']>;
  newAgentGroupName?: Maybe<Scalars['String']>;
  priorAgentGroupDescription?: Maybe<Scalars['String']>;
  priorAgentGroupId?: Maybe<Scalars['String']>;
  priorAgentGroupName?: Maybe<Scalars['String']>;
};

export type AgentGroupTrackingDtoFilter = {
  AND?: Maybe<Array<AgentGroupTrackingDtoFilter>>;
  changingGroupReason?: Maybe<Scalars['String']>;
  changingGroupReason_contains?: Maybe<Scalars['String']>;
  changingGroupReason_ends_with?: Maybe<Scalars['String']>;
  changingGroupReason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  changingGroupReason_not?: Maybe<Scalars['String']>;
  changingGroupReason_not_contains?: Maybe<Scalars['String']>;
  changingGroupReason_not_ends_with?: Maybe<Scalars['String']>;
  changingGroupReason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  changingGroupReason_not_starts_with?: Maybe<Scalars['String']>;
  changingGroupReason_starts_with?: Maybe<Scalars['String']>;
  movementDate?: Maybe<Scalars['Long']>;
  movementDate_gt?: Maybe<Scalars['Long']>;
  movementDate_gte?: Maybe<Scalars['Long']>;
  movementDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  movementDate_lt?: Maybe<Scalars['Long']>;
  movementDate_lte?: Maybe<Scalars['Long']>;
  movementDate_not?: Maybe<Scalars['Long']>;
  movementDate_not_gt?: Maybe<Scalars['Long']>;
  movementDate_not_gte?: Maybe<Scalars['Long']>;
  movementDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  movementDate_not_lt?: Maybe<Scalars['Long']>;
  movementDate_not_lte?: Maybe<Scalars['Long']>;
  newAgentGroupDescription?: Maybe<Scalars['String']>;
  newAgentGroupDescription_contains?: Maybe<Scalars['String']>;
  newAgentGroupDescription_ends_with?: Maybe<Scalars['String']>;
  newAgentGroupDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentGroupDescription_not?: Maybe<Scalars['String']>;
  newAgentGroupDescription_not_contains?: Maybe<Scalars['String']>;
  newAgentGroupDescription_not_ends_with?: Maybe<Scalars['String']>;
  newAgentGroupDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentGroupDescription_not_starts_with?: Maybe<Scalars['String']>;
  newAgentGroupDescription_starts_with?: Maybe<Scalars['String']>;
  newAgentGroupId?: Maybe<Scalars['String']>;
  newAgentGroupId_contains?: Maybe<Scalars['String']>;
  newAgentGroupId_ends_with?: Maybe<Scalars['String']>;
  newAgentGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentGroupId_not?: Maybe<Scalars['String']>;
  newAgentGroupId_not_contains?: Maybe<Scalars['String']>;
  newAgentGroupId_not_ends_with?: Maybe<Scalars['String']>;
  newAgentGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentGroupId_not_starts_with?: Maybe<Scalars['String']>;
  newAgentGroupId_starts_with?: Maybe<Scalars['String']>;
  newAgentGroupName?: Maybe<Scalars['String']>;
  newAgentGroupName_contains?: Maybe<Scalars['String']>;
  newAgentGroupName_ends_with?: Maybe<Scalars['String']>;
  newAgentGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentGroupName_not?: Maybe<Scalars['String']>;
  newAgentGroupName_not_contains?: Maybe<Scalars['String']>;
  newAgentGroupName_not_ends_with?: Maybe<Scalars['String']>;
  newAgentGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentGroupName_not_starts_with?: Maybe<Scalars['String']>;
  newAgentGroupName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<AgentGroupTrackingDtoFilter>>;
  priorAgentGroupDescription?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_contains?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_ends_with?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  priorAgentGroupDescription_not?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_not_contains?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_not_ends_with?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  priorAgentGroupDescription_not_starts_with?: Maybe<Scalars['String']>;
  priorAgentGroupDescription_starts_with?: Maybe<Scalars['String']>;
  priorAgentGroupId?: Maybe<Scalars['String']>;
  priorAgentGroupId_contains?: Maybe<Scalars['String']>;
  priorAgentGroupId_ends_with?: Maybe<Scalars['String']>;
  priorAgentGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  priorAgentGroupId_not?: Maybe<Scalars['String']>;
  priorAgentGroupId_not_contains?: Maybe<Scalars['String']>;
  priorAgentGroupId_not_ends_with?: Maybe<Scalars['String']>;
  priorAgentGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  priorAgentGroupId_not_starts_with?: Maybe<Scalars['String']>;
  priorAgentGroupId_starts_with?: Maybe<Scalars['String']>;
  priorAgentGroupName?: Maybe<Scalars['String']>;
  priorAgentGroupName_contains?: Maybe<Scalars['String']>;
  priorAgentGroupName_ends_with?: Maybe<Scalars['String']>;
  priorAgentGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  priorAgentGroupName_not?: Maybe<Scalars['String']>;
  priorAgentGroupName_not_contains?: Maybe<Scalars['String']>;
  priorAgentGroupName_not_ends_with?: Maybe<Scalars['String']>;
  priorAgentGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  priorAgentGroupName_not_starts_with?: Maybe<Scalars['String']>;
  priorAgentGroupName_starts_with?: Maybe<Scalars['String']>;
};

export type AgentGroupTrackingDtoSort = {
  changingGroupReason?: Maybe<SortOperationKind>;
  movementDate?: Maybe<SortOperationKind>;
  newAgentGroupDescription?: Maybe<SortOperationKind>;
  newAgentGroupName?: Maybe<SortOperationKind>;
  priorAgentGroupDescription?: Maybe<SortOperationKind>;
  priorAgentGroupName?: Maybe<SortOperationKind>;
};

export type AgentInfoDto = {
  __typename?: 'AgentInfoDto';
  agentCode?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentInfoDto>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  userId?: Maybe<Scalars['String']>;
};

export type AgentPerformanceTrackingDto = {
  __typename?: 'AgentPerformanceTrackingDto';
  achievedTargetDate?: Maybe<Scalars['Long']>;
  agentId?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId?: Maybe<Scalars['String']>;
  approvedPostsRemnant?: Maybe<Scalars['Int']>;
  b2CTransactionRemnant?: Maybe<Scalars['Int']>;
  c2CTransactionRemnant?: Maybe<Scalars['Int']>;
  correlationId?: Maybe<Scalars['String']>;
  dateOfReviewing?: Maybe<Scalars['Long']>;
  meetTargetNumberApprovedPosts: Scalars['Boolean'];
  meetTargetNumberOfB2CTransaction: Scalars['Boolean'];
  meetTargetNumberOfC2CTransaction: Scalars['Boolean'];
  meetTargetNumberOfReferalAgents: Scalars['Boolean'];
  newAgentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  newAgentRankingDescription?: Maybe<Scalars['String']>;
  newAgentRankingId?: Maybe<Scalars['String']>;
  newAgentRankingName?: Maybe<Scalars['String']>;
  numberApprovedPosts?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction?: Maybe<Scalars['Int']>;
  numberOfReferalAgents?: Maybe<Scalars['Int']>;
  oldAgentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  oldAgentRankingDescription?: Maybe<Scalars['String']>;
  oldAgentRankingId?: Maybe<Scalars['String']>;
  oldAgentRankingName?: Maybe<Scalars['String']>;
  rankChanged?: Maybe<Scalars['Int']>;
  referalAgentsRemnant?: Maybe<Scalars['Int']>;
  referCorrelationId?: Maybe<Scalars['String']>;
  reviewFromDate?: Maybe<Scalars['Long']>;
  reviewToDate?: Maybe<Scalars['Long']>;
  targetAgentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  targetAgentRankingDescription?: Maybe<Scalars['String']>;
  targetAgentRankingId?: Maybe<Scalars['String']>;
  targetAgentRankingName?: Maybe<Scalars['String']>;
  targetNumberApprovedPosts?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents?: Maybe<Scalars['Int']>;
};

export type AgentPerformanceTrackingDtoFilter = {
  achievedTargetDate?: Maybe<Scalars['Long']>;
  achievedTargetDate_gt?: Maybe<Scalars['Long']>;
  achievedTargetDate_gte?: Maybe<Scalars['Long']>;
  achievedTargetDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  achievedTargetDate_lt?: Maybe<Scalars['Long']>;
  achievedTargetDate_lte?: Maybe<Scalars['Long']>;
  achievedTargetDate_not?: Maybe<Scalars['Long']>;
  achievedTargetDate_not_gt?: Maybe<Scalars['Long']>;
  achievedTargetDate_not_gte?: Maybe<Scalars['Long']>;
  achievedTargetDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  achievedTargetDate_not_lt?: Maybe<Scalars['Long']>;
  achievedTargetDate_not_lte?: Maybe<Scalars['Long']>;
  agentPerformanceTrackingId?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_contains?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_ends_with?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentPerformanceTrackingId_not?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_not_contains?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_not_ends_with?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentPerformanceTrackingId_not_starts_with?: Maybe<Scalars['String']>;
  agentPerformanceTrackingId_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AgentPerformanceTrackingDtoFilter>>;
  dateOfReviewing?: Maybe<Scalars['Long']>;
  dateOfReviewing_gt?: Maybe<Scalars['Long']>;
  dateOfReviewing_gte?: Maybe<Scalars['Long']>;
  dateOfReviewing_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  dateOfReviewing_lt?: Maybe<Scalars['Long']>;
  dateOfReviewing_lte?: Maybe<Scalars['Long']>;
  dateOfReviewing_not?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_gt?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_gte?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  dateOfReviewing_not_lt?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_lte?: Maybe<Scalars['Long']>;
  meetTargetNumberApprovedPosts?: Maybe<Scalars['Boolean']>;
  meetTargetNumberApprovedPosts_not?: Maybe<Scalars['Boolean']>;
  meetTargetNumberOfB2CTransaction?: Maybe<Scalars['Boolean']>;
  meetTargetNumberOfB2CTransaction_not?: Maybe<Scalars['Boolean']>;
  meetTargetNumberOfC2CTransaction?: Maybe<Scalars['Boolean']>;
  meetTargetNumberOfC2CTransaction_not?: Maybe<Scalars['Boolean']>;
  meetTargetNumberOfReferalAgents?: Maybe<Scalars['Boolean']>;
  meetTargetNumberOfReferalAgents_not?: Maybe<Scalars['Boolean']>;
  newAgentRankingId?: Maybe<Scalars['String']>;
  newAgentRankingId_contains?: Maybe<Scalars['String']>;
  newAgentRankingId_ends_with?: Maybe<Scalars['String']>;
  newAgentRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentRankingId_not?: Maybe<Scalars['String']>;
  newAgentRankingId_not_contains?: Maybe<Scalars['String']>;
  newAgentRankingId_not_ends_with?: Maybe<Scalars['String']>;
  newAgentRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentRankingId_not_starts_with?: Maybe<Scalars['String']>;
  newAgentRankingId_starts_with?: Maybe<Scalars['String']>;
  newAgentRankingName?: Maybe<Scalars['String']>;
  newAgentRankingName_contains?: Maybe<Scalars['String']>;
  newAgentRankingName_ends_with?: Maybe<Scalars['String']>;
  newAgentRankingName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentRankingName_not?: Maybe<Scalars['String']>;
  newAgentRankingName_not_contains?: Maybe<Scalars['String']>;
  newAgentRankingName_not_ends_with?: Maybe<Scalars['String']>;
  newAgentRankingName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  newAgentRankingName_not_starts_with?: Maybe<Scalars['String']>;
  newAgentRankingName_starts_with?: Maybe<Scalars['String']>;
  numberApprovedPosts?: Maybe<Scalars['Int']>;
  numberApprovedPosts_gt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_gte?: Maybe<Scalars['Int']>;
  numberApprovedPosts_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberApprovedPosts_lt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_lte?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_gt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_gte?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberApprovedPosts_not_lt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_lte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_gt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_gte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfB2CTransaction_lt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_lte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_gt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_gte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfB2CTransaction_not_lt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_lte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_gt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_gte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfC2CTransaction_lt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_lte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_gt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_gte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfC2CTransaction_not_lt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_lte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_gt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_gte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfReferalAgents_lt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_lte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_gt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_gte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfReferalAgents_not_lt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_lte?: Maybe<Scalars['Int']>;
  oldAgentRankingId?: Maybe<Scalars['String']>;
  oldAgentRankingId_contains?: Maybe<Scalars['String']>;
  oldAgentRankingId_ends_with?: Maybe<Scalars['String']>;
  oldAgentRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  oldAgentRankingId_not?: Maybe<Scalars['String']>;
  oldAgentRankingId_not_contains?: Maybe<Scalars['String']>;
  oldAgentRankingId_not_ends_with?: Maybe<Scalars['String']>;
  oldAgentRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  oldAgentRankingId_not_starts_with?: Maybe<Scalars['String']>;
  oldAgentRankingId_starts_with?: Maybe<Scalars['String']>;
  oldAgentRankingName?: Maybe<Scalars['String']>;
  oldAgentRankingName_contains?: Maybe<Scalars['String']>;
  oldAgentRankingName_ends_with?: Maybe<Scalars['String']>;
  oldAgentRankingName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  oldAgentRankingName_not?: Maybe<Scalars['String']>;
  oldAgentRankingName_not_contains?: Maybe<Scalars['String']>;
  oldAgentRankingName_not_ends_with?: Maybe<Scalars['String']>;
  oldAgentRankingName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  oldAgentRankingName_not_starts_with?: Maybe<Scalars['String']>;
  oldAgentRankingName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<AgentPerformanceTrackingDtoFilter>>;
  reviewFromDate?: Maybe<Scalars['Long']>;
  reviewFromDate_gt?: Maybe<Scalars['Long']>;
  reviewFromDate_gte?: Maybe<Scalars['Long']>;
  reviewFromDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewFromDate_lt?: Maybe<Scalars['Long']>;
  reviewFromDate_lte?: Maybe<Scalars['Long']>;
  reviewFromDate_not?: Maybe<Scalars['Long']>;
  reviewFromDate_not_gt?: Maybe<Scalars['Long']>;
  reviewFromDate_not_gte?: Maybe<Scalars['Long']>;
  reviewFromDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewFromDate_not_lt?: Maybe<Scalars['Long']>;
  reviewFromDate_not_lte?: Maybe<Scalars['Long']>;
  reviewToDate?: Maybe<Scalars['Long']>;
  reviewToDate_gt?: Maybe<Scalars['Long']>;
  reviewToDate_gte?: Maybe<Scalars['Long']>;
  reviewToDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewToDate_lt?: Maybe<Scalars['Long']>;
  reviewToDate_lte?: Maybe<Scalars['Long']>;
  reviewToDate_not?: Maybe<Scalars['Long']>;
  reviewToDate_not_gt?: Maybe<Scalars['Long']>;
  reviewToDate_not_gte?: Maybe<Scalars['Long']>;
  reviewToDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewToDate_not_lt?: Maybe<Scalars['Long']>;
  reviewToDate_not_lte?: Maybe<Scalars['Long']>;
  targetAgentRankingId?: Maybe<Scalars['String']>;
  targetAgentRankingId_contains?: Maybe<Scalars['String']>;
  targetAgentRankingId_ends_with?: Maybe<Scalars['String']>;
  targetAgentRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetAgentRankingId_not?: Maybe<Scalars['String']>;
  targetAgentRankingId_not_contains?: Maybe<Scalars['String']>;
  targetAgentRankingId_not_ends_with?: Maybe<Scalars['String']>;
  targetAgentRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetAgentRankingId_not_starts_with?: Maybe<Scalars['String']>;
  targetAgentRankingId_starts_with?: Maybe<Scalars['String']>;
  targetAgentRankingName?: Maybe<Scalars['String']>;
  targetAgentRankingName_contains?: Maybe<Scalars['String']>;
  targetAgentRankingName_ends_with?: Maybe<Scalars['String']>;
  targetAgentRankingName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetAgentRankingName_not?: Maybe<Scalars['String']>;
  targetAgentRankingName_not_contains?: Maybe<Scalars['String']>;
  targetAgentRankingName_not_ends_with?: Maybe<Scalars['String']>;
  targetAgentRankingName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  targetAgentRankingName_not_starts_with?: Maybe<Scalars['String']>;
  targetAgentRankingName_starts_with?: Maybe<Scalars['String']>;
  targetNumberApprovedPosts?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_gt?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_gte?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberApprovedPosts_lt?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_lte?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_not?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_not_gt?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_not_gte?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberApprovedPosts_not_lt?: Maybe<Scalars['Int']>;
  targetNumberApprovedPosts_not_lte?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_gt?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_gte?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberOfB2CTransaction_lt?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_lte?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_not?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_not_gt?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_not_gte?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberOfB2CTransaction_not_lt?: Maybe<Scalars['Int']>;
  targetNumberOfB2CTransaction_not_lte?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_gt?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_gte?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberOfC2CTransaction_lt?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_lte?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_not?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_not_gt?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_not_gte?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberOfC2CTransaction_not_lt?: Maybe<Scalars['Int']>;
  targetNumberOfC2CTransaction_not_lte?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_gt?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_gte?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberOfReferalAgents_lt?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_lte?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_not?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_not_gt?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_not_gte?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  targetNumberOfReferalAgents_not_lt?: Maybe<Scalars['Int']>;
  targetNumberOfReferalAgents_not_lte?: Maybe<Scalars['Int']>;
};

export type AgentPerformanceTrackingDtoSort = {
  achievedTargetDate?: Maybe<SortOperationKind>;
  meetTargetNumberApprovedPosts?: Maybe<SortOperationKind>;
  meetTargetNumberOfB2CTransaction?: Maybe<SortOperationKind>;
  meetTargetNumberOfC2CTransaction?: Maybe<SortOperationKind>;
  meetTargetNumberOfReferalAgents?: Maybe<SortOperationKind>;
  newAgentRankingName?: Maybe<SortOperationKind>;
  numberApprovedPosts?: Maybe<SortOperationKind>;
  numberOfB2CTransaction?: Maybe<SortOperationKind>;
  numberOfC2CTransaction?: Maybe<SortOperationKind>;
  numberOfReferalAgents?: Maybe<SortOperationKind>;
  oldAgentRankingName?: Maybe<SortOperationKind>;
  reviewFromDate?: Maybe<SortOperationKind>;
  reviewToDate?: Maybe<SortOperationKind>;
  targetAgentRankingName?: Maybe<SortOperationKind>;
  targetNumberApprovedPosts?: Maybe<SortOperationKind>;
  targetNumberOfB2CTransaction?: Maybe<SortOperationKind>;
  targetNumberOfC2CTransaction?: Maybe<SortOperationKind>;
  targetNumberOfReferalAgents?: Maybe<SortOperationKind>;
};

export type AgentProfileDto = {
  __typename?: 'AgentProfileDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentProfileDto>;
  contactAddress?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  dob?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  imageSizes?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  numberOfSuccessTransaction: Scalars['Int'];
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  pushNotificationEnable: Scalars['Boolean'];
  pushNotificationId?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  topenerServiceTypes?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type AgentRankDto = {
  __typename?: 'AgentRankDto';
  agentRankingId?: Maybe<Scalars['String']>;
};

export type AgentRankInfo = {
  __typename?: 'AgentRankInfo';
  agentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentRankInfo>;
  id?: Maybe<Scalars['String']>;
};

export type AgentRankingDto = {
  __typename?: 'AgentRankingDto';
  agentRankingDegreeOrder: Scalars['Int'];
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  benefit?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  numberOfApprovedPosts: Scalars['Int'];
  numberOfB2CTransaction: Scalars['Int'];
  numberOfC2CTransaction: Scalars['Int'];
  numberOfReferalAgents: Scalars['Int'];
  reviewCycle: Scalars['Int'];
  rewardPoints: Scalars['Int'];
  validFromDatetime?: Maybe<Scalars['Long']>;
  validToDatetime?: Maybe<Scalars['Long']>;
};

export type AgentRankingDtoFilter = {
  agentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_gt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_gte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_in?: Maybe<Array<Scalars['Int']>>;
  agentRankingDegreeOrder_lt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_lte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_gt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_gte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  agentRankingDegreeOrder_not_lt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_lte?: Maybe<Scalars['Int']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingId_contains?: Maybe<Scalars['String']>;
  agentRankingId_ends_with?: Maybe<Scalars['String']>;
  agentRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankingId_not?: Maybe<Scalars['String']>;
  agentRankingId_not_contains?: Maybe<Scalars['String']>;
  agentRankingId_not_ends_with?: Maybe<Scalars['String']>;
  agentRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankingId_not_starts_with?: Maybe<Scalars['String']>;
  agentRankingId_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AgentRankingDtoFilter>>;
  OR?: Maybe<Array<AgentRankingDtoFilter>>;
};

export type AgentRankingDtoSort = {
  agentRankingDegreeOrder?: Maybe<SortOperationKind>;
};

export type AgentRankingInfoDto = {
  __typename?: 'AgentRankingInfoDto';
  agentId?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentRankingInfoDto>;
};

export type AgentRatingDto = {
  __typename?: 'AgentRatingDto';
  agentRatingId?: Maybe<Scalars['String']>;
};

export type AgentRatingDtoFilter = {
  AND?: Maybe<Array<AgentRatingDtoFilter>>;
  comment?: Maybe<Scalars['String']>;
  comment_contains?: Maybe<Scalars['String']>;
  comment_ends_with?: Maybe<Scalars['String']>;
  comment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  comment_not?: Maybe<Scalars['String']>;
  comment_not_contains?: Maybe<Scalars['String']>;
  comment_not_ends_with?: Maybe<Scalars['String']>;
  comment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  comment_not_starts_with?: Maybe<Scalars['String']>;
  comment_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<AgentRatingDtoFilter>>;
};

export type AgentRatingDtoInput = {
  agentId?: Maybe<Scalars['String']>;
  bookingCode?: Maybe<Scalars['String']>;
  rating: Scalars['Float'];
};

export type AgentRatingDtoSort = {
  comment?: Maybe<SortOperationKind>;
};

export type AgentRatingInfoDto = {
  __typename?: 'AgentRatingInfoDto';
  agentId?: Maybe<Scalars['String']>;
  agentRatingId?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  rateByUserId?: Maybe<Scalars['String']>;
  stars: Scalars['Int'];
  strengthsWeaknesses?: Maybe<Scalars['String']>;
};

export type AgentSubscriptionPackageDto = {
  __typename?: 'AgentSubscriptionPackageDto';
  agentId?: Maybe<Scalars['String']>;
  agentSubscriptionPackageId?: Maybe<Scalars['String']>;
  agentSubscriptionPackageStatus?: Maybe<Scalars['String']>;
  emailNoti?: Maybe<Scalars['Boolean']>;
  hasBoughtNewPackage?: Maybe<Scalars['Boolean']>;
  invoiceAttachments?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isExpired: Scalars['Boolean'];
  packageBoughtTime?: Maybe<Scalars['Long']>;
  pushNoti?: Maybe<Scalars['Boolean']>;
  smsNoti?: Maybe<Scalars['Boolean']>;
  subscriptionInvoiceId?: Maybe<Scalars['String']>;
  subscriptionPackageEndTime?: Maybe<Scalars['Long']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackageName?: Maybe<Scalars['String']>;
  subscriptionPackageStartTime?: Maybe<Scalars['Long']>;
};

export type AgentSubscriptionPackageDtoFilter = {
  agentId?: Maybe<Scalars['String']>;
  agentId_contains?: Maybe<Scalars['String']>;
  agentId_ends_with?: Maybe<Scalars['String']>;
  agentId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentId_not?: Maybe<Scalars['String']>;
  agentId_not_contains?: Maybe<Scalars['String']>;
  agentId_not_ends_with?: Maybe<Scalars['String']>;
  agentId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentId_not_starts_with?: Maybe<Scalars['String']>;
  agentId_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AgentSubscriptionPackageDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<AgentSubscriptionPackageDtoFilter>>;
  packageBoughtTime?: Maybe<Scalars['Long']>;
  packageBoughtTime_gt?: Maybe<Scalars['Long']>;
  packageBoughtTime_gte?: Maybe<Scalars['Long']>;
  packageBoughtTime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  packageBoughtTime_lt?: Maybe<Scalars['Long']>;
  packageBoughtTime_lte?: Maybe<Scalars['Long']>;
  packageBoughtTime_not?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_gt?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_gte?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  packageBoughtTime_not_lt?: Maybe<Scalars['Long']>;
  packageBoughtTime_not_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageEndTime_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageEndTime_not_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageEndTime_not_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackageId_contains?: Maybe<Scalars['String']>;
  subscriptionPackageId_ends_with?: Maybe<Scalars['String']>;
  subscriptionPackageId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPackageId_not?: Maybe<Scalars['String']>;
  subscriptionPackageId_not_contains?: Maybe<Scalars['String']>;
  subscriptionPackageId_not_ends_with?: Maybe<Scalars['String']>;
  subscriptionPackageId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPackageId_not_starts_with?: Maybe<Scalars['String']>;
  subscriptionPackageId_starts_with?: Maybe<Scalars['String']>;
  subscriptionPackageStartTime?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageStartTime_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_lte?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_gt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_gte?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  subscriptionPackageStartTime_not_lt?: Maybe<Scalars['Long']>;
  subscriptionPackageStartTime_not_lte?: Maybe<Scalars['Long']>;
};

export type AgentSubscriptionPackageDtoSort = {
  agentId?: Maybe<SortOperationKind>;
  isActive?: Maybe<SortOperationKind>;
  packageBoughtTime?: Maybe<SortOperationKind>;
  subscriptionPackageEndTime?: Maybe<SortOperationKind>;
  subscriptionPackageId?: Maybe<SortOperationKind>;
  subscriptionPackageStartTime?: Maybe<SortOperationKind>;
};

export type AgentSubscriptionTransactionDto = {
  __typename?: 'AgentSubscriptionTransactionDto';
  agentId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AgentSubscriptionTransactionDto>;
  purchaseDate?: Maybe<Scalars['Long']>;
  startDate?: Maybe<Scalars['Long']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackageName?: Maybe<Scalars['String']>;
  subscriptionPackageValidDays?: Maybe<Scalars['Int']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionStatusId?: Maybe<Scalars['String']>;
};

export type AgentTypeDto = {
  __typename?: 'AgentTypeDto';
  agentTypeDescription?: Maybe<Scalars['String']>;
  agentTypeId?: Maybe<Scalars['String']>;
  agentTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isConsultant: Scalars['Boolean'];
};

export type AgentTypeInfoDto = {
  __typename?: 'AgentTypeInfoDto';
  agentTypeDescription?: Maybe<Scalars['String']>;
  agentTypeId?: Maybe<Scalars['String']>;
  agentTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isConsultant: Scalars['Boolean'];
};

export type AgentWithKpiDto = {
  __typename?: 'AgentWithKpiDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDegreeOrder: Scalars['Int'];
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  dateOfReviewing?: Maybe<Scalars['Long']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  numberApprovedPosts?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction?: Maybe<Scalars['Int']>;
  numberOfReferalAgents?: Maybe<Scalars['Int']>;
  reviewFromDate?: Maybe<Scalars['Long']>;
  reviewToDate?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
};

export type AgentWithKpiDtoFilter = {
  agentCode?: Maybe<Scalars['String']>;
  agentCode_contains?: Maybe<Scalars['String']>;
  agentCode_ends_with?: Maybe<Scalars['String']>;
  agentCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentCode_not?: Maybe<Scalars['String']>;
  agentCode_not_contains?: Maybe<Scalars['String']>;
  agentCode_not_ends_with?: Maybe<Scalars['String']>;
  agentCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentCode_not_starts_with?: Maybe<Scalars['String']>;
  agentCode_starts_with?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupId_contains?: Maybe<Scalars['String']>;
  agentGroupId_ends_with?: Maybe<Scalars['String']>;
  agentGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupId_not?: Maybe<Scalars['String']>;
  agentGroupId_not_contains?: Maybe<Scalars['String']>;
  agentGroupId_not_ends_with?: Maybe<Scalars['String']>;
  agentGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupId_not_starts_with?: Maybe<Scalars['String']>;
  agentGroupId_starts_with?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentGroupName_contains?: Maybe<Scalars['String']>;
  agentGroupName_ends_with?: Maybe<Scalars['String']>;
  agentGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupName_not?: Maybe<Scalars['String']>;
  agentGroupName_not_contains?: Maybe<Scalars['String']>;
  agentGroupName_not_ends_with?: Maybe<Scalars['String']>;
  agentGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupName_not_starts_with?: Maybe<Scalars['String']>;
  agentGroupName_starts_with?: Maybe<Scalars['String']>;
  agentRankingDegreeOrder?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_gt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_gte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_in?: Maybe<Array<Scalars['Int']>>;
  agentRankingDegreeOrder_lt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_lte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_gt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_gte?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  agentRankingDegreeOrder_not_lt?: Maybe<Scalars['Int']>;
  agentRankingDegreeOrder_not_lte?: Maybe<Scalars['Int']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingId_contains?: Maybe<Scalars['String']>;
  agentRankingId_ends_with?: Maybe<Scalars['String']>;
  agentRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankingId_not?: Maybe<Scalars['String']>;
  agentRankingId_not_contains?: Maybe<Scalars['String']>;
  agentRankingId_not_ends_with?: Maybe<Scalars['String']>;
  agentRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankingId_not_starts_with?: Maybe<Scalars['String']>;
  agentRankingId_starts_with?: Maybe<Scalars['String']>;
  agentRankName?: Maybe<Scalars['String']>;
  agentRankName_contains?: Maybe<Scalars['String']>;
  agentRankName_ends_with?: Maybe<Scalars['String']>;
  agentRankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankName_not?: Maybe<Scalars['String']>;
  agentRankName_not_contains?: Maybe<Scalars['String']>;
  agentRankName_not_ends_with?: Maybe<Scalars['String']>;
  agentRankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankName_not_starts_with?: Maybe<Scalars['String']>;
  agentRankName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AgentWithKpiDtoFilter>>;
  dateOfReviewing?: Maybe<Scalars['Long']>;
  dateOfReviewing_gt?: Maybe<Scalars['Long']>;
  dateOfReviewing_gte?: Maybe<Scalars['Long']>;
  dateOfReviewing_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  dateOfReviewing_lt?: Maybe<Scalars['Long']>;
  dateOfReviewing_lte?: Maybe<Scalars['Long']>;
  dateOfReviewing_not?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_gt?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_gte?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  dateOfReviewing_not_lt?: Maybe<Scalars['Long']>;
  dateOfReviewing_not_lte?: Maybe<Scalars['Long']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  isAgentLeader?: Maybe<Scalars['Boolean']>;
  isAgentLeader_not?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  numberApprovedPosts?: Maybe<Scalars['Int']>;
  numberApprovedPosts_gt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_gte?: Maybe<Scalars['Int']>;
  numberApprovedPosts_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberApprovedPosts_lt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_lte?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_gt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_gte?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberApprovedPosts_not_lt?: Maybe<Scalars['Int']>;
  numberApprovedPosts_not_lte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_gt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_gte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfB2CTransaction_lt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_lte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_gt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_gte?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfB2CTransaction_not_lt?: Maybe<Scalars['Int']>;
  numberOfB2CTransaction_not_lte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_gt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_gte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfC2CTransaction_lt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_lte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_gt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_gte?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfC2CTransaction_not_lt?: Maybe<Scalars['Int']>;
  numberOfC2CTransaction_not_lte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_gt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_gte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfReferalAgents_lt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_lte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_gt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_gte?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfReferalAgents_not_lt?: Maybe<Scalars['Int']>;
  numberOfReferalAgents_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<AgentWithKpiDtoFilter>>;
  reviewFromDate?: Maybe<Scalars['Long']>;
  reviewFromDate_gt?: Maybe<Scalars['Long']>;
  reviewFromDate_gte?: Maybe<Scalars['Long']>;
  reviewFromDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewFromDate_lt?: Maybe<Scalars['Long']>;
  reviewFromDate_lte?: Maybe<Scalars['Long']>;
  reviewFromDate_not?: Maybe<Scalars['Long']>;
  reviewFromDate_not_gt?: Maybe<Scalars['Long']>;
  reviewFromDate_not_gte?: Maybe<Scalars['Long']>;
  reviewFromDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewFromDate_not_lt?: Maybe<Scalars['Long']>;
  reviewFromDate_not_lte?: Maybe<Scalars['Long']>;
  reviewToDate?: Maybe<Scalars['Long']>;
  reviewToDate_gt?: Maybe<Scalars['Long']>;
  reviewToDate_gte?: Maybe<Scalars['Long']>;
  reviewToDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewToDate_lt?: Maybe<Scalars['Long']>;
  reviewToDate_lte?: Maybe<Scalars['Long']>;
  reviewToDate_not?: Maybe<Scalars['Long']>;
  reviewToDate_not_gt?: Maybe<Scalars['Long']>;
  reviewToDate_not_gte?: Maybe<Scalars['Long']>;
  reviewToDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  reviewToDate_not_lt?: Maybe<Scalars['Long']>;
  reviewToDate_not_lte?: Maybe<Scalars['Long']>;
};

export type AgentWithKpiDtoSort = {
  agentCode?: Maybe<SortOperationKind>;
  agentGroupId?: Maybe<SortOperationKind>;
  agentGroupName?: Maybe<SortOperationKind>;
  agentRankingDegreeOrder?: Maybe<SortOperationKind>;
  agentRankingId?: Maybe<SortOperationKind>;
  agentRankName?: Maybe<SortOperationKind>;
  dateOfReviewing?: Maybe<SortOperationKind>;
  firstName?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  isAgentLeader?: Maybe<SortOperationKind>;
  lastName?: Maybe<SortOperationKind>;
  numberApprovedPosts?: Maybe<SortOperationKind>;
  numberOfB2CTransaction?: Maybe<SortOperationKind>;
  numberOfC2CTransaction?: Maybe<SortOperationKind>;
  numberOfReferalAgents?: Maybe<SortOperationKind>;
  reviewFromDate?: Maybe<SortOperationKind>;
  reviewToDate?: Maybe<SortOperationKind>;
};

export type AllocationRuleDetailByIdDto = {
  __typename?: 'AllocationRuleDetailByIdDto';
  allocationRuleCode?: Maybe<Scalars['String']>;
  allocationRuleDescription?: Maybe<Scalars['String']>;
  allocationRuleId?: Maybe<Scalars['String']>;
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleShortDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AllocationRuleDetailByIdDto>;
  createdByUserFullname?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  isActive: Scalars['Boolean'];
  ruleCondition?: Maybe<RuleConditionDto>;
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type AllocationRuleDto = {
  __typename?: 'AllocationRuleDto';
  allocationRuleCode?: Maybe<Scalars['String']>;
  allocationRuleDescription?: Maybe<Scalars['String']>;
  allocationRuleId?: Maybe<Scalars['String']>;
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleShortDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  isDelete: Scalars['Boolean'];
  ruleCondition?: Maybe<Scalars['String']>;
  totalMember: Scalars['Int'];
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type AllocationRuleDtoFilter = {
  allocationRuleCode?: Maybe<Scalars['String']>;
  allocationRuleCode_contains?: Maybe<Scalars['String']>;
  allocationRuleCode_ends_with?: Maybe<Scalars['String']>;
  allocationRuleCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleCode_not?: Maybe<Scalars['String']>;
  allocationRuleCode_not_contains?: Maybe<Scalars['String']>;
  allocationRuleCode_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleCode_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleCode_starts_with?: Maybe<Scalars['String']>;
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleName_contains?: Maybe<Scalars['String']>;
  allocationRuleName_ends_with?: Maybe<Scalars['String']>;
  allocationRuleName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleName_not?: Maybe<Scalars['String']>;
  allocationRuleName_not_contains?: Maybe<Scalars['String']>;
  allocationRuleName_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleName_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleName_starts_with?: Maybe<Scalars['String']>;
  allocationRuleShortDescription?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_contains?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_ends_with?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleShortDescription_not?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_not_contains?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleShortDescription_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleShortDescription_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AllocationRuleDtoFilter>>;
  OR?: Maybe<Array<AllocationRuleDtoFilter>>;
  totalMember?: Maybe<Scalars['Int']>;
  totalMember_gt?: Maybe<Scalars['Int']>;
  totalMember_gte?: Maybe<Scalars['Int']>;
  totalMember_in?: Maybe<Array<Scalars['Int']>>;
  totalMember_lt?: Maybe<Scalars['Int']>;
  totalMember_lte?: Maybe<Scalars['Int']>;
  totalMember_not?: Maybe<Scalars['Int']>;
  totalMember_not_gt?: Maybe<Scalars['Int']>;
  totalMember_not_gte?: Maybe<Scalars['Int']>;
  totalMember_not_in?: Maybe<Array<Scalars['Int']>>;
  totalMember_not_lt?: Maybe<Scalars['Int']>;
  totalMember_not_lte?: Maybe<Scalars['Int']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type AllocationRuleDtoSort = {
  allocationRuleCode?: Maybe<SortOperationKind>;
  allocationRuleName?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type AllocationRuleSpecializeDto = {
  __typename?: 'AllocationRuleSpecializeDto';
  allocationRuleSpecializeDescription?: Maybe<Scalars['String']>;
  allocationRuleSpecializeId?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
};

export type AllocationRuleSpecializeDtoFilter = {
  allocationRuleSpecializeName?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_contains?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_ends_with?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleSpecializeName_not?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_not_contains?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleSpecializeName_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName_starts_with?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  allocationRuleTypeId_contains?: Maybe<Scalars['String']>;
  allocationRuleTypeId_ends_with?: Maybe<Scalars['String']>;
  allocationRuleTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleTypeId_not?: Maybe<Scalars['String']>;
  allocationRuleTypeId_not_contains?: Maybe<Scalars['String']>;
  allocationRuleTypeId_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleTypeId_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleTypeId_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AllocationRuleSpecializeDtoFilter>>;
  OR?: Maybe<Array<AllocationRuleSpecializeDtoFilter>>;
};

export type AllocationRuleSpecializeDtoSort = {
  allocationRuleSpecializeName?: Maybe<SortOperationKind>;
};

export type AllocationRuleSpecializeInfoDto = {
  __typename?: 'AllocationRuleSpecializeInfoDto';
  allocationRuleSpecializeDescription?: Maybe<Scalars['String']>;
  allocationRuleSpecializeId?: Maybe<Scalars['String']>;
  allocationRuleSpecializeName?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
};

export type AllocationRuleTypeDto = {
  __typename?: 'AllocationRuleTypeDto';
  allocationRuleTypeDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  allocationRuleTypeName?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
};

export type AllocationRuleTypeDtoFilter = {
  allocationRuleTypeName?: Maybe<Scalars['String']>;
  allocationRuleTypeName_contains?: Maybe<Scalars['String']>;
  allocationRuleTypeName_ends_with?: Maybe<Scalars['String']>;
  allocationRuleTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleTypeName_not?: Maybe<Scalars['String']>;
  allocationRuleTypeName_not_contains?: Maybe<Scalars['String']>;
  allocationRuleTypeName_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleTypeName_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleTypeName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AllocationRuleTypeDtoFilter>>;
  OR?: Maybe<Array<AllocationRuleTypeDtoFilter>>;
};

export type AllocationRuleTypeDtoSort = {
  allocationRuleTypeName?: Maybe<SortOperationKind>;
};

export type AllocationRuleTypeInfoDto = {
  __typename?: 'AllocationRuleTypeInfoDto';
  allocationRuleTypeDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  allocationRuleTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  staffTypeId?: Maybe<Scalars['String']>;
};

export type AllocationRulesByStaffDto = {
  __typename?: 'AllocationRulesByStaffDto';
  allocationRules?: Maybe<Array<Maybe<AllocationRuleDto>>>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AllocationRulesByStaffDto>;
  ruleCondition?: Maybe<RuleConditionDto>;
  staffTypeDescription?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
};

export type AllocationRulesNotAssignStaffDto = {
  __typename?: 'AllocationRulesNotAssignStaffDto';
  allocationRuleId?: Maybe<Scalars['String']>;
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleShortDescription?: Maybe<Scalars['String']>;
};

export type AllocationRulesNotAssignStaffDtoFilter = {
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleName_contains?: Maybe<Scalars['String']>;
  allocationRuleName_ends_with?: Maybe<Scalars['String']>;
  allocationRuleName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleName_not?: Maybe<Scalars['String']>;
  allocationRuleName_not_contains?: Maybe<Scalars['String']>;
  allocationRuleName_not_ends_with?: Maybe<Scalars['String']>;
  allocationRuleName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  allocationRuleName_not_starts_with?: Maybe<Scalars['String']>;
  allocationRuleName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<AllocationRulesNotAssignStaffDtoFilter>>;
  OR?: Maybe<Array<AllocationRulesNotAssignStaffDtoFilter>>;
};

export type AllocationRulesNotAssignStaffDtoSort = {
  allocationRuleName?: Maybe<SortOperationKind>;
};

export type AllowUpdateCustomerByDepositContractResponse = {
  __typename?: 'AllowUpdateCustomerByDepositContractResponse';
  allowUpdateCustomer?: Maybe<Scalars['Boolean']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AllowUpdateCustomerByDepositContractResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  maximumNumberOfUpdateCustomer?: Maybe<Scalars['Int']>;
};

export type ApplicationRoleDto = {
  __typename?: 'ApplicationRoleDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ApplicationRoleDto>;
  normalizedName?: Maybe<Scalars['String']>;
  roleDescription?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
};

export type ApproveC2CPanoramaImageInput = {
  c2CPanoramaImageId?: Maybe<Scalars['String']>;
  createdPropertyPostUserId?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type ApproveC2CPanoramaImageResponse = {
  __typename?: 'ApproveC2CPanoramaImageResponse';
  c2CPanoramaImageDto?: Maybe<C2CPanoramaImageDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ApproveCommentByIdsForBackOfficeResponse = {
  __typename?: 'ApproveCommentByIdsForBackOfficeResponse';
  commentIds?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ApproveCommentByIdsInput = {
  commentIds?: Maybe<Scalars['String']>;
};

export type ApproveCommentForBackOfficeResponse = {
  __typename?: 'ApproveCommentForBackOfficeResponse';
  comment?: Maybe<CommentForBackOfficeDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ApproveCommentInput = {
  commentId?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type ApproveContactTradingB2CInput = {
  notificationId?: Maybe<Scalars['String']>;
};

export type ApproveContactTradingB2CResponse = {
  __typename?: 'ApproveContactTradingB2CResponse';
  contactTradingB2CId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ApproveCrawlerDataInput = {
  crawlerProcessId?: Maybe<Scalars['String']>;
};

export type ApproveCrawlerDataResponse = {
  __typename?: 'ApproveCrawlerDataResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type ApproveOrRejectProfilePhotoResponse = {
  __typename?: 'ApproveOrRejectProfilePhotoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ApprovePropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type ApprovePropertyPostResponse = {
  __typename?: 'ApprovePropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type ArticleDto = {
  __typename?: 'ArticleDto';
  articleSubType?: Maybe<Scalars['String']>;
  articleSubTypeId?: Maybe<Scalars['String']>;
  articleType?: Maybe<Scalars['String']>;
  articleTypeId?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ArticleDto>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['String']>;
  highlightTag?: Maybe<Scalars['String']>;
  highlightTagId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  preview?: Maybe<Scalars['String']>;
  previewImageUrl?: Maybe<Scalars['String']>;
  promotedToFrontPage?: Maybe<Scalars['Boolean']>;
  slug?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type ArticlePageDto = {
  __typename?: 'ArticlePageDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ArticlePageDto>;
  currentPage: Scalars['Int'];
  edges?: Maybe<Array<Maybe<ArticleDto>>>;
  totalCount: Scalars['Int'];
};

export enum ArticleType {
  Realestateproject = 'REALESTATEPROJECT',
  Promotion = 'PROMOTION',
  Internal = 'INTERNAL',
  Handbook = 'HANDBOOK',
  Fengshui = 'FENGSHUI',
  Constructionandplanning = 'CONSTRUCTIONANDPLANNING',
  Interiorexteriordesign = 'INTERIOREXTERIORDESIGN',
  Project = 'PROJECT',
  Realestatemarket = 'REALESTATEMARKET',
  Nicehouse = 'NICEHOUSE',
  Materials = 'MATERIALS',
  Marketreport = 'MARKETREPORT',
  Learningnews = 'LEARNINGNEWS',
  Learningcourses = 'LEARNINGCOURSES'
}

export type AssignConsultantForBookingTransactionsInput = {
  bookingTransactionIds?: Maybe<Array<Scalars['Uuid']>>;
  consultantId: Scalars['Uuid'];
};

export type AssignConsultantForBookingTransactionsResponse = {
  __typename?: 'AssignConsultantForBookingTransactionsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AssignConsultantForContactTradingsB2CInput = {
  consultantId?: Maybe<Scalars['String']>;
  contactTradingB2CIds?: Maybe<Scalars['String']>;
};

export type AssignConsultantForContactTradingsB2CResponse = {
  __typename?: 'AssignConsultantForContactTradingsB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AssignConsultantForDepositTransactionsResponse = {
  __typename?: 'AssignConsultantForDepositTransactionsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AssignConsultantForDepositeTransactionsInput = {
  consultantId: Scalars['Uuid'];
  depositeTransactionIds?: Maybe<Array<Scalars['Uuid']>>;
};

export type AssignContactTradingB2CForLeaderInput = {
  contactTradingB2CId?: Maybe<Scalars['String']>;
  rejectId?: Maybe<Scalars['String']>;
};

export type AssignContactTradingB2CForLeaderResponse = {
  __typename?: 'AssignContactTradingB2CForLeaderResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AssignPropertyPostsInput = {
  propertyPostsId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type AssignPropertyPostsResponse = {
  __typename?: 'AssignPropertyPostsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AssignStaffsToRoleInput = {
  backOfficeRoleId?: Maybe<Scalars['String']>;
  userIds?: Maybe<Scalars['String']>;
};

export type AssignStaffsToRoleResponse = {
  __typename?: 'AssignStaffsToRoleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type AssignSupportRequestToExternalTicketResponse = {
  __typename?: 'AssignSupportRequestToExternalTicketResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  externalTicketId?: Maybe<Scalars['String']>;
};

export type AutoAssignConsultantDto = {
  __typename?: 'AutoAssignConsultantDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<AutoAssignConsultantDto>;
  saleSeasonId?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type AutoPropertyPostInfoDto = {
  __typename?: 'AutoPropertyPostInfoDto';
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AutoPropertyPostInfoDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  detailPath?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  isCreateByAgent: Scalars['Boolean'];
  postDescription?: Maybe<Scalars['String']>;
  postDescriptionHighlight?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTitleHighlight?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type AutoSuggestionAgentResponse = {
  __typename?: 'AutoSuggestionAgentResponse';
  agentInfoDtos?: Maybe<Array<Maybe<SearchAgentInfoDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<AutoSuggestionPropertyPostDto>>>;
};

export type AutoSuggestionAgentsInput = {
  keyword?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
};

export type AutoSuggestionProjectAgentInfoDto = {
  __typename?: 'AutoSuggestionProjectAgentInfoDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingLevel?: Maybe<Scalars['Int']>;
  agentRankingName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AutoSuggestionProjectAgentInfoDto>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  instruction?: Maybe<Scalars['String']>;
  isAgentLeader?: Maybe<Scalars['Boolean']>;
  isInitialAccount?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  nationalId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  refererCode?: Maybe<Scalars['String']>;
  sellingTotal?: Maybe<Scalars['Float']>;
  soldTotal?: Maybe<Scalars['Float']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
  userStatus?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type AutoSuggestionProjectDto = {
  __typename?: 'AutoSuggestionProjectDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<AutoSuggestionProjectDto>;
  detailPath?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
};

export type AutoSuggestionProjectInput = {
  keyword?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
};

export type AutoSuggestionProjectPrePostDto = {
  __typename?: 'AutoSuggestionProjectPrePostDto';
  address?: Maybe<ProjectAddressInfoDto>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<AutoSuggestionProjectPrePostDto>;
  detailPath?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  postDescription?: Maybe<Scalars['String']>;
  postDescriptionHighlight?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTitleHighlight?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type AutoSuggestionProjectResponse = {
  __typename?: 'AutoSuggestionProjectResponse';
  agentInfoDtos?: Maybe<Array<Maybe<AutoSuggestionProjectAgentInfoDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectInfoDtos?: Maybe<Array<Maybe<AutoSuggestionProjectDto>>>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<AutoSuggestionProjectPrePostDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type AutoSuggestionPropertyPostDto = {
  __typename?: 'AutoSuggestionPropertyPostDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<AutoSuggestionPropertyPostDto>;
  detailPath?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  postDescription?: Maybe<Scalars['String']>;
  postDescriptionHighlight?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTitleHighlight?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type AutoSuggestionPropertyPostResponse = {
  __typename?: 'AutoSuggestionPropertyPostResponse';
  agentInfoDtos?: Maybe<Array<Maybe<SellerInfo>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<AutoPropertyPostInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type AutoSuggestionPropertyPostsInput = {
  keyword?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
};

export type B2C2CProjectBoDto = {
  __typename?: 'B2C2CProjectBODto';
  active?: Maybe<Scalars['Boolean']>;
  address?: Maybe<AddressModel>;
  b2C2CProjectId: Scalars['Uuid'];
  b2C2CProjectName?: Maybe<Scalars['String']>;
  b2CProjectId?: Maybe<Scalars['String']>;
  b2CProjectName?: Maybe<Scalars['String']>;
  createdDateTime: Scalars['Long'];
  investorId?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  propertyTypeId: Scalars['Uuid'];
  propertyTypeName?: Maybe<Scalars['String']>;
  updatedDateTime?: Maybe<Scalars['Long']>;
};

export type B2C2CProjectBoDtoSort = {
  b2C2CProjectName?: Maybe<SortOperationKind>;
  b2CProjectId?: Maybe<SortOperationKind>;
  b2CProjectName?: Maybe<SortOperationKind>;
  createdDateTime?: Maybe<SortOperationKind>;
  investorId?: Maybe<SortOperationKind>;
  investorName?: Maybe<SortOperationKind>;
  propertyTypeId?: Maybe<SortOperationKind>;
  propertyTypeName?: Maybe<SortOperationKind>;
  updatedDateTime?: Maybe<SortOperationKind>;
};

export type B2C2CProjectDto = {
  __typename?: 'B2C2CProjectDto';
  b2C2CProjectId?: Maybe<Scalars['String']>;
  b2C2CProjectName?: Maybe<Scalars['String']>;
  b2CDetailPath?: Maybe<Scalars['String']>;
  b2CProjectId?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  projectAddress?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type B2CDepositTransactionInfoDto = {
  __typename?: 'B2CDepositTransactionInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<B2CDepositTransactionInfoDto>;
  depositAmount?: Maybe<Scalars['Float']>;
  depositCode?: Maybe<Scalars['String']>;
  depositDatetime?: Maybe<Scalars['Long']>;
  depositNumber?: Maybe<Scalars['String']>;
  depositStatusId?: Maybe<Scalars['String']>;
  depositStatusName?: Maybe<Scalars['String']>;
  depositSubTypeName?: Maybe<Scalars['String']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  paymentCode?: Maybe<Scalars['String']>;
};

export type B2CPropertyPostInfoDto = {
  __typename?: 'B2CPropertyPostInfoDto';
  bookingFeeAmount?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<B2CPropertyPostInfoDto>;
  fastProductId?: Maybe<Scalars['String']>;
  isBookedOutSide: Scalars['Boolean'];
  priceVat?: Maybe<Scalars['Float']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostSubTypeId?: Maybe<Scalars['String']>;
  propertyPostSubTypeName?: Maybe<Scalars['String']>;
  propertyPostTypeId?: Maybe<Scalars['String']>;
  propertyPostTypeName?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
};

export type B2CTransactionContractDetailDto = {
  __typename?: 'B2CTransactionContractDetailDto';
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  commissionCalculationPrice?: Maybe<Scalars['Float']>;
  contractCode?: Maybe<Scalars['String']>;
  contractDueDate?: Maybe<Scalars['Long']>;
  contractEmail?: Maybe<Scalars['String']>;
  contractPhone?: Maybe<Scalars['String']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  contractSignFullname?: Maybe<Scalars['String']>;
  contractStatusId?: Maybe<Scalars['String']>;
  contractStatusName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  customerInfo?: Maybe<Contracts_CustomerDto>;
  customerNationalId?: Maybe<Scalars['String']>;
  depositAmount?: Maybe<Scalars['Float']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  depositTransactionInfo?: Maybe<B2CDepositTransactionInfoDto>;
  documentFiles?: Maybe<Scalars['String']>;
  documentImages?: Maybe<Scalars['String']>;
  isReturnGenericBasket?: Maybe<Scalars['Boolean']>;
  isTurnBackBookingPayment?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  priceAfterDiscountNoVat?: Maybe<Scalars['Float']>;
  priceAfterDiscountVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  projectInfo?: Maybe<Contracts_ProjectInfoDto>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<B2CPropertyPostInfoDto>;
  propertyPostTypeId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  returnGenericBasketDatetime?: Maybe<Scalars['Long']>;
  returnGenericBasketReason?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonInfo?: Maybe<Contracts_SaleSeasonInfoDto>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type B2CTransactionContractDto = {
  __typename?: 'B2CTransactionContractDto';
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<B2CTransactionContractDto>;
  commissionCalculationPrice?: Maybe<Scalars['Float']>;
  contractCode?: Maybe<Scalars['String']>;
  contractDueDate?: Maybe<Scalars['Long']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  contractStatusId?: Maybe<Scalars['String']>;
  contractStatusName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  createUserInfo?: Maybe<UserCommonInfoDto>;
  customerInfo?: Maybe<Contracts_CustomerDto>;
  depositAmount?: Maybe<Scalars['Float']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  depositTransactionInfo?: Maybe<B2CDepositTransactionInfoDto>;
  documentFiles?: Maybe<Scalars['String']>;
  documentImages?: Maybe<Scalars['String']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<B2CPropertyPostInfoDto>;
  propertyPostTypeId?: Maybe<Scalars['String']>;
  returnGenericBasketDatetime?: Maybe<Scalars['Long']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updateUserInfo?: Maybe<UserCommonInfoDto>;
};

export type B2CTransactionContractInfoDto = {
  __typename?: 'B2CTransactionContractInfoDto';
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  bookingFeeAmount?: Maybe<Scalars['Decimal']>;
  contractCode?: Maybe<Scalars['String']>;
  contractDueDate?: Maybe<Scalars['Long']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  contractStatusId?: Maybe<Scalars['String']>;
  contractStatusName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createUserEmail?: Maybe<Scalars['String']>;
  createUserFullname?: Maybe<Scalars['String']>;
  depositAmount?: Maybe<Scalars['Decimal']>;
  depositCode?: Maybe<Scalars['String']>;
  depositDatetime?: Maybe<Scalars['Long']>;
  depositNumber?: Maybe<Scalars['String']>;
  depositStatusId?: Maybe<Scalars['String']>;
  depositStatusName?: Maybe<Scalars['String']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  isBookedOutSide: Scalars['Boolean'];
  note?: Maybe<Scalars['String']>;
  priceAfterDiscountNoVat?: Maybe<Scalars['Float']>;
  priceAfterDiscountVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Decimal']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostSubTypeId?: Maybe<Scalars['String']>;
  propertyPostSubTypeName?: Maybe<Scalars['String']>;
  propertyPostTypeId?: Maybe<Scalars['String']>;
  propertyPostTypeName?: Maybe<Scalars['String']>;
  propertyPriceVat?: Maybe<Scalars['Decimal']>;
  returnGenericBasketDatetime?: Maybe<Scalars['Long']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonName?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updateUserEmail?: Maybe<Scalars['String']>;
  updateUserFullname?: Maybe<Scalars['String']>;
};

export type B2CTransactionContractInfoDtoFilter = {
  AND?: Maybe<Array<B2CTransactionContractInfoDtoFilter>>;
  bookingFeeAmount?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_gt?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_gte?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_in?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  bookingFeeAmount_lt?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_lte?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_not?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_not_gt?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_not_gte?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_not_in?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  bookingFeeAmount_not_lt?: Maybe<Scalars['Decimal']>;
  bookingFeeAmount_not_lte?: Maybe<Scalars['Decimal']>;
  contractDueDate?: Maybe<Scalars['Long']>;
  contractDueDate_gt?: Maybe<Scalars['Long']>;
  contractDueDate_gte?: Maybe<Scalars['Long']>;
  contractDueDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  contractDueDate_lt?: Maybe<Scalars['Long']>;
  contractDueDate_lte?: Maybe<Scalars['Long']>;
  contractDueDate_not?: Maybe<Scalars['Long']>;
  contractDueDate_not_gt?: Maybe<Scalars['Long']>;
  contractDueDate_not_gte?: Maybe<Scalars['Long']>;
  contractDueDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  contractDueDate_not_lt?: Maybe<Scalars['Long']>;
  contractDueDate_not_lte?: Maybe<Scalars['Long']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  contractSignDatetime_gt?: Maybe<Scalars['Long']>;
  contractSignDatetime_gte?: Maybe<Scalars['Long']>;
  contractSignDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  contractSignDatetime_lt?: Maybe<Scalars['Long']>;
  contractSignDatetime_lte?: Maybe<Scalars['Long']>;
  contractSignDatetime_not?: Maybe<Scalars['Long']>;
  contractSignDatetime_not_gt?: Maybe<Scalars['Long']>;
  contractSignDatetime_not_gte?: Maybe<Scalars['Long']>;
  contractSignDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  contractSignDatetime_not_lt?: Maybe<Scalars['Long']>;
  contractSignDatetime_not_lte?: Maybe<Scalars['Long']>;
  contractStatusId?: Maybe<Scalars['String']>;
  contractStatusId_contains?: Maybe<Scalars['String']>;
  contractStatusId_ends_with?: Maybe<Scalars['String']>;
  contractStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractStatusId_not?: Maybe<Scalars['String']>;
  contractStatusId_not_contains?: Maybe<Scalars['String']>;
  contractStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contractStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contractStatusId_starts_with?: Maybe<Scalars['String']>;
  contractStatusName?: Maybe<Scalars['String']>;
  contractStatusName_contains?: Maybe<Scalars['String']>;
  contractStatusName_ends_with?: Maybe<Scalars['String']>;
  contractStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractStatusName_not?: Maybe<Scalars['String']>;
  contractStatusName_not_contains?: Maybe<Scalars['String']>;
  contractStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contractStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contractStatusName_starts_with?: Maybe<Scalars['String']>;
  createUserFullname?: Maybe<Scalars['String']>;
  createUserFullname_contains?: Maybe<Scalars['String']>;
  createUserFullname_ends_with?: Maybe<Scalars['String']>;
  createUserFullname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createUserFullname_not?: Maybe<Scalars['String']>;
  createUserFullname_not_contains?: Maybe<Scalars['String']>;
  createUserFullname_not_ends_with?: Maybe<Scalars['String']>;
  createUserFullname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createUserFullname_not_starts_with?: Maybe<Scalars['String']>;
  createUserFullname_starts_with?: Maybe<Scalars['String']>;
  depositCode?: Maybe<Scalars['String']>;
  depositCode_contains?: Maybe<Scalars['String']>;
  depositCode_ends_with?: Maybe<Scalars['String']>;
  depositCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositCode_not?: Maybe<Scalars['String']>;
  depositCode_not_contains?: Maybe<Scalars['String']>;
  depositCode_not_ends_with?: Maybe<Scalars['String']>;
  depositCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositCode_not_starts_with?: Maybe<Scalars['String']>;
  depositCode_starts_with?: Maybe<Scalars['String']>;
  depositDatetime?: Maybe<Scalars['Long']>;
  depositDatetime_gt?: Maybe<Scalars['Long']>;
  depositDatetime_gte?: Maybe<Scalars['Long']>;
  depositDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  depositDatetime_lt?: Maybe<Scalars['Long']>;
  depositDatetime_lte?: Maybe<Scalars['Long']>;
  depositDatetime_not?: Maybe<Scalars['Long']>;
  depositDatetime_not_gt?: Maybe<Scalars['Long']>;
  depositDatetime_not_gte?: Maybe<Scalars['Long']>;
  depositDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  depositDatetime_not_lt?: Maybe<Scalars['Long']>;
  depositDatetime_not_lte?: Maybe<Scalars['Long']>;
  depositStatusId?: Maybe<Scalars['String']>;
  depositStatusId_contains?: Maybe<Scalars['String']>;
  depositStatusId_ends_with?: Maybe<Scalars['String']>;
  depositStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositStatusId_not?: Maybe<Scalars['String']>;
  depositStatusId_not_contains?: Maybe<Scalars['String']>;
  depositStatusId_not_ends_with?: Maybe<Scalars['String']>;
  depositStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositStatusId_not_starts_with?: Maybe<Scalars['String']>;
  depositStatusId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<B2CTransactionContractInfoDtoFilter>>;
  priceVat?: Maybe<Scalars['Decimal']>;
  priceVat_gt?: Maybe<Scalars['Decimal']>;
  priceVat_gte?: Maybe<Scalars['Decimal']>;
  priceVat_in?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  priceVat_lt?: Maybe<Scalars['Decimal']>;
  priceVat_lte?: Maybe<Scalars['Decimal']>;
  priceVat_not?: Maybe<Scalars['Decimal']>;
  priceVat_not_gt?: Maybe<Scalars['Decimal']>;
  priceVat_not_gte?: Maybe<Scalars['Decimal']>;
  priceVat_not_in?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  priceVat_not_lt?: Maybe<Scalars['Decimal']>;
  priceVat_not_lte?: Maybe<Scalars['Decimal']>;
  projectId?: Maybe<Scalars['String']>;
  projectId_contains?: Maybe<Scalars['String']>;
  projectId_ends_with?: Maybe<Scalars['String']>;
  projectId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not?: Maybe<Scalars['String']>;
  projectId_not_contains?: Maybe<Scalars['String']>;
  projectId_not_ends_with?: Maybe<Scalars['String']>;
  projectId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not_starts_with?: Maybe<Scalars['String']>;
  projectId_starts_with?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyCode_contains?: Maybe<Scalars['String']>;
  propertyCode_ends_with?: Maybe<Scalars['String']>;
  propertyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not?: Maybe<Scalars['String']>;
  propertyCode_not_contains?: Maybe<Scalars['String']>;
  propertyCode_not_ends_with?: Maybe<Scalars['String']>;
  propertyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not_starts_with?: Maybe<Scalars['String']>;
  propertyCode_starts_with?: Maybe<Scalars['String']>;
  propertyPostSubTypeId?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_contains?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostSubTypeId_not?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostSubTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostSubTypeId_starts_with?: Maybe<Scalars['String']>;
  propertyPostTypeId?: Maybe<Scalars['String']>;
  propertyPostTypeId_contains?: Maybe<Scalars['String']>;
  propertyPostTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyPostTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostTypeId_not?: Maybe<Scalars['String']>;
  propertyPostTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyPostTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostTypeId_starts_with?: Maybe<Scalars['String']>;
  propertyPriceVat?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_gt?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_gte?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_in?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  propertyPriceVat_lt?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_lte?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_not?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_not_gt?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_not_gte?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_not_in?: Maybe<Array<Maybe<Scalars['Decimal']>>>;
  propertyPriceVat_not_lt?: Maybe<Scalars['Decimal']>;
  propertyPriceVat_not_lte?: Maybe<Scalars['Decimal']>;
  returnGenericBasketDatetime?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_gt?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_gte?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  returnGenericBasketDatetime_lt?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_lte?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_not?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_not_gt?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_not_gte?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  returnGenericBasketDatetime_not_lt?: Maybe<Scalars['Long']>;
  returnGenericBasketDatetime_not_lte?: Maybe<Scalars['Long']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonId_contains?: Maybe<Scalars['String']>;
  saleSeasonId_ends_with?: Maybe<Scalars['String']>;
  saleSeasonId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleSeasonId_not?: Maybe<Scalars['String']>;
  saleSeasonId_not_contains?: Maybe<Scalars['String']>;
  saleSeasonId_not_ends_with?: Maybe<Scalars['String']>;
  saleSeasonId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleSeasonId_not_starts_with?: Maybe<Scalars['String']>;
  saleSeasonId_starts_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusId_contains?: Maybe<Scalars['String']>;
  saleTrackingStatusId_ends_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleTrackingStatusId_not?: Maybe<Scalars['String']>;
  saleTrackingStatusId_not_contains?: Maybe<Scalars['String']>;
  saleTrackingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleTrackingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
  updateUserFullname?: Maybe<Scalars['String']>;
  updateUserFullname_contains?: Maybe<Scalars['String']>;
  updateUserFullname_ends_with?: Maybe<Scalars['String']>;
  updateUserFullname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updateUserFullname_not?: Maybe<Scalars['String']>;
  updateUserFullname_not_contains?: Maybe<Scalars['String']>;
  updateUserFullname_not_ends_with?: Maybe<Scalars['String']>;
  updateUserFullname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updateUserFullname_not_starts_with?: Maybe<Scalars['String']>;
  updateUserFullname_starts_with?: Maybe<Scalars['String']>;
};

export type B2CTransactionContractInfoDtoSort = {
  bookingFeeAmount?: Maybe<SortOperationKind>;
  contractDueDate?: Maybe<SortOperationKind>;
  contractSignDatetime?: Maybe<SortOperationKind>;
  contractStatusId?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  createUserFullname?: Maybe<SortOperationKind>;
  depositCode?: Maybe<SortOperationKind>;
  depositDatetime?: Maybe<SortOperationKind>;
  priceVat?: Maybe<SortOperationKind>;
  projectId?: Maybe<SortOperationKind>;
  propertyCode?: Maybe<SortOperationKind>;
  propertyPostTypeName?: Maybe<SortOperationKind>;
  propertyPriceVat?: Maybe<SortOperationKind>;
  returnGenericBasketDatetime?: Maybe<SortOperationKind>;
  saleSeasonId?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
  updateUserFullname?: Maybe<SortOperationKind>;
};

export type BackOfficeRoleDetailDto = {
  __typename?: 'BackOfficeRoleDetailDto';
  allowEditPermission: Scalars['Boolean'];
  applicationRoleId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<BackOfficeRoleDetailDto>;
  code?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  longDescription?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permissions?: Maybe<Array<Maybe<PermissionDto>>>;
  shortDescription?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypes?: Maybe<Array<Maybe<BackOfficeStaffTypeDto>>>;
};

export type BackOfficeRoleDto = {
  __typename?: 'BackOfficeRoleDto';
  applicationRoleDescription?: Maybe<Scalars['String']>;
  applicationRoleId?: Maybe<Scalars['String']>;
  backofficeRoleCode?: Maybe<Scalars['String']>;
  backofficeRoleId?: Maybe<Scalars['String']>;
  backofficeRoleName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  shortDescription?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Scalars['String']>;
  staffTypes?: Maybe<Array<Maybe<BackOfficeStaffTypeDto>>>;
  stringStaffTypeDescriptions?: Maybe<Scalars['String']>;
  totalMember: Scalars['Int'];
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetimeString?: Maybe<Scalars['String']>;
};

export type BackOfficeRoleDtoFilter = {
  AND?: Maybe<Array<BackOfficeRoleDtoFilter>>;
  applicationRoleId?: Maybe<Scalars['String']>;
  applicationRoleId_contains?: Maybe<Scalars['String']>;
  applicationRoleId_ends_with?: Maybe<Scalars['String']>;
  applicationRoleId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  applicationRoleId_not?: Maybe<Scalars['String']>;
  applicationRoleId_not_contains?: Maybe<Scalars['String']>;
  applicationRoleId_not_ends_with?: Maybe<Scalars['String']>;
  applicationRoleId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  applicationRoleId_not_starts_with?: Maybe<Scalars['String']>;
  applicationRoleId_starts_with?: Maybe<Scalars['String']>;
  backofficeRoleCode?: Maybe<Scalars['String']>;
  backofficeRoleCode_contains?: Maybe<Scalars['String']>;
  backofficeRoleCode_ends_with?: Maybe<Scalars['String']>;
  backofficeRoleCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backofficeRoleCode_not?: Maybe<Scalars['String']>;
  backofficeRoleCode_not_contains?: Maybe<Scalars['String']>;
  backofficeRoleCode_not_ends_with?: Maybe<Scalars['String']>;
  backofficeRoleCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backofficeRoleCode_not_starts_with?: Maybe<Scalars['String']>;
  backofficeRoleCode_starts_with?: Maybe<Scalars['String']>;
  backofficeRoleName?: Maybe<Scalars['String']>;
  backofficeRoleName_contains?: Maybe<Scalars['String']>;
  backofficeRoleName_ends_with?: Maybe<Scalars['String']>;
  backofficeRoleName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backofficeRoleName_not?: Maybe<Scalars['String']>;
  backofficeRoleName_not_contains?: Maybe<Scalars['String']>;
  backofficeRoleName_not_ends_with?: Maybe<Scalars['String']>;
  backofficeRoleName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  backofficeRoleName_not_starts_with?: Maybe<Scalars['String']>;
  backofficeRoleName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<BackOfficeRoleDtoFilter>>;
  shortDescription?: Maybe<Scalars['String']>;
  shortDescription_contains?: Maybe<Scalars['String']>;
  shortDescription_ends_with?: Maybe<Scalars['String']>;
  shortDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not?: Maybe<Scalars['String']>;
  shortDescription_not_contains?: Maybe<Scalars['String']>;
  shortDescription_not_ends_with?: Maybe<Scalars['String']>;
  shortDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortDescription_not_starts_with?: Maybe<Scalars['String']>;
  shortDescription_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type BackOfficeRoleDtoSort = {
  backofficeRoleCode?: Maybe<SortOperationKind>;
  backofficeRoleName?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type BackOfficeRolesByStaffDto = {
  __typename?: 'BackOfficeRolesByStaffDto';
  backofficeRoleDetail?: Maybe<BackOfficeRoleDetailDto>;
  backofficeRoles?: Maybe<Array<Maybe<BackOfficeRoleDto>>>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<BackOfficeRolesByStaffDto>;
  staffTypes?: Maybe<Array<Maybe<BackOfficeStaffTypeDto>>>;
};

export type BackOfficeStaffTypeDto = {
  __typename?: 'BackOfficeStaffTypeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<BackOfficeStaffTypeDto>;
  staffTypeDescription?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
};

export type BackOfficeUserProfileDto = {
  __typename?: 'BackOfficeUserProfileDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<BackOfficeUserProfileDto>;
  staffInfo?: Maybe<StaffProfileDto>;
  userInfo?: Maybe<CommonUserInfoDto>;
};

export type BankDto = {
  __typename?: 'BankDto';
  bankAddress?: Maybe<Scalars['String']>;
  bankCode?: Maybe<Scalars['String']>;
  bankDescription?: Maybe<Scalars['String']>;
  bankEmail?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bankTelephone?: Maybe<Scalars['String']>;
  bankWebsite?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
};

export type BankDtoFilter = {
  AND?: Maybe<Array<BankDtoFilter>>;
  bankName?: Maybe<Scalars['String']>;
  bankName_contains?: Maybe<Scalars['String']>;
  bankName_ends_with?: Maybe<Scalars['String']>;
  bankName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not?: Maybe<Scalars['String']>;
  bankName_not_contains?: Maybe<Scalars['String']>;
  bankName_not_ends_with?: Maybe<Scalars['String']>;
  bankName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankName_not_starts_with?: Maybe<Scalars['String']>;
  bankName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<BankDtoFilter>>;
};

export type BankDtoSort = {
  bankName?: Maybe<SortOperationKind>;
};

export type BankInfoDto = {
  __typename?: 'BankInfoDto';
  bankAddress?: Maybe<Scalars['String']>;
  bankCode?: Maybe<Scalars['String']>;
  bankDescription?: Maybe<Scalars['String']>;
  bankEmail?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bankTelephone?: Maybe<Scalars['String']>;
  bankWebsite?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
};

export type BankPaymentTransferInfoDto = {
  __typename?: 'BankPaymentTransferInfoDto';
  bankAccountName?: Maybe<Scalars['String']>;
  bankAccountNumber?: Maybe<Scalars['String']>;
  bankTransferContents?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<BankPaymentTransferInfoDto>;
  expectedAmount?: Maybe<Scalars['Float']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionPaymentStatus: TransactionPaymentStatus;
  userTransactionId?: Maybe<Scalars['String']>;
};

export type BankTransferDetailDto = {
  __typename?: 'BankTransferDetailDto';
  amount?: Maybe<Scalars['Float']>;
  bankTransferDetailId?: Maybe<Scalars['String']>;
  billId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentCode?: Maybe<Scalars['Int']>;
  paymentUnit: PaymentUnit;
  transactionId?: Maybe<Scalars['String']>;
  transferInfo?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type BankTransferDetailDtoFilter = {
  AND?: Maybe<Array<BankTransferDetailDtoFilter>>;
  bankTransferDetailId?: Maybe<Scalars['String']>;
  bankTransferDetailId_contains?: Maybe<Scalars['String']>;
  bankTransferDetailId_ends_with?: Maybe<Scalars['String']>;
  bankTransferDetailId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankTransferDetailId_not?: Maybe<Scalars['String']>;
  bankTransferDetailId_not_contains?: Maybe<Scalars['String']>;
  bankTransferDetailId_not_ends_with?: Maybe<Scalars['String']>;
  bankTransferDetailId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bankTransferDetailId_not_starts_with?: Maybe<Scalars['String']>;
  bankTransferDetailId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<BankTransferDetailDtoFilter>>;
  paymentUnit?: Maybe<PaymentUnit>;
  paymentUnit_gt?: Maybe<PaymentUnit>;
  paymentUnit_gte?: Maybe<PaymentUnit>;
  paymentUnit_in?: Maybe<Array<PaymentUnit>>;
  paymentUnit_lt?: Maybe<PaymentUnit>;
  paymentUnit_lte?: Maybe<PaymentUnit>;
  paymentUnit_not?: Maybe<PaymentUnit>;
  paymentUnit_not_gt?: Maybe<PaymentUnit>;
  paymentUnit_not_gte?: Maybe<PaymentUnit>;
  paymentUnit_not_in?: Maybe<Array<PaymentUnit>>;
  paymentUnit_not_lt?: Maybe<PaymentUnit>;
  paymentUnit_not_lte?: Maybe<PaymentUnit>;
  transactionId?: Maybe<Scalars['String']>;
  transactionId_contains?: Maybe<Scalars['String']>;
  transactionId_ends_with?: Maybe<Scalars['String']>;
  transactionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionId_not?: Maybe<Scalars['String']>;
  transactionId_not_contains?: Maybe<Scalars['String']>;
  transactionId_not_ends_with?: Maybe<Scalars['String']>;
  transactionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionId_not_starts_with?: Maybe<Scalars['String']>;
  transactionId_starts_with?: Maybe<Scalars['String']>;
};

export type BankTransferDetailDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  paidDatetime?: Maybe<SortOperationKind>;
};

export type BasicNewsPagesDto = {
  __typename?: 'BasicNewsPagesDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<BasicNewsPagesDto>;
  currentPage: Scalars['Int'];
  edges?: Maybe<Array<Maybe<BasicPageDto>>>;
  totalCount: Scalars['Int'];
};

export type BasicPageDto = {
  __typename?: 'BasicPageDto';
  body?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<BasicPageDto>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['String']>;
  pageType?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type BasicPageRequestInput = {
  languageCode?: Maybe<Scalars['String']>;
  pageType: BasicPageType;
};

export enum BasicPageType {
  Termsofuse = 'TERMSOFUSE',
  Privacypolicy = 'PRIVACYPOLICY',
  Mechanismsforcomplaintsresolution = 'MECHANISMSFORCOMPLAINTSRESOLUTION',
  Training = 'TRAINING',
  Contact = 'CONTACT',
  Operation = 'OPERATION'
}

export type BlockFloorPlanDto = {
  __typename?: 'BlockFloorPlanDto';
  blockCode?: Maybe<Scalars['String']>;
  blockFloorPlanId?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  floor?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  modifiedBy?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type BlockFloorPlanDtoFilter = {
  AND?: Maybe<Array<BlockFloorPlanDtoFilter>>;
  blockName?: Maybe<Scalars['String']>;
  blockName_contains?: Maybe<Scalars['String']>;
  blockName_ends_with?: Maybe<Scalars['String']>;
  blockName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blockName_not?: Maybe<Scalars['String']>;
  blockName_not_contains?: Maybe<Scalars['String']>;
  blockName_not_ends_with?: Maybe<Scalars['String']>;
  blockName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blockName_not_starts_with?: Maybe<Scalars['String']>;
  blockName_starts_with?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  floor_contains?: Maybe<Scalars['String']>;
  floor_ends_with?: Maybe<Scalars['String']>;
  floor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floor_not?: Maybe<Scalars['String']>;
  floor_not_contains?: Maybe<Scalars['String']>;
  floor_not_ends_with?: Maybe<Scalars['String']>;
  floor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floor_not_starts_with?: Maybe<Scalars['String']>;
  floor_starts_with?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  lastModified_gt?: Maybe<Scalars['Long']>;
  lastModified_gte?: Maybe<Scalars['Long']>;
  lastModified_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  lastModified_lt?: Maybe<Scalars['Long']>;
  lastModified_lte?: Maybe<Scalars['Long']>;
  lastModified_not?: Maybe<Scalars['Long']>;
  lastModified_not_gt?: Maybe<Scalars['Long']>;
  lastModified_not_gte?: Maybe<Scalars['Long']>;
  lastModified_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  lastModified_not_lt?: Maybe<Scalars['Long']>;
  lastModified_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<BlockFloorPlanDtoFilter>>;
  photo?: Maybe<Scalars['String']>;
  photo_contains?: Maybe<Scalars['String']>;
  photo_ends_with?: Maybe<Scalars['String']>;
  photo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  photo_not?: Maybe<Scalars['String']>;
  photo_not_contains?: Maybe<Scalars['String']>;
  photo_not_ends_with?: Maybe<Scalars['String']>;
  photo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  photo_not_starts_with?: Maybe<Scalars['String']>;
  photo_starts_with?: Maybe<Scalars['String']>;
};

export type BlockFloorPlanDtoSort = {
  blockName?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  floor?: Maybe<SortOperationKind>;
};

export type BlockNameInfo = {
  __typename?: 'BlockNameInfo';
  blockName?: Maybe<Scalars['String']>;
};

export type BlockNameInfoFilter = {
  AND?: Maybe<Array<BlockNameInfoFilter>>;
  blockName?: Maybe<Scalars['String']>;
  blockName_contains?: Maybe<Scalars['String']>;
  blockName_ends_with?: Maybe<Scalars['String']>;
  blockName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blockName_not?: Maybe<Scalars['String']>;
  blockName_not_contains?: Maybe<Scalars['String']>;
  blockName_not_ends_with?: Maybe<Scalars['String']>;
  blockName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blockName_not_starts_with?: Maybe<Scalars['String']>;
  blockName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<BlockNameInfoFilter>>;
};

export type BookingStatusDto = {
  __typename?: 'BookingStatusDto';
  bookingStatusDescription?: Maybe<Scalars['String']>;
  bookingStatusId?: Maybe<Scalars['String']>;
  bookingStatusName?: Maybe<Scalars['String']>;
  bookingStatusSortOrder: Scalars['Int'];
};

export type BookingStatusDtoFilter = {
  AND?: Maybe<Array<BookingStatusDtoFilter>>;
  bookingStatusName?: Maybe<Scalars['String']>;
  bookingStatusName_contains?: Maybe<Scalars['String']>;
  bookingStatusName_ends_with?: Maybe<Scalars['String']>;
  bookingStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bookingStatusName_not?: Maybe<Scalars['String']>;
  bookingStatusName_not_contains?: Maybe<Scalars['String']>;
  bookingStatusName_not_ends_with?: Maybe<Scalars['String']>;
  bookingStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bookingStatusName_not_starts_with?: Maybe<Scalars['String']>;
  bookingStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<BookingStatusDtoFilter>>;
};

export type BookingStatusDtoSort = {
  bookingStatusName?: Maybe<SortOperationKind>;
};

export type BookingStatusInfoDto = {
  __typename?: 'BookingStatusInfoDto';
  bookingStatusDescription?: Maybe<Scalars['String']>;
  bookingStatusId?: Maybe<Scalars['String']>;
  bookingStatusName?: Maybe<Scalars['String']>;
  bookingStatusSortOrder: Scalars['Int'];
};

export type BookingTransactionDto = {
  __typename?: 'BookingTransactionDto';
  beginDepositeDatetime?: Maybe<Scalars['Long']>;
  bookingDatetime?: Maybe<Scalars['Long']>;
  bookingFeeAmount?: Maybe<Scalars['Float']>;
  bookingNumber: Scalars['Long'];
  bookingStatusId?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  bookingTransactionNotes?: Maybe<Scalars['String']>;
  buyCommission?: Maybe<Scalars['Float']>;
  buyCommissionAmount?: Maybe<Scalars['Float']>;
  buyerId?: Maybe<Scalars['String']>;
  confirmedBookingDatetime?: Maybe<Scalars['Long']>;
  consultantInfoDto?: Maybe<ConsultantInfoDto>;
  customerId?: Maybe<Scalars['String']>;
  endDepositeDatetime?: Maybe<Scalars['Long']>;
  fastProductId?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  fastTransactionId?: Maybe<Scalars['String']>;
  fastTransactionNumber?: Maybe<Scalars['String']>;
  isLatest: Scalars['Boolean'];
  numberOfChanging?: Maybe<Scalars['Int']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentTransactionInfo?: Maybe<Scalars['String']>;
  priorBookingTransactionId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  rewardPoints?: Maybe<Scalars['Int']>;
  saleAgentId?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionAmount?: Maybe<Scalars['Float']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type BookingTransactionInfoDto = {
  __typename?: 'BookingTransactionInfoDto';
  bookingDatetime?: Maybe<Scalars['Long']>;
  bookingFeeAmount?: Maybe<Scalars['Float']>;
  bookingNumber: Scalars['Long'];
  bookingStatusId?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  bookingTransactionNotes?: Maybe<Scalars['String']>;
  buyCommission?: Maybe<Scalars['Float']>;
  buyCommissionAmount?: Maybe<Scalars['Float']>;
  buyerId?: Maybe<Scalars['String']>;
  confirmedBookingDatetime?: Maybe<Scalars['Long']>;
  customerId?: Maybe<Scalars['String']>;
  fastTransactionId?: Maybe<Scalars['String']>;
  fastTransactionNumber?: Maybe<Scalars['String']>;
  isLatest: Scalars['Boolean'];
  numberOfChanging?: Maybe<Scalars['Int']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentTransactionInfo?: Maybe<Scalars['String']>;
  priorBookingTransactionId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  rewardPoints?: Maybe<Scalars['Int']>;
  saleAgentId?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionAmount?: Maybe<Scalars['Float']>;
};

export type BookingTransactionToAssignConsultantDto = {
  __typename?: 'BookingTransactionToAssignConsultantDto';
  b2CBlockName?: Maybe<Scalars['String']>;
  b2CProjectId?: Maybe<Scalars['String']>;
  b2CProjectName?: Maybe<Scalars['String']>;
  b2CPropertyCode?: Maybe<Scalars['String']>;
  b2CPropertyPostId?: Maybe<Scalars['String']>;
  b2CSaleSeasonId?: Maybe<Scalars['String']>;
  b2CSaleSeasonName?: Maybe<Scalars['String']>;
  b2CSubtypeDescription?: Maybe<Scalars['String']>;
  b2CSubtypeId?: Maybe<Scalars['String']>;
  bookingFeeAmount?: Maybe<Scalars['Float']>;
  bookingNumber?: Maybe<Scalars['String']>;
  buyerFullname?: Maybe<Scalars['String']>;
  consultantIsSelectedByTopener: Scalars['Boolean'];
  consultantStaffFullname?: Maybe<Scalars['String']>;
  consultantStaffId?: Maybe<Scalars['String']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionIndex?: Maybe<Scalars['Int']>;
  transactionStatusDescription?: Maybe<Scalars['String']>;
  transactionStatusId?: Maybe<Scalars['String']>;
};

export type BookingTransactionToAssignConsultantDtoFilter = {
  AND?: Maybe<Array<BookingTransactionToAssignConsultantDtoFilter>>;
  b2CBlockName?: Maybe<Scalars['String']>;
  b2CBlockName_contains?: Maybe<Scalars['String']>;
  b2CBlockName_ends_with?: Maybe<Scalars['String']>;
  b2CBlockName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CBlockName_not?: Maybe<Scalars['String']>;
  b2CBlockName_not_contains?: Maybe<Scalars['String']>;
  b2CBlockName_not_ends_with?: Maybe<Scalars['String']>;
  b2CBlockName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CBlockName_not_starts_with?: Maybe<Scalars['String']>;
  b2CBlockName_starts_with?: Maybe<Scalars['String']>;
  b2CSubtypeId?: Maybe<Scalars['String']>;
  b2CSubtypeId_contains?: Maybe<Scalars['String']>;
  b2CSubtypeId_ends_with?: Maybe<Scalars['String']>;
  b2CSubtypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CSubtypeId_not?: Maybe<Scalars['String']>;
  b2CSubtypeId_not_contains?: Maybe<Scalars['String']>;
  b2CSubtypeId_not_ends_with?: Maybe<Scalars['String']>;
  b2CSubtypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CSubtypeId_not_starts_with?: Maybe<Scalars['String']>;
  b2CSubtypeId_starts_with?: Maybe<Scalars['String']>;
  buyerFullname?: Maybe<Scalars['String']>;
  buyerFullname_contains?: Maybe<Scalars['String']>;
  buyerFullname_ends_with?: Maybe<Scalars['String']>;
  buyerFullname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  buyerFullname_not?: Maybe<Scalars['String']>;
  buyerFullname_not_contains?: Maybe<Scalars['String']>;
  buyerFullname_not_ends_with?: Maybe<Scalars['String']>;
  buyerFullname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  buyerFullname_not_starts_with?: Maybe<Scalars['String']>;
  buyerFullname_starts_with?: Maybe<Scalars['String']>;
  consultantStaffFullname?: Maybe<Scalars['String']>;
  consultantStaffFullname_contains?: Maybe<Scalars['String']>;
  consultantStaffFullname_ends_with?: Maybe<Scalars['String']>;
  consultantStaffFullname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  consultantStaffFullname_not?: Maybe<Scalars['String']>;
  consultantStaffFullname_not_contains?: Maybe<Scalars['String']>;
  consultantStaffFullname_not_ends_with?: Maybe<Scalars['String']>;
  consultantStaffFullname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  consultantStaffFullname_not_starts_with?: Maybe<Scalars['String']>;
  consultantStaffFullname_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<BookingTransactionToAssignConsultantDtoFilter>>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionDatetime_gt?: Maybe<Scalars['Long']>;
  transactionDatetime_gte?: Maybe<Scalars['Long']>;
  transactionDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  transactionDatetime_lt?: Maybe<Scalars['Long']>;
  transactionDatetime_lte?: Maybe<Scalars['Long']>;
  transactionDatetime_not?: Maybe<Scalars['Long']>;
  transactionDatetime_not_gt?: Maybe<Scalars['Long']>;
  transactionDatetime_not_gte?: Maybe<Scalars['Long']>;
  transactionDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  transactionDatetime_not_lt?: Maybe<Scalars['Long']>;
  transactionDatetime_not_lte?: Maybe<Scalars['Long']>;
  transactionStatusId?: Maybe<Scalars['String']>;
  transactionStatusId_contains?: Maybe<Scalars['String']>;
  transactionStatusId_ends_with?: Maybe<Scalars['String']>;
  transactionStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatusId_not?: Maybe<Scalars['String']>;
  transactionStatusId_not_contains?: Maybe<Scalars['String']>;
  transactionStatusId_not_ends_with?: Maybe<Scalars['String']>;
  transactionStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatusId_not_starts_with?: Maybe<Scalars['String']>;
  transactionStatusId_starts_with?: Maybe<Scalars['String']>;
};

export type BookingTransactionToAssignConsultantDtoSort = {
  b2CSubtypeDescription?: Maybe<SortOperationKind>;
  bookingFeeAmount?: Maybe<SortOperationKind>;
  bookingNumber?: Maybe<SortOperationKind>;
  buyerFullname?: Maybe<SortOperationKind>;
  consultantStaffFullname?: Maybe<SortOperationKind>;
  transactionDatetime?: Maybe<SortOperationKind>;
  transactionStatusId?: Maybe<SortOperationKind>;
};

export type BookingTransactionsToAssignConsultantInput = {
  projectId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type BuyerDto = {
  __typename?: 'BuyerDto';
  buyerCode?: Maybe<Scalars['String']>;
  buyerId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<BuyerDto>;
  fullname?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type BuyerInfoDto = {
  __typename?: 'BuyerInfoDto';
  agentCode?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<BuyerInfoDto>;
  contactAddress?: Maybe<Scalars['String']>;
  dob?: Maybe<Timestamp>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  imageSizes?: Maybe<Scalars['String']>;
  isCreatedByAdmin?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isMember?: Maybe<Scalars['Boolean']>;
  isTopener: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumberConfirmed?: Maybe<Scalars['Boolean']>;
  profilePhoto?: Maybe<Scalars['String']>;
  pushNotificationEnable?: Maybe<Scalars['Boolean']>;
  pushNotificationId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userStatus: UserStatus;
};


export type C2CContactTradingByCodeResponse = {
  __typename?: 'C2CContactTradingByCodeResponse';
  contactTrading?: Maybe<C2CContactTradingInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type C2CContactTradingByIdResponse = {
  __typename?: 'C2CContactTradingByIdResponse';
  contactTrading?: Maybe<C2CContactTradingInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type C2CContactTradingContractDto = {
  __typename?: 'C2CContactTradingContractDto';
  attachment?: Maybe<Scalars['String']>;
  buyerCommissionAmount: Scalars['Float'];
  consultantCommissionAmount: Scalars['Float'];
  consultantFee: Scalars['Float'];
  contractNote?: Maybe<Scalars['String']>;
  contractPrice: Scalars['Float'];
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  isActive: Scalars['Boolean'];
  moveInDate?: Maybe<Scalars['Long']>;
  organizerCommissionAmount: Scalars['Float'];
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPeriodUnit: RentPeriodUnit;
  salerCommissionAmount: Scalars['Float'];
  signedDate: Scalars['Long'];
  totalCommission: Scalars['Float'];
  totalCommissionUnit: TotalCommissionUnit;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingContractRequestInput = {
  attachment?: Maybe<Scalars['String']>;
  buyerCommissionAmount?: Maybe<Scalars['Float']>;
  consultantCommissionAmount: Scalars['Float'];
  consultantFee: Scalars['Float'];
  contractNote?: Maybe<Scalars['String']>;
  contractPrice?: Maybe<Scalars['Float']>;
  moveInDate?: Maybe<Scalars['Long']>;
  organizerCommissionAmount?: Maybe<Scalars['Float']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPeriodUnit: RentPeriodUnit;
  salerCommissionAmount: Scalars['Float'];
  signedDate?: Maybe<Scalars['Long']>;
  totalCommission?: Maybe<Scalars['Float']>;
  totalCommissionUnit: TotalCommissionUnit;
};

export type C2CContactTradingDepositAcceptedDto = {
  __typename?: 'C2CContactTradingDepositAcceptedDto';
  contactTradingCode?: Maybe<Scalars['String']>;
  depositorFullName?: Maybe<Scalars['String']>;
};

export type C2CContactTradingDepositDto = {
  __typename?: 'C2CContactTradingDepositDto';
  attachment?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  closingPrice: Scalars['Float'];
  commission?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  commissionUnitId?: Maybe<Scalars['String']>;
  consultantFee: Scalars['Float'];
  contractAttachment?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  depositedAmount: Scalars['Float'];
  depositedDate: Scalars['Long'];
  depositNote?: Maybe<Scalars['String']>;
  depositorEmail?: Maybe<Scalars['String']>;
  depositorIdentityCard?: Maybe<Scalars['String']>;
  depositorName?: Maybe<Scalars['String']>;
  depositorPhoneNumber?: Maybe<Scalars['String']>;
  depositPaymentTermFrom?: Maybe<Scalars['Long']>;
  depositPaymentTermTo?: Maybe<Scalars['Long']>;
  depositStatus: C2CDepositStatus;
  depositTerm: Scalars['Int'];
  depositUpdatedNumber: Scalars['Int'];
  isActive: Scalars['Boolean'];
  moveInDate?: Maybe<Scalars['Long']>;
  notarizationDatetime?: Maybe<Scalars['Long']>;
  notaryOffice?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  paymentProgressDtos?: Maybe<Array<Maybe<C2c_Contact_Trading_PaymentProgressDto>>>;
  recipientEmail?: Maybe<Scalars['String']>;
  recipientIdentityCard?: Maybe<Scalars['String']>;
  recipientName?: Maybe<Scalars['String']>;
  recipientPhoneNumber?: Maybe<Scalars['String']>;
  rejectReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPeriodUnit: RentPeriodUnit;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingDepositRequestInput = {
  attachment?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  closingPrice: Scalars['Float'];
  commission: Scalars['Float'];
  commissionUnitId?: Maybe<Scalars['String']>;
  consultantFee?: Maybe<Scalars['Float']>;
  contractAttachment?: Maybe<Scalars['String']>;
  depositedAmount: Scalars['Float'];
  depositedDate: Scalars['Long'];
  depositNote?: Maybe<Scalars['String']>;
  depositorEmail?: Maybe<Scalars['String']>;
  depositorIdentityCard?: Maybe<Scalars['String']>;
  depositorName?: Maybe<Scalars['String']>;
  depositorPhoneNumber?: Maybe<Scalars['String']>;
  depositStatus?: Maybe<Scalars['String']>;
  depositTerm?: Maybe<Scalars['Int']>;
  notarizationDatetime: Scalars['Long'];
  notaryOffice?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  paymentProgressDtoJson?: Maybe<Scalars['String']>;
  recipientEmail?: Maybe<Scalars['String']>;
  recipientIdentityCard?: Maybe<Scalars['String']>;
  recipientName?: Maybe<Scalars['String']>;
  recipientPhoneNumber?: Maybe<Scalars['String']>;
};

export type C2CContactTradingDto = {
  __typename?: 'C2CContactTradingDto';
  agentOwnerId?: Maybe<Scalars['String']>;
  assigneeAvatars?: Maybe<Scalars['String']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneePhoneNumber?: Maybe<Scalars['String']>;
  assigneeStaffGroupId?: Maybe<Scalars['String']>;
  assigneeUserName?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatusDescription?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactType: C2CContactTradingType;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  deposit?: Maybe<C2CContactTradingDepositDto>;
  depositStatus: C2CDepositStatus;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  negotiationDate?: Maybe<Scalars['Long']>;
  negotiationDescription?: Maybe<Scalars['String']>;
  negotiationPrice: Scalars['Float'];
  negotiationStatus: C2CNegotiationStatus;
  pendingCompensationAmount: Scalars['Float'];
  pendingNote?: Maybe<Scalars['String']>;
  pendingReason?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  propertyPrice: Scalars['Float'];
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsAgency: Scalars['Boolean'];
  requesterLastContact?: Maybe<Scalars['Long']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingDtoFilter = {
  agentOwnerId?: Maybe<Scalars['String']>;
  agentOwnerId_contains?: Maybe<Scalars['String']>;
  agentOwnerId_ends_with?: Maybe<Scalars['String']>;
  agentOwnerId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentOwnerId_not?: Maybe<Scalars['String']>;
  agentOwnerId_not_contains?: Maybe<Scalars['String']>;
  agentOwnerId_not_ends_with?: Maybe<Scalars['String']>;
  agentOwnerId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentOwnerId_not_starts_with?: Maybe<Scalars['String']>;
  agentOwnerId_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<C2CContactTradingDtoFilter>>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneeId_contains?: Maybe<Scalars['String']>;
  assigneeId_ends_with?: Maybe<Scalars['String']>;
  assigneeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not?: Maybe<Scalars['String']>;
  assigneeId_not_contains?: Maybe<Scalars['String']>;
  assigneeId_not_ends_with?: Maybe<Scalars['String']>;
  assigneeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not_starts_with?: Maybe<Scalars['String']>;
  assigneeId_starts_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_contains?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_ends_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeStaffGroupId_not?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_not_contains?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_not_ends_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeStaffGroupId_not_starts_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_starts_with?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingArea_gt?: Maybe<Scalars['Float']>;
  buildingArea_gte?: Maybe<Scalars['Float']>;
  buildingArea_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  buildingArea_lt?: Maybe<Scalars['Float']>;
  buildingArea_lte?: Maybe<Scalars['Float']>;
  buildingArea_not?: Maybe<Scalars['Float']>;
  buildingArea_not_gt?: Maybe<Scalars['Float']>;
  buildingArea_not_gte?: Maybe<Scalars['Float']>;
  buildingArea_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  buildingArea_not_lt?: Maybe<Scalars['Float']>;
  buildingArea_not_lte?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingCode_contains?: Maybe<Scalars['String']>;
  contactTradingCode_ends_with?: Maybe<Scalars['String']>;
  contactTradingCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingCode_not?: Maybe<Scalars['String']>;
  contactTradingCode_not_contains?: Maybe<Scalars['String']>;
  contactTradingCode_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingCode_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingCode_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactTradingStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusId_not?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_starts_with?: Maybe<Scalars['String']>;
  contactType?: Maybe<C2CContactTradingType>;
  contactType_gt?: Maybe<C2CContactTradingType>;
  contactType_gte?: Maybe<C2CContactTradingType>;
  contactType_in?: Maybe<Array<C2CContactTradingType>>;
  contactType_lt?: Maybe<C2CContactTradingType>;
  contactType_lte?: Maybe<C2CContactTradingType>;
  contactType_not?: Maybe<C2CContactTradingType>;
  contactType_not_gt?: Maybe<C2CContactTradingType>;
  contactType_not_gte?: Maybe<C2CContactTradingType>;
  contactType_not_in?: Maybe<Array<C2CContactTradingType>>;
  contactType_not_lt?: Maybe<C2CContactTradingType>;
  contactType_not_lte?: Maybe<C2CContactTradingType>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerEmail_contains?: Maybe<Scalars['String']>;
  customerEmail_ends_with?: Maybe<Scalars['String']>;
  customerEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerEmail_not?: Maybe<Scalars['String']>;
  customerEmail_not_contains?: Maybe<Scalars['String']>;
  customerEmail_not_ends_with?: Maybe<Scalars['String']>;
  customerEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerEmail_not_starts_with?: Maybe<Scalars['String']>;
  customerEmail_starts_with?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerFullName_contains?: Maybe<Scalars['String']>;
  customerFullName_ends_with?: Maybe<Scalars['String']>;
  customerFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFullName_not?: Maybe<Scalars['String']>;
  customerFullName_not_contains?: Maybe<Scalars['String']>;
  customerFullName_not_ends_with?: Maybe<Scalars['String']>;
  customerFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFullName_not_starts_with?: Maybe<Scalars['String']>;
  customerFullName_starts_with?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  customerPhoneNumber_contains?: Maybe<Scalars['String']>;
  customerPhoneNumber_ends_with?: Maybe<Scalars['String']>;
  customerPhoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerPhoneNumber_not?: Maybe<Scalars['String']>;
  customerPhoneNumber_not_contains?: Maybe<Scalars['String']>;
  customerPhoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  customerPhoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerPhoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  customerPhoneNumber_starts_with?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Scalars['Int']>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Scalars['Int']>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<C2CContactTradingDtoFilter>>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyCode_contains?: Maybe<Scalars['String']>;
  propertyCode_ends_with?: Maybe<Scalars['String']>;
  propertyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not?: Maybe<Scalars['String']>;
  propertyCode_not_contains?: Maybe<Scalars['String']>;
  propertyCode_not_ends_with?: Maybe<Scalars['String']>;
  propertyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not_starts_with?: Maybe<Scalars['String']>;
  propertyCode_starts_with?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostId_contains?: Maybe<Scalars['String']>;
  propertyPostId_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not?: Maybe<Scalars['String']>;
  propertyPostId_not_contains?: Maybe<Scalars['String']>;
  propertyPostId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostId_starts_with?: Maybe<Scalars['String']>;
  propertyPrice?: Maybe<Scalars['Float']>;
  propertyPrice_gt?: Maybe<Scalars['Float']>;
  propertyPrice_gte?: Maybe<Scalars['Float']>;
  propertyPrice_in?: Maybe<Array<Scalars['Float']>>;
  propertyPrice_lt?: Maybe<Scalars['Float']>;
  propertyPrice_lte?: Maybe<Scalars['Float']>;
  propertyPrice_not?: Maybe<Scalars['Float']>;
  propertyPrice_not_gt?: Maybe<Scalars['Float']>;
  propertyPrice_not_gte?: Maybe<Scalars['Float']>;
  propertyPrice_not_in?: Maybe<Array<Scalars['Float']>>;
  propertyPrice_not_lt?: Maybe<Scalars['Float']>;
  propertyPrice_not_lte?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterEmail_contains?: Maybe<Scalars['String']>;
  requesterEmail_ends_with?: Maybe<Scalars['String']>;
  requesterEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterEmail_not?: Maybe<Scalars['String']>;
  requesterEmail_not_contains?: Maybe<Scalars['String']>;
  requesterEmail_not_ends_with?: Maybe<Scalars['String']>;
  requesterEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterEmail_not_starts_with?: Maybe<Scalars['String']>;
  requesterEmail_starts_with?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterFullName_contains?: Maybe<Scalars['String']>;
  requesterFullName_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not?: Maybe<Scalars['String']>;
  requesterFullName_not_contains?: Maybe<Scalars['String']>;
  requesterFullName_not_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not_starts_with?: Maybe<Scalars['String']>;
  requesterFullName_starts_with?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterId_contains?: Maybe<Scalars['String']>;
  requesterId_ends_with?: Maybe<Scalars['String']>;
  requesterId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterId_not?: Maybe<Scalars['String']>;
  requesterId_not_contains?: Maybe<Scalars['String']>;
  requesterId_not_ends_with?: Maybe<Scalars['String']>;
  requesterId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterId_not_starts_with?: Maybe<Scalars['String']>;
  requesterId_starts_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterPhoneNumber_contains?: Maybe<Scalars['String']>;
  requesterPhoneNumber_ends_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterPhoneNumber_not?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_contains?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterPhoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingDtoSort = {
  contactTradingCode?: Maybe<SortOperationKind>;
  contactTradingId?: Maybe<SortOperationKind>;
  contactTradingStatusId?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type C2CContactTradingHistoryDto = {
  __typename?: 'C2CContactTradingHistoryDto';
  contactTradingHistoryId?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  newData?: Maybe<Scalars['String']>;
  oldData?: Maybe<Scalars['String']>;
  updateType?: Maybe<Scalars['String']>;
};

export type C2CContactTradingHistoryDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type C2CContactTradingInfoDto = {
  __typename?: 'C2CContactTradingInfoDto';
  agentOwnerId?: Maybe<Scalars['String']>;
  assigneeEmail?: Maybe<Scalars['String']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneePhoneNumber?: Maybe<Scalars['String']>;
  assigneeProfilePhoto?: Maybe<Scalars['String']>;
  assigneeStaffGroupDescription?: Maybe<Scalars['String']>;
  assigneeStaffGroupName?: Maybe<Scalars['String']>;
  assigneeUserName?: Maybe<Scalars['String']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactType: C2CContactTradingType;
  contract?: Maybe<C2CContactTradingContractDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  deposit?: Maybe<C2CContactTradingDepositDto>;
  isActive: Scalars['Boolean'];
  negotiation?: Maybe<C2CContactTradingNegotiationDto>;
  negotiationDate?: Maybe<Scalars['Long']>;
  negotiationDescription?: Maybe<Scalars['String']>;
  negotiationPrice?: Maybe<Scalars['Float']>;
  negotiationUpdatedNumber?: Maybe<Scalars['Int']>;
  pendingCompensationAmount?: Maybe<Scalars['Float']>;
  pendingNote?: Maybe<Scalars['String']>;
  pendingReason?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  recordVersion: Scalars['Int'];
  rejectReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsAgency: Scalars['Boolean'];
  requesterIsBuyer?: Maybe<Scalars['Boolean']>;
  requesterLastContact?: Maybe<Scalars['Long']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterProfilePhoto?: Maybe<Scalars['String']>;
  serviceBonus?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingInfoForPropertyPostDto = {
  __typename?: 'C2CContactTradingInfoForPropertyPostDto';
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatus?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingInfoForPropertyPostDtoSort = {
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type C2CContactTradingNegotiationDto = {
  __typename?: 'C2CContactTradingNegotiationDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  negotiatedDate: Scalars['Long'];
  negotiationCommission?: Maybe<Scalars['Float']>;
  negotiationCommissionBuyer?: Maybe<Scalars['Float']>;
  negotiationCommissionSeller?: Maybe<Scalars['Float']>;
  negotiationCommissionUnitId?: Maybe<Scalars['String']>;
  negotiationNote?: Maybe<Scalars['String']>;
  negotiationPrice: Scalars['Float'];
  negotiationRejectReasonDescription?: Maybe<Scalars['String']>;
  negotiationRejectReasonId?: Maybe<Scalars['String']>;
  negotiationRequesterId?: Maybe<Scalars['String']>;
  negotiationStatus: C2CNegotiationStatus;
  negotiationUpdatedNumber: Scalars['Int'];
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CContactTradingRequesterEmailInfoDto = {
  __typename?: 'C2CContactTradingRequesterEmailInfoDto';
  customerEmail?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
};

export type C2CContactTradingRequesterPhoneInfoDto = {
  __typename?: 'C2CContactTradingRequesterPhoneInfoDto';
  customerPhoneNumber?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
};

export type C2CContactTradingTotalCountPerStatusV2Input = {
  filterConsultantAssigneeId?: Maybe<Scalars['String']>;
  filterConsultantStaffGroupId?: Maybe<Scalars['String']>;
  filterContactType: C2CContactTradingType;
  filterCreatedByUserId?: Maybe<Scalars['String']>;
  filterCustomerSupportAssigneeId?: Maybe<Scalars['String']>;
  filterCustomerSupportStaffGroupId?: Maybe<Scalars['String']>;
};

export enum C2CContactTradingType {
  Buy = 'BUY',
  Rent = 'RENT'
}

export type C2CContactTradingsInput = {
  assigneeId?: Maybe<Scalars['Uuid']>;
  assigneeStaffGroupId?: Maybe<Scalars['Uuid']>;
  cityId?: Maybe<Scalars['Int']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactType?: Maybe<C2CContactTradingType>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  depositStatus?: Maybe<C2CDepositStatus>;
  districtId?: Maybe<Scalars['Int']>;
  negotiationStatus?: Maybe<C2CNegotiationStatus>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['Uuid']>;
  rangeCreatedDatetimeJson?: Maybe<Scalars['String']>;
  rangePriceJson?: Maybe<Scalars['String']>;
  rangeSquareJson?: Maybe<Scalars['String']>;
};

export type C2CDemandContactTradingDto = {
  __typename?: 'C2CDemandContactTradingDto';
  c2CDemandCode?: Maybe<Scalars['String']>;
  c2CDemandId?: Maybe<Scalars['String']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type C2CDemandContactTradingDtoSort = {
  c2CDemandCode?: Maybe<SortOperationKind>;
  contactTradingCode?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
};

export type C2CDemandDto = {
  __typename?: 'C2CDemandDto';
  c2CDemandCode?: Maybe<Scalars['String']>;
  c2CDemandId?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  directionJson?: Maybe<Scalars['String']>;
  forSale: Scalars['Boolean'];
  isInterested: Scalars['Boolean'];
  isUserReadNotification: Scalars['Boolean'];
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  placeDto?: Maybe<PlaceDto>;
  placeJson?: Maybe<Scalars['String']>;
  priceRangeDto?: Maybe<PriceRangeDto>;
  priceRangeJson?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyLocation: PropertyLocation;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsBuyer: Scalars['Boolean'];
  squareRangeDto?: Maybe<SquareRangeDto>;
  squareRangeJson?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CDemandDtoFilter = {
  AND?: Maybe<Array<C2CDemandDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<C2CDemandDtoFilter>>;
};

export type C2CDemandDtoSort = {
  c2CDemandCode?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  forSale?: Maybe<SortOperationKind>;
  propertyTypeId?: Maybe<SortOperationKind>;
  title?: Maybe<SortOperationKind>;
};

export type C2CDepositRejectReasonDto = {
  __typename?: 'C2CDepositRejectReasonDto';
  c2CDepositRejectReasonId?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type C2CDepositRejectReasonDtoFilter = {
  AND?: Maybe<Array<C2CDepositRejectReasonDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<C2CDepositRejectReasonDtoFilter>>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonDescription_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  rejectReasonName_contains?: Maybe<Scalars['String']>;
  rejectReasonName_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not?: Maybe<Scalars['String']>;
  rejectReasonName_not_contains?: Maybe<Scalars['String']>;
  rejectReasonName_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type C2CDepositRejectReasonDtoSort = {
  isActive?: Maybe<SortOperationKind>;
  rejectReasonDescription?: Maybe<SortOperationKind>;
  rejectReasonName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export enum C2CDepositStatus {
  Depositsent = 'DEPOSITSENT',
  Depositaccepted = 'DEPOSITACCEPTED',
  Depositrejected = 'DEPOSITREJECTED',
  Depositsignedcontract = 'DEPOSITSIGNEDCONTRACT'
}

export type C2CNegotiationRejectReasonDto = {
  __typename?: 'C2CNegotiationRejectReasonDto';
  c2CNegotiationRejectReasonId?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type C2CNegotiationRejectReasonDtoFilter = {
  AND?: Maybe<Array<C2CNegotiationRejectReasonDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<C2CNegotiationRejectReasonDtoFilter>>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonDescription_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  rejectReasonName_contains?: Maybe<Scalars['String']>;
  rejectReasonName_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not?: Maybe<Scalars['String']>;
  rejectReasonName_not_contains?: Maybe<Scalars['String']>;
  rejectReasonName_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type C2CNegotiationRejectReasonDtoSort = {
  isActive?: Maybe<SortOperationKind>;
  rejectReasonDescription?: Maybe<SortOperationKind>;
  rejectReasonName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export enum C2CNegotiationStatus {
  Negotiationsent = 'NEGOTIATIONSENT',
  Negotiationaccepted = 'NEGOTIATIONACCEPTED',
  Negotiationrejected = 'NEGOTIATIONREJECTED'
}

export type C2CPanoramaImageDto = {
  __typename?: 'C2CPanoramaImageDto';
  c2CPropertyPostCode?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  deletedByUserId?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName?: Maybe<Scalars['String']>;
  panoramaImageCode?: Maybe<Scalars['String']>;
  panoramaImageId?: Maybe<Scalars['String']>;
  panoramaImageJson?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusDescription?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
  propertyPostCreatedByUser?: Maybe<Scalars['String']>;
  propertyPostCreatedDatetime?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['String']>;
};

export type C2CPanoramaImageDtoFilter = {
  AND?: Maybe<Array<C2CPanoramaImageDtoFilter>>;
  c2CPropertyPostCode?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_contains?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_ends_with?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  c2CPropertyPostCode_not?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_not_contains?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_not_ends_with?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  c2CPropertyPostCode_not_starts_with?: Maybe<Scalars['String']>;
  c2CPropertyPostCode_starts_with?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdByUserName_contains?: Maybe<Scalars['String']>;
  createdByUserName_ends_with?: Maybe<Scalars['String']>;
  createdByUserName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserName_not?: Maybe<Scalars['String']>;
  createdByUserName_not_contains?: Maybe<Scalars['String']>;
  createdByUserName_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserName_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserName_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<C2CPanoramaImageDtoFilter>>;
  panoramaImageApprovalStatusId?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusId_not?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_not_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_not_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusId_not_starts_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_starts_with?: Maybe<Scalars['String']>;
  panoramaImageCode?: Maybe<Scalars['String']>;
  panoramaImageCode_contains?: Maybe<Scalars['String']>;
  panoramaImageCode_ends_with?: Maybe<Scalars['String']>;
  panoramaImageCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageCode_not?: Maybe<Scalars['String']>;
  panoramaImageCode_not_contains?: Maybe<Scalars['String']>;
  panoramaImageCode_not_ends_with?: Maybe<Scalars['String']>;
  panoramaImageCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageCode_not_starts_with?: Maybe<Scalars['String']>;
  panoramaImageCode_starts_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_contains?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_ends_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostApprovalStatusId_not?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_not_contains?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostApprovalStatusId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_starts_with?: Maybe<Scalars['String']>;
};

export type C2CPanoramaImageDtoSort = {
  c2CPropertyPostCode?: Maybe<SortOperationKind>;
  createdByUserName?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  panoramaImageApprovalStatusId?: Maybe<SortOperationKind>;
  panoramaImageCode?: Maybe<SortOperationKind>;
  propertyPostApprovalStatusName?: Maybe<SortOperationKind>;
};

export type C2CPostRatingDto = {
  __typename?: 'C2CPostRatingDto';
  c2CPostRatingId?: Maybe<Scalars['String']>;
  c2CPropertyPostId?: Maybe<Scalars['String']>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  notes?: Maybe<Scalars['String']>;
  rating: Scalars['Int'];
};

export type C2CPostRatingDtoFilter = {
  AND?: Maybe<Array<C2CPostRatingDtoFilter>>;
  c2CPostRatingId?: Maybe<Scalars['String']>;
  c2CPostRatingId_contains?: Maybe<Scalars['String']>;
  c2CPostRatingId_ends_with?: Maybe<Scalars['String']>;
  c2CPostRatingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  c2CPostRatingId_not?: Maybe<Scalars['String']>;
  c2CPostRatingId_not_contains?: Maybe<Scalars['String']>;
  c2CPostRatingId_not_ends_with?: Maybe<Scalars['String']>;
  c2CPostRatingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  c2CPostRatingId_not_starts_with?: Maybe<Scalars['String']>;
  c2CPostRatingId_starts_with?: Maybe<Scalars['String']>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserFullName_contains?: Maybe<Scalars['String']>;
  createdByUserFullName_ends_with?: Maybe<Scalars['String']>;
  createdByUserFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserFullName_not?: Maybe<Scalars['String']>;
  createdByUserFullName_not_contains?: Maybe<Scalars['String']>;
  createdByUserFullName_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserFullName_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserFullName_starts_with?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  notes?: Maybe<Scalars['String']>;
  notes_contains?: Maybe<Scalars['String']>;
  notes_ends_with?: Maybe<Scalars['String']>;
  notes_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notes_not?: Maybe<Scalars['String']>;
  notes_not_contains?: Maybe<Scalars['String']>;
  notes_not_ends_with?: Maybe<Scalars['String']>;
  notes_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notes_not_starts_with?: Maybe<Scalars['String']>;
  notes_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<C2CPostRatingDtoFilter>>;
  rating?: Maybe<Scalars['Int']>;
  rating_gt?: Maybe<Scalars['Int']>;
  rating_gte?: Maybe<Scalars['Int']>;
  rating_in?: Maybe<Array<Scalars['Int']>>;
  rating_lt?: Maybe<Scalars['Int']>;
  rating_lte?: Maybe<Scalars['Int']>;
  rating_not?: Maybe<Scalars['Int']>;
  rating_not_gt?: Maybe<Scalars['Int']>;
  rating_not_gte?: Maybe<Scalars['Int']>;
  rating_not_in?: Maybe<Array<Scalars['Int']>>;
  rating_not_lt?: Maybe<Scalars['Int']>;
  rating_not_lte?: Maybe<Scalars['Int']>;
};

export type C2CPostRatingDtoSort = {
  createdByUserId?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  notes?: Maybe<SortOperationKind>;
  rating?: Maybe<SortOperationKind>;
};

export type C2CPropertyPostCommissionConfigDto = {
  __typename?: 'C2CPropertyPostCommissionConfigDto';
  c2CPropertyPostCommissionId?: Maybe<Scalars['String']>;
  commissionConfigName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  endDate?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  platformFeeBasedOnCommission?: Maybe<Scalars['Float']>;
  platformFeeMinimumBasedOnSellingPrice?: Maybe<Scalars['Float']>;
  shareCommissionConsultant?: Maybe<Scalars['Float']>;
  shareCommissionTpl?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['Long']>;
  transactionCommissionTpl?: Maybe<Scalars['Float']>;
};

export type C2CPropertyPostCommissionConfigDtoFilter = {
  AND?: Maybe<Array<C2CPropertyPostCommissionConfigDtoFilter>>;
  commissionConfigName?: Maybe<Scalars['String']>;
  commissionConfigName_contains?: Maybe<Scalars['String']>;
  commissionConfigName_ends_with?: Maybe<Scalars['String']>;
  commissionConfigName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissionConfigName_not?: Maybe<Scalars['String']>;
  commissionConfigName_not_contains?: Maybe<Scalars['String']>;
  commissionConfigName_not_ends_with?: Maybe<Scalars['String']>;
  commissionConfigName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commissionConfigName_not_starts_with?: Maybe<Scalars['String']>;
  commissionConfigName_starts_with?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Long']>;
  endDate_gt?: Maybe<Scalars['Long']>;
  endDate_gte?: Maybe<Scalars['Long']>;
  endDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  endDate_lt?: Maybe<Scalars['Long']>;
  endDate_lte?: Maybe<Scalars['Long']>;
  endDate_not?: Maybe<Scalars['Long']>;
  endDate_not_gt?: Maybe<Scalars['Long']>;
  endDate_not_gte?: Maybe<Scalars['Long']>;
  endDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  endDate_not_lt?: Maybe<Scalars['Long']>;
  endDate_not_lte?: Maybe<Scalars['Long']>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<C2CPropertyPostCommissionConfigDtoFilter>>;
  shareCommissionConsultant?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_gt?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_gte?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  shareCommissionConsultant_lt?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_lte?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_not?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_not_gt?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_not_gte?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  shareCommissionConsultant_not_lt?: Maybe<Scalars['Float']>;
  shareCommissionConsultant_not_lte?: Maybe<Scalars['Float']>;
  shareCommissionTpl?: Maybe<Scalars['Float']>;
  shareCommissionTpl_gt?: Maybe<Scalars['Float']>;
  shareCommissionTpl_gte?: Maybe<Scalars['Float']>;
  shareCommissionTpl_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  shareCommissionTpl_lt?: Maybe<Scalars['Float']>;
  shareCommissionTpl_lte?: Maybe<Scalars['Float']>;
  shareCommissionTpl_not?: Maybe<Scalars['Float']>;
  shareCommissionTpl_not_gt?: Maybe<Scalars['Float']>;
  shareCommissionTpl_not_gte?: Maybe<Scalars['Float']>;
  shareCommissionTpl_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  shareCommissionTpl_not_lt?: Maybe<Scalars['Float']>;
  shareCommissionTpl_not_lte?: Maybe<Scalars['Float']>;
  startDate?: Maybe<Scalars['Long']>;
  startDate_gt?: Maybe<Scalars['Long']>;
  startDate_gte?: Maybe<Scalars['Long']>;
  startDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  startDate_lt?: Maybe<Scalars['Long']>;
  startDate_lte?: Maybe<Scalars['Long']>;
  startDate_not?: Maybe<Scalars['Long']>;
  startDate_not_gt?: Maybe<Scalars['Long']>;
  startDate_not_gte?: Maybe<Scalars['Long']>;
  startDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  startDate_not_lt?: Maybe<Scalars['Long']>;
  startDate_not_lte?: Maybe<Scalars['Long']>;
};

export type C2CPropertyPostCommissionTplConfigByDateResponse = {
  __typename?: 'C2CPropertyPostCommissionTPLConfigByDateResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<C2CPropertyPostCommissionTplConfigByDateResponse>;
  commissionConfigDto?: Maybe<C2CPropertyPostCommissionConfigDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  transactionCommissionTpl?: Maybe<Scalars['Float']>;
};

export type C2CPropertyPostGuaranteedPackageDto = {
  __typename?: 'C2CPropertyPostGuaranteedPackageDto';
  c2CPropertyPostGuaranteedPackageId?: Maybe<Scalars['String']>;
  contractDocument?: Maybe<Scalars['String']>;
  contractPrepaymentAmount?: Maybe<Scalars['Float']>;
  contractRefuseDatetime?: Maybe<Scalars['Long']>;
  contractRefuseNote?: Maybe<Scalars['String']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  contractStatus: PostContractStatus;
  guaranteedPackageEndTime?: Maybe<Scalars['Long']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  guaranteedPackagePrepaymentRate?: Maybe<Scalars['Float']>;
  guaranteedPackageStartTime?: Maybe<Scalars['Long']>;
  guaranteedPackageValidMonths?: Maybe<Scalars['Int']>;
  paymentStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  requestUpdate?: Maybe<Scalars['Boolean']>;
  requestUpdateReason?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CPropertyPostMutationResponse = {
  __typename?: 'C2CPropertyPostMutationResponse';
  badWordListDto?: Maybe<Array<Maybe<CheckBadWordResult>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type C2CPropertyPostRejectReasonDto = {
  __typename?: 'C2CPropertyPostRejectReasonDto';
  c2CPropertyPostRejectReasonId?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  deletedByUserId?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  rejectReasonCode?: Maybe<Scalars['String']>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type C2CPropertyPostRejectReasonDtoFilter = {
  AND?: Maybe<Array<C2CPropertyPostRejectReasonDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<C2CPropertyPostRejectReasonDtoFilter>>;
  rejectReasonCode?: Maybe<Scalars['String']>;
  rejectReasonCode_contains?: Maybe<Scalars['String']>;
  rejectReasonCode_ends_with?: Maybe<Scalars['String']>;
  rejectReasonCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonCode_not?: Maybe<Scalars['String']>;
  rejectReasonCode_not_contains?: Maybe<Scalars['String']>;
  rejectReasonCode_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonCode_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonCode_starts_with?: Maybe<Scalars['String']>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonDescription_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_starts_with?: Maybe<Scalars['String']>;
};

export type C2CPropertyPostRejectReasonDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  isActive?: Maybe<SortOperationKind>;
  rejectReasonCode?: Maybe<SortOperationKind>;
  rejectReasonDescription?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type C2CPropertyPostViewedDto = {
  __typename?: 'C2CPropertyPostViewedDto';
  buildingArea?: Maybe<Scalars['Float']>;
  detailPathForRent?: Maybe<Scalars['String']>;
  detailPathForSale?: Maybe<Scalars['String']>;
  direction: Direction;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  images?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  lastedViewTime?: Maybe<Scalars['Long']>;
  postTitle?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  propertyAddress?: Maybe<PropertyAddressInfoDto>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type CToCPropertyPostAuditHistoryDto = {
  __typename?: 'CToCPropertyPostAuditHistoryDto';
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  newData?: Maybe<Scalars['String']>;
  oldData?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUpdateHistoryId?: Maybe<Scalars['String']>;
  updateType?: Maybe<Scalars['String']>;
};

export type CToCPropertyPostAuditHistoryDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type ChangeExecutorServiceTicketForFrontOfficeResponse = {
  __typename?: 'ChangeExecutorServiceTicketForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ChangeExecutorServiceTicketInput = {
  executorId?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
};

export type ChangeGroupForAgentInput = {
  agentGroupId?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type ChangeGroupForAgentResponse = {
  __typename?: 'ChangeGroupForAgentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ChangePushNotificationModeInput = {
  isEnable?: Maybe<Scalars['Boolean']>;
};

export type ChangePushNotificationModeResponse = {
  __typename?: 'ChangePushNotificationModeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ChangeStateOfServiceTicketForFrontOfficeResponse = {
  __typename?: 'ChangeStateOfServiceTicketForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ChangeStateOfServiceTicketInput = {
  nextStateId?: Maybe<Scalars['String']>;
  reasonId?: Maybe<Scalars['String']>;
  reasonNote?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
};

export type CheckAnyInProgressContactTradingInGroupResponse = {
  __typename?: 'CheckAnyInProgressContactTradingInGroupResponse';
  anyInProgressContactTrading: Scalars['Boolean'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckB2CDepositCanUpdateCustomerInfoResponse = {
  __typename?: 'CheckB2CDepositCanUpdateCustomerInfoResponse';
  allowUpdateCustomer?: Maybe<Scalars['Boolean']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<CheckB2CDepositCanUpdateCustomerInfoResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckBadWordResult = {
  __typename?: 'CheckBadWordResult';
  badWords?: Maybe<Array<Maybe<Scalars['String']>>>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<CheckBadWordResult>;
  highlightedContent?: Maybe<Scalars['String']>;
  originalContent?: Maybe<Scalars['String']>;
};

export type CheckContactTradingB2CNotificationResponse = {
  __typename?: 'CheckContactTradingB2CNotificationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isValid?: Maybe<Scalars['Boolean']>;
};

export type CheckContactTradingByIdInput = {
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type CheckContactTradingByIdResponse = {
  __typename?: 'CheckContactTradingByIdResponse';
  buy?: Maybe<Scalars['Boolean']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<CheckContactTradingByIdResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  rent?: Maybe<Scalars['Boolean']>;
};

export type CheckCurrentUserInAgentAssignedBySaleSeasonIdInput = {
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type CheckCurrentUserInAgentAssignedBySaleSeasonIdResponse = {
  __typename?: 'CheckCurrentUserInAgentAssignedBySaleSeasonIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isExist: Scalars['Boolean'];
};

export type CheckCurrentUserIsSaleAgentInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type CheckCurrentUserIsSaleAgentResponse = {
  __typename?: 'CheckCurrentUserIsSaleAgentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isSaleAgent: Scalars['Boolean'];
};

export type CheckFollowTopenerDto = {
  __typename?: 'CheckFollowTopenerDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<CheckFollowTopenerDto>;
  isFollow: Scalars['Boolean'];
  topenerId?: Maybe<Scalars['String']>;
};

export type CheckFollowTopenersByCurrentUserForFrontOfficeResponse = {
  __typename?: 'CheckFollowTopenersByCurrentUserForFrontOfficeResponse';
  checkFollowTopeners?: Maybe<Array<Maybe<CheckFollowTopenerDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckLockPropertyPostForDepositResponse = {
  __typename?: 'CheckLockPropertyPostForDepositResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isLocked: Scalars['Boolean'];
};

export type CheckLoggedInUserIsSaleAgentInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type CheckLoggedInUserIsSaleAgentResponse = {
  __typename?: 'CheckLoggedInUserIsSaleAgentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isSaleAgent: Scalars['Boolean'];
};

export type CheckMobileAppVersionStableInput = {
  mobileOs?: Maybe<Scalars['String']>;
  mobileVersion?: Maybe<Scalars['String']>;
};

export type CheckMobileAppVersionStableResponse = {
  __typename?: 'CheckMobileAppVersionStableResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  mobileAppVersionStable?: Maybe<MobileAppVersionStable>;
};

export type CheckPropertyPostAvailableForBookingBySeasonIdInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type CheckPropertyPostAvailableForBookingBySeasonIdResponse = {
  __typename?: 'CheckPropertyPostAvailableForBookingBySeasonIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isAvailable: Scalars['Boolean'];
};

export type CheckPropertyPostHasC2CContactTradingDepositedResponse = {
  __typename?: 'CheckPropertyPostHasC2CContactTradingDepositedResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckPropertyPostHasContactTradingDepositedResponse = {
  __typename?: 'CheckPropertyPostHasContactTradingDepositedResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckPropertyPostLockedForBookingBySeasonIdInput = {
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type CheckPropertyPostLockedForBookingBySeasonIdResponse = {
  __typename?: 'CheckPropertyPostLockedForBookingBySeasonIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isLocked: Scalars['Boolean'];
  openDatetime?: Maybe<Scalars['Long']>;
};

export type CheckPropertyPostUpdateC2CContactTradingStatusResponse = {
  __typename?: 'CheckPropertyPostUpdateC2CContactTradingStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckPropertyPostUpdateContactTradingStatusResponse = {
  __typename?: 'CheckPropertyPostUpdateContactTradingStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CheckUsernameValidResponse = {
  __typename?: 'CheckUsernameValidResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CityDto = {
  __typename?: 'CityDto';
  area?: Maybe<Scalars['String']>;
  areaCode?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  cityType?: Maybe<Scalars['String']>;
  countryId: Scalars['Int'];
  density?: Maybe<Scalars['String']>;
  gdp?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isCapital: Scalars['Boolean'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  path?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  timeZone?: Maybe<Scalars['String']>;
};

export type CityDtoFilter = {
  AND?: Maybe<Array<CityDtoFilter>>;
  area?: Maybe<Scalars['String']>;
  areaCode?: Maybe<Scalars['String']>;
  areaCode_contains?: Maybe<Scalars['String']>;
  areaCode_ends_with?: Maybe<Scalars['String']>;
  areaCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  areaCode_not?: Maybe<Scalars['String']>;
  areaCode_not_contains?: Maybe<Scalars['String']>;
  areaCode_not_ends_with?: Maybe<Scalars['String']>;
  areaCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  areaCode_not_starts_with?: Maybe<Scalars['String']>;
  areaCode_starts_with?: Maybe<Scalars['String']>;
  area_contains?: Maybe<Scalars['String']>;
  area_ends_with?: Maybe<Scalars['String']>;
  area_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not?: Maybe<Scalars['String']>;
  area_not_contains?: Maybe<Scalars['String']>;
  area_not_ends_with?: Maybe<Scalars['String']>;
  area_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not_starts_with?: Maybe<Scalars['String']>;
  area_starts_with?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  cityName_contains?: Maybe<Scalars['String']>;
  cityName_ends_with?: Maybe<Scalars['String']>;
  cityName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  cityName_not?: Maybe<Scalars['String']>;
  cityName_not_contains?: Maybe<Scalars['String']>;
  cityName_not_ends_with?: Maybe<Scalars['String']>;
  cityName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  cityName_not_starts_with?: Maybe<Scalars['String']>;
  cityName_starts_with?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  countryId_gt?: Maybe<Scalars['Int']>;
  countryId_gte?: Maybe<Scalars['Int']>;
  countryId_in?: Maybe<Array<Scalars['Int']>>;
  countryId_lt?: Maybe<Scalars['Int']>;
  countryId_lte?: Maybe<Scalars['Int']>;
  countryId_not?: Maybe<Scalars['Int']>;
  countryId_not_gt?: Maybe<Scalars['Int']>;
  countryId_not_gte?: Maybe<Scalars['Int']>;
  countryId_not_in?: Maybe<Array<Scalars['Int']>>;
  countryId_not_lt?: Maybe<Scalars['Int']>;
  countryId_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<CityDtoFilter>>;
};

export type CityDtoSort = {
  area?: Maybe<SortOperationKind>;
  areaCode?: Maybe<SortOperationKind>;
  cityName?: Maybe<SortOperationKind>;
};

export type CityInfoDto = {
  __typename?: 'CityInfoDto';
  area?: Maybe<Scalars['String']>;
  areaCode?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  cityType?: Maybe<Scalars['String']>;
  countryId: Scalars['Int'];
  density?: Maybe<Scalars['String']>;
  gdp?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isCapital: Scalars['Boolean'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  path?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  timeZone?: Maybe<Scalars['String']>;
};

export type CloseContactTradingB2CResponse = {
  __typename?: 'CloseContactTradingB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ClosePropertyPostInput = {
  customerType: CustomerType;
  phoneNumber?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type CloseSupportRequestFoInput = {
  notes?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CloseSupportRequestFoResponse = {
  __typename?: 'CloseSupportRequestFOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CloseSupportRequestInput = {
  notes?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CloseSupportRequestResponse = {
  __typename?: 'CloseSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CommentApproveReasonDto = {
  __typename?: 'CommentApproveReasonDto';
  commentApproveReasonDescription?: Maybe<Scalars['String']>;
  commentApproveReasonId?: Maybe<Scalars['String']>;
  commentApproveReasonName?: Maybe<Scalars['String']>;
};

export type CommentApproveReasonDtoFilter = {
  AND?: Maybe<Array<CommentApproveReasonDtoFilter>>;
  commentApproveReasonName?: Maybe<Scalars['String']>;
  commentApproveReasonName_contains?: Maybe<Scalars['String']>;
  commentApproveReasonName_ends_with?: Maybe<Scalars['String']>;
  commentApproveReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentApproveReasonName_not?: Maybe<Scalars['String']>;
  commentApproveReasonName_not_contains?: Maybe<Scalars['String']>;
  commentApproveReasonName_not_ends_with?: Maybe<Scalars['String']>;
  commentApproveReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentApproveReasonName_not_starts_with?: Maybe<Scalars['String']>;
  commentApproveReasonName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CommentApproveReasonDtoFilter>>;
};

export type CommentApproveReasonDtoSort = {
  commentApproveReasonName?: Maybe<SortOperationKind>;
};

export type CommentForBackOfficeDto = {
  __typename?: 'CommentForBackOfficeDto';
  commentId?: Maybe<Scalars['String']>;
  commentStatusId?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  feedItemId?: Maybe<Scalars['String']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  feedObjectTypeName?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  linkFeedObject?: Maybe<Scalars['String']>;
  modifiedBy?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  parentCommentId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  replies?: Maybe<Array<Maybe<ReplyForBackOfficeDto>>>;
  statusName?: Maybe<Scalars['String']>;
  totalLike: Scalars['Int'];
  totalReply: Scalars['Int'];
  updatedByUserId?: Maybe<Scalars['String']>;
  userInfo?: Maybe<UserProfileDto>;
};

export type CommentForBackOfficeDtoFilter = {
  AND?: Maybe<Array<CommentForBackOfficeDtoFilter>>;
  commentStatusId?: Maybe<Scalars['String']>;
  commentStatusId_contains?: Maybe<Scalars['String']>;
  commentStatusId_ends_with?: Maybe<Scalars['String']>;
  commentStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentStatusId_not?: Maybe<Scalars['String']>;
  commentStatusId_not_contains?: Maybe<Scalars['String']>;
  commentStatusId_not_ends_with?: Maybe<Scalars['String']>;
  commentStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentStatusId_not_starts_with?: Maybe<Scalars['String']>;
  commentStatusId_starts_with?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectId_contains?: Maybe<Scalars['String']>;
  feedObjectId_ends_with?: Maybe<Scalars['String']>;
  feedObjectId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectId_not?: Maybe<Scalars['String']>;
  feedObjectId_not_contains?: Maybe<Scalars['String']>;
  feedObjectId_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectId_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectId_starts_with?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTitle_contains?: Maybe<Scalars['String']>;
  feedObjectTitle_ends_with?: Maybe<Scalars['String']>;
  feedObjectTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTitle_not?: Maybe<Scalars['String']>;
  feedObjectTitle_not_contains?: Maybe<Scalars['String']>;
  feedObjectTitle_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTitle_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectTitle_starts_with?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  feedObjectTypeId_contains?: Maybe<Scalars['String']>;
  feedObjectTypeId_ends_with?: Maybe<Scalars['String']>;
  feedObjectTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTypeId_not?: Maybe<Scalars['String']>;
  feedObjectTypeId_not_contains?: Maybe<Scalars['String']>;
  feedObjectTypeId_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTypeId_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectTypeId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CommentForBackOfficeDtoFilter>>;
};

export type CommentForBackOfficeDtoSort = {
  content?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  feedObjectTitle?: Maybe<SortOperationKind>;
  lastModified?: Maybe<SortOperationKind>;
  note?: Maybe<SortOperationKind>;
  totalLike?: Maybe<SortOperationKind>;
  totalReply?: Maybe<SortOperationKind>;
};

export type CommentForFrontOfficeDto = {
  __typename?: 'CommentForFrontOfficeDto';
  commentId?: Maybe<Scalars['String']>;
  commentStatusId?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  currentUserLikeComment: Scalars['Boolean'];
  feedItemId?: Maybe<Scalars['String']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  modifiedBy?: Maybe<Scalars['String']>;
  parentCommentId?: Maybe<Scalars['String']>;
  replies?: Maybe<Array<Maybe<ReplyForFrontOfficeDto>>>;
  topReply?: Maybe<ReplyForFrontOfficeDto>;
  totalLike: Scalars['Int'];
  totalReply: Scalars['Int'];
  userInfo?: Maybe<UserProfileDto>;
};

/** A connection to a list of items. */
export type CommentForFrontOfficeDtoConnection = {
  __typename?: 'CommentForFrontOfficeDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<CommentForFrontOfficeDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<CommentForFrontOfficeDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type CommentForFrontOfficeDtoEdge = {
  __typename?: 'CommentForFrontOfficeDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<CommentForFrontOfficeDto>;
};

export type CommentRejectReasonDto = {
  __typename?: 'CommentRejectReasonDto';
  commentRejectReasonDescription?: Maybe<Scalars['String']>;
  commentRejectReasonId?: Maybe<Scalars['String']>;
  commentRejectReasonName?: Maybe<Scalars['String']>;
};

export type CommentRejectReasonDtoFilter = {
  AND?: Maybe<Array<CommentRejectReasonDtoFilter>>;
  commentRejectReasonName?: Maybe<Scalars['String']>;
  commentRejectReasonName_contains?: Maybe<Scalars['String']>;
  commentRejectReasonName_ends_with?: Maybe<Scalars['String']>;
  commentRejectReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentRejectReasonName_not?: Maybe<Scalars['String']>;
  commentRejectReasonName_not_contains?: Maybe<Scalars['String']>;
  commentRejectReasonName_not_ends_with?: Maybe<Scalars['String']>;
  commentRejectReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentRejectReasonName_not_starts_with?: Maybe<Scalars['String']>;
  commentRejectReasonName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CommentRejectReasonDtoFilter>>;
};

export type CommentRejectReasonDtoSort = {
  commentRejectReasonName?: Maybe<SortOperationKind>;
};

export type CommentStatusDto = {
  __typename?: 'CommentStatusDto';
  commentStatusDescription?: Maybe<Scalars['String']>;
  commentStatusId?: Maybe<Scalars['String']>;
  commentStatusName?: Maybe<Scalars['String']>;
};

export type CommentStatusDtoFilter = {
  AND?: Maybe<Array<CommentStatusDtoFilter>>;
  commentStatusName?: Maybe<Scalars['String']>;
  commentStatusName_contains?: Maybe<Scalars['String']>;
  commentStatusName_ends_with?: Maybe<Scalars['String']>;
  commentStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentStatusName_not?: Maybe<Scalars['String']>;
  commentStatusName_not_contains?: Maybe<Scalars['String']>;
  commentStatusName_not_ends_with?: Maybe<Scalars['String']>;
  commentStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  commentStatusName_not_starts_with?: Maybe<Scalars['String']>;
  commentStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CommentStatusDtoFilter>>;
};

export type CommentStatusDtoSort = {
  commentStatusName?: Maybe<SortOperationKind>;
};

export type CommonSupportRequestResponse = {
  __typename?: 'CommonSupportRequestResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<CommonSupportRequestResponse>;
  supportRequestId?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
  supportResults?: Maybe<Scalars['String']>;
};

export type CommonUserInfoDto = {
  __typename?: 'CommonUserInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<CommonUserInfoDto>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  imageSizes?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type CompetencyDto = {
  __typename?: 'CompetencyDto';
  competencyDescription?: Maybe<Scalars['String']>;
  competencyId?: Maybe<Scalars['String']>;
  competencyName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type CompetencyDtoFilter = {
  AND?: Maybe<Array<CompetencyDtoFilter>>;
  competencyName?: Maybe<Scalars['String']>;
  competencyName_contains?: Maybe<Scalars['String']>;
  competencyName_ends_with?: Maybe<Scalars['String']>;
  competencyName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  competencyName_not?: Maybe<Scalars['String']>;
  competencyName_not_contains?: Maybe<Scalars['String']>;
  competencyName_not_ends_with?: Maybe<Scalars['String']>;
  competencyName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  competencyName_not_starts_with?: Maybe<Scalars['String']>;
  competencyName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CompetencyDtoFilter>>;
};

export type CompetencyDtoSort = {
  competencyName?: Maybe<SortOperationKind>;
};

export type CompetencyInfoDto = {
  __typename?: 'CompetencyInfoDto';
  competencyDescription?: Maybe<Scalars['String']>;
  competencyId?: Maybe<Scalars['String']>;
  competencyName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type CompleteC2CContactTradingInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactType: C2CContactTradingType;
  contract?: Maybe<C2CContactTradingContractRequestInput>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type CompleteC2CContactTradingResponse = {
  __typename?: 'CompleteC2CContactTradingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CompleteContactTradingB2CForBoResponse = {
  __typename?: 'CompleteContactTradingB2CForBOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CompleteContactTradingB2CInput = {
  contactTradingB2CId?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
};

export type CompleteContactTradingB2CResponse = {
  __typename?: 'CompleteContactTradingB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CompleteContactTradingInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  contract?: Maybe<ContactTradingContractInput>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type CompleteContactTradingResponse = {
  __typename?: 'CompleteContactTradingResponse';
  contactTradingInfoForTransaction?: Maybe<ContactTradingInfoForTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isContactTradingCompleted: Scalars['Boolean'];
};

export type CompletePaymentDto = {
  __typename?: 'CompletePaymentDto';
  agentId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<CompletePaymentDto>;
  feeAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  supportTypeId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionNumber?: Maybe<Scalars['String']>;
  transactionPaymentStatusId?: Maybe<Scalars['String']>;
};

export type CompletePaymentThirdPartyResponse = {
  __typename?: 'CompletePaymentThirdPartyResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  responseCode?: Maybe<Scalars['String']>;
};

export type CompleteSupportRequestInput = {
  adminId?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CompleteSupportRequestResponse = {
  __typename?: 'CompleteSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type ComplexResizedImageDto = {
  __typename?: 'ComplexResizedImageDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ComplexResizedImageDto>;
  imageSizes?: Maybe<Array<Maybe<ResizedImageDto>>>;
  originalUrl?: Maybe<Scalars['String']>;
};

export type ConsultantAcceptServiceTicketResultInput = {
  c2CPropertyPostId?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
};

export type ConsultantAcceptServiceTicketResultResponse = {
  __typename?: 'ConsultantAcceptServiceTicketResultResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ConsultantDto = {
  __typename?: 'ConsultantDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ConsultantDto>;
  fullName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  staffCode?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
};

export type ConsultantInfoDto = {
  __typename?: 'ConsultantInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ConsultantInfoDto>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  staffCode?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type ConsultantRejectServiceTicketResultInput = {
  reasonId?: Maybe<Scalars['String']>;
  reasonNote?: Maybe<Scalars['String']>;
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
};

export type ConsultantRejectServiceTicketResultResponse = {
  __typename?: 'ConsultantRejectServiceTicketResultResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ContactTradingAssignmentStatusDto = {
  __typename?: 'ContactTradingAssignmentStatusDto';
  contactTradingAssignmentStatusDescription?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type ContactTradingAssignmentStatusDtoFilter = {
  AND?: Maybe<Array<ContactTradingAssignmentStatusDtoFilter>>;
  contactTradingAssignmentStatusDescription?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_contains?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_ends_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingAssignmentStatusDescription_not?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_not_contains?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingAssignmentStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusDescription_starts_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingAssignmentStatusId_not?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingAssignmentStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusId_starts_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_contains?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_ends_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingAssignmentStatusName_not?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_not_contains?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingAssignmentStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingAssignmentStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingAssignmentStatusDtoFilter>>;
};

export type ContactTradingAssignmentStatusDtoSort = {
  contactTradingAssignmentStatusDescription?: Maybe<SortOperationKind>;
  contactTradingAssignmentStatusName?: Maybe<SortOperationKind>;
};

export type ContactTradingB2CAssigneeCurrentUserDto = {
  __typename?: 'ContactTradingB2CAssigneeCurrentUserDto';
  contactTradingB2CCode?: Maybe<Scalars['String']>;
  contactTradingB2CId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  projectInfoDto?: Maybe<SimpleProjectInfoDto>;
  requestDate?: Maybe<Scalars['Long']>;
};

export type ContactTradingB2CAssigneeCurrentUserDtoFilter = {
  AND?: Maybe<Array<ContactTradingB2CAssigneeCurrentUserDtoFilter>>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusId_not?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingB2CAssigneeCurrentUserDtoFilter>>;
  requestDate?: Maybe<Scalars['Long']>;
  requestDate_gt?: Maybe<Scalars['Long']>;
  requestDate_gte?: Maybe<Scalars['Long']>;
  requestDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestDate_lt?: Maybe<Scalars['Long']>;
  requestDate_lte?: Maybe<Scalars['Long']>;
  requestDate_not?: Maybe<Scalars['Long']>;
  requestDate_not_gt?: Maybe<Scalars['Long']>;
  requestDate_not_gte?: Maybe<Scalars['Long']>;
  requestDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestDate_not_lt?: Maybe<Scalars['Long']>;
  requestDate_not_lte?: Maybe<Scalars['Long']>;
};

export type ContactTradingB2CAssigneeCurrentUserDtoSort = {
  contactTradingB2CCode?: Maybe<SortOperationKind>;
  contactTradingB2CStatusId?: Maybe<SortOperationKind>;
  customerFullName?: Maybe<SortOperationKind>;
  requestDate?: Maybe<SortOperationKind>;
};

export type ContactTradingB2CboDetailDto = {
  __typename?: 'ContactTradingB2CBODetailDto';
  agentFullName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingB2CboDetailDto>;
  closedDate?: Maybe<Scalars['Long']>;
  completedDate?: Maybe<Scalars['Long']>;
  consultantFullName?: Maybe<Scalars['String']>;
  consultantId?: Maybe<Scalars['String']>;
  contactTradingB2CCode?: Maybe<Scalars['String']>;
  contactTradingB2CHistories?: Maybe<Array<Maybe<ContactTradingB2CHistoryDto>>>;
  contactTradingB2CId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  contactTypeName?: Maybe<Scalars['String']>;
  customerAvatars?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  requestDate?: Maybe<Scalars['Long']>;
  requesterUserId?: Maybe<Scalars['String']>;
};

export type ContactTradingB2CCreatedByCurrentUserDto = {
  __typename?: 'ContactTradingB2CCreatedByCurrentUserDto';
  contactTradingB2CCode?: Maybe<Scalars['String']>;
  contactTradingB2CId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  projectInfoDto?: Maybe<SimpleProjectInfoDto>;
  requestDate?: Maybe<Scalars['Long']>;
};

export type ContactTradingB2CCreatedByCurrentUserDtoFilter = {
  AND?: Maybe<Array<ContactTradingB2CCreatedByCurrentUserDtoFilter>>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusId_not?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingB2CCreatedByCurrentUserDtoFilter>>;
  requestDate?: Maybe<Scalars['Long']>;
  requestDate_gt?: Maybe<Scalars['Long']>;
  requestDate_gte?: Maybe<Scalars['Long']>;
  requestDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestDate_lt?: Maybe<Scalars['Long']>;
  requestDate_lte?: Maybe<Scalars['Long']>;
  requestDate_not?: Maybe<Scalars['Long']>;
  requestDate_not_gt?: Maybe<Scalars['Long']>;
  requestDate_not_gte?: Maybe<Scalars['Long']>;
  requestDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestDate_not_lt?: Maybe<Scalars['Long']>;
  requestDate_not_lte?: Maybe<Scalars['Long']>;
};

export type ContactTradingB2CCreatedByCurrentUserDtoSort = {
  contactTradingB2CStatusId?: Maybe<SortOperationKind>;
  requestDate?: Maybe<SortOperationKind>;
};

export type ContactTradingB2CDetailDto = {
  __typename?: 'ContactTradingB2CDetailDto';
  agentFullName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  consultantFullName?: Maybe<Scalars['String']>;
  consultantId?: Maybe<Scalars['String']>;
  consultantPhoneNumber?: Maybe<Scalars['String']>;
  contactTradingB2CCode?: Maybe<Scalars['String']>;
  contactTradingB2CId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  contactTypeName?: Maybe<Scalars['String']>;
  customerAvatars?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyBlockCode?: Maybe<Scalars['String']>;
  propertyBlockName?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  requestDate?: Maybe<Scalars['Long']>;
  requesterFullName?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonName?: Maybe<Scalars['String']>;
  updatedDate?: Maybe<Scalars['Long']>;
};

export type ContactTradingB2CDetailDtoFilter = {
  agentFullName?: Maybe<Scalars['String']>;
  agentFullName_contains?: Maybe<Scalars['String']>;
  agentFullName_ends_with?: Maybe<Scalars['String']>;
  agentFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentFullName_not?: Maybe<Scalars['String']>;
  agentFullName_not_contains?: Maybe<Scalars['String']>;
  agentFullName_not_ends_with?: Maybe<Scalars['String']>;
  agentFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentFullName_not_starts_with?: Maybe<Scalars['String']>;
  agentFullName_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<ContactTradingB2CDetailDtoFilter>>;
  consultantFullName?: Maybe<Scalars['String']>;
  consultantFullName_contains?: Maybe<Scalars['String']>;
  consultantFullName_ends_with?: Maybe<Scalars['String']>;
  consultantFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  consultantFullName_not?: Maybe<Scalars['String']>;
  consultantFullName_not_contains?: Maybe<Scalars['String']>;
  consultantFullName_not_ends_with?: Maybe<Scalars['String']>;
  consultantFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  consultantFullName_not_starts_with?: Maybe<Scalars['String']>;
  consultantFullName_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CCode?: Maybe<Scalars['String']>;
  contactTradingB2CCode_contains?: Maybe<Scalars['String']>;
  contactTradingB2CCode_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CCode_not?: Maybe<Scalars['String']>;
  contactTradingB2CCode_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CCode_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CCode_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CCode_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusName_not?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingB2CDetailDtoFilter>>;
  requestDate?: Maybe<Scalars['Long']>;
  requestDate_gt?: Maybe<Scalars['Long']>;
  requestDate_gte?: Maybe<Scalars['Long']>;
  requestDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestDate_lt?: Maybe<Scalars['Long']>;
  requestDate_lte?: Maybe<Scalars['Long']>;
  requestDate_not?: Maybe<Scalars['Long']>;
  requestDate_not_gt?: Maybe<Scalars['Long']>;
  requestDate_not_gte?: Maybe<Scalars['Long']>;
  requestDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestDate_not_lt?: Maybe<Scalars['Long']>;
  requestDate_not_lte?: Maybe<Scalars['Long']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterFullName_contains?: Maybe<Scalars['String']>;
  requesterFullName_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not?: Maybe<Scalars['String']>;
  requesterFullName_not_contains?: Maybe<Scalars['String']>;
  requesterFullName_not_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not_starts_with?: Maybe<Scalars['String']>;
  requesterFullName_starts_with?: Maybe<Scalars['String']>;
};

export type ContactTradingB2CDetailDtoSort = {
  contactTradingB2CCode?: Maybe<SortOperationKind>;
  contactTradingB2CStatusId?: Maybe<SortOperationKind>;
  customerFullName?: Maybe<SortOperationKind>;
  propertyPostCode?: Maybe<SortOperationKind>;
  requestDate?: Maybe<SortOperationKind>;
};

export type ContactTradingB2CDetailResponse = {
  __typename?: 'ContactTradingB2CDetailResponse';
  contactTradingB2CDto?: Maybe<ContactTradingB2CDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ContactTradingB2CHistoryDto = {
  __typename?: 'ContactTradingB2CHistoryDto';
  assigneeFullname?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingB2CHistoryDto>;
  contactTradingB2CHistoryId?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingB2CStatusDto = {
  __typename?: 'ContactTradingB2CStatusDto';
  contactTradingB2CStatusDescription?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  contactTradingB2CStatusSortOrder: Scalars['Int'];
};

export type ContactTradingB2CStatusDtoFilter = {
  AND?: Maybe<Array<ContactTradingB2CStatusDtoFilter>>;
  contactTradingB2CStatusDescription?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusDescription_not?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusDescription_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusId_not?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusId_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusName_not?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_not_contains?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingB2CStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingB2CStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingB2CStatusDtoFilter>>;
};

export type ContactTradingB2CStatusDtoSort = {
  contactTradingB2CStatusDescription?: Maybe<SortOperationKind>;
  contactTradingB2CStatusName?: Maybe<SortOperationKind>;
};

export type ContactTradingByCodeResponse = {
  __typename?: 'ContactTradingByCodeResponse';
  contactTrading?: Maybe<ContactTradingInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ContactTradingByIdResponse = {
  __typename?: 'ContactTradingByIdResponse';
  contactTrading?: Maybe<ContactTradingInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ContactTradingConsultantInfoDto = {
  __typename?: 'ContactTradingConsultantInfoDto';
  contactTradingId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
};

export type ContactTradingContractDto = {
  __typename?: 'ContactTradingContractDto';
  attachment?: Maybe<Scalars['String']>;
  buyerComissionAmount?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingContractDto>;
  consultantComissionAmount?: Maybe<Scalars['Float']>;
  consultantFee?: Maybe<Scalars['Float']>;
  contractNote?: Maybe<Scalars['String']>;
  contractPrice?: Maybe<Scalars['Float']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  moveInDate?: Maybe<Scalars['Long']>;
  organizerComissionAmount?: Maybe<Scalars['Float']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPeriodUnit: RentPeriodUnit;
  salerComissionAmount?: Maybe<Scalars['Float']>;
  signedDate?: Maybe<Scalars['Long']>;
  totalComission?: Maybe<Scalars['Float']>;
  totalComissionUnit: TotalComissionUnit;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingContractInput = {
  attachment?: Maybe<Scalars['String']>;
  buyerComissionAmount?: Maybe<Scalars['Float']>;
  consultantComissionAmount?: Maybe<Scalars['Float']>;
  consultantFee?: Maybe<Scalars['Float']>;
  contractNote?: Maybe<Scalars['String']>;
  contractPrice?: Maybe<Scalars['Float']>;
  moveInDate?: Maybe<Scalars['Long']>;
  organizerComissionAmount?: Maybe<Scalars['Float']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPeriodUnit: RentPeriodUnit;
  salerComissionAmount?: Maybe<Scalars['Float']>;
  signedDate?: Maybe<Scalars['Long']>;
  totalComission?: Maybe<Scalars['Float']>;
  totalComissionUnit: TotalComissionUnit;
};

export type ContactTradingDepositAcceptedDto = {
  __typename?: 'ContactTradingDepositAcceptedDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingDepositAcceptedDto>;
  contactTradingCode?: Maybe<Scalars['String']>;
  depositorFullName?: Maybe<Scalars['String']>;
};

export type ContactTradingDepositDto = {
  __typename?: 'ContactTradingDepositDto';
  attachment?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingDepositDto>;
  closingPrice?: Maybe<Scalars['Float']>;
  commission?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  commissionUnitId?: Maybe<Scalars['String']>;
  consultantFee?: Maybe<Scalars['Float']>;
  contractAttachment?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  depositedAmount?: Maybe<Scalars['Float']>;
  depositedDate?: Maybe<Scalars['Long']>;
  depositNote?: Maybe<Scalars['String']>;
  depositorEmail?: Maybe<Scalars['String']>;
  depositorIdentityCard?: Maybe<Scalars['String']>;
  depositorName?: Maybe<Scalars['String']>;
  depositorPhoneNumber?: Maybe<Scalars['String']>;
  depositPaymentTermFrom?: Maybe<Scalars['Long']>;
  depositPaymentTermTo?: Maybe<Scalars['Long']>;
  depositStatus: C2CDepositStatus;
  depositTerm?: Maybe<Scalars['Int']>;
  depositUpdatedNumber?: Maybe<Scalars['Int']>;
  isActive: Scalars['Boolean'];
  moveInDate?: Maybe<Scalars['Long']>;
  notarizationDatetime?: Maybe<Scalars['Long']>;
  notaryOffice?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  paymentProgressDtos?: Maybe<Array<Maybe<PaymentProgressDto>>>;
  recipientEmail?: Maybe<Scalars['String']>;
  recipientIdentityCard?: Maybe<Scalars['String']>;
  recipientName?: Maybe<Scalars['String']>;
  recipientPhoneNumber?: Maybe<Scalars['String']>;
  rejectReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPeriodUnit: RentPeriodUnit;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingDepositInput = {
  attachment?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  closingPrice: Scalars['Float'];
  commission?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  commissionUnitId?: Maybe<Scalars['String']>;
  consultantFee?: Maybe<Scalars['Float']>;
  contractAttachment?: Maybe<Scalars['String']>;
  depositedAmount: Scalars['Float'];
  depositedDate: Scalars['Long'];
  depositNote?: Maybe<Scalars['String']>;
  depositorEmail?: Maybe<Scalars['String']>;
  depositorIdentityCard?: Maybe<Scalars['String']>;
  depositorName?: Maybe<Scalars['String']>;
  depositorPhoneNumber?: Maybe<Scalars['String']>;
  depositPaymentTermFrom?: Maybe<Scalars['Long']>;
  depositPaymentTermTo?: Maybe<Scalars['Long']>;
  depositStatus?: Maybe<Scalars['String']>;
  depositTerm?: Maybe<Scalars['Int']>;
  notarizationDatetime?: Maybe<Scalars['Long']>;
  notaryOffice?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  paymentProgressDtoJson?: Maybe<Scalars['String']>;
  recipientEmail?: Maybe<Scalars['String']>;
  recipientIdentityCard?: Maybe<Scalars['String']>;
  recipientName?: Maybe<Scalars['String']>;
  recipientPhoneNumber?: Maybe<Scalars['String']>;
};

export type ContactTradingDto = {
  __typename?: 'ContactTradingDto';
  agentOwnerId?: Maybe<Scalars['String']>;
  assigneeAvatars?: Maybe<Scalars['String']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneePhoneNumber?: Maybe<Scalars['String']>;
  assigneeStaffGroupId?: Maybe<Scalars['String']>;
  assigneeUsername?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatusDescription?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  deposit?: Maybe<ContactTradingDepositDto>;
  depositStatus: C2CDepositStatus;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  negotiationDate?: Maybe<Scalars['Long']>;
  negotiationDescription?: Maybe<Scalars['String']>;
  negotiationPrice?: Maybe<Scalars['Float']>;
  negotiationStatus: C2CNegotiationStatus;
  pendingCompensationAmount?: Maybe<Scalars['Float']>;
  pendingNote?: Maybe<Scalars['String']>;
  pendingReason?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  propertyPrice?: Maybe<Scalars['Float']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsAgency?: Maybe<Scalars['Boolean']>;
  requesterLastContact?: Maybe<Scalars['Long']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingDtoFilter = {
  agentOwnerId?: Maybe<Scalars['String']>;
  agentOwnerId_contains?: Maybe<Scalars['String']>;
  agentOwnerId_ends_with?: Maybe<Scalars['String']>;
  agentOwnerId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentOwnerId_not?: Maybe<Scalars['String']>;
  agentOwnerId_not_contains?: Maybe<Scalars['String']>;
  agentOwnerId_not_ends_with?: Maybe<Scalars['String']>;
  agentOwnerId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentOwnerId_not_starts_with?: Maybe<Scalars['String']>;
  agentOwnerId_starts_with?: Maybe<Scalars['String']>;
  AND?: Maybe<Array<ContactTradingDtoFilter>>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneeId_contains?: Maybe<Scalars['String']>;
  assigneeId_ends_with?: Maybe<Scalars['String']>;
  assigneeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not?: Maybe<Scalars['String']>;
  assigneeId_not_contains?: Maybe<Scalars['String']>;
  assigneeId_not_ends_with?: Maybe<Scalars['String']>;
  assigneeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not_starts_with?: Maybe<Scalars['String']>;
  assigneeId_starts_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_contains?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_ends_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeStaffGroupId_not?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_not_contains?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_not_ends_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeStaffGroupId_not_starts_with?: Maybe<Scalars['String']>;
  assigneeStaffGroupId_starts_with?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingArea_gt?: Maybe<Scalars['Float']>;
  buildingArea_gte?: Maybe<Scalars['Float']>;
  buildingArea_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  buildingArea_lt?: Maybe<Scalars['Float']>;
  buildingArea_lte?: Maybe<Scalars['Float']>;
  buildingArea_not?: Maybe<Scalars['Float']>;
  buildingArea_not_gt?: Maybe<Scalars['Float']>;
  buildingArea_not_gte?: Maybe<Scalars['Float']>;
  buildingArea_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  buildingArea_not_lt?: Maybe<Scalars['Float']>;
  buildingArea_not_lte?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingCode_contains?: Maybe<Scalars['String']>;
  contactTradingCode_ends_with?: Maybe<Scalars['String']>;
  contactTradingCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingCode_not?: Maybe<Scalars['String']>;
  contactTradingCode_not_contains?: Maybe<Scalars['String']>;
  contactTradingCode_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingCode_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingCode_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactTradingStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusId_not?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_starts_with?: Maybe<Scalars['String']>;
  contactType?: Maybe<ContactTradingType>;
  contactType_gt?: Maybe<ContactTradingType>;
  contactType_gte?: Maybe<ContactTradingType>;
  contactType_in?: Maybe<Array<ContactTradingType>>;
  contactType_lt?: Maybe<ContactTradingType>;
  contactType_lte?: Maybe<ContactTradingType>;
  contactType_not?: Maybe<ContactTradingType>;
  contactType_not_gt?: Maybe<ContactTradingType>;
  contactType_not_gte?: Maybe<ContactTradingType>;
  contactType_not_in?: Maybe<Array<ContactTradingType>>;
  contactType_not_lt?: Maybe<ContactTradingType>;
  contactType_not_lte?: Maybe<ContactTradingType>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerEmail_contains?: Maybe<Scalars['String']>;
  customerEmail_ends_with?: Maybe<Scalars['String']>;
  customerEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerEmail_not?: Maybe<Scalars['String']>;
  customerEmail_not_contains?: Maybe<Scalars['String']>;
  customerEmail_not_ends_with?: Maybe<Scalars['String']>;
  customerEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerEmail_not_starts_with?: Maybe<Scalars['String']>;
  customerEmail_starts_with?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerFullName_contains?: Maybe<Scalars['String']>;
  customerFullName_ends_with?: Maybe<Scalars['String']>;
  customerFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFullName_not?: Maybe<Scalars['String']>;
  customerFullName_not_contains?: Maybe<Scalars['String']>;
  customerFullName_not_ends_with?: Maybe<Scalars['String']>;
  customerFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFullName_not_starts_with?: Maybe<Scalars['String']>;
  customerFullName_starts_with?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  customerPhoneNumber_contains?: Maybe<Scalars['String']>;
  customerPhoneNumber_ends_with?: Maybe<Scalars['String']>;
  customerPhoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerPhoneNumber_not?: Maybe<Scalars['String']>;
  customerPhoneNumber_not_contains?: Maybe<Scalars['String']>;
  customerPhoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  customerPhoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerPhoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  customerPhoneNumber_starts_with?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<ContactTradingDtoFilter>>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyCode_contains?: Maybe<Scalars['String']>;
  propertyCode_ends_with?: Maybe<Scalars['String']>;
  propertyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not?: Maybe<Scalars['String']>;
  propertyCode_not_contains?: Maybe<Scalars['String']>;
  propertyCode_not_ends_with?: Maybe<Scalars['String']>;
  propertyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not_starts_with?: Maybe<Scalars['String']>;
  propertyCode_starts_with?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostId_contains?: Maybe<Scalars['String']>;
  propertyPostId_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not?: Maybe<Scalars['String']>;
  propertyPostId_not_contains?: Maybe<Scalars['String']>;
  propertyPostId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostId_starts_with?: Maybe<Scalars['String']>;
  propertyPrice?: Maybe<Scalars['Float']>;
  propertyPrice_gt?: Maybe<Scalars['Float']>;
  propertyPrice_gte?: Maybe<Scalars['Float']>;
  propertyPrice_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  propertyPrice_lt?: Maybe<Scalars['Float']>;
  propertyPrice_lte?: Maybe<Scalars['Float']>;
  propertyPrice_not?: Maybe<Scalars['Float']>;
  propertyPrice_not_gt?: Maybe<Scalars['Float']>;
  propertyPrice_not_gte?: Maybe<Scalars['Float']>;
  propertyPrice_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  propertyPrice_not_lt?: Maybe<Scalars['Float']>;
  propertyPrice_not_lte?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterEmail_contains?: Maybe<Scalars['String']>;
  requesterEmail_ends_with?: Maybe<Scalars['String']>;
  requesterEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterEmail_not?: Maybe<Scalars['String']>;
  requesterEmail_not_contains?: Maybe<Scalars['String']>;
  requesterEmail_not_ends_with?: Maybe<Scalars['String']>;
  requesterEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterEmail_not_starts_with?: Maybe<Scalars['String']>;
  requesterEmail_starts_with?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterFullName_contains?: Maybe<Scalars['String']>;
  requesterFullName_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not?: Maybe<Scalars['String']>;
  requesterFullName_not_contains?: Maybe<Scalars['String']>;
  requesterFullName_not_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not_starts_with?: Maybe<Scalars['String']>;
  requesterFullName_starts_with?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterId_contains?: Maybe<Scalars['String']>;
  requesterId_ends_with?: Maybe<Scalars['String']>;
  requesterId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterId_not?: Maybe<Scalars['String']>;
  requesterId_not_contains?: Maybe<Scalars['String']>;
  requesterId_not_ends_with?: Maybe<Scalars['String']>;
  requesterId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterId_not_starts_with?: Maybe<Scalars['String']>;
  requesterId_starts_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterPhoneNumber_contains?: Maybe<Scalars['String']>;
  requesterPhoneNumber_ends_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterPhoneNumber_not?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_contains?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterPhoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type ContactTradingDtoSort = {
  contactTradingCode?: Maybe<SortOperationKind>;
  contactTradingId?: Maybe<SortOperationKind>;
  contactTradingStatusId?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type ContactTradingForC2CDemandDto = {
  __typename?: 'ContactTradingForC2CDemandDto';
  contactTradingId: Scalars['Uuid'];
  contactTradingStatusId: Scalars['Uuid'];
  createdDatetime: Scalars['Long'];
  propertyDetailPath?: Maybe<Scalars['String']>;
};

export type ContactTradingForC2CDemandDtoFilter = {
  AND?: Maybe<Array<ContactTradingForC2CDemandDtoFilter>>;
  contactTradingId?: Maybe<Scalars['Uuid']>;
  contactTradingId_gt?: Maybe<Scalars['Uuid']>;
  contactTradingId_gte?: Maybe<Scalars['Uuid']>;
  contactTradingId_in?: Maybe<Array<Scalars['Uuid']>>;
  contactTradingId_lt?: Maybe<Scalars['Uuid']>;
  contactTradingId_lte?: Maybe<Scalars['Uuid']>;
  contactTradingId_not?: Maybe<Scalars['Uuid']>;
  contactTradingId_not_gt?: Maybe<Scalars['Uuid']>;
  contactTradingId_not_gte?: Maybe<Scalars['Uuid']>;
  contactTradingId_not_in?: Maybe<Array<Scalars['Uuid']>>;
  contactTradingId_not_lt?: Maybe<Scalars['Uuid']>;
  contactTradingId_not_lte?: Maybe<Scalars['Uuid']>;
  OR?: Maybe<Array<ContactTradingForC2CDemandDtoFilter>>;
};

export type ContactTradingHistoryDto = {
  __typename?: 'ContactTradingHistoryDto';
  contactTradingHistoryId?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  newData?: Maybe<Scalars['String']>;
  oldData?: Maybe<Scalars['String']>;
  updateType?: Maybe<Scalars['String']>;
};

export type ContactTradingHistoryDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type ContactTradingInfoDto = {
  __typename?: 'ContactTradingInfoDto';
  agentOwnerId?: Maybe<Scalars['String']>;
  assigneeEmail?: Maybe<Scalars['String']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneePhoneNumber?: Maybe<Scalars['String']>;
  assigneeProfilePhoto?: Maybe<Scalars['String']>;
  assigneeStaffGroupDescription?: Maybe<Scalars['String']>;
  assigneeStaffGroupName?: Maybe<Scalars['String']>;
  assigneeUsername?: Maybe<Scalars['String']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  contract?: Maybe<ContactTradingContractDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  deposit?: Maybe<ContactTradingDepositDto>;
  isActive: Scalars['Boolean'];
  negotiation?: Maybe<ContactTradingNegotiationDto>;
  negotiationDate?: Maybe<Scalars['Long']>;
  negotiationDescription?: Maybe<Scalars['String']>;
  negotiationPrice?: Maybe<Scalars['Float']>;
  negotiationUpdatedNumber?: Maybe<Scalars['Int']>;
  pendingCompensationAmount?: Maybe<Scalars['Float']>;
  pendingNote?: Maybe<Scalars['String']>;
  pendingReason?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsAgency?: Maybe<Scalars['Boolean']>;
  requesterIsBuyer?: Maybe<Scalars['Boolean']>;
  requesterLastContact?: Maybe<Scalars['Long']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterProfilePhoto?: Maybe<Scalars['String']>;
  serviceBonus?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingInfoFoInput = {
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsAgency?: Maybe<Scalars['Boolean']>;
  requesterLastContact?: Maybe<Scalars['Long']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
};

export type ContactTradingInfoForPropertyPostDto = {
  __typename?: 'ContactTradingInfoForPropertyPostDto';
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatus?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingInfoForPropertyPostDtoSort = {
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type ContactTradingInfoForTransactionDto = {
  __typename?: 'ContactTradingInfoForTransactionDto';
  buyerCommissionAmount?: Maybe<Scalars['Float']>;
  buyerId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingInfoForTransactionDto>;
  consultantCommissionAmount?: Maybe<Scalars['Float']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingStatus?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  createdByUserId?: Maybe<Scalars['String']>;
  organizerCommissionAmount?: Maybe<Scalars['Float']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostAgentOwnerId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertySoldPrice?: Maybe<Scalars['Float']>;
  requesterId?: Maybe<Scalars['String']>;
  sellerCommissionAmount?: Maybe<Scalars['Float']>;
  sellerId?: Maybe<Scalars['String']>;
  totalComissionUnit: TotalComissionUnit;
  totalCommission?: Maybe<Scalars['Float']>;
};

export type ContactTradingInfoInput = {
  assigneeId?: Maybe<Scalars['String']>;
  c2CDemandId?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterIsAgency?: Maybe<Scalars['Boolean']>;
  requesterIsBuyer?: Maybe<Scalars['Boolean']>;
  requesterLastContact?: Maybe<Scalars['Long']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
};

export type ContactTradingNegotiationDto = {
  __typename?: 'ContactTradingNegotiationDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContactTradingNegotiationDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  negotiationCommission?: Maybe<Scalars['Float']>;
  negotiationCommissionBuyer?: Maybe<Scalars['Float']>;
  negotiationCommissionSeller?: Maybe<Scalars['Float']>;
  negotiationCommissionUnitId?: Maybe<Scalars['String']>;
  negotiationedDate?: Maybe<Scalars['Long']>;
  negotiationNote?: Maybe<Scalars['String']>;
  negotiationPrice?: Maybe<Scalars['Float']>;
  negotiationRejectReasonDescription?: Maybe<Scalars['String']>;
  negotiationRejectReasonId?: Maybe<Scalars['String']>;
  negotiationRequesterId?: Maybe<Scalars['String']>;
  negotiationStatus: C2CNegotiationStatus;
  negotiationUpdatedNumber?: Maybe<Scalars['Int']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingRatingDto = {
  __typename?: 'ContactTradingRatingDto';
  agentFirstName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentImage?: Maybe<Scalars['String']>;
  agentLastName?: Maybe<Scalars['String']>;
  agentRating?: Maybe<Scalars['Float']>;
  isShowingBuyer?: Maybe<Scalars['Boolean']>;
  postTitle?: Maybe<Scalars['String']>;
  staffFirstName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffImage?: Maybe<Scalars['String']>;
  staffLastName?: Maybe<Scalars['String']>;
  staffRating?: Maybe<Scalars['Float']>;
};

export type ContactTradingRejectReasonDto = {
  __typename?: 'ContactTradingRejectReasonDto';
  contactTradingRejectReasonId?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type ContactTradingRejectReasonDtoFilter = {
  AND?: Maybe<Array<ContactTradingRejectReasonDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<ContactTradingRejectReasonDtoFilter>>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonDescription_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  rejectReasonName_contains?: Maybe<Scalars['String']>;
  rejectReasonName_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not?: Maybe<Scalars['String']>;
  rejectReasonName_not_contains?: Maybe<Scalars['String']>;
  rejectReasonName_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type ContactTradingRejectReasonDtoSort = {
  isActive?: Maybe<SortOperationKind>;
  rejectReasonDescription?: Maybe<SortOperationKind>;
  rejectReasonName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type ContactTradingRelevantPropertyStatusDto = {
  __typename?: 'ContactTradingRelevantPropertyStatusDto';
  contactTradingPropertyConsultationStatusDescription?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type ContactTradingRelevantPropertyStatusDtoFilter = {
  AND?: Maybe<Array<ContactTradingRelevantPropertyStatusDtoFilter>>;
  contactTradingPropertyConsultationStatusDescription?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_contains?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_ends_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingPropertyConsultationStatusDescription_not?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_not_contains?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingPropertyConsultationStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusDescription_starts_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingPropertyConsultationStatusId_not?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingPropertyConsultationStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusId_starts_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_contains?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_ends_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingPropertyConsultationStatusName_not?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_not_contains?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingPropertyConsultationStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingPropertyConsultationStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingRelevantPropertyStatusDtoFilter>>;
};

export type ContactTradingRelevantPropertyStatusDtoSort = {
  contactTradingPropertyConsultationStatusDescription?: Maybe<SortOperationKind>;
  contactTradingPropertyConsultationStatusName?: Maybe<SortOperationKind>;
};

export type ContactTradingRequesterEmailInfoDto = {
  __typename?: 'ContactTradingRequesterEmailInfoDto';
  customerEmail?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
};

export type ContactTradingRequesterLastContact = {
  __typename?: 'ContactTradingRequesterLastContact';
  lastContactDatetime?: Maybe<Scalars['Long']>;
};

export type ContactTradingRequesterPhoneInfoDto = {
  __typename?: 'ContactTradingRequesterPhoneInfoDto';
  customerPhoneNumber?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
};

export type ContactTradingStatusDto = {
  __typename?: 'ContactTradingStatusDto';
  contactTradingStatusDescription?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactTradingStatusName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type ContactTradingStatusDtoFilter = {
  AND?: Maybe<Array<ContactTradingStatusDtoFilter>>;
  contactTradingStatusDescription?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_contains?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusDescription_not?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_not_contains?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusDescription_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  contactTradingStatusId_contains?: Maybe<Scalars['String']>;
  contactTradingStatusId_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusId_not?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_contains?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusId_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusName?: Maybe<Scalars['String']>;
  contactTradingStatusName_contains?: Maybe<Scalars['String']>;
  contactTradingStatusName_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusName_not?: Maybe<Scalars['String']>;
  contactTradingStatusName_not_contains?: Maybe<Scalars['String']>;
  contactTradingStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contactTradingStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contactTradingStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contactTradingStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContactTradingStatusDtoFilter>>;
};

export type ContactTradingStatusDtoSort = {
  contactTradingStatusDescription?: Maybe<SortOperationKind>;
  contactTradingStatusName?: Maybe<SortOperationKind>;
};

export type ContactTradingTotalCountPerStatusV2Input = {
  filterConsultantAssigneeId?: Maybe<Scalars['String']>;
  filterConsultantStaffGroupId?: Maybe<Scalars['String']>;
  filterContactType: ContactTradingType;
  filterCreatedByUserId?: Maybe<Scalars['String']>;
  filterCustomerSupportAssigneeId?: Maybe<Scalars['String']>;
  filterCustomerSupportStaffGroupId?: Maybe<Scalars['String']>;
};

export enum ContactTradingType {
  Buy = 'BUY',
  Rent = 'RENT'
}

export type ContractCommissionPlatformLogDto = {
  __typename?: 'ContractCommissionPlatformLogDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ContractCommissionPlatformLogDto>;
  commissionType?: Maybe<Scalars['String']>;
  executedById?: Maybe<Scalars['String']>;
  executedByName?: Maybe<Scalars['String']>;
  logId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  syncData?: Maybe<Scalars['String']>;
  syncDate?: Maybe<Scalars['Long']>;
  syncMessage?: Maybe<Scalars['String']>;
  syncStatus?: Maybe<Scalars['String']>;
  topenerId?: Maybe<Scalars['String']>;
  transactionContractId?: Maybe<Scalars['String']>;
};

export type ContractExtendedHistoryDto = {
  __typename?: 'ContractExtendedHistoryDto';
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  contractExtendedHistoryId?: Maybe<Scalars['String']>;
  documentFiles?: Maybe<Scalars['String']>;
  newExtendedContractDatetime?: Maybe<Scalars['Long']>;
  oldExtendedContractDatetime?: Maybe<Scalars['Long']>;
  reason?: Maybe<Scalars['String']>;
  updatedByUserName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContractExtendedPeriodInput = {
  contractExtendedDatetime: Scalars['Long'];
  documentFiles?: Maybe<Scalars['String']>;
  reason?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  transactionContractId?: Maybe<Scalars['String']>;
};

export type ContractExtendedPeriodResponse = {
  __typename?: 'ContractExtendedPeriodResponse';
  b2CTransactionContractDto?: Maybe<B2CTransactionContractDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ContractHistoryDto = {
  __typename?: 'ContractHistoryDto';
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  contractCode?: Maybe<Scalars['String']>;
  contractHistoryId?: Maybe<Scalars['String']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  documentFiles?: Maybe<Scalars['String']>;
  documentImages?: Maybe<Scalars['String']>;
  historyType?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  oldData?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  priceVat?: Maybe<Scalars['Float']>;
  propertyPostId?: Maybe<Scalars['String']>;
  returnGenericBasketDatetime?: Maybe<Scalars['Long']>;
  returnGenericBasketReason?: Maybe<Scalars['String']>;
  updatedByUserName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ContractReturnGenericBasketInput = {
  isTurnBackBookingPayment: Scalars['Boolean'];
  note?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  returnGenericBasketDatetime: Scalars['Long'];
  returnGenericBasketReason?: Maybe<Scalars['String']>;
  transactionContractId?: Maybe<Scalars['String']>;
};

export type ContractReturnGenericBasketResponse = {
  __typename?: 'ContractReturnGenericBasketResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ContractStatusDto = {
  __typename?: 'ContractStatusDto';
  contractStatusDescription?: Maybe<Scalars['String']>;
  contractStatusId?: Maybe<Scalars['String']>;
  contractStatusName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type ContractStatusDtoFilter = {
  AND?: Maybe<Array<ContractStatusDtoFilter>>;
  contractStatusName?: Maybe<Scalars['String']>;
  contractStatusName_contains?: Maybe<Scalars['String']>;
  contractStatusName_ends_with?: Maybe<Scalars['String']>;
  contractStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractStatusName_not?: Maybe<Scalars['String']>;
  contractStatusName_not_contains?: Maybe<Scalars['String']>;
  contractStatusName_not_ends_with?: Maybe<Scalars['String']>;
  contractStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  contractStatusName_not_starts_with?: Maybe<Scalars['String']>;
  contractStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ContractStatusDtoFilter>>;
};

export type ContractStatusDtoSort = {
  sortOrder?: Maybe<SortOperationKind>;
};

export type CountryDto = {
  __typename?: 'CountryDto';
  areas?: Maybe<Scalars['String']>;
  callingCode?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  continent?: Maybe<Scalars['String']>;
  countryCode?: Maybe<Scalars['String']>;
  countryId: Scalars['Int'];
  countryName?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  gdp?: Maybe<Scalars['String']>;
  internetTld?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  iso3166Code?: Maybe<Scalars['String']>;
  largestCity?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  nationalLanguage?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type CountryDtoFilter = {
  AND?: Maybe<Array<CountryDtoFilter>>;
  countryCode?: Maybe<Scalars['String']>;
  countryCode_contains?: Maybe<Scalars['String']>;
  countryCode_ends_with?: Maybe<Scalars['String']>;
  countryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  countryCode_not?: Maybe<Scalars['String']>;
  countryCode_not_contains?: Maybe<Scalars['String']>;
  countryCode_not_ends_with?: Maybe<Scalars['String']>;
  countryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  countryCode_not_starts_with?: Maybe<Scalars['String']>;
  countryCode_starts_with?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  countryId_gt?: Maybe<Scalars['Int']>;
  countryId_gte?: Maybe<Scalars['Int']>;
  countryId_in?: Maybe<Array<Scalars['Int']>>;
  countryId_lt?: Maybe<Scalars['Int']>;
  countryId_lte?: Maybe<Scalars['Int']>;
  countryId_not?: Maybe<Scalars['Int']>;
  countryId_not_gt?: Maybe<Scalars['Int']>;
  countryId_not_gte?: Maybe<Scalars['Int']>;
  countryId_not_in?: Maybe<Array<Scalars['Int']>>;
  countryId_not_lt?: Maybe<Scalars['Int']>;
  countryId_not_lte?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  countryName_contains?: Maybe<Scalars['String']>;
  countryName_ends_with?: Maybe<Scalars['String']>;
  countryName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  countryName_not?: Maybe<Scalars['String']>;
  countryName_not_contains?: Maybe<Scalars['String']>;
  countryName_not_ends_with?: Maybe<Scalars['String']>;
  countryName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  countryName_not_starts_with?: Maybe<Scalars['String']>;
  countryName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CountryDtoFilter>>;
};

export type CountryDtoSort = {
  countryCode?: Maybe<SortOperationKind>;
  countryName?: Maybe<SortOperationKind>;
};

export type CountryInfoDto = {
  __typename?: 'CountryInfoDto';
  areas?: Maybe<Scalars['String']>;
  callingCode?: Maybe<Scalars['String']>;
  capital?: Maybe<Scalars['String']>;
  continent?: Maybe<Scalars['String']>;
  countryCode?: Maybe<Scalars['String']>;
  countryId: Scalars['Int'];
  countryName?: Maybe<Scalars['String']>;
  currency?: Maybe<Scalars['String']>;
  gdp?: Maybe<Scalars['String']>;
  internetTld?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  iso3166Code?: Maybe<Scalars['String']>;
  largestCity?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  nationalLanguage?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type CrawlerProcessDto = {
  __typename?: 'CrawlerProcessDto';
  areaTotal?: Maybe<Scalars['Float']>;
  c2CPropertyCode?: Maybe<Scalars['String']>;
  c2CPropertyPostId?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  crawlerProcessId?: Maybe<Scalars['String']>;
  crawlerPropertyCode?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId?: Maybe<Scalars['String']>;
  direction: Direction;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  exportAddress?: Maybe<Scalars['String']>;
  houseAddress?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  numberOfBathrooms?: Maybe<Scalars['String']>;
  numberOfBedrooms?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  postAuthor?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  propertyTypeDesciption?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  refuseReason?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  topenerAssignedFullName?: Maybe<Scalars['String']>;
  topenerAssignedId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type CrawlerProcessDtoFilter = {
  AND?: Maybe<Array<CrawlerProcessDtoFilter>>;
  areaTotal?: Maybe<Scalars['Float']>;
  areaTotal_gt?: Maybe<Scalars['Float']>;
  areaTotal_gte?: Maybe<Scalars['Float']>;
  areaTotal_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  areaTotal_lt?: Maybe<Scalars['Float']>;
  areaTotal_lte?: Maybe<Scalars['Float']>;
  areaTotal_not?: Maybe<Scalars['Float']>;
  areaTotal_not_gt?: Maybe<Scalars['Float']>;
  areaTotal_not_gte?: Maybe<Scalars['Float']>;
  areaTotal_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  areaTotal_not_lt?: Maybe<Scalars['Float']>;
  areaTotal_not_lte?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  crawlerTrackingStatusId?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusId_not?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_not_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_starts_with?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<CrawlerProcessDtoFilter>>;
  postTitle?: Maybe<Scalars['String']>;
  postTitle_contains?: Maybe<Scalars['String']>;
  postTitle_ends_with?: Maybe<Scalars['String']>;
  postTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTitle_not?: Maybe<Scalars['String']>;
  postTitle_not_contains?: Maybe<Scalars['String']>;
  postTitle_not_ends_with?: Maybe<Scalars['String']>;
  postTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTitle_not_starts_with?: Maybe<Scalars['String']>;
  postTitle_starts_with?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  price_gt?: Maybe<Scalars['Float']>;
  price_gte?: Maybe<Scalars['Float']>;
  price_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  price_lt?: Maybe<Scalars['Float']>;
  price_lte?: Maybe<Scalars['Float']>;
  price_not?: Maybe<Scalars['Float']>;
  price_not_gt?: Maybe<Scalars['Float']>;
  price_not_gte?: Maybe<Scalars['Float']>;
  price_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  price_not_lt?: Maybe<Scalars['Float']>;
  price_not_lte?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type CrawlerProcessDtoSort = {
  areaTotal?: Maybe<SortOperationKind>;
  crawlerPropertyCode?: Maybe<SortOperationKind>;
  price?: Maybe<SortOperationKind>;
  propertyTypeDesciption?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type CrawlerRefuseReasonDto = {
  __typename?: 'CrawlerRefuseReasonDto';
  crawlerRefuseReasonDescription?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName?: Maybe<Scalars['String']>;
};

export type CrawlerRefuseReasonDtoFilter = {
  AND?: Maybe<Array<CrawlerRefuseReasonDtoFilter>>;
  crawlerRefuseReasonDescription?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_contains?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_ends_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerRefuseReasonDescription_not?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_not_contains?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerRefuseReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonDescription_starts_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_contains?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_ends_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerRefuseReasonId_not?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_not_contains?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_not_ends_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerRefuseReasonId_not_starts_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId_starts_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_contains?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_ends_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerRefuseReasonName_not?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_not_contains?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_not_ends_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerRefuseReasonName_not_starts_with?: Maybe<Scalars['String']>;
  crawlerRefuseReasonName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CrawlerRefuseReasonDtoFilter>>;
};

export type CrawlerRefuseReasonDtoSort = {
  crawlerRefuseReasonDescription?: Maybe<SortOperationKind>;
  crawlerRefuseReasonName?: Maybe<SortOperationKind>;
};

export type CrawlerTrackingStatusDto = {
  __typename?: 'CrawlerTrackingStatusDto';
  crawlerTrackingStatusDescription?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName?: Maybe<Scalars['String']>;
};

export type CrawlerTrackingStatusDtoFilter = {
  AND?: Maybe<Array<CrawlerTrackingStatusDtoFilter>>;
  crawlerTrackingStatusDescription?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusDescription_not?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_not_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusDescription_starts_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusId_not?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_not_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId_starts_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusName_not?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_not_contains?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_not_ends_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  crawlerTrackingStatusName_not_starts_with?: Maybe<Scalars['String']>;
  crawlerTrackingStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CrawlerTrackingStatusDtoFilter>>;
};

export type CrawlerTrackingStatusDtoSort = {
  crawlerTrackingStatusDescription?: Maybe<SortOperationKind>;
  crawlerTrackingStatusName?: Maybe<SortOperationKind>;
};

export type CreateAgentInput = {
  agentGroupId?: Maybe<Scalars['String']>;
  contactAddress?: Maybe<Scalars['String']>;
  initialAccountCode?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  isBooking?: Maybe<Scalars['Boolean']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  propertyAllocates?: Maybe<Scalars['Boolean']>;
  referralCode?: Maybe<Scalars['String']>;
  topenerServiceTypes?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type CreateAgentRatingResponse = {
  __typename?: 'CreateAgentRatingResponse';
  agentRatingDto?: Maybe<Master_Data_AgentRatingDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateAgentResponse = {
  __typename?: 'CreateAgentResponse';
  agentDto?: Maybe<AgentDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateAllocationRuleInput = {
  allocationRuleDescription?: Maybe<Scalars['String']>;
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleShortDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  ruleCondition?: Maybe<RuleConditionDtoInput>;
};

export type CreateAllocationRuleResponse = {
  __typename?: 'CreateAllocationRuleResponse';
  allocationRuleId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateB2C2CInput = {
  active: Scalars['Boolean'];
  address?: Maybe<ProjectAddressInfoDtoInput>;
  b2CProjectId?: Maybe<Scalars['String']>;
  b2CProjectName?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type CreateB2C2CProjectResponse = {
  __typename?: 'CreateB2C2CProjectResponse';
  b2C2CProjectId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateBackOfficeRoleInput = {
  applicationRoleId?: Maybe<Scalars['String']>;
  longDescription?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permissions?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Scalars['String']>;
};

export type CreateBackOfficeRoleResponse = {
  __typename?: 'CreateBackOfficeRoleResponse';
  backOfficeRoleId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateBookingTransactionResponse = {
  __typename?: 'CreateBookingTransactionResponse';
  bookingTransactionDto?: Maybe<BookingTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateC2CContactTradingInfoInput = {
  assigneeId?: Maybe<Scalars['Uuid']>;
  c2CDemandId?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['Uuid']>;
  propertyPostUrl?: Maybe<Scalars['String']>;
  requesterAddress?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGender?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['Uuid']>;
  requesterIsAgency?: Maybe<Scalars['Boolean']>;
  requesterIsBuyer?: Maybe<Scalars['Boolean']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
};

export type CreateC2CContactTradingInput = {
  captcha?: Maybe<Scalars['String']>;
  contactTradingInfo?: Maybe<CreateC2CContactTradingInfoInput>;
  contactTradingServiceBonusIds?: Maybe<Scalars['String']>;
  contactType: C2CContactTradingType;
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type CreateC2CContactTradingResponse = {
  __typename?: 'CreateC2CContactTradingResponse';
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId: Scalars['Uuid'];
  createdByUserId: Scalars['Uuid'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostAgentOwnerId: Scalars['Uuid'];
};

export type CreateC2CDemandInput = {
  directionJson?: Maybe<Scalars['String']>;
  forSale: Scalars['Boolean'];
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  priceRangeJson?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyLocation: PropertyLocation;
  propertyTypeId?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterIsBuyer: Scalars['Boolean'];
  requesterPhone?: Maybe<Scalars['String']>;
  squareRangeJson?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type CreateC2CDemandResponse = {
  __typename?: 'CreateC2CDemandResponse';
  c2CDemandId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateC2CPropertyPostCommissionConfigInput = {
  commissionConfigName?: Maybe<Scalars['String']>;
  endDate: Scalars['Long'];
  isActive: Scalars['Boolean'];
  platformFeeBasedOnCommission: Scalars['Float'];
  platformFeeMinimumBasedOnSellingPrice: Scalars['Float'];
  shareCommissionConsultant: Scalars['Float'];
  shareCommissionTpl: Scalars['Float'];
  startDate: Scalars['Long'];
  transactionCommissionTpl: Scalars['Float'];
};

export type CreateC2CPropertyPostCommissionConfigResponse = {
  __typename?: 'CreateC2CPropertyPostCommissionConfigResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateC2CPropertyPostInput = {
  addressId?: Maybe<Scalars['String']>;
  agentGroupRanks?: Maybe<Scalars['String']>;
  alleyWidth?: Maybe<Scalars['Float']>;
  approvedBy?: Maybe<Scalars['String']>;
  approvedDatetime?: Maybe<Scalars['Long']>;
  b2C2CProjectId?: Maybe<Scalars['String']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  captcha?: Maybe<Scalars['String']>;
  collateralizedAtBankId?: Maybe<Scalars['String']>;
  commission?: Maybe<Scalars['Float']>;
  commissionBuyer?: Maybe<Scalars['Float']>;
  commissionSeller?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  contactEmail?: Maybe<Scalars['String']>;
  createForUserId?: Maybe<Scalars['String']>;
  direction: Direction;
  expiredDate?: Maybe<Scalars['Long']>;
  floor?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  freeTextProject?: Maybe<Scalars['String']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isCollateralized?: Maybe<Scalars['Boolean']>;
  isFeatureProperty: Scalars['Boolean'];
  isPrivate: Scalars['Boolean'];
  isRepostB2CProperyPost?: Maybe<Scalars['Boolean']>;
  isShowGoogleStreetView?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  legalDocuments?: Maybe<Scalars['String']>;
  legalInfoId?: Maybe<Scalars['String']>;
  length?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  matterportUrl?: Maybe<Scalars['String']>;
  nearFacility?: Maybe<Scalars['String']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  owner?: Maybe<OwnerInfoDtoInput>;
  ownerId?: Maybe<Scalars['String']>;
  ownerIsAuthor: Scalars['Boolean'];
  platformFee?: Maybe<Scalars['Float']>;
  platformFeeBasedOnCommission?: Maybe<Scalars['Float']>;
  platformFeeMinimumBasedOnSellingPrice?: Maybe<Scalars['Float']>;
  postDescription?: Maybe<Scalars['String']>;
  postServiceType: PostServiceType;
  postTitle?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<PropertyAddressInfoInput>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyLocation?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  rejectedDatetime?: Maybe<Scalars['Long']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rentCommission?: Maybe<Scalars['Float']>;
  rentCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPrice?: Maybe<Scalars['Float']>;
  repostByUserId?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  sellerAndBuyerCommission?: Maybe<Scalars['Float']>;
  sendingApprovalFrom?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  staffUserId?: Maybe<Scalars['String']>;
  supportRequestTypeIds?: Maybe<Scalars['String']>;
  tags?: Maybe<Scalars['String']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

export type CreateCommentForFrontOfficeResponse = {
  __typename?: 'CreateCommentForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  recaptchaEnable?: Maybe<Scalars['Boolean']>;
};

export type CreateCommentInput = {
  captcha?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  parentCommentId?: Maybe<Scalars['String']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
  totalLike?: Maybe<Scalars['Int']>;
  totalReply?: Maybe<Scalars['Int']>;
};

export type CreateContactTradingB2CInput = {
  captcha?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  isRequesterAgency?: Maybe<Scalars['Boolean']>;
  propertyPostId?: Maybe<Scalars['String']>;
  supportRequestServiceBonusIds?: Maybe<Scalars['String']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type CreateContactTradingB2CResponse = {
  __typename?: 'CreateContactTradingB2CResponse';
  contactTradingB2CId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateContactTradingInput = {
  captcha?: Maybe<Scalars['String']>;
  contactTradingInfo?: Maybe<ContactTradingInfoInput>;
  contactTradingServiceBonusIds?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type CreateContactTradingRequestInput = {
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterIsBuyer?: Maybe<Scalars['Boolean']>;
  requesterName?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  supportRequestServiceBonusIds?: Maybe<Scalars['String']>;
};

export type CreateContactTradingRequestResponse = {
  __typename?: 'CreateContactTradingRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateContactTradingResponse = {
  __typename?: 'CreateContactTradingResponse';
  contactTradingCode?: Maybe<Scalars['String']>;
  contactTradingId?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostAgentOwnerId?: Maybe<Scalars['String']>;
};

export type CreateCustomerRequestInput = {
  createdByUserId?: Maybe<Scalars['String']>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerPassport?: Maybe<Scalars['String']>;
  customerPassportExpireDate?: Maybe<Scalars['Long']>;
  customerPassportIssueDate?: Maybe<Scalars['Long']>;
  customerPassportIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  nationalIdType: NationalIdType;
  nationalityId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
};

export type CreateCustomerResponse = {
  __typename?: 'CreateCustomerResponse';
  customerDto?: Maybe<CustomerDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateDepositTransactionResponse = {
  __typename?: 'CreateDepositTransactionResponse';
  depositeTransactionDto?: Maybe<DepositeTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateDepositeTransactionInput = {
  bookingTransactionId?: Maybe<Scalars['String']>;
  consultantId?: Maybe<Scalars['String']>;
  otpCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  saleAgentId?: Maybe<Scalars['String']>;
  topenerPhoneNumber?: Maybe<Scalars['String']>;
};

export type CreateDocumentAttributeInput = {
  documentAttributeDescription?: Maybe<Scalars['String']>;
  documentAttributeName?: Maybe<Scalars['String']>;
  documentAttributeTemplate?: Maybe<Scalars['String']>;
  documentAttributeTypeId?: Maybe<Scalars['String']>;
};

export type CreateDocumentAttributeResponse = {
  __typename?: 'CreateDocumentAttributeResponse';
  documentAttributeDto?: Maybe<DocumentAttributeDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateDocumentTemplateResponse = {
  __typename?: 'CreateDocumentTemplateResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateGuestBoInput = {
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
};

export type CreateGuestResponse = {
  __typename?: 'CreateGuestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  guestDto?: Maybe<GuestDto>;
};

export type CreateInvestorInput = {
  activityImages?: Maybe<Scalars['String']>;
  address?: Maybe<InvestorAddressInfoDtoInput>;
  areas?: Maybe<Scalars['String']>;
  charterCapital?: Maybe<Scalars['String']>;
  establishmentDate?: Maybe<Scalars['String']>;
  introduce?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  logo?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type CreateInvestorResponse = {
  __typename?: 'CreateInvestorResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
};

export type CreateLegalInfoResponse = {
  __typename?: 'CreateLegalInfoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  legalInfoDto?: Maybe<LegalInfoDto>;
};

export type CreateMobileAppVersionInput = {
  mobileOs?: Maybe<Scalars['String']>;
  mobileVersion?: Maybe<Scalars['String']>;
  releaseDatetime: Scalars['Long'];
  releaseNotes?: Maybe<Scalars['String']>;
  releaseUrl?: Maybe<Scalars['String']>;
  updateOption?: Maybe<Scalars['String']>;
};

export type CreateMobileAppVersionResponse = {
  __typename?: 'CreateMobileAppVersionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  mobileAppVersion?: Maybe<MobileAppVersionDto>;
};

export type CreatePanoramaForC2CPropertyPostInput = {
  panoramaJson?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type CreatePanoramaForC2CPropertyPostResponse = {
  __typename?: 'CreatePanoramaForC2CPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreatePaymentThirdPartyResponse = {
  __typename?: 'CreatePaymentThirdPartyResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  paymentUrl?: Maybe<Scalars['String']>;
};

export type CreatePolicyInput = {
  attachment?: Maybe<Scalars['String']>;
  endDate: Scalars['Long'];
  policyDescription?: Maybe<Scalars['String']>;
  policyName?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  startDate: Scalars['Long'];
};

export type CreateProfilePhotoResponse = {
  __typename?: 'CreateProfilePhotoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreatePropertyPostApprovalStatusResponse = {
  __typename?: 'CreatePropertyPostApprovalStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusDto?: Maybe<PropertyPostApprovalStatusDto>;
};

export type CreatePropertyPostStatusResponse = {
  __typename?: 'CreatePropertyPostStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostStatusDto?: Maybe<PropertyPostStatusDto>;
};

export type CreateRefundRequestInput = {
  bankAccountName?: Maybe<Scalars['String']>;
  bankAccountNo?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  fundAccountId?: Maybe<Scalars['String']>;
  isBooking?: Maybe<Scalars['Boolean']>;
  propertyPostId?: Maybe<Scalars['String']>;
  requestDescription?: Maybe<Scalars['String']>;
};

export type CreateRefundRequestResponse = {
  __typename?: 'CreateRefundRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateRefundTransactionInput = {
  adminId?: Maybe<Scalars['String']>;
  bankAccountName?: Maybe<Scalars['String']>;
  bankAccountNo?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  customerId?: Maybe<Scalars['String']>;
  fastConfirmDate?: Maybe<Scalars['Long']>;
  fastTransactionId?: Maybe<Scalars['String']>;
  fastTransactionNumber?: Maybe<Scalars['String']>;
  fundAccountId?: Maybe<Scalars['String']>;
  isBooking?: Maybe<Scalars['Boolean']>;
  isRefunded?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['String']>;
  supportRequestCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type CreateRefundTransactionResponse = {
  __typename?: 'CreateRefundTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  refundTransactionDto?: Maybe<RefundTransactionDto>;
};

export type CreateRuleResponse = {
  __typename?: 'CreateRuleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ruleDto?: Maybe<RuleDto>;
};

export type CreateSearchTermInput = {
  keyWord?: Maybe<Scalars['String']>;
};

export type CreateSearchTermResponse = {
  __typename?: 'CreateSearchTermResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateServiceTicketForFrontOfficeResponse = {
  __typename?: 'CreateServiceTicketForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
};

export type CreateServiceTicketInput = {
  appointmentDatetime?: Maybe<Scalars['Float']>;
  executorId?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  ticketNote?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type CreateStaffGroupInput = {
  parentStaffGroupId?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  subStaffGroupIds?: Maybe<Scalars['String']>;
};

export type CreateStaffGroupResponse = {
  __typename?: 'CreateStaffGroupResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type CreateStaffInput = {
  departmentId?: Maybe<Scalars['String']>;
  isGroupLeader: Scalars['Boolean'];
  nationalId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom: Scalars['Float'];
  preferPropertyPriceTo: Scalars['Float'];
  preferPropertyTypes?: Maybe<Scalars['String']>;
  rating: Scalars['Int'];
  specialityIds?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type CreateStaffResponse = {
  __typename?: 'CreateStaffResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffDto?: Maybe<StaffDto>;
};

export type CreateStringeeXContactResponse = {
  __typename?: 'CreateStringeeXContactResponse';
  contact?: Maybe<StringeeXContactDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestBoResponse = {
  __typename?: 'CreateSupportRequestBOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestBoInput = {
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  guestId?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestBoInputNew = {
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  guestId?: Maybe<Scalars['String']>;
  isVasService?: Maybe<Scalars['Boolean']>;
  phone?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  ticketId?: Maybe<Scalars['Uuid']>;
  userId?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestFintechInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['Uuid']>;
  demandDescription?: Maybe<Scalars['String']>;
  demandType?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['Uuid']>;
  requestTypeIds?: Maybe<Scalars['String']>;
  sourceTypeId: Scalars['Uuid'];
};

export type CreateSupportRequestFromContactTradingDetailRequestInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  requestDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestFromContactTradingDetailResponse = {
  __typename?: 'CreateSupportRequestFromContactTradingDetailResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestInput = {
  isVasService?: Maybe<Scalars['Boolean']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  requestData?: Maybe<Scalars['String']>;
  requestDescription?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterIsUser?: Maybe<Scalars['Boolean']>;
  requesterName?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requestForUserId?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestResponse = {
  __typename?: 'CreateSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type CreateSupportRequestStringeeResponse = {
  __typename?: 'CreateSupportRequestStringeeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateTopenerBankAccountFoInput = {
  bankAccountBranch?: Maybe<Scalars['String']>;
  bankAccountHolderName?: Maybe<Scalars['String']>;
  bankAccountNumber?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  isDefault: Scalars['Boolean'];
};

export type CreateTopenerBankAccountResponse = {
  __typename?: 'CreateTopenerBankAccountResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateUserInput = {
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  gender: Gender;
  isCreatedByAdmin?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isMember?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumberConfirmed?: Maybe<Scalars['Boolean']>;
  profilePhoto?: Maybe<Scalars['String']>;
  referralCode?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type CreateUserReportSpamInput = {
  userReportSpamDto?: Maybe<UserReportSpamDtoInput>;
};

export type CreateUserReportSpamResponse = {
  __typename?: 'CreateUserReportSpamResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type CreateUserResponse = {
  __typename?: 'CreateUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type CustomerDto = {
  __typename?: 'CustomerDto';
  createdDatetime: Scalars['Long'];
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerPassport?: Maybe<Scalars['String']>;
  customerPassportExpireDate?: Maybe<Scalars['Long']>;
  customerPassportIssueDate?: Maybe<Scalars['Long']>;
  customerPassportIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  nationalIdType: NationalIdType;
  nationalityId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type CustomerDtoFilter = {
  AND?: Maybe<Array<CustomerDtoFilter>>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerContactAddress_contains?: Maybe<Scalars['String']>;
  customerContactAddress_ends_with?: Maybe<Scalars['String']>;
  customerContactAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerContactAddress_not?: Maybe<Scalars['String']>;
  customerContactAddress_not_contains?: Maybe<Scalars['String']>;
  customerContactAddress_not_ends_with?: Maybe<Scalars['String']>;
  customerContactAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerContactAddress_not_starts_with?: Maybe<Scalars['String']>;
  customerContactAddress_starts_with?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerEmail_contains?: Maybe<Scalars['String']>;
  customerEmail_ends_with?: Maybe<Scalars['String']>;
  customerEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerEmail_not?: Maybe<Scalars['String']>;
  customerEmail_not_contains?: Maybe<Scalars['String']>;
  customerEmail_not_ends_with?: Maybe<Scalars['String']>;
  customerEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerEmail_not_starts_with?: Maybe<Scalars['String']>;
  customerEmail_starts_with?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerFirstName_contains?: Maybe<Scalars['String']>;
  customerFirstName_ends_with?: Maybe<Scalars['String']>;
  customerFirstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFirstName_not?: Maybe<Scalars['String']>;
  customerFirstName_not_contains?: Maybe<Scalars['String']>;
  customerFirstName_not_ends_with?: Maybe<Scalars['String']>;
  customerFirstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFirstName_not_starts_with?: Maybe<Scalars['String']>;
  customerFirstName_starts_with?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerLastName_contains?: Maybe<Scalars['String']>;
  customerLastName_ends_with?: Maybe<Scalars['String']>;
  customerLastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerLastName_not?: Maybe<Scalars['String']>;
  customerLastName_not_contains?: Maybe<Scalars['String']>;
  customerLastName_not_ends_with?: Maybe<Scalars['String']>;
  customerLastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerLastName_not_starts_with?: Maybe<Scalars['String']>;
  customerLastName_starts_with?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  customerPhone_contains?: Maybe<Scalars['String']>;
  customerPhone_ends_with?: Maybe<Scalars['String']>;
  customerPhone_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerPhone_not?: Maybe<Scalars['String']>;
  customerPhone_not_contains?: Maybe<Scalars['String']>;
  customerPhone_not_ends_with?: Maybe<Scalars['String']>;
  customerPhone_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerPhone_not_starts_with?: Maybe<Scalars['String']>;
  customerPhone_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<CustomerDtoFilter>>;
  permanentAddress?: Maybe<Scalars['String']>;
  permanentAddress_contains?: Maybe<Scalars['String']>;
  permanentAddress_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not?: Maybe<Scalars['String']>;
  permanentAddress_not_contains?: Maybe<Scalars['String']>;
  permanentAddress_not_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not_starts_with?: Maybe<Scalars['String']>;
  permanentAddress_starts_with?: Maybe<Scalars['String']>;
};

export type CustomerDtoInput = {
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerNationalIdType: NationalIdType;
  customerPassport?: Maybe<Scalars['String']>;
  customerPassportExpireDate?: Maybe<Scalars['Long']>;
  customerPassportIssueDate?: Maybe<Scalars['Long']>;
  customerPassportIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  nationalityId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type CustomerInfoChangeHistoryDto = {
  __typename?: 'CustomerInfoChangeHistoryDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  customerFullNameNew?: Maybe<Scalars['String']>;
  customerFullNameOld?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerInfoChangeHistoryId?: Maybe<Scalars['String']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  isSyncToFast: Scalars['Boolean'];
  newData?: Maybe<Scalars['String']>;
  oldData?: Maybe<Scalars['String']>;
};

export type CustomerInfoChangeHistoryDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type CustomerInfoDto = {
  __typename?: 'CustomerInfoDto';
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerPassport?: Maybe<Scalars['String']>;
  customerPassportExpireDate?: Maybe<Scalars['Long']>;
  customerPassportIssueDate?: Maybe<Scalars['Long']>;
  customerPassportIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  nationalIdType: NationalIdType;
  nationalityId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
};

export enum CustomerType {
  Inside = 'INSIDE',
  Outside = 'OUTSIDE',
  Unsale = 'UNSALE'
}




export type DeclineContactTradingB2CInput = {
  notificationId?: Maybe<Scalars['String']>;
};

export type DeclineContactTradingB2CResponse = {
  __typename?: 'DeclineContactTradingB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteAgentInput = {
  agentId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type DeleteAgentRatingResponse = {
  __typename?: 'DeleteAgentRatingResponse';
  agentRatingDto?: Maybe<Master_Data_AgentRatingDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteAgentResponse = {
  __typename?: 'DeleteAgentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteAllocationRuleInput = {
  allocationRuleId?: Maybe<Scalars['String']>;
};

export type DeleteAllocationRuleResponse = {
  __typename?: 'DeleteAllocationRuleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteB2C2CProjectResponse = {
  __typename?: 'DeleteB2C2CProjectResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteBackOfficeRoleResponse = {
  __typename?: 'DeleteBackOfficeRoleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteBookingTransactionResponse = {
  __typename?: 'DeleteBookingTransactionResponse';
  bookingTransactionDto?: Maybe<BookingTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteCustomerRequestInput = {
  customerId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type DeleteCustomerResponse = {
  __typename?: 'DeleteCustomerResponse';
  customerDto?: Maybe<CustomerDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteDepositTransactionResponse = {
  __typename?: 'DeleteDepositTransactionResponse';
  depositeTransactionDto?: Maybe<DepositeTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteDocumentAttributeInput = {
  documentAttributeId?: Maybe<Scalars['String']>;
};

export type DeleteDocumentAttributeResponse = {
  __typename?: 'DeleteDocumentAttributeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteFollowerOfCurrentUserForFrontOfficeResponse = {
  __typename?: 'DeleteFollowerOfCurrentUserForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteFollowerOfCurrentUserInput = {
  agentId?: Maybe<Scalars['String']>;
};

export type DeleteGuestResponse = {
  __typename?: 'DeleteGuestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  guestDto?: Maybe<GuestDto>;
};

export type DeleteImageBlockFloorPlanInput = {
  blockFloorPlanId?: Maybe<Scalars['String']>;
};

export type DeleteImageBlockFloorPlanResponse = {
  __typename?: 'DeleteImageBlockFloorPlanResponse';
  blockFloorPlanDto?: Maybe<BlockFloorPlanDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteInvestorInput = {
  investorId?: Maybe<Scalars['String']>;
};

export type DeleteLegalInfoResponse = {
  __typename?: 'DeleteLegalInfoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  legalInfoDto?: Maybe<LegalInfoDto>;
};

export type DeleteMobileAppVersionInput = {
  mobileAppVersionId: Scalars['Int'];
};

export type DeleteMobileAppVersionResponse = {
  __typename?: 'DeleteMobileAppVersionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  mobileAppVersion?: Maybe<MobileAppVersionDto>;
};

export type DeletePolicyInput = {
  policyId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type DeletePropertyPostApprovalStatusResponse = {
  __typename?: 'DeletePropertyPostApprovalStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusDto?: Maybe<PropertyPostApprovalStatusDto>;
};

export type DeletePropertyPostForBackOfficeInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type DeletePropertyPostForBackOfficeResponse = {
  __typename?: 'DeletePropertyPostForBackOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeletePropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type DeletePropertyPostStatusResponse = {
  __typename?: 'DeletePropertyPostStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostStatusDto?: Maybe<PropertyPostStatusDto>;
};

export type DeleteRuleResponse = {
  __typename?: 'DeleteRuleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ruleDto?: Maybe<RuleDto>;
};

export type DeleteStaffGroupInput = {
  staffGroupId?: Maybe<Scalars['String']>;
};

export type DeleteStaffGroupResponse = {
  __typename?: 'DeleteStaffGroupResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteStaffInput = {
  recordVersion?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['String']>;
};

export type DeleteStaffResponse = {
  __typename?: 'DeleteStaffResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffDto?: Maybe<StaffDto>;
};

export type DeleteSupportRequestInput = {
  recordVersion?: Maybe<Scalars['Int']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type DeleteSupportRequestResponse = {
  __typename?: 'DeleteSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestDto?: Maybe<SupportRequestDto>;
};

export type DeleteTopenerBankAccountFoInput = {
  recordVersion: Scalars['Int'];
  topenerBankAccountId?: Maybe<Scalars['String']>;
};

export type DeleteTopenerBankAccountResponse = {
  __typename?: 'DeleteTopenerBankAccountResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type DeleteUserInput = {
  userId?: Maybe<Scalars['String']>;
};

export type DeleteUserResponse = {
  __typename?: 'DeleteUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type DepartmentDto = {
  __typename?: 'DepartmentDto';
  departmentDescription?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  managedByUserId?: Maybe<Scalars['String']>;
  managedByUserName?: Maybe<Scalars['String']>;
  organizationId?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type DepartmentDtoFilter = {
  AND?: Maybe<Array<DepartmentDtoFilter>>;
  departmentId?: Maybe<Scalars['String']>;
  departmentId_contains?: Maybe<Scalars['String']>;
  departmentId_ends_with?: Maybe<Scalars['String']>;
  departmentId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentId_not?: Maybe<Scalars['String']>;
  departmentId_not_contains?: Maybe<Scalars['String']>;
  departmentId_not_ends_with?: Maybe<Scalars['String']>;
  departmentId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentId_not_starts_with?: Maybe<Scalars['String']>;
  departmentId_starts_with?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  departmentName_contains?: Maybe<Scalars['String']>;
  departmentName_ends_with?: Maybe<Scalars['String']>;
  departmentName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentName_not?: Maybe<Scalars['String']>;
  departmentName_not_contains?: Maybe<Scalars['String']>;
  departmentName_not_ends_with?: Maybe<Scalars['String']>;
  departmentName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentName_not_starts_with?: Maybe<Scalars['String']>;
  departmentName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DepartmentDtoFilter>>;
};

export type DepartmentDtoSort = {
  departmentName?: Maybe<SortOperationKind>;
};

export type DepartmentInfoDto = {
  __typename?: 'DepartmentInfoDto';
  departmentDescription?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  managedByUserId?: Maybe<Scalars['String']>;
  managedByUserName?: Maybe<Scalars['String']>;
  organizationId?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type DepositeDurationDto = {
  __typename?: 'DepositeDurationDto';
  ableConfirmDeposite?: Maybe<Scalars['Boolean']>;
  beginDepositeDatetime?: Maybe<Scalars['Long']>;
  endDepositeDatetime?: Maybe<Scalars['Long']>;
  endDepositeTimeInSecond?: Maybe<Scalars['Int']>;
};

export type DepositeStatusDto = {
  __typename?: 'DepositeStatusDto';
  depositeStatusDescription?: Maybe<Scalars['String']>;
  depositeStatusId?: Maybe<Scalars['String']>;
  depositeStatusName?: Maybe<Scalars['String']>;
  depositeStatusSortOrder: Scalars['Int'];
};

export type DepositeStatusDtoFilter = {
  AND?: Maybe<Array<DepositeStatusDtoFilter>>;
  depositeStatusName?: Maybe<Scalars['String']>;
  depositeStatusName_contains?: Maybe<Scalars['String']>;
  depositeStatusName_ends_with?: Maybe<Scalars['String']>;
  depositeStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeStatusName_not?: Maybe<Scalars['String']>;
  depositeStatusName_not_contains?: Maybe<Scalars['String']>;
  depositeStatusName_not_ends_with?: Maybe<Scalars['String']>;
  depositeStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeStatusName_not_starts_with?: Maybe<Scalars['String']>;
  depositeStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DepositeStatusDtoFilter>>;
};

export type DepositeStatusDtoSort = {
  depositeStatusName?: Maybe<SortOperationKind>;
};

export type DepositeStatusInfoDto = {
  __typename?: 'DepositeStatusInfoDto';
  depositeStatusDescription?: Maybe<Scalars['String']>;
  depositeStatusId?: Maybe<Scalars['String']>;
  depositeStatusName?: Maybe<Scalars['String']>;
  depositeStatusSortOrder: Scalars['Int'];
};

export type DepositeTransactionDto = {
  __typename?: 'DepositeTransactionDto';
  bookingTransactionId?: Maybe<Scalars['String']>;
  buyCommission?: Maybe<Scalars['Float']>;
  buyCommissionAmount?: Maybe<Scalars['Float']>;
  buyerDto?: Maybe<BuyerDto>;
  buyerId?: Maybe<Scalars['String']>;
  comfirmDepositeDatetime?: Maybe<Scalars['Long']>;
  consultantId?: Maybe<Scalars['String']>;
  consultantInfoDto?: Maybe<ConsultantInfoDto>;
  contractDueDate?: Maybe<Scalars['Long']>;
  createdByUserId?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  depositeAmount?: Maybe<Scalars['Float']>;
  depositeDatetime?: Maybe<Scalars['Long']>;
  depositeNumber?: Maybe<Scalars['Long']>;
  depositeStatusId?: Maybe<Scalars['String']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  depositeTransactionNotes?: Maybe<Scalars['String']>;
  fastProductId?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  fastTransactionId?: Maybe<Scalars['String']>;
  fastTransactionNumber?: Maybe<Scalars['String']>;
  isLatest?: Maybe<Scalars['Boolean']>;
  numberOfChanging?: Maybe<Scalars['Int']>;
  paymentCode?: Maybe<Scalars['String']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentTransactionInfo?: Maybe<Scalars['String']>;
  priceVat?: Maybe<Scalars['Float']>;
  priorDepositeTransactionId?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<PropertyPostInfoDto>;
  rewardPoints?: Maybe<Scalars['Int']>;
  saleAgentId?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionAmount?: Maybe<Scalars['Float']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type DepositeTransactionInfoDto = {
  __typename?: 'DepositeTransactionInfoDto';
  bookingTransactionId?: Maybe<Scalars['String']>;
  buyCommission?: Maybe<Scalars['Float']>;
  buyCommissionAmount?: Maybe<Scalars['Float']>;
  buyerId?: Maybe<Scalars['String']>;
  comfirmDepositeDatetime?: Maybe<Scalars['Long']>;
  contractDueDate?: Maybe<Scalars['Long']>;
  customerId?: Maybe<Scalars['String']>;
  depositeAmount?: Maybe<Scalars['Float']>;
  depositeDatetime?: Maybe<Scalars['Long']>;
  depositeNumber: Scalars['Long'];
  depositeStatusId?: Maybe<Scalars['String']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  depositeTransactionNotes?: Maybe<Scalars['String']>;
  fastTransactionId?: Maybe<Scalars['String']>;
  fastTransactionNumber?: Maybe<Scalars['String']>;
  isLatest: Scalars['Boolean'];
  numberOfChanging?: Maybe<Scalars['Int']>;
  paymentCode?: Maybe<Scalars['String']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentTransactionInfo?: Maybe<Scalars['String']>;
  priorDepositeTransactionId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  rewardPoints?: Maybe<Scalars['Int']>;
  saleAgentId?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionAmount?: Maybe<Scalars['Float']>;
};

export type DepositeTransactionToAssignConsultantDto = {
  __typename?: 'DepositeTransactionToAssignConsultantDto';
  b2CBlockName?: Maybe<Scalars['String']>;
  b2CProjectId?: Maybe<Scalars['String']>;
  b2CProjectName?: Maybe<Scalars['String']>;
  b2CPropertyCode?: Maybe<Scalars['String']>;
  b2CPropertyPostId?: Maybe<Scalars['String']>;
  b2CSaleSeasonId?: Maybe<Scalars['String']>;
  b2CSaleSeasonName?: Maybe<Scalars['String']>;
  b2CSubtypeDescription?: Maybe<Scalars['String']>;
  b2CSubtypeId?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  buyerFullname?: Maybe<Scalars['String']>;
  consultantIsSelectedByTopener: Scalars['Boolean'];
  consultantStaffFullname?: Maybe<Scalars['String']>;
  consultantStaffId?: Maybe<Scalars['String']>;
  depositeAmount?: Maybe<Scalars['Float']>;
  depositeNumber?: Maybe<Scalars['String']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionIndex?: Maybe<Scalars['Int']>;
  transactionStatusDescription?: Maybe<Scalars['String']>;
  transactionStatusId?: Maybe<Scalars['String']>;
};

export type DepositeTransactionToAssignConsultantDtoFilter = {
  AND?: Maybe<Array<DepositeTransactionToAssignConsultantDtoFilter>>;
  b2CBlockName?: Maybe<Scalars['String']>;
  b2CBlockName_contains?: Maybe<Scalars['String']>;
  b2CBlockName_ends_with?: Maybe<Scalars['String']>;
  b2CBlockName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CBlockName_not?: Maybe<Scalars['String']>;
  b2CBlockName_not_contains?: Maybe<Scalars['String']>;
  b2CBlockName_not_ends_with?: Maybe<Scalars['String']>;
  b2CBlockName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CBlockName_not_starts_with?: Maybe<Scalars['String']>;
  b2CBlockName_starts_with?: Maybe<Scalars['String']>;
  b2CSubtypeId?: Maybe<Scalars['String']>;
  b2CSubtypeId_contains?: Maybe<Scalars['String']>;
  b2CSubtypeId_ends_with?: Maybe<Scalars['String']>;
  b2CSubtypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CSubtypeId_not?: Maybe<Scalars['String']>;
  b2CSubtypeId_not_contains?: Maybe<Scalars['String']>;
  b2CSubtypeId_not_ends_with?: Maybe<Scalars['String']>;
  b2CSubtypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2CSubtypeId_not_starts_with?: Maybe<Scalars['String']>;
  b2CSubtypeId_starts_with?: Maybe<Scalars['String']>;
  buyerFullname?: Maybe<Scalars['String']>;
  buyerFullname_contains?: Maybe<Scalars['String']>;
  buyerFullname_ends_with?: Maybe<Scalars['String']>;
  buyerFullname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  buyerFullname_not?: Maybe<Scalars['String']>;
  buyerFullname_not_contains?: Maybe<Scalars['String']>;
  buyerFullname_not_ends_with?: Maybe<Scalars['String']>;
  buyerFullname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  buyerFullname_not_starts_with?: Maybe<Scalars['String']>;
  buyerFullname_starts_with?: Maybe<Scalars['String']>;
  consultantStaffFullname?: Maybe<Scalars['String']>;
  consultantStaffFullname_contains?: Maybe<Scalars['String']>;
  consultantStaffFullname_ends_with?: Maybe<Scalars['String']>;
  consultantStaffFullname_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  consultantStaffFullname_not?: Maybe<Scalars['String']>;
  consultantStaffFullname_not_contains?: Maybe<Scalars['String']>;
  consultantStaffFullname_not_ends_with?: Maybe<Scalars['String']>;
  consultantStaffFullname_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  consultantStaffFullname_not_starts_with?: Maybe<Scalars['String']>;
  consultantStaffFullname_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DepositeTransactionToAssignConsultantDtoFilter>>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionDatetime_gt?: Maybe<Scalars['Long']>;
  transactionDatetime_gte?: Maybe<Scalars['Long']>;
  transactionDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  transactionDatetime_lt?: Maybe<Scalars['Long']>;
  transactionDatetime_lte?: Maybe<Scalars['Long']>;
  transactionDatetime_not?: Maybe<Scalars['Long']>;
  transactionDatetime_not_gt?: Maybe<Scalars['Long']>;
  transactionDatetime_not_gte?: Maybe<Scalars['Long']>;
  transactionDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  transactionDatetime_not_lt?: Maybe<Scalars['Long']>;
  transactionDatetime_not_lte?: Maybe<Scalars['Long']>;
  transactionStatusId?: Maybe<Scalars['String']>;
  transactionStatusId_contains?: Maybe<Scalars['String']>;
  transactionStatusId_ends_with?: Maybe<Scalars['String']>;
  transactionStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatusId_not?: Maybe<Scalars['String']>;
  transactionStatusId_not_contains?: Maybe<Scalars['String']>;
  transactionStatusId_not_ends_with?: Maybe<Scalars['String']>;
  transactionStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatusId_not_starts_with?: Maybe<Scalars['String']>;
  transactionStatusId_starts_with?: Maybe<Scalars['String']>;
};

export type DepositeTransactionToAssignConsultantDtoSort = {
  b2CSubtypeDescription?: Maybe<SortOperationKind>;
  buyerFullname?: Maybe<SortOperationKind>;
  consultantStaffFullname?: Maybe<SortOperationKind>;
  depositeAmount?: Maybe<SortOperationKind>;
  depositeNumber?: Maybe<SortOperationKind>;
  transactionDatetime?: Maybe<SortOperationKind>;
  transactionStatusId?: Maybe<SortOperationKind>;
};

export type DepositeTransactionToAssignConsultantInput = {
  projectId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export enum Direction {
  Null = 'NULL',
  East = 'EAST',
  West = 'WEST',
  South = 'SOUTH',
  North = 'NORTH',
  Southeast = 'SOUTHEAST',
  Northeast = 'NORTHEAST',
  Southwest = 'SOUTHWEST',
  Northwest = 'NORTHWEST'
}

export type DiscountDetailDto = {
  __typename?: 'DiscountDetailDto';
  anotherDiscount?: Maybe<DiscountDetailInfoDto>;
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  b2CTransactionContractStatusId?: Maybe<Scalars['String']>;
  buyCommission?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<DiscountDetailDto>;
  depositTransactionId?: Maybe<Scalars['String']>;
  firstPayment?: Maybe<Scalars['Float']>;
  isHiddenPrintContract?: Maybe<Scalars['Boolean']>;
  isPriceVat?: Maybe<Scalars['Boolean']>;
  issuedPrice?: Maybe<Scalars['Float']>;
  minimumPayment?: Maybe<Scalars['Float']>;
  overScheduledPayment?: Maybe<DiscountDetailInfoDto>;
  priceAfterDiscount?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleDiscount?: Maybe<DiscountSaleInfoDto>;
};

export type DiscountDetailInfoDto = {
  __typename?: 'DiscountDetailInfoDto';
  amount?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<DiscountDetailInfoDto>;
  discountDetails?: Maybe<Scalars['String']>;
  isContractDiscount?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['Float']>;
};

export type DiscountDetailInfoDtoInput = {
  amount?: Maybe<Scalars['Float']>;
  discountDetails?: Maybe<Scalars['String']>;
  isContractDiscount?: Maybe<Scalars['Boolean']>;
  name?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['Float']>;
};

export type DiscountSaleInfoDto = {
  __typename?: 'DiscountSaleInfoDto';
  amount?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<DiscountSaleInfoDto>;
  discountDetailDtos?: Maybe<Array<Maybe<DiscountDetailInfoDto>>>;
  isContractDiscount?: Maybe<Scalars['Boolean']>;
  note?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['Float']>;
};

export type DistrictDto = {
  __typename?: 'DistrictDto';
  area?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  countryId: Scalars['Int'];
  density?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  path?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type DistrictDtoFilter = {
  AND?: Maybe<Array<DistrictDtoFilter>>;
  area?: Maybe<Scalars['String']>;
  area_contains?: Maybe<Scalars['String']>;
  area_ends_with?: Maybe<Scalars['String']>;
  area_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not?: Maybe<Scalars['String']>;
  area_not_contains?: Maybe<Scalars['String']>;
  area_not_ends_with?: Maybe<Scalars['String']>;
  area_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not_starts_with?: Maybe<Scalars['String']>;
  area_starts_with?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  countryId?: Maybe<Scalars['Int']>;
  countryId_gt?: Maybe<Scalars['Int']>;
  countryId_gte?: Maybe<Scalars['Int']>;
  countryId_in?: Maybe<Array<Scalars['Int']>>;
  countryId_lt?: Maybe<Scalars['Int']>;
  countryId_lte?: Maybe<Scalars['Int']>;
  countryId_not?: Maybe<Scalars['Int']>;
  countryId_not_gt?: Maybe<Scalars['Int']>;
  countryId_not_gte?: Maybe<Scalars['Int']>;
  countryId_not_in?: Maybe<Array<Scalars['Int']>>;
  countryId_not_lt?: Maybe<Scalars['Int']>;
  countryId_not_lte?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Scalars['Int']>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Scalars['Int']>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  districtName_contains?: Maybe<Scalars['String']>;
  districtName_ends_with?: Maybe<Scalars['String']>;
  districtName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  districtName_not?: Maybe<Scalars['String']>;
  districtName_not_contains?: Maybe<Scalars['String']>;
  districtName_not_ends_with?: Maybe<Scalars['String']>;
  districtName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  districtName_not_starts_with?: Maybe<Scalars['String']>;
  districtName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DistrictDtoFilter>>;
};

export type DistrictDtoSort = {
  area?: Maybe<SortOperationKind>;
  districtName?: Maybe<SortOperationKind>;
};

export type DistrictInfoDto = {
  __typename?: 'DistrictInfoDto';
  area?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  countryId: Scalars['Int'];
  density?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  path?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type DocumentAttributeDto = {
  __typename?: 'DocumentAttributeDto';
  documentAttributeDescription?: Maybe<Scalars['String']>;
  documentAttributeId?: Maybe<Scalars['String']>;
  documentAttributeName?: Maybe<Scalars['String']>;
  documentAttributeTemplate?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription?: Maybe<Scalars['String']>;
  documentAttributeTypeId?: Maybe<Scalars['String']>;
  documentAttributeTypeName?: Maybe<Scalars['String']>;
};

export type DocumentAttributeDtoFilter = {
  AND?: Maybe<Array<DocumentAttributeDtoFilter>>;
  documentAttributeDescription?: Maybe<Scalars['String']>;
  documentAttributeDescription_contains?: Maybe<Scalars['String']>;
  documentAttributeDescription_ends_with?: Maybe<Scalars['String']>;
  documentAttributeDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeDescription_not?: Maybe<Scalars['String']>;
  documentAttributeDescription_not_contains?: Maybe<Scalars['String']>;
  documentAttributeDescription_not_ends_with?: Maybe<Scalars['String']>;
  documentAttributeDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeDescription_not_starts_with?: Maybe<Scalars['String']>;
  documentAttributeDescription_starts_with?: Maybe<Scalars['String']>;
  documentAttributeName?: Maybe<Scalars['String']>;
  documentAttributeName_contains?: Maybe<Scalars['String']>;
  documentAttributeName_ends_with?: Maybe<Scalars['String']>;
  documentAttributeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeName_not?: Maybe<Scalars['String']>;
  documentAttributeName_not_contains?: Maybe<Scalars['String']>;
  documentAttributeName_not_ends_with?: Maybe<Scalars['String']>;
  documentAttributeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeName_not_starts_with?: Maybe<Scalars['String']>;
  documentAttributeName_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTemplate?: Maybe<Scalars['String']>;
  documentAttributeTemplate_contains?: Maybe<Scalars['String']>;
  documentAttributeTemplate_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTemplate_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTemplate_not?: Maybe<Scalars['String']>;
  documentAttributeTemplate_not_contains?: Maybe<Scalars['String']>;
  documentAttributeTemplate_not_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTemplate_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTemplate_not_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTemplate_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTypeId?: Maybe<Scalars['String']>;
  documentAttributeTypeId_contains?: Maybe<Scalars['String']>;
  documentAttributeTypeId_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTypeId_not?: Maybe<Scalars['String']>;
  documentAttributeTypeId_not_contains?: Maybe<Scalars['String']>;
  documentAttributeTypeId_not_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTypeId_not_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTypeId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DocumentAttributeDtoFilter>>;
};

export type DocumentAttributeDtoSort = {
  documentAttributeName?: Maybe<SortOperationKind>;
  documentAttributeTypeId?: Maybe<SortOperationKind>;
};

export type DocumentAttributeTypeDto = {
  __typename?: 'DocumentAttributeTypeDto';
  documentAttributeTypeDescription?: Maybe<Scalars['String']>;
  documentAttributeTypeId?: Maybe<Scalars['String']>;
  documentAttributeTypeName?: Maybe<Scalars['String']>;
};

export type DocumentAttributeTypeDtoFilter = {
  AND?: Maybe<Array<DocumentAttributeTypeDtoFilter>>;
  documentAttributeTypeDescription?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_contains?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTypeDescription_not?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_not_contains?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_not_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTypeDescription_not_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTypeDescription_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTypeName?: Maybe<Scalars['String']>;
  documentAttributeTypeName_contains?: Maybe<Scalars['String']>;
  documentAttributeTypeName_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTypeName_not?: Maybe<Scalars['String']>;
  documentAttributeTypeName_not_contains?: Maybe<Scalars['String']>;
  documentAttributeTypeName_not_ends_with?: Maybe<Scalars['String']>;
  documentAttributeTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentAttributeTypeName_not_starts_with?: Maybe<Scalars['String']>;
  documentAttributeTypeName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DocumentAttributeTypeDtoFilter>>;
};

export type DocumentAttributeTypeDtoSort = {
  documentAttributeTypeDescription?: Maybe<SortOperationKind>;
  documentAttributeTypeName?: Maybe<SortOperationKind>;
};

export type DocumentTemplateDto = {
  __typename?: 'DocumentTemplateDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDate?: Maybe<Scalars['Long']>;
  documentTemplateCode?: Maybe<Scalars['String']>;
  documentTemplateId?: Maybe<Scalars['String']>;
  documentTypeDescription?: Maybe<Scalars['String']>;
  documentTypeId?: Maybe<Scalars['String']>;
  documentTypeName?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  fileUrl?: Maybe<Scalars['String']>;
};

export type DocumentTemplateDtoFilter = {
  AND?: Maybe<Array<DocumentTemplateDtoFilter>>;
  createdDate?: Maybe<Scalars['Long']>;
  createdDate_gt?: Maybe<Scalars['Long']>;
  createdDate_gte?: Maybe<Scalars['Long']>;
  createdDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDate_lt?: Maybe<Scalars['Long']>;
  createdDate_lte?: Maybe<Scalars['Long']>;
  createdDate_not?: Maybe<Scalars['Long']>;
  createdDate_not_gt?: Maybe<Scalars['Long']>;
  createdDate_not_gte?: Maybe<Scalars['Long']>;
  createdDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDate_not_lt?: Maybe<Scalars['Long']>;
  createdDate_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<DocumentTemplateDtoFilter>>;
};

export type DocumentTemplateDtoSort = {
  createdDate?: Maybe<SortOperationKind>;
  filename?: Maybe<SortOperationKind>;
};

export type DocumentTypeDto = {
  __typename?: 'DocumentTypeDto';
  documentCategoryId?: Maybe<Scalars['String']>;
  documentTypeDescription?: Maybe<Scalars['String']>;
  documentTypeId?: Maybe<Scalars['String']>;
  documentTypeName?: Maybe<Scalars['String']>;
};

export type DocumentTypeDtoFilter = {
  AND?: Maybe<Array<DocumentTypeDtoFilter>>;
  documentTypeDescription?: Maybe<Scalars['String']>;
  documentTypeDescription_contains?: Maybe<Scalars['String']>;
  documentTypeDescription_ends_with?: Maybe<Scalars['String']>;
  documentTypeDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentTypeDescription_not?: Maybe<Scalars['String']>;
  documentTypeDescription_not_contains?: Maybe<Scalars['String']>;
  documentTypeDescription_not_ends_with?: Maybe<Scalars['String']>;
  documentTypeDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentTypeDescription_not_starts_with?: Maybe<Scalars['String']>;
  documentTypeDescription_starts_with?: Maybe<Scalars['String']>;
  documentTypeName?: Maybe<Scalars['String']>;
  documentTypeName_contains?: Maybe<Scalars['String']>;
  documentTypeName_ends_with?: Maybe<Scalars['String']>;
  documentTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentTypeName_not?: Maybe<Scalars['String']>;
  documentTypeName_not_contains?: Maybe<Scalars['String']>;
  documentTypeName_not_ends_with?: Maybe<Scalars['String']>;
  documentTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  documentTypeName_not_starts_with?: Maybe<Scalars['String']>;
  documentTypeName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<DocumentTypeDtoFilter>>;
};

export type DocumentTypeDtoSort = {
  documentTypeDescription?: Maybe<SortOperationKind>;
  documentTypeName?: Maybe<SortOperationKind>;
};

export type EWalletTypeDto = {
  __typename?: 'EWalletTypeDto';
  eWalletTypeDescription?: Maybe<Scalars['String']>;
  eWalletTypeId?: Maybe<Scalars['String']>;
  eWalletTypeName?: Maybe<Scalars['String']>;
};

export type EWalletTypeDtoFilter = {
  AND?: Maybe<Array<EWalletTypeDtoFilter>>;
  eWalletTypeName?: Maybe<Scalars['String']>;
  eWalletTypeName_contains?: Maybe<Scalars['String']>;
  eWalletTypeName_ends_with?: Maybe<Scalars['String']>;
  eWalletTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  eWalletTypeName_not?: Maybe<Scalars['String']>;
  eWalletTypeName_not_contains?: Maybe<Scalars['String']>;
  eWalletTypeName_not_ends_with?: Maybe<Scalars['String']>;
  eWalletTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  eWalletTypeName_not_starts_with?: Maybe<Scalars['String']>;
  eWalletTypeName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<EWalletTypeDtoFilter>>;
};

export type EWalletTypeDtoSort = {
  eWalletTypeName?: Maybe<SortOperationKind>;
};

export type EmailNotificationTemplateDto = {
  __typename?: 'EmailNotificationTemplateDto';
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  deletedBy?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  emailContent?: Maybe<Scalars['String']>;
  emailSubject?: Maybe<Scalars['String']>;
  modifiedBy?: Maybe<Scalars['String']>;
  notificationTemplateDescription?: Maybe<Scalars['String']>;
  notificationTemplateId?: Maybe<Scalars['String']>;
  notificationTemplateName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type EmailNotificationTemplateDtoFilter = {
  AND?: Maybe<Array<EmailNotificationTemplateDtoFilter>>;
  notificationTemplateDescription?: Maybe<Scalars['String']>;
  notificationTemplateDescription_contains?: Maybe<Scalars['String']>;
  notificationTemplateDescription_ends_with?: Maybe<Scalars['String']>;
  notificationTemplateDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationTemplateDescription_not?: Maybe<Scalars['String']>;
  notificationTemplateDescription_not_contains?: Maybe<Scalars['String']>;
  notificationTemplateDescription_not_ends_with?: Maybe<Scalars['String']>;
  notificationTemplateDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationTemplateDescription_not_starts_with?: Maybe<Scalars['String']>;
  notificationTemplateDescription_starts_with?: Maybe<Scalars['String']>;
  notificationTemplateName?: Maybe<Scalars['String']>;
  notificationTemplateName_contains?: Maybe<Scalars['String']>;
  notificationTemplateName_ends_with?: Maybe<Scalars['String']>;
  notificationTemplateName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationTemplateName_not?: Maybe<Scalars['String']>;
  notificationTemplateName_not_contains?: Maybe<Scalars['String']>;
  notificationTemplateName_not_ends_with?: Maybe<Scalars['String']>;
  notificationTemplateName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationTemplateName_not_starts_with?: Maybe<Scalars['String']>;
  notificationTemplateName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<EmailNotificationTemplateDtoFilter>>;
};

export type EmailNotificationTemplateDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  notificationTemplateDescription?: Maybe<SortOperationKind>;
  notificationTemplateName?: Maybe<SortOperationKind>;
};

export type EmailTemplateSettingDto = {
  __typename?: 'EmailTemplateSettingDto';
  backgroundImage?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<EmailTemplateSettingDto>;
  emailTemplateSettingId?: Maybe<Scalars['String']>;
  finalTemplate?: Maybe<Scalars['String']>;
  footer?: Maybe<Scalars['String']>;
  header?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type EstateTypeOfInterestDto = {
  __typename?: 'EstateTypeOfInterestDto';
  estateTypeOfInterestDescription?: Maybe<Scalars['String']>;
  estateTypeOfInterestId?: Maybe<Scalars['String']>;
  estateTypeOfInterestName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type EstateTypeOfInterestDtoFilter = {
  AND?: Maybe<Array<EstateTypeOfInterestDtoFilter>>;
  estateTypeOfInterestName?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_contains?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_ends_with?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  estateTypeOfInterestName_not?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_not_contains?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_not_ends_with?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  estateTypeOfInterestName_not_starts_with?: Maybe<Scalars['String']>;
  estateTypeOfInterestName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<EstateTypeOfInterestDtoFilter>>;
};

export type EstateTypeOfInterestDtoSort = {
  estateTypeOfInterestName?: Maybe<SortOperationKind>;
};

export type EstateTypeOfInterestInfoDto = {
  __typename?: 'EstateTypeOfInterestInfoDto';
  estateTypeOfInterestDescription?: Maybe<Scalars['String']>;
  estateTypeOfInterestId?: Maybe<Scalars['String']>;
  estateTypeOfInterestName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
};

export type ExecutorSubmitServiceTicketResultInput = {
  note?: Maybe<Scalars['String']>;
  resultDescriptions?: Maybe<ResultDescriptionsDtoInput>;
  resultDocuments?: Maybe<ResultDocumentsDtoInput>;
  resultImages?: Maybe<ResultImagesDtoInput>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
};

export type ExecutorSubmitServiceTicketResultResponse = {
  __typename?: 'ExecutorSubmitServiceTicketResultResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ExportBookingTransactionsBySeasonIdDto = {
  __typename?: 'ExportBookingTransactionsBySeasonIdDto';
  bookingDatetime?: Maybe<Scalars['Long']>;
  bookingFee?: Maybe<Scalars['Float']>;
  bookingStatus?: Maybe<Scalars['String']>;
  bookingStatusSortOrder?: Maybe<Scalars['Int']>;
  buyerIsAgent?: Maybe<Scalars['String']>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  refundRequestDatetime?: Maybe<Scalars['Long']>;
  saleAgent?: Maybe<Scalars['String']>;
};

export type ExternalTicketDto = {
  __typename?: 'ExternalTicketDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ExternalTicketDto>;
  externalId?: Maybe<Scalars['String']>;
  externalTicketHistories?: Maybe<Array<Maybe<ExternalTicketHistoryDto>>>;
  id?: Maybe<Scalars['String']>;
  provider?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  supportRequestId?: Maybe<Scalars['String']>;
  timestamp?: Maybe<Scalars['Long']>;
};

export type ExternalTicketHistoryDto = {
  __typename?: 'ExternalTicketHistoryDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ExternalTicketHistoryDto>;
  data?: Maybe<Scalars['String']>;
  externalTicketId?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  timestamp?: Maybe<Scalars['Long']>;
};

export type FoProjectDto = {
  __typename?: 'FOProjectDto';
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  detailPath?: Maybe<Scalars['String']>;
  facilitiesDescription?: Maybe<Scalars['String']>;
  facilitiesMediaInfo?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  groundPlanDescription?: Maybe<Scalars['String']>;
  groundPlanMediaInfo?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorDetailPath?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFastSync?: Maybe<Scalars['Boolean']>;
  isFeaturesProject: Scalars['Boolean'];
  isFollowed?: Maybe<Scalars['Boolean']>;
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  locationDescription?: Maybe<Scalars['String']>;
  locationMediaInfo?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectItems?: Maybe<Array<Maybe<ProjectItemDto>>>;
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleProgramDescription?: Maybe<Scalars['String']>;
  saleProgramMediaInfo?: Maybe<Scalars['String']>;
  saleSeasonInfo?: Maybe<Sale_SaleSeasonInfoDto>;
  sizingDescription?: Maybe<Scalars['String']>;
  sizingMediaInfo?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalOfSaleSeasons?: Maybe<Scalars['Int']>;
  totalShare?: Maybe<Scalars['Long']>;
};

export type FastPaymentTransferInfoDto = {
  __typename?: 'FastPaymentTransferInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<FastPaymentTransferInfoDto>;
  expectedAmount?: Maybe<Scalars['Float']>;
  fundAccount?: Maybe<FundAccountInfoDto>;
  fundAccountId?: Maybe<Scalars['String']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentCode?: Maybe<Scalars['String']>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionPaymentStatus: TransactionPaymentStatus;
  userTransactionId?: Maybe<Scalars['String']>;
};

export type FeedObjectTypeDto = {
  __typename?: 'FeedObjectTypeDto';
  feedObjectTypeDescription?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  feedObjectTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isEnabledComment: Scalars['Boolean'];
  isEnabledFollow: Scalars['Boolean'];
  isEnabledRating: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
};

export type FeedObjectTypeDtoFilter = {
  AND?: Maybe<Array<FeedObjectTypeDtoFilter>>;
  feedObjectTypeName?: Maybe<Scalars['String']>;
  feedObjectTypeName_contains?: Maybe<Scalars['String']>;
  feedObjectTypeName_ends_with?: Maybe<Scalars['String']>;
  feedObjectTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTypeName_not?: Maybe<Scalars['String']>;
  feedObjectTypeName_not_contains?: Maybe<Scalars['String']>;
  feedObjectTypeName_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTypeName_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectTypeName_starts_with?: Maybe<Scalars['String']>;
  isEnabledComment?: Maybe<Scalars['Boolean']>;
  isEnabledComment_not?: Maybe<Scalars['Boolean']>;
  isEnabledFollow?: Maybe<Scalars['Boolean']>;
  isEnabledFollow_not?: Maybe<Scalars['Boolean']>;
  isEnabledRating?: Maybe<Scalars['Boolean']>;
  isEnabledRating_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<FeedObjectTypeDtoFilter>>;
};

export type FeedObjectTypeDtoSort = {
  feedObjectTypeName?: Maybe<SortOperationKind>;
};

export type FloorInfo = {
  __typename?: 'FloorInfo';
  alphabetPartFloor?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<FloorInfo>;
  floor?: Maybe<Scalars['String']>;
  floorPlanPhoto?: Maybe<Scalars['String']>;
  numberPartFloor?: Maybe<Scalars['Int']>;
  propertyPosts?: Maybe<Array<Maybe<PropertyPostDto>>>;
};

export type FollowFeedItemForFrontOfficeResponse = {
  __typename?: 'FollowFeedItemForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isFollowFeedItem: Scalars['Boolean'];
};

export type FollowFeedItemInput = {
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  isFollowFeedItem: Scalars['Boolean'];
};

export type FollowProject = {
  comments?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
};

export type FollowPropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type FollowerFeedItemForBackOfficeDto = {
  __typename?: 'FollowerFeedItemForBackOfficeDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  feedItemId?: Maybe<Scalars['String']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  feedObjectTypeName?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  modifiedBy?: Maybe<Scalars['String']>;
  userInfo?: Maybe<UserProfileDto>;
};

export type FollowerFeedItemForBackOfficeDtoFilter = {
  AND?: Maybe<Array<FollowerFeedItemForBackOfficeDtoFilter>>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectId_contains?: Maybe<Scalars['String']>;
  feedObjectId_ends_with?: Maybe<Scalars['String']>;
  feedObjectId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectId_not?: Maybe<Scalars['String']>;
  feedObjectId_not_contains?: Maybe<Scalars['String']>;
  feedObjectId_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectId_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectId_starts_with?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTitle_contains?: Maybe<Scalars['String']>;
  feedObjectTitle_ends_with?: Maybe<Scalars['String']>;
  feedObjectTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTitle_not?: Maybe<Scalars['String']>;
  feedObjectTitle_not_contains?: Maybe<Scalars['String']>;
  feedObjectTitle_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTitle_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectTitle_starts_with?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  feedObjectTypeId_contains?: Maybe<Scalars['String']>;
  feedObjectTypeId_ends_with?: Maybe<Scalars['String']>;
  feedObjectTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTypeId_not?: Maybe<Scalars['String']>;
  feedObjectTypeId_not_contains?: Maybe<Scalars['String']>;
  feedObjectTypeId_not_ends_with?: Maybe<Scalars['String']>;
  feedObjectTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  feedObjectTypeId_not_starts_with?: Maybe<Scalars['String']>;
  feedObjectTypeId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<FollowerFeedItemForBackOfficeDtoFilter>>;
};

export type FollowerFeedItemForBackOfficeDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type FormFintechResponse = {
  __typename?: 'FormFintechResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  formUrl?: Maybe<Scalars['String']>;
};

export type FundAccountDto = {
  __typename?: 'FundAccountDto';
  branchAddress?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  faxNumber?: Maybe<Scalars['String']>;
  fundAccountCode: Scalars['Int'];
  fundAccountDescription?: Maybe<Scalars['String']>;
  fundAccountId?: Maybe<Scalars['String']>;
  fundAccountNo?: Maybe<Scalars['String']>;
  fundEmail?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  remark?: Maybe<Scalars['String']>;
};

export type FundAccountDtoFilter = {
  AND?: Maybe<Array<FundAccountDtoFilter>>;
  branchAddress?: Maybe<Scalars['String']>;
  branchAddress_contains?: Maybe<Scalars['String']>;
  branchAddress_ends_with?: Maybe<Scalars['String']>;
  branchAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchAddress_not?: Maybe<Scalars['String']>;
  branchAddress_not_contains?: Maybe<Scalars['String']>;
  branchAddress_not_ends_with?: Maybe<Scalars['String']>;
  branchAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchAddress_not_starts_with?: Maybe<Scalars['String']>;
  branchAddress_starts_with?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  branchName_contains?: Maybe<Scalars['String']>;
  branchName_ends_with?: Maybe<Scalars['String']>;
  branchName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchName_not?: Maybe<Scalars['String']>;
  branchName_not_contains?: Maybe<Scalars['String']>;
  branchName_not_ends_with?: Maybe<Scalars['String']>;
  branchName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  branchName_not_starts_with?: Maybe<Scalars['String']>;
  branchName_starts_with?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  fundAccountCode?: Maybe<Scalars['Int']>;
  fundAccountCode_gt?: Maybe<Scalars['Int']>;
  fundAccountCode_gte?: Maybe<Scalars['Int']>;
  fundAccountCode_in?: Maybe<Array<Scalars['Int']>>;
  fundAccountCode_lt?: Maybe<Scalars['Int']>;
  fundAccountCode_lte?: Maybe<Scalars['Int']>;
  fundAccountCode_not?: Maybe<Scalars['Int']>;
  fundAccountCode_not_gt?: Maybe<Scalars['Int']>;
  fundAccountCode_not_gte?: Maybe<Scalars['Int']>;
  fundAccountCode_not_in?: Maybe<Array<Scalars['Int']>>;
  fundAccountCode_not_lt?: Maybe<Scalars['Int']>;
  fundAccountCode_not_lte?: Maybe<Scalars['Int']>;
  fundAccountNo?: Maybe<Scalars['String']>;
  fundAccountNo_contains?: Maybe<Scalars['String']>;
  fundAccountNo_ends_with?: Maybe<Scalars['String']>;
  fundAccountNo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fundAccountNo_not?: Maybe<Scalars['String']>;
  fundAccountNo_not_contains?: Maybe<Scalars['String']>;
  fundAccountNo_not_ends_with?: Maybe<Scalars['String']>;
  fundAccountNo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fundAccountNo_not_starts_with?: Maybe<Scalars['String']>;
  fundAccountNo_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<FundAccountDtoFilter>>;
};

export type FundAccountDtoSort = {
  branchAddress?: Maybe<SortOperationKind>;
  branchName?: Maybe<SortOperationKind>;
  cityId?: Maybe<SortOperationKind>;
  fundAccountNo?: Maybe<SortOperationKind>;
};

export type FundAccountInfoDto = {
  __typename?: 'FundAccountInfoDto';
  branchAddress?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId: Scalars['Int'];
  clone?: Maybe<FundAccountInfoDto>;
  faxNumber?: Maybe<Scalars['String']>;
  fundAccountDescription?: Maybe<Scalars['String']>;
  fundAccountId?: Maybe<Scalars['String']>;
  fundAccountNo?: Maybe<Scalars['String']>;
  fundEmail?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  remark?: Maybe<Scalars['String']>;
};

export enum Gender {
  Na = 'NA',
  Male = 'MALE',
  Female = 'FEMALE'
}

export type GenerateInviteResponse = {
  __typename?: 'GenerateInviteResponse';
  inviteCode?: Maybe<Scalars['String']>;
  inviteLink?: Maybe<Scalars['String']>;
  totalInviteActive: Scalars['Int'];
};

export type GenerateStringeeAuthTokenAnonymousInput = {
  deviceId?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
};

export type GenerateStringeeAuthTokenAnonymousResponse = {
  __typename?: 'GenerateStringeeAuthTokenAnonymousResponse';
  authToken?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GenerateStringeeAuthTokenInput = {
  target?: Maybe<Scalars['String']>;
};

export type GenerateStringeeAuthTokenResponse = {
  __typename?: 'GenerateStringeeAuthTokenResponse';
  authToken?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GenerateStringeeXAuthTokenInput = {
  deviceId?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
};

export type GenerateStringeeXAuthTokenResponse = {
  __typename?: 'GenerateStringeeXAuthTokenResponse';
  authToken?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GenerateTopenMapAccessTokenInput = {
  deviceId?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type GenerateTopenMapAccessTokenResponse = {
  __typename?: 'GenerateTopenMapAccessTokenResponse';
  authToken?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  tokenType?: Maybe<Scalars['String']>;
};

export type GenerateTopenMapDataFirstTplAccessTokenInput = {
  deviceId?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
};

export type GenerateTopenMapDataFirstTplAccessTokenResponse = {
  __typename?: 'GenerateTopenMapDataFirstTPLAccessTokenResponse';
  authToken?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  tokenType?: Maybe<Scalars['String']>;
};

export type GenerateTopenMapTplAccessTokenInput = {
  deviceId?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
};

export type GenerateTopenMapTplAccessTokenResponse = {
  __typename?: 'GenerateTopenMapTPLAccessTokenResponse';
  authToken?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  tokenType?: Maybe<Scalars['String']>;
};

export type GetActiveAgentSubscriptionPackageByCurrentUserResponse = {
  __typename?: 'GetActiveAgentSubscriptionPackageByCurrentUserResponse';
  agentSubscriptionPackageDto?: Maybe<AgentSubscriptionPackageDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetActiveAgentSubscriptionPackageByUserIdResponse = {
  __typename?: 'GetActiveAgentSubscriptionPackageByUserIdResponse';
  agentSubscriptionPackageDto?: Maybe<AgentSubscriptionPackageDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetAgentForTransactionInput = {
  agentRankingIds?: Maybe<Scalars['String']>;
  excludeAgentIds?: Maybe<Scalars['String']>;
  keywords?: Maybe<Scalars['String']>;
  places?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type GetAgentLastSubscriptionPackageResponse = {
  __typename?: 'GetAgentLastSubscriptionPackageResponse';
  agentSubscriptionPackageDto?: Maybe<AgentSubscriptionPackageDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetAgentRankingByIdsResponse = {
  __typename?: 'GetAgentRankingByIdsResponse';
  agentRankingInfoDtos?: Maybe<Array<Maybe<AgentRankingInfoDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetAgentSubscriptionTransactionValidatePaymentResponse = {
  __typename?: 'GetAgentSubscriptionTransactionValidatePaymentResponse';
  agentSubscriptionTransactionDto?: Maybe<AgentSubscriptionTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetAllArticlesInput = {
  articleSubTypeId?: Maybe<Scalars['Int']>;
  articleTypeId?: Maybe<Scalars['Int']>;
  hightlightTagId?: Maybe<Scalars['Int']>;
  languageCode?: Maybe<Scalars['String']>;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
  promotedToFrontPage?: Maybe<Scalars['Boolean']>;
};

export type GetAllSubscriptionPackageResponse = {
  __typename?: 'GetAllSubscriptionPackageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  subscriptionPackageDtos?: Maybe<Array<Maybe<SubscriptionPackageDto>>>;
};

export type GetAllocationRuleDetailByIdResponse = {
  __typename?: 'GetAllocationRuleDetailByIdResponse';
  allocationRuleDetailById?: Maybe<AllocationRuleDetailByIdDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetAllocationRulesByStaffResponse = {
  __typename?: 'GetAllocationRulesByStaffResponse';
  allocationRulesByStaff?: Maybe<Array<Maybe<AllocationRulesByStaffDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetAllocationRulesInput = {
  allocationRuleTypeIds?: Maybe<Scalars['String']>;
};

export type GetApplicationRolesResponse = {
  __typename?: 'GetApplicationRolesResponse';
  boApplicationRoles?: Maybe<Array<Maybe<ApplicationRoleDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  foApplicationRoles?: Maybe<Array<Maybe<ApplicationRoleDto>>>;
};

export type GetArticleByIdRequestInput = {
  id: Scalars['Int'];
  languageCode?: Maybe<Scalars['String']>;
};

export type GetArticleRequest = {
  articleSubTypeId?: Maybe<Scalars['Int']>;
  articleType: ArticleType;
  languageCode?: Maybe<Scalars['String']>;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
  promotedToFrontPage?: Maybe<Scalars['Boolean']>;
};

export type GetB2C2CProjectDetailByIdBoResponse = {
  __typename?: 'GetB2C2CProjectDetailByIdBOResponse';
  b2C2CProjectBODto?: Maybe<B2C2CProjectBoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetB2C2CProjectDetailByIdFoResponse = {
  __typename?: 'GetB2C2CProjectDetailByIdFoResponse';
  b2C2CProject?: Maybe<B2C2CProjectDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetB2CProjectsHomePageInput = {
  numberOfHotProject?: Maybe<Scalars['Int']>;
  orderBy: SearchProjectOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};

export type GetB2CProjectsHomePageResponse = {
  __typename?: 'GetB2CProjectsHomePageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectInfoDtos?: Maybe<Array<Maybe<SearchProjectInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type GetBackOfficeProfileForUserResponse = {
  __typename?: 'GetBackOfficeProfileForUserResponse';
  backofficeUserProfile?: Maybe<BackOfficeUserProfileDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetBackOfficeRoleDetailByIdResponse = {
  __typename?: 'GetBackOfficeRoleDetailByIdResponse';
  backofficeRoleDetail?: Maybe<BackOfficeRoleDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetBackOfficeRolesByStaffResponse = {
  __typename?: 'GetBackOfficeRolesByStaffResponse';
  backofficeRolesByStaff?: Maybe<BackOfficeRolesByStaffDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetBackOfficeRolesInput = {
  staffTypeIds?: Maybe<Scalars['String']>;
};

export type GetBankPaymentTransferInfoByTransIdResponse = {
  __typename?: 'GetBankPaymentTransferInfoByTransIdResponse';
  bankPaymentTransferInfoDto?: Maybe<BankPaymentTransferInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetBlockFloorPlanByBySaleSeasonIdResponse = {
  __typename?: 'GetBlockFloorPlanByBySaleSeasonIdResponse';
  blocksInfo?: Maybe<Array<Maybe<SimpleBlockInfo>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetBookingTransactionsByAgentIdDto = {
  __typename?: 'GetBookingTransactionsByAgentIdDto';
  agentId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetBookingTransactionsByAgentIdDto>;
};

export type GetBuyerInfoByCurrentUserForTransactionResponse = {
  __typename?: 'GetBuyerInfoByCurrentUserForTransactionResponse';
  buyerInfoDto?: Maybe<BuyerInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetC2CContactTradingProcessingTimeResponse = {
  __typename?: 'GetC2CContactTradingProcessingTimeResponse';
  c2CContactTradingProcessingTime: Scalars['Int'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetC2CPropertyPostByCodeForFrontOfficePrivateResponse = {
  __typename?: 'GetC2CPropertyPostByCodeForFrontOfficePrivateResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type GetC2CPropertyPostByCodeForFrontOfficePublicResponse = {
  __typename?: 'GetC2CPropertyPostByCodeForFrontOfficePublicResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type GetC2CPropertyPostByIdLastPublicVersionResponse = {
  __typename?: 'GetC2CPropertyPostByIdLastPublicVersionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostForLastPublicVersionDto>;
};

export type GetC2CPropertyPostViewedByIdsForFoInput = {
  propertyPostIds?: Maybe<Scalars['String']>;
};

export type GetC2CPropertyPostViewedByIdsForFoResponse = {
  __typename?: 'GetC2CPropertyPostViewedByIdsForFOResponse';
  c2CPropertyPostViewedDtos?: Maybe<Array<Maybe<C2CPropertyPostViewedDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetC2CPropertyPostsHomePageInput = {
  orderBy: SearchPropertyPostOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};

export type GetC2CPropertyPostsHomePageResponse = {
  __typename?: 'GetC2CPropertyPostsHomePageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type GetC2CSimilarPostsInput = {
  orderBy: SearchPropertyPostOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
};

export type GetC2CSimilarPostsResponse = {
  __typename?: 'GetC2CSimilarPostsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type GetC2CSummaryPropertyPostForWebResponse = {
  __typename?: 'GetC2CSummaryPropertyPostForWebResponse';
  c2CPropertyPostByApprovalStatusDtos?: Maybe<Array<Maybe<SummaryC2CPropertyPostByApprovalStatusDto>>>;
  propertyPostPrivateTotalCount: Scalars['Int'];
  propertyPostPublicTotalCount: Scalars['Int'];
  propertyPostTotalCount: Scalars['Int'];
  rentedPropertyPostCount?: Maybe<Scalars['Int']>;
};

export type GetCToCPropertyPostAuditHistoriesByIdResponse = {
  __typename?: 'GetCToCPropertyPostAuditHistoriesByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostHistoryDto?: Maybe<CToCPropertyPostAuditHistoryDto>;
};

export type GetCommentByIdForBackOfficeResponse = {
  __typename?: 'GetCommentByIdForBackOfficeResponse';
  comment?: Maybe<CommentForBackOfficeDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetCommentsByObjectIdCursorInput = {
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
};

export type GetConsultantSupportForC2CPostFoResponse = {
  __typename?: 'GetConsultantSupportForC2CPostFOResponse';
  consultantDto?: Maybe<ConsultantDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetConsultantsByStaffGroupIdRequestInput = {
  keywords?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type GetConsultantsForC2CTransactionInput = {
  keywords?: Maybe<Scalars['String']>;
  places?: Maybe<Scalars['String']>;
  staffGroupIds?: Maybe<Scalars['String']>;
};

export type GetConsultantsForTransactionInput = {
  keywords?: Maybe<Scalars['String']>;
  places?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  staffGroupIds?: Maybe<Scalars['String']>;
};

export type GetConsultantsSuggestionC2CRequestInput = {
  cityId: Scalars['Int'];
  districtId: Scalars['Int'];
  forRent: Scalars['Boolean'];
  forSale: Scalars['Boolean'];
  price?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type GetConsultantsToAssignTransactionsBoInput = {
  keywords?: Maybe<Scalars['String']>;
};

export type GetContactTradingB2CByNotificationResponse = {
  __typename?: 'GetContactTradingB2CByNotificationResponse';
  contactTradingB2CDetail?: Maybe<ContactTradingB2CDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetContactTradingB2CDetailForBoResponse = {
  __typename?: 'GetContactTradingB2CDetailForBOResponse';
  contactTradingB2CDto?: Maybe<ContactTradingB2CboDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetContactTradingB2CForBoInput = {
  projectId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type GetContactTradingProcessingTimeResponse = {
  __typename?: 'GetContactTradingProcessingTimeResponse';
  contactTradingProcessingTime: Scalars['Int'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetCurrentBookingTransactionResponse = {
  __typename?: 'GetCurrentBookingTransactionResponse';
  currentBookingTransactionDto?: Maybe<SimpleTransactionDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetCurrentDepositTransactionResponse = {
  __typename?: 'GetCurrentDepositTransactionResponse';
  currentDepositTransactionDto?: Maybe<SimpleTransactionDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetCurrentTopenerResponse = {
  __typename?: 'GetCurrentTopenerResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  topenerInfo?: Maybe<TopenerInfoDto>;
};

export type GetCustomerInfoChangeHistoryByIdResponse = {
  __typename?: 'GetCustomerInfoChangeHistoryByIdResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetCustomerInfoChangeHistoryByIdResponse>;
  customerInfoChangeHistoryDto?: Maybe<CustomerInfoChangeHistoryDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetDefaultPermissionsInput = {
  applicationRoleId?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Scalars['String']>;
};

export type GetDefaultPermissionsResponse = {
  __typename?: 'GetDefaultPermissionsResponse';
  allowEditPermission: Scalars['Boolean'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  permissionDtos?: Maybe<Array<Maybe<PermissionDto>>>;
};

export type GetDiscountInfoByContractResponse = {
  __typename?: 'GetDiscountInfoByContractResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetDiscountInfoByContractResponse>;
  discountDetailDto?: Maybe<DiscountDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetDiscountInfoByDepositResponse = {
  __typename?: 'GetDiscountInfoByDepositResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetDiscountInfoByDepositResponse>;
  discountDetailDto?: Maybe<DiscountDetailDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetEmailNotificationTemplateByIdResponse = {
  __typename?: 'GetEmailNotificationTemplateByIdResponse';
  emailNotificationTemplateDto?: Maybe<EmailNotificationTemplateDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetEmailTemplateSettingResponse = {
  __typename?: 'GetEmailTemplateSettingResponse';
  emailTemplateSettingDto?: Maybe<EmailTemplateSettingDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetFoInvestorResponse = {
  __typename?: 'GetFOInvestorResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  investorInfoDto?: Maybe<InvestorDto>;
};

export type GetFoProjectsOfInvestorInput = {
  foInvestorId?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};

export type GetFoProjectsOfInvestorResponse = {
  __typename?: 'GetFOProjectsOfInvestorResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectDtos?: Maybe<Array<Maybe<SearchProjectInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type GetFoTopenerByCodeForSearchResponse = {
  __typename?: 'GetFOTopenerByCodeForSearchResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  topenerDto?: Maybe<AgentForPublicDto>;
};

export type GetFastPaymentTransferInfoByTransIdResponse = {
  __typename?: 'GetFastPaymentTransferInfoByTransIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  fastPaymentTransferInfoDto?: Maybe<FastPaymentTransferInfoDto>;
};

export type GetFoC2CPropertyPostDetailPathByPostIdResponse = {
  __typename?: 'GetFoC2CPropertyPostDetailPathByPostIdResponse';
  detailPathForRent?: Maybe<Scalars['String']>;
  detailPathForSale?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetFoC2CPropertyPostForRentByCodeResponse = {
  __typename?: 'GetFoC2CPropertyPostForRentByCodeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type GetFoC2CPropertyPostForSaleByCodeResponse = {
  __typename?: 'GetFoC2CPropertyPostForSaleByCodeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type GetFoC2CPropertyPostRequestUpdateReasonResponse = {
  __typename?: 'GetFoC2CPropertyPostRequestUpdateReasonResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requestedUpdatingReason?: Maybe<Scalars['String']>;
};

export type GetFoC2CPropertyPostsForRentHomePageInput = {
  orderBy: SearchPropertyPostOrderBy;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
};

export type GetFoC2CPropertyPostsForRentHomePageResponse = {
  __typename?: 'GetFoC2CPropertyPostsForRentHomePageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostForRentInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostForRentInfoDto>>>;
};

export type GetFoC2CPropertyPostsHomePageV1Input = {
  orderBy: SearchPropertyPostOrderBy;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
};

export type GetFoC2CPropertyPostsHomePageV1Response = {
  __typename?: 'GetFoC2CPropertyPostsHomePageV1Response';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostInfoDto>>>;
};

export type GetFoProjectByCodeForSearchResponse = {
  __typename?: 'GetFoProjectByCodeForSearchResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectDto?: Maybe<FoProjectDto>;
};

export type GetFoProjectDetailPathByProjectIdResponse = {
  __typename?: 'GetFoProjectDetailPathByProjectIdResponse';
  detailPath?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetFoProjectsHomePageV1Input = {
  orderBy: SearchProjectOrderBy;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
};

export type GetFoProjectsHomePageV1Response = {
  __typename?: 'GetFoProjectsHomePageV1Response';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectInfoDtos?: Maybe<Array<Maybe<SearchProjectInfoDto>>>;
};

export type GetFollowTopenerForFrontOfficeDto = {
  __typename?: 'GetFollowTopenerForFrontOfficeDto';
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  agentRating: Scalars['Float'];
  biography?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isFollow: Scalars['Boolean'];
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type GetFollowTopenerForFrontOfficeDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type GetFollowTopenerForFrontOfficeInput = {
  agentRankingId?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  fullName?: Maybe<Scalars['String']>;
  topenerId?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GetFormFintechQueryInput = {
  dataConsultFinance?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type GetImageUploadUrlInput = {
  fileName?: Maybe<Scalars['String']>;
};

export type GetImageUploadUrlResponse = {
  __typename?: 'GetImageUploadUrlResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  fileUrl?: Maybe<Scalars['String']>;
  signatureKey?: Maybe<Scalars['String']>;
  uploadContainer?: Maybe<Scalars['String']>;
};

export type GetInvestorResponse = {
  __typename?: 'GetInvestorResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  investorInfoDto?: Maybe<InvestorDto>;
};

export type GetInviteUserActiveResponse = {
  __typename?: 'GetInviteUserActiveResponse';
  userInfoList?: Maybe<Array<Maybe<SimpleUserInfoDto>>>;
};

export type GetLimitPostApprovedResponse = {
  __typename?: 'GetLimitPostApprovedResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limitPostApprovedId?: Maybe<Scalars['String']>;
  numberLimit?: Maybe<Scalars['Int']>;
};

export type GetMaxFavoritePropertyPostNumberResponse = {
  __typename?: 'GetMaxFavoritePropertyPostNumberResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  maxFavoritePropertyPostNumber: Scalars['Int'];
};

export type GetMemberInfoStringeeByPhoneResponse = {
  __typename?: 'GetMemberInfoStringeeByPhoneResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  memberDto?: Maybe<MemberInfoStringeeDto>;
};

export type GetNewlyUpdatedNewsRequestInput = {
  languageCode?: Maybe<Scalars['String']>;
  newsType: NewsType;
};

export type GetOrphanStringeeExternalTicketsResponse = {
  __typename?: 'GetOrphanStringeeExternalTicketsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  tickets?: Maybe<Array<Maybe<ExternalTicketDto>>>;
};

export type GetPagesWithPaging = {
  languageCode?: Maybe<Scalars['String']>;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
};

export type GetPanoramaByCodeForBoResponse = {
  __typename?: 'GetPanoramaByCodeForBOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  panoramaImageDto?: Maybe<C2CPanoramaImageDto>;
};

export type GetPanoramaByCodeResponse = {
  __typename?: 'GetPanoramaByCodeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  panoramaImageDto?: Maybe<C2CPanoramaImageDto>;
};

export type GetPanoramaByPropertyPostIdResponse = {
  __typename?: 'GetPanoramaByPropertyPostIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  panoramaImageDto?: Maybe<C2CPanoramaImageDto>;
};

export type GetPaymentTransactionByIdResponse = {
  __typename?: 'GetPaymentTransactionByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  paymentTransactionDto?: Maybe<PaymentTransactionDto>;
};

export type GetPolicyByPropertyPostIdForTransactionInput = {
  confirmedTransactionDatetime?: Maybe<Scalars['Long']>;
  isBooking: Scalars['Boolean'];
  propertyPostId?: Maybe<Scalars['String']>;
};

export type GetProjectAssigneeForContactTradingB2CResponse = {
  __typename?: 'GetProjectAssigneeForContactTradingB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectInfoDtos?: Maybe<Array<Maybe<SimpleProjectInfoDto>>>;
};

export type GetProjectItemsByProjectIdResponse = {
  __typename?: 'GetProjectItemsByProjectIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectItemDtos?: Maybe<Array<Maybe<ProjectItemDto>>>;
};

export type GetProjectsCiInput = {
  limit?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetProjectsCiResponse = {
  __typename?: 'GetProjectsCIResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  projects?: Maybe<Array<Maybe<ProjectDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetPropertyPostApprovalStatusByPropertyPostIdsResponse = {
  __typename?: 'GetPropertyPostApprovalStatusByPropertyPostIdsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusInfoDtos?: Maybe<Array<Maybe<Property_Posts_PropertyPostApprovalStatusInfoDto>>>;
};

export type GetPropertyPostBasketResponse = {
  __typename?: 'GetPropertyPostBasketResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetPropertyPostBasketResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostsByBlockNameDto?: Maybe<PropertyPostsByBlockNameDto>;
};

export type GetPropertyPostsBasketForTopenerInput = {
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  direction: Direction;
  fromArea?: Maybe<Scalars['Float']>;
  fromNumberOfBathrooms?: Maybe<Scalars['Int']>;
  fromNumberOfBedrooms?: Maybe<Scalars['Int']>;
  fromPrice?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  toArea?: Maybe<Scalars['Float']>;
  toPrice?: Maybe<Scalars['Float']>;
};

export type GetPropertyPostsBasketForTopenerResponse = {
  __typename?: 'GetPropertyPostsBasketForTopenerResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetPropertyPostsBasketForTopenerResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostsByBlockNameDto?: Maybe<PropertyPostsBasketByBlockNameDto>;
};

export type GetPropertyPostsBasketForTopenerTransferInput = {
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  buyerId?: Maybe<Scalars['String']>;
  direction: Direction;
  feeAmount?: Maybe<Scalars['Float']>;
  fromArea?: Maybe<Scalars['Float']>;
  fromNumberOfBathrooms?: Maybe<Scalars['Int']>;
  fromNumberOfBedrooms?: Maybe<Scalars['Int']>;
  fromPrice?: Maybe<Scalars['Float']>;
  isBooking: Scalars['Boolean'];
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  toArea?: Maybe<Scalars['Float']>;
  toPrice?: Maybe<Scalars['Float']>;
};

export type GetPropertyPostsBasketForTopenerTransferResponse = {
  __typename?: 'GetPropertyPostsBasketForTopenerTransferResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetPropertyPostsBasketForTopenerTransferResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostsByBlockNameDto?: Maybe<PropertyPostsBasketByBlockNameDto>;
};

export type GetPropertyPostsBasketForVisitorResponse = {
  __typename?: 'GetPropertyPostsBasketForVisitorResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetPropertyPostsBasketForVisitorResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostsByBlockNameDto?: Maybe<PropertyPostsBasketByBlockNameDto>;
};

export type GetPropertyPostsBasketForWebInputType = {
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  direction: Direction;
  fromArea?: Maybe<Scalars['Float']>;
  fromNumberOfBathrooms?: Maybe<Scalars['Int']>;
  fromNumberOfBedrooms?: Maybe<Scalars['Int']>;
  fromPrice?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  toArea?: Maybe<Scalars['Float']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
  toPrice?: Maybe<Scalars['Float']>;
};

export type GetPropertyPostsBasketInputType = {
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  direction: Direction;
  fromArea?: Maybe<Scalars['Float']>;
  fromNumberOfBathrooms?: Maybe<Scalars['Int']>;
  fromNumberOfBedrooms?: Maybe<Scalars['Int']>;
  fromPrice?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  toArea?: Maybe<Scalars['Float']>;
  toPrice?: Maybe<Scalars['Float']>;
};

export type GetPropertyPostsByBlockNameAdvancedInput = {
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  direction: Direction;
  fromArea?: Maybe<Scalars['Float']>;
  fromNumberOfBathrooms?: Maybe<Scalars['Int']>;
  fromNumberOfBedrooms?: Maybe<Scalars['Int']>;
  fromPrice?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  toArea?: Maybe<Scalars['Float']>;
  toPrice?: Maybe<Scalars['Float']>;
};

export type GetPropertyPostsByBlockNameForTransferAdvancedInput = {
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  buyerId?: Maybe<Scalars['String']>;
  direction: Direction;
  feeAmount?: Maybe<Scalars['Float']>;
  fromArea?: Maybe<Scalars['Float']>;
  fromNumberOfBathrooms?: Maybe<Scalars['Int']>;
  fromNumberOfBedrooms?: Maybe<Scalars['Int']>;
  fromPrice?: Maybe<Scalars['Float']>;
  isBooking: Scalars['Boolean'];
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  toArea?: Maybe<Scalars['Float']>;
  toPrice?: Maybe<Scalars['Float']>;
};

export type GetPushNotificationForContactTradingB2CResponse = {
  __typename?: 'GetPushNotificationForContactTradingB2CResponse';
  contactTradingB2CId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  notificationId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
};

export type GetRecruitmentByIdRequestInput = {
  id: Scalars['Int'];
  languageCode?: Maybe<Scalars['String']>;
};

export type GetRefundPaymentTransferInfoByTransIdResponse = {
  __typename?: 'GetRefundPaymentTransferInfoByTransIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  refundPaymentTransferInfoDto?: Maybe<RefundPaymentTransferInfoDto>;
};

export type GetSaleSeasonStatsBookingAndDepositPhaseResponse = {
  __typename?: 'GetSaleSeasonStatsBookingAndDepositPhaseResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  saleSeasonStatsBookingPhaseDto?: Maybe<SaleSeasonStatsBookingPhaseDto>;
  saleSeasonStatsDepositPhaseDto?: Maybe<SaleSeasonStatsDepositPhaseDto>;
};

export type GetSecuredFileUploadUrlInput = {
  fileName?: Maybe<Scalars['String']>;
};

export type GetSecuredFileUploadUrlResponse = {
  __typename?: 'GetSecuredFileUploadUrlResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  fileUrl?: Maybe<Scalars['String']>;
  signatureKey?: Maybe<Scalars['String']>;
  uploadContainer?: Maybe<Scalars['String']>;
};

export type GetSecuredFileUrlInput = {
  url?: Maybe<Scalars['String']>;
};

export type GetSecuredFileUrlResponse = {
  __typename?: 'GetSecuredFileUrlResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  securedUrl?: Maybe<Scalars['String']>;
};

export type GetServiceTicketByIdForFrontOfficeResponse = {
  __typename?: 'GetServiceTicketByIdForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportServiceTicket?: Maybe<SupportServiceTicketForFrontOfficeDto>;
};

export type GetServiceTicketResultByIdForFrontOfficeResponse = {
  __typename?: 'GetServiceTicketResultByIdForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportServiceTicketResult?: Maybe<SupportServiceTicketResultForFrontOfficeDto>;
};

export type GetSimilarProjectsForFoInput = {
  investorId?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type GetSimpleSupportServiceTicketByIdResponse = {
  __typename?: 'GetSimpleSupportServiceTicketByIdResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetSimpleSupportServiceTicketByIdResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  simpleSupportServiceTicketDto?: Maybe<SimpleSupportServiceTicketDto>;
};

export type GetSimpleTransactionDetailResponse = {
  __typename?: 'GetSimpleTransactionDetailResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  transactionDetailDto?: Maybe<SimpleTransactionDetailDto>;
};

export type GetStaffFullByUserResponse = {
  __typename?: 'GetStaffFullByUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffFullDto?: Maybe<StaffFullByUserDto>;
};

export type GetStaffGroupsByIdResponse = {
  __typename?: 'GetStaffGroupsByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffGroups?: Maybe<Array<Maybe<StaffGroupDto>>>;
};

export type GetStaffGroupsByStaffDto = {
  __typename?: 'GetStaffGroupsByStaffDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetStaffGroupsByStaffDto>;
  staffGroups?: Maybe<Array<Maybe<StaffGroupDto>>>;
  staffTypeDescription?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
};

export type GetStaffGroupsByStaffResponse = {
  __typename?: 'GetStaffGroupsByStaffResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffGroupsByStaff?: Maybe<Array<Maybe<GetStaffGroupsByStaffDto>>>;
};

export type GetStaffsBackOfficeInput = {
  applicationRoleIds?: Maybe<Scalars['String']>;
};

export type GetStaffsOfStaffGroupInput = {
  includeChildren?: Maybe<Scalars['Boolean']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type GetStringeeXAccountsInput = {
  company?: Maybe<Scalars['String']>;
  isInvite?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  removed?: Maybe<Scalars['Boolean']>;
  role?: Maybe<Scalars['String']>;
  search?: Maybe<Scalars['String']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXAccountsResponse = {
  __typename?: 'GetStringeeXAccountsResponse';
  accounts?: Maybe<Array<Maybe<StringeeXAccountDto>>>;
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXCallHistoriesInput = {
  agentId?: Maybe<Scalars['String']>;
  answerDuration?: Maybe<Scalars['Int']>;
  callId?: Maybe<Scalars['String']>;
  customerNumber?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['Int']>;
  hasVoicemail?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  queueDuration?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  stringeeNumber?: Maybe<Scalars['String']>;
  timeRange?: Maybe<Scalars['String']>;
};

export type GetStringeeXCallHistoriesResponse = {
  __typename?: 'GetStringeeXCallHistoriesResponse';
  callHistories?: Maybe<Array<Maybe<StringeeXCallHistoryDto>>>;
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXChatConversationInput = {
  convId?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type GetStringeeXChatConversationResponse = {
  __typename?: 'GetStringeeXChatConversationResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  messages?: Maybe<Array<Maybe<StringeeXChatConversationMessageDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXChatConversationsInput = {
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXChatConversationsResponse = {
  __typename?: 'GetStringeeXChatConversationsResponse';
  conversations?: Maybe<Array<Maybe<StringeeXChatConversationDto>>>;
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXCompaniesInput = {
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXCompaniesResponse = {
  __typename?: 'GetStringeeXCompaniesResponse';
  companies?: Maybe<Array<Maybe<StringeeXCompanyDto>>>;
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXContactsInput = {
  accountManager?: Maybe<Scalars['String']>;
  company?: Maybe<Scalars['String']>;
  contactType?: Maybe<Scalars['String']>;
  fullTextSearch?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXContactsResponse = {
  __typename?: 'GetStringeeXContactsResponse';
  contacts?: Maybe<Array<Maybe<StringeeXContactDto>>>;
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXNumberListInput = {
  inputDigits?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  selectTelco?: Maybe<Scalars['String']>;
};

export type GetStringeeXNumberListResponse = {
  __typename?: 'GetStringeeXNumberListResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  numbers?: Maybe<Array<Maybe<StringeeXNumberDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXPccAgentsInput = {
  limit?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  sipPhoneExtension?: Maybe<Scalars['String']>;
};

export type GetStringeeXPccAgentsResponse = {
  __typename?: 'GetStringeeXPccAgentsResponse';
  agents?: Maybe<Array<Maybe<StringeeXPccAgentDto>>>;
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXPccGroupsInput = {
  limit?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
};

export type GetStringeeXPccGroupsResponse = {
  __typename?: 'GetStringeeXPccGroupsResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  groups?: Maybe<Array<Maybe<StringeeXPccGroupDto>>>;
  limit?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXPccNumbersInput = {
  limit?: Maybe<Scalars['Int']>;
  nickName?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXPccNumbersResponse = {
  __typename?: 'GetStringeeXPccNumbersResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  numbers?: Maybe<Array<Maybe<StringeeXPccNumberDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXQueuesInput = {
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXQueuesResponse = {
  __typename?: 'GetStringeeXQueuesResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  queues?: Maybe<Array<Maybe<StringeeXQueueDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetStringeeXTicketsInput = {
  limit?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  sortBy?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
};

export type GetStringeeXTicketsResponse = {
  __typename?: 'GetStringeeXTicketsResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  tickets?: Maybe<Array<Maybe<StringeeXTicketDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetSubscriptionNotificationConfigResponse = {
  __typename?: 'GetSubscriptionNotificationConfigResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  expiringDaysLeft: Scalars['Int'];
  subscriptionNotificationMethods?: Maybe<SubscriptionNotificationMethod>;
};

export type GetSubscriptionPackageByIdResponse = {
  __typename?: 'GetSubscriptionPackageByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  subscriptionPackageDto?: Maybe<SubscriptionPackageDto>;
};

export type GetSummaryByCrawlerTrackingStatusResponse = {
  __typename?: 'GetSummaryByCrawlerTrackingStatusResponse';
  status?: Maybe<Array<Maybe<Crawler_CrawlerTrackingStatusDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type GetSummaryNotificationByCurrentUserResponse = {
  __typename?: 'GetSummaryNotificationByCurrentUserResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetSummaryNotificationByCurrentUserResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  summaryNotificationDto?: Maybe<SummaryNotificationDto>;
};

export type GetSummaryPropertyPostResponse = {
  __typename?: 'GetSummaryPropertyPostResponse';
  propertyPostInfoByApproveStatus?: Maybe<Scalars['String']>;
  propertyPostInfoByPostStatus?: Maybe<Scalars['String']>;
};

export type GetSupportRequestsByRequesterUserIdResponse = {
  __typename?: 'GetSupportRequestsByRequesterUserIdResponse';
  currentPage?: Maybe<Scalars['Int']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limit?: Maybe<Scalars['Int']>;
  supportRequests?: Maybe<Array<Maybe<SupportRequestDto>>>;
  totalCount?: Maybe<Scalars['Int']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type GetSupportServiceTicketDetailResponse = {
  __typename?: 'GetSupportServiceTicketDetailResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetSupportServiceTicketDetailResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportServiceTicketDto?: Maybe<SupportServiceTicketDto>;
  supportServiceTicketResultDto?: Maybe<SupportServiceTicketResultDto>;
};

export type GetSupportServiceTypeByIdResponse = {
  __typename?: 'GetSupportServiceTypeByIdResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetSupportServiceTypeByIdResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requestType?: Maybe<SupportServiceTypeByIdDto>;
};

export type GetSupportServiceTypesResponse = {
  __typename?: 'GetSupportServiceTypesResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  requestTypes?: Maybe<Array<Maybe<SupportServiceTypeDto>>>;
};

export type GetTopVibrantAreaForHomePageResponse = {
  __typename?: 'GetTopVibrantAreaForHomePageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  topVibrantAreaDtos?: Maybe<Array<Maybe<TopVibrantAreaDto>>>;
};

export type GetTopenerProfileByCurrentUserFoResponse = {
  __typename?: 'GetTopenerProfileByCurrentUserFOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  topenerProfileDto?: Maybe<TopenerProfileDto>;
};

export type GetTopenersAvailableInput = {
  currentTopenerId?: Maybe<Scalars['String']>;
  keyword?: Maybe<Scalars['String']>;
  topenerServiceTypeJson?: Maybe<Scalars['String']>;
  workingAreasJson?: Maybe<Scalars['String']>;
};

export type GetTopenersByCurrentUserDto = {
  __typename?: 'GetTopenersByCurrentUserDto';
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  agentRating: Scalars['Float'];
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isFollow: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type GetTopenersByCurrentUserDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};

export type GetTopenersByCurrentUserInput = {
  agentRankingId?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  fullName?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
};

export type GetTopenersRecentlySupportTicketInput = {
  currentTopenerId?: Maybe<Scalars['String']>;
  keyword?: Maybe<Scalars['String']>;
  workingAreasJson?: Maybe<Scalars['String']>;
};

export type GetTopenersSuggestionInput = {
  currentTopenerId?: Maybe<Scalars['String']>;
  keyword?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  topenerServiceTypeJson?: Maybe<Scalars['String']>;
  workingAreasJson?: Maybe<Scalars['String']>;
};

export type GetTotalAccountsPerSubscriptionPackageResponse = {
  __typename?: 'GetTotalAccountsPerSubscriptionPackageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  totalAccountsPerSubscriptionPackageDtos?: Maybe<Array<Maybe<TotalAccountsPerSubscriptionPackageDto>>>;
};

export type GetTotalB2CTransactionContractInput = {
  contractStatusId?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type GetTotalB2CTransactionContractResponse = {
  __typename?: 'GetTotalB2CTransactionContractResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<GetTotalB2CTransactionContractResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  totalB2CTransactionContractDto?: Maybe<Array<Maybe<TotalB2CTransactionContractDto>>>;
};

export type GetTotalFollowerByFeedObjectIdForFrontOfficeResponse = {
  __typename?: 'GetTotalFollowerByFeedObjectIdForFrontOfficeResponse';
  currentUserFollowFeedItem: Scalars['Boolean'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  totalFollower: Scalars['Int'];
  totalFollowing: Scalars['Int'];
};

export type GetTransactionPaymentValidateResponse = {
  __typename?: 'GetTransactionPaymentValidateResponse';
  completePaymentDto?: Maybe<CompletePaymentDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type GetTransactionValidatePaymentResponse = {
  __typename?: 'GetTransactionValidatePaymentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isValid: Scalars['Boolean'];
};

export type GetTransactionsByBuyerIdAdvancedInput = {
  fromDatetime?: Maybe<Scalars['Long']>;
  fromPaymentDatetime?: Maybe<Scalars['Long']>;
  fromSaleSeasonOpenDatetime?: Maybe<Scalars['Long']>;
  keywords?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  toDatetime?: Maybe<Scalars['Long']>;
  toPaymentDatetime?: Maybe<Scalars['Long']>;
  toSaleSeasonOpenDatetime?: Maybe<Scalars['Long']>;
  transactionIndex?: Maybe<Scalars['Int']>;
  transactionStatuses?: Maybe<Scalars['String']>;
};

export type GetUserByIdBackOfficeResponse = {
  __typename?: 'GetUserByIdBackOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type GetUserC2CDemandsInput = {
  forSale?: Maybe<Scalars['Boolean']>;
  keyword?: Maybe<Scalars['String']>;
  placeJson?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
};

export type GetUserFollowOnPostsByPropertyPostIdsInput = {
  propertyPostIds?: Maybe<Scalars['String']>;
};

export type GetUserFollowOnPostsByPropertyPostIdsResponse = {
  __typename?: 'GetUserFollowOnPostsByPropertyPostIdsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userFollowOnPostDtos?: Maybe<Array<Maybe<UserFollowOnPostDto>>>;
};

export type GetUserFollowOnProjectsByProjectIdsInput = {
  projectIds?: Maybe<Scalars['String']>;
};

export type GetUserFollowOnProjectsByProjectIdsResponse = {
  __typename?: 'GetUserFollowOnProjectsByProjectIdsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userFollowOnProjectDtos?: Maybe<Array<Maybe<UserFollowOnProjectDto>>>;
};

export type GetUserForMessengerByIdInput = {
  userId?: Maybe<Scalars['String']>;
};

export type GetUserForMessengerByIdResponse = {
  __typename?: 'GetUserForMessengerByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  user?: Maybe<UserForMessengerDto>;
};

export type GetUserInfoByPhoneNumberInput = {
  phoneNumber?: Maybe<Scalars['String']>;
};

export type GetUserInfoByPhoneNumberResponse = {
  __typename?: 'GetUserInfoByPhoneNumberResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userInfo?: Maybe<UserInfoSimpleDto>;
};

export type GetUserResponse = {
  __typename?: 'GetUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type GetUserTransactionByIdResponse = {
  __typename?: 'GetUserTransactionByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userTransactionDto?: Maybe<UserTransactionDto>;
};

export type GetUsersForMessengerInput = {
  uniqueIds?: Maybe<Scalars['String']>;
};

export type GetUsersForMessengerResponse = {
  __typename?: 'GetUsersForMessengerResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  users?: Maybe<Array<Maybe<UserDto>>>;
};

export type GetVersionResponse = {
  __typename?: 'GetVersionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  version?: Maybe<Scalars['String']>;
};

export type GetVnpayPaymentTransferInfoByTransIdResponse = {
  __typename?: 'GetVnpayPaymentTransferInfoByTransIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  vnpayPaymentTransferInfoDto?: Maybe<VnpayPaymentTransferInfoDto>;
};

export type GuaranteedPackageDto = {
  __typename?: 'GuaranteedPackageDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  guaranteedPackageCode?: Maybe<Scalars['String']>;
  guaranteedPackageDescription?: Maybe<Scalars['String']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  guaranteedPackageName?: Maybe<Scalars['String']>;
  guaranteedPackagePrepaymentRate?: Maybe<Scalars['Float']>;
  guaranteedPackageValidMonths?: Maybe<Scalars['Int']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedByUserName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type GuaranteedPackageDtoFilter = {
  AND?: Maybe<Array<GuaranteedPackageDtoFilter>>;
  guaranteedPackageCode?: Maybe<Scalars['String']>;
  guaranteedPackageCode_contains?: Maybe<Scalars['String']>;
  guaranteedPackageCode_ends_with?: Maybe<Scalars['String']>;
  guaranteedPackageCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  guaranteedPackageCode_not?: Maybe<Scalars['String']>;
  guaranteedPackageCode_not_contains?: Maybe<Scalars['String']>;
  guaranteedPackageCode_not_ends_with?: Maybe<Scalars['String']>;
  guaranteedPackageCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  guaranteedPackageCode_not_starts_with?: Maybe<Scalars['String']>;
  guaranteedPackageCode_starts_with?: Maybe<Scalars['String']>;
  guaranteedPackageName?: Maybe<Scalars['String']>;
  guaranteedPackageName_contains?: Maybe<Scalars['String']>;
  guaranteedPackageName_ends_with?: Maybe<Scalars['String']>;
  guaranteedPackageName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  guaranteedPackageName_not?: Maybe<Scalars['String']>;
  guaranteedPackageName_not_contains?: Maybe<Scalars['String']>;
  guaranteedPackageName_not_ends_with?: Maybe<Scalars['String']>;
  guaranteedPackageName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  guaranteedPackageName_not_starts_with?: Maybe<Scalars['String']>;
  guaranteedPackageName_starts_with?: Maybe<Scalars['String']>;
  guaranteedPackagePrepaymentRate?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_gt?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_gte?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  guaranteedPackagePrepaymentRate_lt?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_lte?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_not?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_not_gt?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_not_gte?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  guaranteedPackagePrepaymentRate_not_lt?: Maybe<Scalars['Float']>;
  guaranteedPackagePrepaymentRate_not_lte?: Maybe<Scalars['Float']>;
  guaranteedPackageValidMonths?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_gt?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_gte?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  guaranteedPackageValidMonths_lt?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_lte?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_not?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_not_gt?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_not_gte?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  guaranteedPackageValidMonths_not_lt?: Maybe<Scalars['Int']>;
  guaranteedPackageValidMonths_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<GuaranteedPackageDtoFilter>>;
};

export type GuaranteedPackageDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  guaranteedPackageCode?: Maybe<SortOperationKind>;
  guaranteedPackageName?: Maybe<SortOperationKind>;
  guaranteedPackagePrepaymentRate?: Maybe<SortOperationKind>;
  guaranteedPackageValidMonths?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type GuestDto = {
  __typename?: 'GuestDto';
  browser?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  guestId?: Maybe<Scalars['String']>;
  ipAddress?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  resolution?: Maybe<Scalars['String']>;
  socialAccounts?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userId?: Maybe<Scalars['String']>;
};

export type GuestDtoFilter = {
  AND?: Maybe<Array<GuestDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<GuestDtoFilter>>;
  userId?: Maybe<Scalars['String']>;
  userId_contains?: Maybe<Scalars['String']>;
  userId_ends_with?: Maybe<Scalars['String']>;
  userId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userId_not?: Maybe<Scalars['String']>;
  userId_not_contains?: Maybe<Scalars['String']>;
  userId_not_ends_with?: Maybe<Scalars['String']>;
  userId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userId_not_starts_with?: Maybe<Scalars['String']>;
  userId_starts_with?: Maybe<Scalars['String']>;
};

export type GuestInfoDto = {
  __typename?: 'GuestInfoDto';
  browser?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['String']>;
  guestId?: Maybe<Scalars['String']>;
  ipAddress?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  location?: Maybe<Scalars['String']>;
  resolution?: Maybe<Scalars['String']>;
  socialAccounts?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type HaveContactTradingB2CByPropertyPostIdResponse = {
  __typename?: 'HaveContactTradingB2CByPropertyPostIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  haveContactTradingB2C?: Maybe<Scalars['Boolean']>;
};

export type ImageSizeDto = {
  __typename?: 'ImageSizeDto';
  createdDatetime?: Maybe<Scalars['Long']>;
  height: Scalars['Int'];
  imageSizeId?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  width: Scalars['Int'];
};

export type ImageSizeDtoFilter = {
  AND?: Maybe<Array<ImageSizeDtoFilter>>;
  OR?: Maybe<Array<ImageSizeDtoFilter>>;
  platform?: Maybe<Scalars['String']>;
  platform_contains?: Maybe<Scalars['String']>;
  platform_ends_with?: Maybe<Scalars['String']>;
  platform_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  platform_not?: Maybe<Scalars['String']>;
  platform_not_contains?: Maybe<Scalars['String']>;
  platform_not_ends_with?: Maybe<Scalars['String']>;
  platform_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  platform_not_starts_with?: Maybe<Scalars['String']>;
  platform_starts_with?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  type_contains?: Maybe<Scalars['String']>;
  type_ends_with?: Maybe<Scalars['String']>;
  type_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not?: Maybe<Scalars['String']>;
  type_not_contains?: Maybe<Scalars['String']>;
  type_not_ends_with?: Maybe<Scalars['String']>;
  type_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  type_not_starts_with?: Maybe<Scalars['String']>;
  type_starts_with?: Maybe<Scalars['String']>;
};

export type ImageSizeDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  platform?: Maybe<SortOperationKind>;
  type?: Maybe<SortOperationKind>;
};

export type ImportPropertyPostsResponse = {
  __typename?: 'ImportPropertyPostsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type InternalFacilityDto = {
  __typename?: 'InternalFacilityDto';
  createdDatetime?: Maybe<Scalars['Long']>;
  internalFacilityCode?: Maybe<Scalars['String']>;
  internalFacilityId?: Maybe<Scalars['String']>;
  internalFacilityName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type InternalFacilityDtoFilter = {
  AND?: Maybe<Array<InternalFacilityDtoFilter>>;
  internalFacilityCode?: Maybe<Scalars['String']>;
  internalFacilityCode_contains?: Maybe<Scalars['String']>;
  internalFacilityCode_ends_with?: Maybe<Scalars['String']>;
  internalFacilityCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  internalFacilityCode_not?: Maybe<Scalars['String']>;
  internalFacilityCode_not_contains?: Maybe<Scalars['String']>;
  internalFacilityCode_not_ends_with?: Maybe<Scalars['String']>;
  internalFacilityCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  internalFacilityCode_not_starts_with?: Maybe<Scalars['String']>;
  internalFacilityCode_starts_with?: Maybe<Scalars['String']>;
  internalFacilityName?: Maybe<Scalars['String']>;
  internalFacilityName_contains?: Maybe<Scalars['String']>;
  internalFacilityName_ends_with?: Maybe<Scalars['String']>;
  internalFacilityName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  internalFacilityName_not?: Maybe<Scalars['String']>;
  internalFacilityName_not_contains?: Maybe<Scalars['String']>;
  internalFacilityName_not_ends_with?: Maybe<Scalars['String']>;
  internalFacilityName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  internalFacilityName_not_starts_with?: Maybe<Scalars['String']>;
  internalFacilityName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<InternalFacilityDtoFilter>>;
};

export type InternalFacilityDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  internalFacilityCode?: Maybe<SortOperationKind>;
  internalFacilityName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type InternationalCardTypeDto = {
  __typename?: 'InternationalCardTypeDto';
  internationalCardTypeDescription?: Maybe<Scalars['String']>;
  internationalCardTypeId?: Maybe<Scalars['String']>;
  internationalCardTypeName?: Maybe<Scalars['String']>;
};

export type InternationalCardTypeDtoFilter = {
  AND?: Maybe<Array<InternationalCardTypeDtoFilter>>;
  internationalCardTypeName?: Maybe<Scalars['String']>;
  internationalCardTypeName_contains?: Maybe<Scalars['String']>;
  internationalCardTypeName_ends_with?: Maybe<Scalars['String']>;
  internationalCardTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  internationalCardTypeName_not?: Maybe<Scalars['String']>;
  internationalCardTypeName_not_contains?: Maybe<Scalars['String']>;
  internationalCardTypeName_not_ends_with?: Maybe<Scalars['String']>;
  internationalCardTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  internationalCardTypeName_not_starts_with?: Maybe<Scalars['String']>;
  internationalCardTypeName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<InternationalCardTypeDtoFilter>>;
};

export type InternationalCardTypeDtoSort = {
  internationalCardTypeName?: Maybe<SortOperationKind>;
};

export type IntroductionPageDto = {
  __typename?: 'IntroductionPageDto';
  body?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<IntroductionPageDto>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type InvestorAddressInfoDto = {
  __typename?: 'InvestorAddressInfoDto';
  addressId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<InvestorAddressInfoDto>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type InvestorAddressInfoDtoInput = {
  addressId?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type InvestorDto = {
  __typename?: 'InvestorDto';
  activityImages?: Maybe<Scalars['String']>;
  address?: Maybe<InvestorAddressInfoDto>;
  areas?: Maybe<Scalars['String']>;
  charterCapital?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  deletedBy?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  establishmentDate?: Maybe<Scalars['String']>;
  introduce?: Maybe<Scalars['String']>;
  investorCode?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  lastModified?: Maybe<Scalars['Long']>;
  logo?: Maybe<Scalars['String']>;
  logoSizes?: Maybe<Scalars['String']>;
  modifiedBy?: Maybe<Scalars['String']>;
  modifiedByUserName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  projectCountByStatuses?: Maybe<Array<Maybe<InvestorProjectStatusCountDto>>>;
  website?: Maybe<Scalars['String']>;
};

export type InvestorMutationResponse = {
  __typename?: 'InvestorMutationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  investorDto?: Maybe<InvestorDto>;
};

export type InvestorProjectStatusCountDto = {
  __typename?: 'InvestorProjectStatusCountDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<InvestorProjectStatusCountDto>;
  count?: Maybe<Scalars['Int']>;
  statusName?: Maybe<Scalars['String']>;
};

export type InviteStatusDto = {
  __typename?: 'InviteStatusDto';
  inviteStatusDescription?: Maybe<Scalars['String']>;
  inviteStatusId?: Maybe<Scalars['String']>;
  inviteStatusName?: Maybe<Scalars['String']>;
  inviteStatusSortOrder: Scalars['Int'];
};

export type LanguageDto = {
  __typename?: 'LanguageDto';
  englishName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  languageId?: Maybe<Scalars['String']>;
  languageIso6391Code?: Maybe<Scalars['String']>;
  languageIso6392Code?: Maybe<Scalars['String']>;
  naturalName?: Maybe<Scalars['String']>;
};

export type LanguageDtoFilter = {
  AND?: Maybe<Array<LanguageDtoFilter>>;
  englishName?: Maybe<Scalars['String']>;
  englishName_contains?: Maybe<Scalars['String']>;
  englishName_ends_with?: Maybe<Scalars['String']>;
  englishName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  englishName_not?: Maybe<Scalars['String']>;
  englishName_not_contains?: Maybe<Scalars['String']>;
  englishName_not_ends_with?: Maybe<Scalars['String']>;
  englishName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  englishName_not_starts_with?: Maybe<Scalars['String']>;
  englishName_starts_with?: Maybe<Scalars['String']>;
  languageIso6391Code?: Maybe<Scalars['String']>;
  languageIso6391Code_contains?: Maybe<Scalars['String']>;
  languageIso6391Code_ends_with?: Maybe<Scalars['String']>;
  languageIso6391Code_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  languageIso6391Code_not?: Maybe<Scalars['String']>;
  languageIso6391Code_not_contains?: Maybe<Scalars['String']>;
  languageIso6391Code_not_ends_with?: Maybe<Scalars['String']>;
  languageIso6391Code_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  languageIso6391Code_not_starts_with?: Maybe<Scalars['String']>;
  languageIso6391Code_starts_with?: Maybe<Scalars['String']>;
  languageIso6392Code?: Maybe<Scalars['String']>;
  languageIso6392Code_contains?: Maybe<Scalars['String']>;
  languageIso6392Code_ends_with?: Maybe<Scalars['String']>;
  languageIso6392Code_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  languageIso6392Code_not?: Maybe<Scalars['String']>;
  languageIso6392Code_not_contains?: Maybe<Scalars['String']>;
  languageIso6392Code_not_ends_with?: Maybe<Scalars['String']>;
  languageIso6392Code_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  languageIso6392Code_not_starts_with?: Maybe<Scalars['String']>;
  languageIso6392Code_starts_with?: Maybe<Scalars['String']>;
  naturalName?: Maybe<Scalars['String']>;
  naturalName_contains?: Maybe<Scalars['String']>;
  naturalName_ends_with?: Maybe<Scalars['String']>;
  naturalName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  naturalName_not?: Maybe<Scalars['String']>;
  naturalName_not_contains?: Maybe<Scalars['String']>;
  naturalName_not_ends_with?: Maybe<Scalars['String']>;
  naturalName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  naturalName_not_starts_with?: Maybe<Scalars['String']>;
  naturalName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<LanguageDtoFilter>>;
};

export type LanguageDtoSort = {
  englishName?: Maybe<SortOperationKind>;
  languageIso6391Code?: Maybe<SortOperationKind>;
  languageIso6392Code?: Maybe<SortOperationKind>;
  naturalName?: Maybe<SortOperationKind>;
};

export type LanguageInfoDto = {
  __typename?: 'LanguageInfoDto';
  englishName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  languageId?: Maybe<Scalars['String']>;
  languageIso6391Code?: Maybe<Scalars['String']>;
  languageIso6392Code?: Maybe<Scalars['String']>;
  naturalName?: Maybe<Scalars['String']>;
};

export type LegalInfoDto = {
  __typename?: 'LegalInfoDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  legalInfoDescription?: Maybe<Scalars['String']>;
  legalInfoId?: Maybe<Scalars['String']>;
  legalInfoName?: Maybe<Scalars['String']>;
};

export type LegalInfoDtoFilter = {
  AND?: Maybe<Array<LegalInfoDtoFilter>>;
  legalInfoName?: Maybe<Scalars['String']>;
  legalInfoName_contains?: Maybe<Scalars['String']>;
  legalInfoName_ends_with?: Maybe<Scalars['String']>;
  legalInfoName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  legalInfoName_not?: Maybe<Scalars['String']>;
  legalInfoName_not_contains?: Maybe<Scalars['String']>;
  legalInfoName_not_ends_with?: Maybe<Scalars['String']>;
  legalInfoName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  legalInfoName_not_starts_with?: Maybe<Scalars['String']>;
  legalInfoName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<LegalInfoDtoFilter>>;
};

export type LegalInfoDtoSort = {
  legalInfoName?: Maybe<SortOperationKind>;
};

export type LegalInfoInfoDto = {
  __typename?: 'LegalInfoInfoDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  legalInfoDescription?: Maybe<Scalars['String']>;
  legalInfoId?: Maybe<Scalars['String']>;
  legalInfoName?: Maybe<Scalars['String']>;
};

export type LikeCommentForFrontOfficeResponse = {
  __typename?: 'LikeCommentForFrontOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isLikeComment: Scalars['Boolean'];
};

export type LikeCommentInput = {
  commentId?: Maybe<Scalars['String']>;
  feedItemId?: Maybe<Scalars['String']>;
  isLikeComment: Scalars['Boolean'];
};

export type LimitPostSettingDto = {
  __typename?: 'LimitPostSettingDto';
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  currentLimit?: Maybe<Scalars['Int']>;
  currentLimitDescription?: Maybe<Scalars['String']>;
  deletedByUserFullName?: Maybe<Scalars['String']>;
  isUnlimited?: Maybe<Scalars['Boolean']>;
  lastLimit?: Maybe<Scalars['String']>;
  lastLimitDescription?: Maybe<Scalars['String']>;
  limitPostSettingId?: Maybe<Scalars['String']>;
  rankDescription?: Maybe<Scalars['String']>;
  rankId?: Maybe<Scalars['String']>;
  rankName?: Maybe<Scalars['String']>;
  roleDescription?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
  updatedByUserFullName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type LimitPostSettingDtoFilter = {
  AND?: Maybe<Array<LimitPostSettingDtoFilter>>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<LimitPostSettingDtoFilter>>;
  rankDescription?: Maybe<Scalars['String']>;
  rankDescription_contains?: Maybe<Scalars['String']>;
  rankDescription_ends_with?: Maybe<Scalars['String']>;
  rankDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rankDescription_not?: Maybe<Scalars['String']>;
  rankDescription_not_contains?: Maybe<Scalars['String']>;
  rankDescription_not_ends_with?: Maybe<Scalars['String']>;
  rankDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rankDescription_not_starts_with?: Maybe<Scalars['String']>;
  rankDescription_starts_with?: Maybe<Scalars['String']>;
  roleDescription?: Maybe<Scalars['String']>;
  roleDescription_contains?: Maybe<Scalars['String']>;
  roleDescription_ends_with?: Maybe<Scalars['String']>;
  roleDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  roleDescription_not?: Maybe<Scalars['String']>;
  roleDescription_not_contains?: Maybe<Scalars['String']>;
  roleDescription_not_ends_with?: Maybe<Scalars['String']>;
  roleDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  roleDescription_not_starts_with?: Maybe<Scalars['String']>;
  roleDescription_starts_with?: Maybe<Scalars['String']>;
};

export type LimitPostSettingDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  rankName?: Maybe<SortOperationKind>;
  roleName?: Maybe<SortOperationKind>;
};

export type LockUserInput = {
  isLocked: Scalars['Boolean'];
  userId?: Maybe<Scalars['String']>;
};

export type LockUserResponse = {
  __typename?: 'LockUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};


export type MemberInfoStringeeDto = {
  __typename?: 'MemberInfoStringeeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<MemberInfoStringeeDto>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  guestId?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  memberTypeName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type MobileAppVersionDto = {
  __typename?: 'MobileAppVersionDto';
  mobileAppVersionId: Scalars['Int'];
  mobileOs?: Maybe<Scalars['String']>;
  mobileVersion?: Maybe<Scalars['String']>;
  releaseDatetime: Scalars['Long'];
  releaseNotes?: Maybe<Scalars['String']>;
  releaseUrl?: Maybe<Scalars['String']>;
  updateOption?: Maybe<Scalars['String']>;
};

export type MobileAppVersionDtoFilter = {
  AND?: Maybe<Array<MobileAppVersionDtoFilter>>;
  mobileOs?: Maybe<Scalars['String']>;
  mobileOs_contains?: Maybe<Scalars['String']>;
  mobileOs_ends_with?: Maybe<Scalars['String']>;
  mobileOs_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  mobileOs_not?: Maybe<Scalars['String']>;
  mobileOs_not_contains?: Maybe<Scalars['String']>;
  mobileOs_not_ends_with?: Maybe<Scalars['String']>;
  mobileOs_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  mobileOs_not_starts_with?: Maybe<Scalars['String']>;
  mobileOs_starts_with?: Maybe<Scalars['String']>;
  mobileVersion?: Maybe<Scalars['String']>;
  mobileVersion_contains?: Maybe<Scalars['String']>;
  mobileVersion_ends_with?: Maybe<Scalars['String']>;
  mobileVersion_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  mobileVersion_not?: Maybe<Scalars['String']>;
  mobileVersion_not_contains?: Maybe<Scalars['String']>;
  mobileVersion_not_ends_with?: Maybe<Scalars['String']>;
  mobileVersion_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  mobileVersion_not_starts_with?: Maybe<Scalars['String']>;
  mobileVersion_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<MobileAppVersionDtoFilter>>;
};

export type MobileAppVersionDtoSort = {
  mobileOs?: Maybe<SortOperationKind>;
  releaseDatetime?: Maybe<SortOperationKind>;
  updateOption?: Maybe<SortOperationKind>;
};

export type MobileAppVersionStable = {
  __typename?: 'MobileAppVersionStable';
  calculateSize: Scalars['Int'];
  clone?: Maybe<MobileAppVersionStable>;
  mobileOs?: Maybe<Scalars['String']>;
  mobileVersion?: Maybe<Scalars['String']>;
  releaseNotes?: Maybe<Scalars['String']>;
  releaseUrl?: Maybe<Scalars['String']>;
  updateOption?: Maybe<Scalars['String']>;
};

export type MoveDepositTransactionResponse = {
  __typename?: 'MoveDepositTransactionResponse';
  depositeTransactionDto?: Maybe<DepositeTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type MoveDepositeTransactionInput = {
  consultantId?: Maybe<Scalars['String']>;
  currentBookingTransactionId?: Maybe<Scalars['String']>;
  currentDepositeTransactionId?: Maybe<Scalars['String']>;
  newPropertyPostId?: Maybe<Scalars['String']>;
  otpCode?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleAgentId?: Maybe<Scalars['String']>;
  topenerPhoneNumber?: Maybe<Scalars['String']>;
};


export type Mutation = {
  __typename?: 'Mutation';
  addStaffIntoAllocationRule: AddStaffIntoAllocationRuleResponse;
  addStaffIntoMultiAllocationRules: AddStaffIntoMultiAllocationRulesResponse;
  addStaffIntoMultiGroups: AddStaffIntoMultiGroupsResponse;
  addStaffsIntoGroup: AddStaffsIntoGroupResponse;
  addStandardSubscriptionPackage: AddStandardSubscriptionPackageResponse;
  approveC2CPanoramaImage: ApproveC2CPanoramaImageResponse;
  approveCommentByIdsForBackOffice: ApproveCommentByIdsForBackOfficeResponse;
  approveCommentForBackOffice: ApproveCommentForBackOfficeResponse;
  approveContactTradingB2C: ApproveContactTradingB2CResponse;
  approveCrawlerData: ApproveCrawlerDataResponse;
  approveOrRejectProfilePhoto: ApproveOrRejectProfilePhotoResponse;
  approvePropertyPost: ApprovePropertyPostResponse;
  assignConsultantForBookingTransactions: AssignConsultantForBookingTransactionsResponse;
  assignConsultantForDepositeTransactions: AssignConsultantForDepositTransactionsResponse;
  assignConsultantForMultiContactTradingsB2C: AssignConsultantForContactTradingsB2CResponse;
  assignContactTradingB2CForLeader: AssignContactTradingB2CForLeaderResponse;
  assignPropertyPosts: AssignPropertyPostsResponse;
  assignStaffsToRole: AssignStaffsToRoleResponse;
  bidvPayBookingTransaction: PayBookingTransactionResponse;
  bidvPayDepositTransaction: PayDepositTransactionResponse;
  changeExecutorServiceTicketForFrontOffice: ChangeExecutorServiceTicketForFrontOfficeResponse;
  changeGroupForAgent: ChangeGroupForAgentResponse;
  changePushNotificationMode: ChangePushNotificationModeResponse;
  changeStateOfServiceTicketForFrontOffice: ChangeStateOfServiceTicketForFrontOfficeResponse;
  closePropertyPost: PropertyPostMutationResponse;
  closeSupportRequest: CloseSupportRequestResponse;
  closeSupportRequestFO: CloseSupportRequestFoResponse;
  completeC2CContactTrading: CompleteC2CContactTradingResponse;
  completeContactTrading: CompleteContactTradingResponse;
  completeContactTradingB2C: CompleteContactTradingB2CResponse;
  completeSupportRequest: CompleteSupportRequestResponse;
  consultantAcceptServiceTicketResult: ConsultantAcceptServiceTicketResultResponse;
  consultantRejectServiceTicketResult: ConsultantRejectServiceTicketResultResponse;
  contractExtendedPeriod: ContractExtendedPeriodResponse;
  contractReturnGenericBasket: ContractReturnGenericBasketResponse;
  createAllocationRule: CreateAllocationRuleResponse;
  createB2C2CProject: CreateB2C2CProjectResponse;
  createBackOfficeRole: CreateBackOfficeRoleResponse;
  createC2CContactTradingFO: CreateC2CContactTradingResponse;
  createC2CDemand: CreateC2CDemandResponse;
  createC2CPropertyPost: PropertyPostMutationResponse;
  createC2CPropertyPostCommissionConfig: CreateC2CPropertyPostCommissionConfigResponse;
  createCommentForFrontOffice: CreateCommentForFrontOfficeResponse;
  createContactTradingB2C: CreateContactTradingB2CResponse;
  createContactTradingFO: CreateContactTradingResponse;
  createContactTradingRequest: CreateContactTradingRequestResponse;
  createCustomer?: Maybe<CreateCustomerResponse>;
  createDepositeTransaction: CreateDepositTransactionResponse;
  createDocumentAttribute: CreateDocumentAttributeResponse;
  createDocumentTemplate: CreateDocumentTemplateResponse;
  createGuestBo: CreateGuestResponse;
  createMobileAppVersion: CreateMobileAppVersionResponse;
  createNewAgent: CreateAgentResponse;
  createNewInvestor: CreateInvestorResponse;
  createNewProject: ProjectMutationResponse;
  createNewSaleSeason: SaleSeasonMutationResponse;
  createPanoramaForC2CPropertyPost: CreatePanoramaForC2CPropertyPostResponse;
  createPolicy?: Maybe<PolicyMutationResponse>;
  createProfilePhoto: CreateProfilePhotoResponse;
  createRefundRequest: CreateRefundRequestResponse;
  createRefundTransaction: CreateRefundTransactionResponse;
  createRule: CreateRuleResponse;
  createSearchTerm: CreateSearchTermResponse;
  createServiceTicketForFrontOffice: CreateServiceTicketForFrontOfficeResponse;
  createStaff: CreateStaffResponse;
  createStaffGroup: CreateStaffGroupResponse;
  createSupportRequest: CreateSupportRequestResponse;
  createSupportRequestBO: CreateSupportRequestBoResponse;
  createSupportRequestFintech: SupportRequestFintechResponse;
  createSupportRequestFromContactTradingDetail: CreateSupportRequestFromContactTradingDetailResponse;
  createSupportRequestStringee: CreateSupportRequestStringeeResponse;
  createTopenerBankAccountFO: CreateTopenerBankAccountResponse;
  createUser: CreateUserResponse;
  createUserReportSpam: CreateUserReportSpamResponse;
  declineContactTradingB2C: DeclineContactTradingB2CResponse;
  deleteAgent: DeleteAgentResponse;
  deleteAllocationRule: DeleteAllocationRuleResponse;
  deleteB2C2CProject: DeleteB2C2CProjectResponse;
  deleteB2CPropertyPost: PropertyPostMutationResponse;
  deleteBackOfficeRole?: Maybe<DeleteBackOfficeRoleResponse>;
  deleteCustomer?: Maybe<DeleteCustomerResponse>;
  deleteDocumentAttribute: DeleteDocumentAttributeResponse;
  deleteFollowerOfCurrentUserForFrontOffice: DeleteFollowerOfCurrentUserForFrontOfficeResponse;
  deleteImageBlockFloorPlan: DeleteImageBlockFloorPlanResponse;
  deleteInvestor: InvestorMutationResponse;
  deleteMobileAppVersion: DeleteMobileAppVersionResponse;
  deletePolicy?: Maybe<PolicyMutationResponse>;
  deleteProject: ProjectMutationResponse;
  deletePropertyPost: PropertyPostMutationResponse;
  deletePropertyPostForBackOffice: DeletePropertyPostForBackOfficeResponse;
  deleteRule: DeleteRuleResponse;
  deleteSaleSeason: SaleSeasonMutationResponse;
  deleteStaff: DeleteStaffResponse;
  deleteStaffGroup: DeleteStaffGroupResponse;
  deleteSupportRequest: DeleteSupportRequestResponse;
  deleteTopenerBankAccountFO: DeleteTopenerBankAccountResponse;
  deleteUser: DeleteUserResponse;
  executorSubmitServiceTicketResult: ExecutorSubmitServiceTicketResultResponse;
  fastPayBookingTransaction: PayBookingTransactionResponse;
  fastPayDepositTransaction: PayDepositTransactionResponse;
  followFeedItemForFrontOffice: FollowFeedItemForFrontOfficeResponse;
  followProject: ProjectMutationResponse;
  followPropertyPost: PropertyPostMutationResponse;
  generateStringeeAuthToken: GenerateStringeeAuthTokenResponse;
  generateStringeeAuthTokenAnonymous: GenerateStringeeAuthTokenAnonymousResponse;
  generateStringeeXAuthToken: GenerateStringeeXAuthTokenResponse;
  generateTopenMapAccessToken: GenerateTopenMapAccessTokenResponse;
  generateTopenMapDataFirstTPLAccessToken: GenerateTopenMapDataFirstTplAccessTokenResponse;
  generateTopenMapTPLAccessToken: GenerateTopenMapTplAccessTokenResponse;
  likeCommentForFrontOffice: LikeCommentForFrontOfficeResponse;
  lockUser: LockUserResponse;
  markReadAllUserNotifications?: Maybe<UpdateUserNotificationResponse>;
  moveDepositeTransaction: MoveDepositTransactionResponse;
  paidGuaranteedPostContract: PaidGuaranteedPostContractResponse;
  payAgentSubscriptionTransction: PayAgentSubscriptionTransactionResponse;
  payTransaction: PayTransactionResponse;
  printB2CContract: PrintB2CContractResponse;
  pullPropertyPosts: PullPropertyPostsResponse;
  ratingC2CPost: RatingC2CPostResponse;
  reassignC2CContactTradingToTeamLeader: ReassignC2CContactTradingToTeamLeaderResponse;
  reassignContractTradingToTeamLeader: ReassignContractTradingToTeamLeaderResponse;
  reassignToTeamLeader: ReassignToTeamLeaderResponse;
  registerImagesToResize: RegisterImagesToResizeResponse;
  registerImageToResize: RegisterImageToResizeResponse;
  registerTopenMapUser: RegisterTopenMapUserResponse;
  rejectCommentByIdsForBackOffice: RejectCommentByIdsForBackOfficeResponse;
  rejectCommentForBackOffice: RejectCommentForBackOfficeResponse;
  rejectPropertyPost: RejectPropertyPostResponse;
  removeStaffFromAllocationRule: RemoveStaffFromAllocationRuleResponse;
  removeStaffFromMultiAllocationRules: RemoveStaffFromMultiAllocationRulesResponse;
  removeStaffFromMultiGroups: RemoveStaffFromMultiGroupsResponse;
  removeStaffsFromGroup: RemoveStaffsFromGroupResponse;
  removeStaffsFromRole: RemoveStaffsFromRoleResponse;
  requesterAcceptServiceTicketResult: RequesterAcceptServiceTicketResultResponse;
  requesterRejectServiceTicketResult: RequesterRejectServiceTicketResultResponse;
  requestPrintContract: RequestPrintContractResponse;
  requestUpdateC2CPanoramaImage: RequestUpdateC2CPanoramaImageResponse;
  requestUpdateCustomerInfoByContract: RequestUpdateCustomerInfoByContractResponse;
  requestUpdatingPropertyPost: RequestUpdatingPropertyPostResponse;
  requestUserUpdateProfilePhoto: RequestUserUpdateProfilePhotoResponse;
  resizeImage: ResizeImageResponse;
  saveSupportRequest: SaveSupportRequestResponse;
  seedingPropertyPostBasketByPropertyPost: SeedingPropertyPostBasketByPropertyPostResponse;
  seedingPropertyPostBasketBySaleSeason: SeedingPropertyPostBasketBySaleSeasonResponse;
  sendB2CContractToCommissionPlatform: SendContractToCommissionPlatformResponse;
  sendC2CContactTradingContractToCommissionPlatform: SendC2CContactTradingContractToCommissionPlatformResponse;
  sendC2CContactTradingDepositCompleteEmail: SendC2CContactTradingDepositCompleteEmailResponse;
  sendC2CContactTradingDepositCompleteSMS: SendC2CContactTradingDepositCompleteSmsResponse;
  sendContactTradingDepositeCompleteEmail: SendContactTradingDepositeCompleteEmailResponse;
  sendContactTradingDepositeCompleteSMS: SendContactTradingDepositeCompleteSmsResponse;
  sendContactTradingToSaleConsultant: SendContactTradingToSaleConsultantResponse;
  sendInfoUser: SendInfoUserResponse;
  sendLinkVerifyEmailBO: SendLinkVerifyEmailResponse;
  sendLinkVerifyEmailFO: SendLinkVerifyEmailResponse;
  sendOtpToUpdateCustomerForDepositTransaction: SendOtpToUpdateCustomerForDepositTransactionResponse;
  sendPhoneVerificationTokenForTransaction: SendPhoneVerificationTokenForTransactionResponse;
  sendUserInfoByEmail: SendUserInfoByEmailResponse;
  setLeadersIntoGroup: SetLeadersIntoGroupResponse;
  shareProjectById: ShareProjectByIdResponse;
  sharePropertyPost: SharePropertyPostResponse;
  skipPropertyPostC2CDemand: SkipPropertyPostC2CDemandResponse;
  startProcessingSupportRequest: StartProcessingSupportRequestResponse;
  subscribeEmailForNews: SubscribeEmailForNewsResponse;
  syncStringeeExternalTickets: SyncStringeeExternalTicketsResponse;
  syncTPLAgentsToStringeeContacts: SyncTplAgentsToStringeeContactsResponse;
  syncTPLCustomersToStringeeContacts: SyncTplCustomersToStringeeContactsResponse;
  syncTPLGuestsToStringeeAccounts: SyncTplGuestsToStringeeContactsResponse;
  syncTPLStaffGroupsToStringeeGroups: SyncTplStaffGroupsToStringeeGroupsResponse;
  syncTPLStaffsToStringeeAccounts: SyncTplStaffsToStringeeAccountsResponse;
  syncTPLSupportRequestsToStringeeTicketsForNew: SyncTplSupportRequestsToStringeeTicketsForNewResponse;
  syncTPLSupportRequestsToStringeeTicketsForUpdate: SyncTplSupportRequestsToStringeeTicketsForUpdateResponse;
  syncUserToTopenId: SyncToTopenIdResult;
  topenerReadC2CDemand?: Maybe<TopenerReadC2CDemandResponse>;
  trackContactTradingB2C: TrackContactTradingB2CResponse;
  unfollowProject: ProjectMutationResponse;
  unfollowPropertyPost: PropertyPostMutationResponse;
  unlockDepositForB2CPropertyPost: UnlockDepositB2CPropertyPostResponse;
  updateAgent: UpdateAgentResponse;
  updateAgentRating: UpdateAgentForRatingResponse;
  updateAgentRatingForSupportRequest: UpdateAgentRatingForSupportRequestResponse;
  updateAllocationRule: UpdateAllocationRuleResponse;
  updateAssigneeC2CContactTrading: UpdateAssigneeC2CContactTradingResponse;
  updateAssigneeContactTrading: UpdateAssigneeContactTradingResponse;
  updateB2C2CProject: UpdateB2C2CProjectResponse;
  updateB2CTransactionContract: UpdateB2CTransactionContractResponse;
  updateB2CTransactionContractResult: UpdateB2CTransactionContractResultResponse;
  updateBackOfficeRole: UpdateBackOfficeRoleResponse;
  updateBlockFloorPlan: UpdateBlockFloorPlanResponse;
  updateBookingTransactionToRefunded: UpdateTransactionToRefundedResponse;
  updateC2CConsultantSupportPropertyPosts: UpdateC2CConsultantSupportPropertyPostsResponse;
  updateC2CContactTradingAcceptedDeposit: UpdateC2CContactTradingAcceptedDepositResponse;
  updateC2CContactTradingAcceptedNegotiation: UpdateC2CContactTradingAcceptedNegotiationResponse;
  updateC2CContactTradingConnectedStatus: UpdateC2CContactTradingConnectedStatusResponse;
  updateC2CContactTradingDepositStatus: UpdateC2CContactTradingDepositStatusResponse;
  updateC2CContactTradingDepositStatusBO: UpdateC2CContactTradingDepositStatusBoResponse;
  updateC2CContactTradingNegotiationStatus: UpdateC2CContactTradingNegotiationStatusResponse;
  updateC2CContactTradingPendingStatus: UpdateC2CContactTradingPendingStatusResponse;
  updateC2CContactTradingProcessingTime: UpdateC2CContactTradingProcessingTimeResponse;
  updateC2CContactTradingRejectedDeposit: UpdateC2CContactTradingRejectedDepositResponse;
  updateC2CContactTradingRejectedNegotiation: UpdateC2CContactTradingRejectedNegotiationResponse;
  updateC2CContactTradingRejectedStatus: UpdateC2CContactTradingRejectedStatusResponse;
  updateC2CContactTradingSignedContractDeposit: UpdateC2CContactTradingSignedContractDepositResponse;
  updateC2CDemand: UpdateC2CDemandResponse;
  updateC2CPanoramaTutorialConfig: UpdateC2CPanoramaTutorialConfigResponse;
  updateC2CPropertyPost: C2CPropertyPostMutationResponse;
  updateC2CPropertyPostCommissionConfig: UpdateC2CPropertyPostCommissionConfigResponse;
  updateC2CPropertyPostPanorama: UpdateC2CPropertyPostPanoramaResponse;
  updateConfigPaymentMethodStatus: UpdateConfigPaymentMethodStatusResponse;
  updateContactTrading: UpdateContactTradingResponse;
  updateContactTradingAcceptedDeposit: UpdateContactTradingAcceptedDepositResponse;
  updateContactTradingB2CForBO: UpdateContactTradingB2CForBoResponse;
  updateContactTradingConnectedStatus: UpdateContactTradingConnectedStatusResponse;
  updateContactTradingDepositStatus: UpdateContactTradingDepositStatusResponse;
  updateContactTradingDepositStatusBO: UpdateContactTradingDepositStatusBoResponse;
  updateContactTradingFO: UpdateContactTradingFoResponse;
  updateContactTradingNegotiationStatus: UpdateContactTradingNegotiationStatusResponse;
  updateContactTradingPendingStatus: UpdateContactTradingPendingStatusResponse;
  updateContactTradingProcessingTime: UpdateContactTradingProcessingTimeResponse;
  updateContactTradingRejectedDeposit: UpdateContactTradingRejectedDepositResponse;
  updateContactTradingRejectedStatus: UpdateContactTradingRejectedStatusResponse;
  updateContactTradingSignedContractDeposit: UpdateContactTradingSignedContractDepositResponse;
  updateCrawlerProcessRefuseStatus: UpdateCrawlerProcessRefuseStatusResponse;
  updateCustomer?: Maybe<UpdateCustomerResponse>;
  updateCustomerInfoForDepositTransaction: UpdateCustomerInfoForDepositTransactionResponse;
  updateDepositeTransactionToRefunded?: Maybe<UpdateTransactionToRefundedResponse>;
  updateDiscountInfo: UpdateDiscountInfoResponse;
  updateDocumentAttribute: UpdateDocumentAttributeResponse;
  updateDocumentTemplate: UpdateDocumentTemplateResponse;
  updateEmailNotificationTemplate: UpdateEmailNotificationTemplateResponse;
  updateEmailTemplateSetting: UpdateEmailTemplateSettingResponse;
  updateImageSize: UpdateImageSizeResponse;
  updateInvestor: InvestorMutationResponse;
  updateLimitPostApproved: UpdateLimitPostApprovedResponse;
  updateLimitPostSetting: UpdateLimitPostSettingResponse;
  updateMaxFavoritePropertyPostNumber: UpdateMaxFavoritePropertyPostNumberResponse;
  updateMobileAppVersion: UpdateMobileAppVersionResponse;
  updatePolicy?: Maybe<PolicyMutationResponse>;
  updateProject: ProjectMutationResponse;
  updatePropertyPost: PropertyPostMutationResponse;
  updateRule: UpdateRuleResponse;
  updateSaleSeason: SaleSeasonMutationResponse;
  updateSaleSeasonStatistic: UpdateSaleSeasonStatisticResponse;
  updateStaff: UpdateStaffResponse;
  updateStaffGroup: UpdateStaffGroupResponse;
  updateSubscriptionNotificationConfig: UpdateSubscriptionNotificationConfigResponse;
  updateSubscriptionPackage: UpdateSubscriptionPackageResponse;
  updateSupportServiceConfiguration: UpdateSupportServiceConfigurationResponse;
  updateTopenerBankAccountFO: UpdateTopenerBankAccountResponse;
  updateTopenerInfoForTransaction: UpdateTopenerInfoForTransactionResponse;
  updateTopenerServiceConfiguration: UpdateSupportServiceConfigurationResponse;
  updateTransactionConfigPayment: UpdateTransactionConfigPaymentResponse;
  updateUser: UpdateUserResponse;
  updateUserBackOffice: UpdateUserBackOfficeResponse;
  updateUserBiographyFO: UpdateUserBiographyFoResponse;
  updateUserNotification?: Maybe<UpdateUserNotificationResponse>;
  uploadDocumentContract: UploadDocumentResponse;
  userInterestedC2CDemand: UserInterestedC2CDemandResponse;
  validateReCaptchaForPropertyPostBasket?: Maybe<ValidateReCaptchaForPropertyPostBasketResponse>;
  vnpayPayBookingTransaction: PayBookingTransactionResponse;
  vnpayPayDepositTransaction: PayDepositTransactionResponse;
};


export type MutationAddStaffIntoAllocationRuleArgs = {
  addStaffIntoAllocationRuleInput: AddStaffIntoAllocationRuleInput;
};


export type MutationAddStaffIntoMultiAllocationRulesArgs = {
  addStaffIntoMultiAllocationRulesInput: AddStaffIntoMultiAllocationRulesInput;
};


export type MutationAddStaffIntoMultiGroupsArgs = {
  addStaffIntoMultiGroupsInput: AddStaffIntoMultiGroupsInput;
};


export type MutationAddStaffsIntoGroupArgs = {
  addStaffsIntoGroupInput: AddStaffsIntoGroupInput;
};


export type MutationAddStandardSubscriptionPackageArgs = {
  addStandardSubscriptionPackageInput: AddStandardSubscriptionPackageInput;
};


export type MutationApproveC2CPanoramaImageArgs = {
  request: ApproveC2CPanoramaImageInput;
};


export type MutationApproveCommentByIdsForBackOfficeArgs = {
  input: ApproveCommentByIdsInput;
};


export type MutationApproveCommentForBackOfficeArgs = {
  input: ApproveCommentInput;
};


export type MutationApproveContactTradingB2CArgs = {
  approveContactTradingB2CInput: ApproveContactTradingB2CInput;
};


export type MutationApproveCrawlerDataArgs = {
  approveCrawlerDataInput: ApproveCrawlerDataInput;
};


export type MutationApproveOrRejectProfilePhotoArgs = {
  request: ApproveOrRejectProfilePhotoInput;
};


export type MutationApprovePropertyPostArgs = {
  approvePropertyPostInput: ApprovePropertyPostInput;
};


export type MutationAssignConsultantForBookingTransactionsArgs = {
  request: AssignConsultantForBookingTransactionsInput;
};


export type MutationAssignConsultantForDepositeTransactionsArgs = {
  request: AssignConsultantForDepositeTransactionsInput;
};


export type MutationAssignConsultantForMultiContactTradingsB2CArgs = {
  assignConsultantForContactTradingsB2CInput: AssignConsultantForContactTradingsB2CInput;
};


export type MutationAssignContactTradingB2CForLeaderArgs = {
  assignContactTradingB2CForLeaderInput: AssignContactTradingB2CForLeaderInput;
};


export type MutationAssignPropertyPostsArgs = {
  assignPropertyPostsInput: AssignPropertyPostsInput;
};


export type MutationAssignStaffsToRoleArgs = {
  assignStaffsToRoleInput: AssignStaffsToRoleInput;
};


export type MutationBidvPayBookingTransactionArgs = {
  payBookingTransactionInput: PayBookingTransactionInput;
};


export type MutationBidvPayDepositTransactionArgs = {
  payDepositTransactionInput: PayDepositTransactionInput;
};


export type MutationChangeExecutorServiceTicketForFrontOfficeArgs = {
  input: ChangeExecutorServiceTicketInput;
};


export type MutationChangeGroupForAgentArgs = {
  input: ChangeGroupForAgentInput;
};


export type MutationChangePushNotificationModeArgs = {
  request: ChangePushNotificationModeInput;
};


export type MutationChangeStateOfServiceTicketForFrontOfficeArgs = {
  input: ChangeStateOfServiceTicketInput;
};


export type MutationClosePropertyPostArgs = {
  closePropertyPostInput: ClosePropertyPostInput;
};


export type MutationCloseSupportRequestArgs = {
  closeSupportRequestInput: CloseSupportRequestInput;
};


export type MutationCloseSupportRequestFoArgs = {
  closeSupportRequestFOInput: CloseSupportRequestFoInput;
};


export type MutationCompleteC2CContactTradingArgs = {
  completeC2CContactTradingInput: CompleteC2CContactTradingInput;
};


export type MutationCompleteContactTradingArgs = {
  completeContactTradingInput: CompleteContactTradingInput;
};


export type MutationCompleteContactTradingB2CArgs = {
  completeContactTradingB2CInput: CompleteContactTradingB2CInput;
};


export type MutationCompleteSupportRequestArgs = {
  completeSupportRequestInput: CompleteSupportRequestInput;
};


export type MutationConsultantAcceptServiceTicketResultArgs = {
  input: ConsultantAcceptServiceTicketResultInput;
};


export type MutationConsultantRejectServiceTicketResultArgs = {
  input: ConsultantRejectServiceTicketResultInput;
};


export type MutationContractExtendedPeriodArgs = {
  contractExtendedPeriodInput: ContractExtendedPeriodInput;
};


export type MutationContractReturnGenericBasketArgs = {
  contractReturnGenericBasketInput: ContractReturnGenericBasketInput;
};


export type MutationCreateAllocationRuleArgs = {
  createAllocationRuleInput: CreateAllocationRuleInput;
};


export type MutationCreateB2C2CProjectArgs = {
  createB2C2CInput: CreateB2C2CInput;
};


export type MutationCreateBackOfficeRoleArgs = {
  createBackOfficeRoleInput: CreateBackOfficeRoleInput;
};


export type MutationCreateC2CContactTradingFoArgs = {
  createC2CContactTradingInput: CreateC2CContactTradingInput;
};


export type MutationCreateC2CDemandArgs = {
  request: CreateC2CDemandInput;
};


export type MutationCreateC2CPropertyPostArgs = {
  createC2CPropertyPostInput: CreateC2CPropertyPostInput;
};


export type MutationCreateC2CPropertyPostCommissionConfigArgs = {
  input: CreateC2CPropertyPostCommissionConfigInput;
};


export type MutationCreateCommentForFrontOfficeArgs = {
  input: CreateCommentInput;
};


export type MutationCreateContactTradingB2CArgs = {
  createContactTradingB2CInput: CreateContactTradingB2CInput;
};


export type MutationCreateContactTradingFoArgs = {
  createContactTradingInput: CreateContactTradingInput;
};


export type MutationCreateContactTradingRequestArgs = {
  createContactTradingRequestInput: CreateContactTradingRequestInput;
};


export type MutationCreateCustomerArgs = {
  createCustomerInput?: Maybe<CreateCustomerRequestInput>;
};


export type MutationCreateDepositeTransactionArgs = {
  createDepositeTransactionInput: CreateDepositeTransactionInput;
};


export type MutationCreateDocumentAttributeArgs = {
  createDocumentAttributeInput: CreateDocumentAttributeInput;
};


export type MutationCreateDocumentTemplateArgs = {
  createDocumentTemplateInput: CreateDocumentTemplateInput;
};


export type MutationCreateGuestBoArgs = {
  request: CreateGuestBoInput;
};


export type MutationCreateMobileAppVersionArgs = {
  createMobileAppVersionInput: CreateMobileAppVersionInput;
};


export type MutationCreateNewAgentArgs = {
  input: CreateAgentInput;
};


export type MutationCreateNewInvestorArgs = {
  input: CreateInvestorInput;
};


export type MutationCreateNewProjectArgs = {
  input: ProjectInput;
};


export type MutationCreateNewSaleSeasonArgs = {
  input: SaleSeasonInput;
};


export type MutationCreatePanoramaForC2CPropertyPostArgs = {
  createPanoramaForC2CPropertyPostInput: CreatePanoramaForC2CPropertyPostInput;
};


export type MutationCreatePolicyArgs = {
  createPolicyInput: CreatePolicyInput;
};


export type MutationCreateProfilePhotoArgs = {
  request: CreateProfilePhotoInput;
};


export type MutationCreateRefundRequestArgs = {
  request: CreateRefundRequestInput;
};


export type MutationCreateRefundTransactionArgs = {
  request: CreateRefundTransactionInput;
};


export type MutationCreateRuleArgs = {
  input: CreateRuleInput;
};


export type MutationCreateSearchTermArgs = {
  createSearchTermInput: CreateSearchTermInput;
};


export type MutationCreateServiceTicketForFrontOfficeArgs = {
  input: CreateServiceTicketInput;
};


export type MutationCreateStaffArgs = {
  createStaffInput: CreateStaffInput;
};


export type MutationCreateStaffGroupArgs = {
  createStaffGroupInput: CreateStaffGroupInput;
};


export type MutationCreateSupportRequestArgs = {
  createSupportRequestInput: CreateSupportRequestInput;
};


export type MutationCreateSupportRequestBoArgs = {
  request: CreateSupportRequestBoInputNew;
};


export type MutationCreateSupportRequestFintechArgs = {
  request: CreateSupportRequestFintechInput;
};


export type MutationCreateSupportRequestFromContactTradingDetailArgs = {
  request: CreateSupportRequestFromContactTradingDetailRequestInput;
};


export type MutationCreateSupportRequestStringeeArgs = {
  request: CreateSupportRequestBoInput;
};


export type MutationCreateTopenerBankAccountFoArgs = {
  createTopenerBankAccountFOInput: CreateTopenerBankAccountFoInput;
};


export type MutationCreateUserArgs = {
  createUserInput: CreateUserInput;
};


export type MutationCreateUserReportSpamArgs = {
  createUserReportSpamInput: CreateUserReportSpamInput;
};


export type MutationDeclineContactTradingB2CArgs = {
  declineContactTradingB2CInput: DeclineContactTradingB2CInput;
};


export type MutationDeleteAgentArgs = {
  input: DeleteAgentInput;
};


export type MutationDeleteAllocationRuleArgs = {
  deleteAllocationRuleInput: DeleteAllocationRuleInput;
};


export type MutationDeleteB2C2CProjectArgs = {
  b2c2cProjectId: Scalars['Uuid'];
};


export type MutationDeleteB2CPropertyPostArgs = {
  deletePropertyPostRequest: DeletePropertyPostInput;
};


export type MutationDeleteBackOfficeRoleArgs = {
  backOfficeRoleId: Scalars['Uuid'];
};


export type MutationDeleteCustomerArgs = {
  deleteCustomerInput?: Maybe<DeleteCustomerRequestInput>;
};


export type MutationDeleteDocumentAttributeArgs = {
  deleteDocumentAttributeInput: DeleteDocumentAttributeInput;
};


export type MutationDeleteFollowerOfCurrentUserForFrontOfficeArgs = {
  input: DeleteFollowerOfCurrentUserInput;
};


export type MutationDeleteImageBlockFloorPlanArgs = {
  deleteImageBlockFloorPlanInput: DeleteImageBlockFloorPlanInput;
};


export type MutationDeleteInvestorArgs = {
  input: DeleteInvestorInput;
};


export type MutationDeleteMobileAppVersionArgs = {
  deleteMobileAppVersionInput: DeleteMobileAppVersionInput;
};


export type MutationDeletePolicyArgs = {
  deletePolicyInput: DeletePolicyInput;
};


export type MutationDeleteProjectArgs = {
  input: ProjectDelete;
};


export type MutationDeletePropertyPostArgs = {
  deletePropertyPostInput: DeletePropertyPostInput;
};


export type MutationDeletePropertyPostForBackOfficeArgs = {
  deletePropertyPostForBackOfficeInput: DeletePropertyPostForBackOfficeInput;
};


export type MutationDeleteRuleArgs = {
  recordVersion?: Maybe<Scalars['Int']>;
  ruleId: Scalars['Uuid'];
};


export type MutationDeleteSaleSeasonArgs = {
  input: SaleSeasonDelete;
};


export type MutationDeleteStaffArgs = {
  deleteStaffInput: DeleteStaffInput;
};


export type MutationDeleteStaffGroupArgs = {
  deleteStaffGroupInput: DeleteStaffGroupInput;
};


export type MutationDeleteSupportRequestArgs = {
  deleteSupportRequestInput: DeleteSupportRequestInput;
};


export type MutationDeleteTopenerBankAccountFoArgs = {
  deleteTopenerBankAccountFOInput: DeleteTopenerBankAccountFoInput;
};


export type MutationDeleteUserArgs = {
  deleteUserInput: DeleteUserInput;
};


export type MutationExecutorSubmitServiceTicketResultArgs = {
  input: ExecutorSubmitServiceTicketResultInput;
};


export type MutationFastPayBookingTransactionArgs = {
  payBookingTransactionInput: PayBookingTransactionInput;
};


export type MutationFastPayDepositTransactionArgs = {
  payDepositTransactionInput: PayDepositTransactionInput;
};


export type MutationFollowFeedItemForFrontOfficeArgs = {
  input: FollowFeedItemInput;
};


export type MutationFollowProjectArgs = {
  input: FollowProject;
};


export type MutationFollowPropertyPostArgs = {
  followPropertyPostInput: FollowPropertyPostInput;
};


export type MutationGenerateStringeeAuthTokenArgs = {
  request: GenerateStringeeAuthTokenInput;
};


export type MutationGenerateStringeeAuthTokenAnonymousArgs = {
  request: GenerateStringeeAuthTokenAnonymousInput;
};


export type MutationGenerateStringeeXAuthTokenArgs = {
  request: GenerateStringeeXAuthTokenInput;
};


export type MutationGenerateTopenMapAccessTokenArgs = {
  request: GenerateTopenMapAccessTokenInput;
};


export type MutationGenerateTopenMapDataFirstTplAccessTokenArgs = {
  request: GenerateTopenMapDataFirstTplAccessTokenInput;
};


export type MutationGenerateTopenMapTplAccessTokenArgs = {
  request: GenerateTopenMapTplAccessTokenInput;
};


export type MutationLikeCommentForFrontOfficeArgs = {
  input: LikeCommentInput;
};


export type MutationLockUserArgs = {
  lockUserInput: LockUserInput;
};


export type MutationMoveDepositeTransactionArgs = {
  moveDepositeTransactionInput: MoveDepositeTransactionInput;
};


export type MutationPaidGuaranteedPostContractArgs = {
  paidGuaranteedPostContractInput: PaidGuaranteedPostContractInput;
};


export type MutationPayAgentSubscriptionTransctionArgs = {
  payAgentSubscriptionInput: PayAgentSubscriptionInput;
};


export type MutationPayTransactionArgs = {
  payTransactionInput: PayTransactionInput;
};


export type MutationPrintB2CContractArgs = {
  printB2CContractInput: PrintB2CContractInput;
};


export type MutationRatingC2CPostArgs = {
  ratingC2CPostInput: RatingC2CPostInput;
};


export type MutationReassignC2CContactTradingToTeamLeaderArgs = {
  reassignC2CContactTradingToTeamLeaderRequestInput: ReassignC2CContactTradingToTeamLeaderInput;
};


export type MutationReassignContractTradingToTeamLeaderArgs = {
  reassignContractTradingToTeamLeaderRequestInput: ReassignContractTradingToTeamLeaderInput;
};


export type MutationReassignToTeamLeaderArgs = {
  reassignToTeamLeaderRequestInput: ReassignToTeamLeaderInput;
};


export type MutationRegisterImagesToResizeArgs = {
  request: RegisterImagesToResizeInput;
};


export type MutationRegisterImageToResizeArgs = {
  request: RegisterImageToResizeInput;
};


export type MutationRegisterTopenMapUserArgs = {
  request: RegisterTopenMapUserInput;
};


export type MutationRejectCommentByIdsForBackOfficeArgs = {
  input: RejectCommentByIdsInput;
};


export type MutationRejectCommentForBackOfficeArgs = {
  input: RejectCommentInput;
};


export type MutationRejectPropertyPostArgs = {
  rejectPropertyPostInput: RejectPropertyPostInput;
};


export type MutationRemoveStaffFromAllocationRuleArgs = {
  removeStaffFromAllocationRuleInput: RemoveStaffFromAllocationRuleInput;
};


export type MutationRemoveStaffFromMultiAllocationRulesArgs = {
  removeStaffFromMultiAllocationRulesInput: RemoveStaffFromMultiAllocationRulesInput;
};


export type MutationRemoveStaffFromMultiGroupsArgs = {
  removeStaffFromMultiGroupsInput: RemoveStaffFromMultiGroupsInput;
};


export type MutationRemoveStaffsFromGroupArgs = {
  removeStaffsFromGroupInput: RemoveStaffsFromGroupInput;
};


export type MutationRemoveStaffsFromRoleArgs = {
  removeStaffsFromRoleInput: RemoveStaffsFromRoleInput;
};


export type MutationRequesterAcceptServiceTicketResultArgs = {
  input: RequesterAcceptServiceTicketResultInput;
};


export type MutationRequesterRejectServiceTicketResultArgs = {
  input: RequesterRejectServiceTicketResultInput;
};


export type MutationRequestPrintContractArgs = {
  requestPrintContractInput: RequestPrintContractInput;
};


export type MutationRequestUpdateC2CPanoramaImageArgs = {
  request: RequestUpdateC2CPanoramaImageInput;
};


export type MutationRequestUpdateCustomerInfoByContractArgs = {
  contractId: Scalars['Uuid'];
};


export type MutationRequestUpdatingPropertyPostArgs = {
  requestUpdatingPropertyPostInput: RequestUpdatingPropertyPostInput;
};


export type MutationRequestUserUpdateProfilePhotoArgs = {
  request: RequestUserUpdateProfilePhotoInput;
};


export type MutationResizeImageArgs = {
  request: ResizeImageInput;
};


export type MutationSaveSupportRequestArgs = {
  saveSupportRequestInput: SaveSupportRequestInput;
};


export type MutationSeedingPropertyPostBasketByPropertyPostArgs = {
  seedingPropertyPostBasketByPropertyPostInput?: Maybe<SeedingPropertyPostBasketByPropertyPostRequestInput>;
  seedingPropertyPostBasketBySaleSeasonInput: SeedingPropertyPostBasketBySaleSeasonInput;
};


export type MutationSeedingPropertyPostBasketBySaleSeasonArgs = {
  seedingPropertyPostBasketBySaleSeasonInput: SeedingPropertyPostBasketBySaleSeasonInput;
};


export type MutationSendB2CContractToCommissionPlatformArgs = {
  sendB2CContractToCommissionPlatformInput: SendB2CContractToCommissionPlatformInput;
};


export type MutationSendC2CContactTradingContractToCommissionPlatformArgs = {
  sendC2CContactTradingContractToCommissionPlatformInput: SendC2CContactTradingContractToCommissionPlatformInput;
};


export type MutationSendC2CContactTradingDepositCompleteEmailArgs = {
  attachments?: Maybe<Scalars['String']>;
  c2cContactTradingId: Scalars['Uuid'];
};


export type MutationSendC2CContactTradingDepositCompleteSmsArgs = {
  c2cContactTradingId: Scalars['Uuid'];
};


export type MutationSendContactTradingDepositeCompleteEmailArgs = {
  attachments?: Maybe<Scalars['String']>;
  contactTradingId: Scalars['Uuid'];
};


export type MutationSendContactTradingDepositeCompleteSmsArgs = {
  contactTradingId: Scalars['Uuid'];
};


export type MutationSendContactTradingToSaleConsultantArgs = {
  sendContactTradingToSaleConsultantInput: SendContactTradingToSaleConsultantInput;
};


export type MutationSendInfoUserArgs = {
  sendInfoUserInput: SendInfoUserInput;
};


export type MutationSendLinkVerifyEmailBoArgs = {
  userId: Scalars['Uuid'];
};


export type MutationSendLinkVerifyEmailFoArgs = {
  sendLinkVerifyEmailFOInput: SendLinkVerifyEmailFoInput;
};


export type MutationSendOtpToUpdateCustomerForDepositTransactionArgs = {
  request: SendOtpToUpdateCustomerForDepositTransactionInput;
};


export type MutationSendPhoneVerificationTokenForTransactionArgs = {
  input: SendPhoneVerificationTokenForTransactionInput;
};


export type MutationSendUserInfoByEmailArgs = {
  sendUserInfoByEmailInput: SendUserInfoByEmailInput;
};


export type MutationSetLeadersIntoGroupArgs = {
  setLeadersIntoGroupInput: SetLeadersIntoGroupInput;
};


export type MutationShareProjectByIdArgs = {
  input: ShareProjectByIdInput;
};


export type MutationSharePropertyPostArgs = {
  sharePropertyPostInput: SharePropertyPostInput;
};


export type MutationSkipPropertyPostC2CDemandArgs = {
  request: SkipPropertyPostC2CDemandInput;
};


export type MutationStartProcessingSupportRequestArgs = {
  startProcessingSupportRequestInput: StartProcessingSupportRequestInput;
};


export type MutationSubscribeEmailForNewsArgs = {
  subscribeEmailForNewsInput: SubscribeEmailForNewsInput;
};


export type MutationSyncUserToTopenIdArgs = {
  userId: Scalars['Uuid'];
};


export type MutationTopenerReadC2CDemandArgs = {
  c2CDemandId: Scalars['Uuid'];
};


export type MutationTrackContactTradingB2CArgs = {
  trackContactTradingB2CInput: TrackContactTradingB2CInput;
};


export type MutationUnfollowProjectArgs = {
  input: FollowProject;
};


export type MutationUnfollowPropertyPostArgs = {
  unfollowPropertyPostInput: UnfollowPropertyPostInput;
};


export type MutationUnlockDepositForB2CPropertyPostArgs = {
  unlockDepositForB2CPropertyPostInput: UnlockDepositForB2CPropertyPostInput;
};


export type MutationUpdateAgentArgs = {
  input: UpdateAgentInput;
};


export type MutationUpdateAgentRatingArgs = {
  input: UpdateAgentRatingInput;
};


export type MutationUpdateAgentRatingForSupportRequestArgs = {
  input: UpdateAgentRatingForSupportRequestInput;
};


export type MutationUpdateAllocationRuleArgs = {
  updateAllocationRuleInput: UpdateAllocationRuleInput;
};


export type MutationUpdateAssigneeC2CContactTradingArgs = {
  updateAssigneeC2CContactTradingInput: UpdateAssigneeC2CContactTradingInput;
};


export type MutationUpdateAssigneeContactTradingArgs = {
  updateAssigneeContactTradingInput: UpdateAssigneeContactTradingInput;
};


export type MutationUpdateB2C2CProjectArgs = {
  updateB2C2CInput: UpdateB2C2CInput;
};


export type MutationUpdateB2CTransactionContractArgs = {
  updateB2CTransactionContractInput: UpdateB2CTransactionContractInput;
};


export type MutationUpdateB2CTransactionContractResultArgs = {
  updateB2CTransactionContractResultInput: UpdateB2CTransactionContractResultInput;
};


export type MutationUpdateBackOfficeRoleArgs = {
  updateBackOfficeRoleInput: UpdateBackOfficeRoleInput;
};


export type MutationUpdateBlockFloorPlanArgs = {
  updateBlockFloorPlanInput: UpdateBlockFloorPlanInput;
};


export type MutationUpdateBookingTransactionToRefundedArgs = {
  request: UpdateTransactionToRefundedInput;
};


export type MutationUpdateC2CConsultantSupportPropertyPostsArgs = {
  updateC2CConsultantSupportPropertyPostsInput: UpdateC2CConsultantSupportPropertyPostsInput;
};


export type MutationUpdateC2CContactTradingAcceptedDepositArgs = {
  updateC2CContactTradingAcceptedDepositInput: UpdateC2CContactTradingAcceptedDepositInput;
};


export type MutationUpdateC2CContactTradingAcceptedNegotiationArgs = {
  updateC2CContactTradingAcceptedNegotiationInput: UpdateC2CContactTradingAcceptedNegotiationInput;
};


export type MutationUpdateC2CContactTradingConnectedStatusArgs = {
  updateC2CContactTradingConnectedStatusInput: UpdateC2CContactTradingConnectedStatusInput;
};


export type MutationUpdateC2CContactTradingDepositStatusArgs = {
  updateC2CContactTradingDepositStatusInput: UpdateC2CContactTradingDepositStatusInput;
};


export type MutationUpdateC2CContactTradingDepositStatusBoArgs = {
  updateC2CContactTradingDepositStatusBOInput: UpdateC2CContactTradingDepositStatusBoInput;
};


export type MutationUpdateC2CContactTradingNegotiationStatusArgs = {
  updateC2CContactTradingNegotiationStatusInput: UpdateC2CContactTradingNegotiationStatusInput;
};


export type MutationUpdateC2CContactTradingPendingStatusArgs = {
  updateC2CContactTradingPendingStatusInput: UpdateC2CContactTradingPendingStatusInput;
};


export type MutationUpdateC2CContactTradingProcessingTimeArgs = {
  updateC2CContactTradingProcessingTimeInput: UpdateC2CContactTradingProcessingTimeInput;
};


export type MutationUpdateC2CContactTradingRejectedDepositArgs = {
  updateC2CContactTradingRejectedDepositInput: UpdateC2CContactTradingRejectedDepositInput;
};


export type MutationUpdateC2CContactTradingRejectedNegotiationArgs = {
  updateC2CContactTradingRejectedNegotiationInput: UpdateC2CContactTradingRejectedNegotiationInput;
};


export type MutationUpdateC2CContactTradingRejectedStatusArgs = {
  updateC2CContactTradingRejectedStatusInput: UpdateC2CContactTradingRejectedStatusInput;
};


export type MutationUpdateC2CContactTradingSignedContractDepositArgs = {
  updateC2CContactTradingSignedContractDepositInput: UpdateC2CContactTradingSignedContractDepositInput;
};


export type MutationUpdateC2CDemandArgs = {
  request: UpdateC2CDemandInput;
};


export type MutationUpdateC2CPanoramaTutorialConfigArgs = {
  willNotShowPanoramaTutorialNextTime: Scalars['Boolean'];
};


export type MutationUpdateC2CPropertyPostArgs = {
  updateC2CPropertyPostInput: UpdateC2CPropertyPostInput;
};


export type MutationUpdateC2CPropertyPostCommissionConfigArgs = {
  input: UpdateC2CPropertyPostCommissionConfigInput;
};


export type MutationUpdateC2CPropertyPostPanoramaArgs = {
  updateC2CPropertyPostPanoramaInput: UpdateC2CPropertyPostPanoramaInput;
};


export type MutationUpdateConfigPaymentMethodStatusArgs = {
  input: UpdateConfigPaymentMethodStatusInput;
};


export type MutationUpdateContactTradingArgs = {
  updateContactTradingInput: UpdateContactTradingInput;
};


export type MutationUpdateContactTradingAcceptedDepositArgs = {
  updateContactTradingAcceptedDepositInput: UpdateContactTradingAcceptedDepositInput;
};


export type MutationUpdateContactTradingB2CForBoArgs = {
  updateContactTradingB2CForBOInput: UpdateContactTradingB2CForBoInput;
};


export type MutationUpdateContactTradingConnectedStatusArgs = {
  updateContactTradingConnectedStatusInput: UpdateContactTradingConnectedStatusInput;
};


export type MutationUpdateContactTradingDepositStatusArgs = {
  updateContactTradingDepositStatusInput: UpdateContactTradingDepositStatusInput;
};


export type MutationUpdateContactTradingDepositStatusBoArgs = {
  updateContactTradingDepositStatusBOInput: UpdateContactTradingDepositStatusBoInput;
};


export type MutationUpdateContactTradingFoArgs = {
  updateContactTradingFOInput: UpdateContactTradingFoInput;
};


export type MutationUpdateContactTradingNegotiationStatusArgs = {
  updateContactTradingNegotiationStatusInput: UpdateContactTradingNegotiationStatusInput;
};


export type MutationUpdateContactTradingPendingStatusArgs = {
  updateContactTradingPendingStatusInput: UpdateContactTradingPendingStatusInput;
};


export type MutationUpdateContactTradingProcessingTimeArgs = {
  updateContactTradingProcessingTimeInput: UpdateContactTradingProcessingTimeInput;
};


export type MutationUpdateContactTradingRejectedDepositArgs = {
  updateContactTradingRejectedDepositInput: UpdateContactTradingRejectedDepositInput;
};


export type MutationUpdateContactTradingRejectedStatusArgs = {
  updateContactTradingRejectedStatusInput: UpdateContactTradingRejectedStatusInput;
};


export type MutationUpdateContactTradingSignedContractDepositArgs = {
  updateContactTradingSignedContractDepositInput: UpdateContactTradingSignedContractDepositInput;
};


export type MutationUpdateCrawlerProcessRefuseStatusArgs = {
  updateCrawlerProcessRefuseStatusInput: UpdateCrawlerProcessRefuseStatusInput;
};


export type MutationUpdateCustomerArgs = {
  updateCustomerInput?: Maybe<UpdateCustomerRequestInput>;
};


export type MutationUpdateCustomerInfoForDepositTransactionArgs = {
  request: UpdateCustomerInfoForDepositTransactionInput;
};


export type MutationUpdateDepositeTransactionToRefundedArgs = {
  request?: Maybe<UpdateDepositTransactionToRefundedRequestInput>;
};


export type MutationUpdateDiscountInfoArgs = {
  updateDiscountInfoInput: UpdateDiscountInfoInput;
};


export type MutationUpdateDocumentAttributeArgs = {
  updateDocumentAttributeInput: UpdateDocumentAttributeInput;
};


export type MutationUpdateDocumentTemplateArgs = {
  updateDocumentTemplateInput: UpdateDocumentTemplateInput;
};


export type MutationUpdateEmailNotificationTemplateArgs = {
  input: UpdateEmailNotificationTemplateInput;
};


export type MutationUpdateEmailTemplateSettingArgs = {
  input: UpdateEmailTemplateSettingInput;
};


export type MutationUpdateImageSizeArgs = {
  request: UpdateImageSizeInput;
};


export type MutationUpdateInvestorArgs = {
  input: UpdateInvestorInput;
};


export type MutationUpdateLimitPostApprovedArgs = {
  updateLimitPostApprovedInput: UpdateLimitPostApprovedInput;
};


export type MutationUpdateLimitPostSettingArgs = {
  updateLimitPostSettingInput: UpdateLimitPostSettingInput;
};


export type MutationUpdateMaxFavoritePropertyPostNumberArgs = {
  updateMaxFavoritePropertyPostNumberInput: UpdateMaxFavoritePropertyPostNumberInput;
};


export type MutationUpdateMobileAppVersionArgs = {
  updateMobileAppVersionInput: UpdateMobileAppVersionInput;
};


export type MutationUpdatePolicyArgs = {
  updatePolicyInput: UpdatePolicyInput;
};


export type MutationUpdateProjectArgs = {
  input: ProjectUpdate;
};


export type MutationUpdatePropertyPostArgs = {
  updatePropertyPostInput: UpdatePropertyPostInput;
};


export type MutationUpdateRuleArgs = {
  input: UpdateRuleInput;
};


export type MutationUpdateSaleSeasonArgs = {
  input: SaleSeasonUpdate;
};


export type MutationUpdateSaleSeasonStatisticArgs = {
  updateSaleSeasonStatisticInput: UpdateSaleSeasonStatisticInput;
};


export type MutationUpdateStaffArgs = {
  updateStaffInput: UpdateStaffInput;
};


export type MutationUpdateStaffGroupArgs = {
  updateStaffGroupInput: UpdateStaffGroupInput;
};


export type MutationUpdateSubscriptionNotificationConfigArgs = {
  updateSubscriptionNotificationConfigInput: UpdateSubscriptionNotificationConfigInput;
};


export type MutationUpdateSubscriptionPackageArgs = {
  updateSubscriptionPackageInput: UpdateSubscriptionPackageInput;
};


export type MutationUpdateSupportServiceConfigurationArgs = {
  request: UpdateSupportServiceConfigurationInput;
};


export type MutationUpdateTopenerBankAccountFoArgs = {
  updateTopenerBankAccountFOInput: UpdateTopenerBankAccountFoInput;
};


export type MutationUpdateTopenerInfoForTransactionArgs = {
  input: UpdateTopenerInfoForTransactionInput;
};


export type MutationUpdateTopenerServiceConfigurationArgs = {
  request: UpdateTopenerServiceConfigurationInput;
};


export type MutationUpdateTransactionConfigPaymentArgs = {
  input?: Maybe<UpdateTransactionConfigPaymentInput>;
};


export type MutationUpdateUserArgs = {
  updateUserInput: UpdateUserInput;
};


export type MutationUpdateUserBackOfficeArgs = {
  updateUserBackOfficeInput: UpdateUserBackOfficeInput;
};


export type MutationUpdateUserBiographyFoArgs = {
  updateUserBiographyFOInput: UpdateUserBiographyFoInput;
};


export type MutationUpdateUserNotificationArgs = {
  input?: Maybe<UpdateUserNotificationRequestInput>;
};


export type MutationUploadDocumentContractArgs = {
  uploadDocumentInput: UploadDocumentInput;
};


export type MutationUserInterestedC2CDemandArgs = {
  request: UserInterestedC2CDemandInput;
};


export type MutationValidateReCaptchaForPropertyPostBasketArgs = {
  request: ValidateReCaptchaForPropertyPostBasketInput;
};


export type MutationVnpayPayBookingTransactionArgs = {
  payBookingTransactionInput: PayBookingTransactionInput;
};


export type MutationVnpayPayDepositTransactionArgs = {
  payDepositTransactionInput: PayDepositTransactionInput;
};


export enum NationalIdType {
  Null = 'NULL',
  Cmnd = 'CMND',
  Cccd = 'CCCD',
  Passport = 'PASSPORT'
}

export type NearFacilityDto = {
  __typename?: 'NearFacilityDto';
  createdDatetime?: Maybe<Scalars['Long']>;
  nearFacilityCode?: Maybe<Scalars['String']>;
  nearFacilityId?: Maybe<Scalars['String']>;
  nearFacilityName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type NearFacilityDtoFilter = {
  AND?: Maybe<Array<NearFacilityDtoFilter>>;
  nearFacilityCode?: Maybe<Scalars['String']>;
  nearFacilityCode_contains?: Maybe<Scalars['String']>;
  nearFacilityCode_ends_with?: Maybe<Scalars['String']>;
  nearFacilityCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nearFacilityCode_not?: Maybe<Scalars['String']>;
  nearFacilityCode_not_contains?: Maybe<Scalars['String']>;
  nearFacilityCode_not_ends_with?: Maybe<Scalars['String']>;
  nearFacilityCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nearFacilityCode_not_starts_with?: Maybe<Scalars['String']>;
  nearFacilityCode_starts_with?: Maybe<Scalars['String']>;
  nearFacilityName?: Maybe<Scalars['String']>;
  nearFacilityName_contains?: Maybe<Scalars['String']>;
  nearFacilityName_ends_with?: Maybe<Scalars['String']>;
  nearFacilityName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nearFacilityName_not?: Maybe<Scalars['String']>;
  nearFacilityName_not_contains?: Maybe<Scalars['String']>;
  nearFacilityName_not_ends_with?: Maybe<Scalars['String']>;
  nearFacilityName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  nearFacilityName_not_starts_with?: Maybe<Scalars['String']>;
  nearFacilityName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<NearFacilityDtoFilter>>;
};

export type NearFacilityDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  nearFacilityCode?: Maybe<SortOperationKind>;
  nearFacilityName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type NewlyUpdatedNewsPageDto = {
  __typename?: 'NewlyUpdatedNewsPageDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<NewlyUpdatedNewsPageDto>;
  news?: Maybe<Array<Maybe<Scalars['String']>>>;
  newsType?: Maybe<Scalars['String']>;
};

export enum NewsType {
  Projectsection1 = 'PROJECTSECTION1',
  Projectsection2 = 'PROJECTSECTION2',
  Projectsection3 = 'PROJECTSECTION3',
  Estatesection1 = 'ESTATESECTION1',
  Estatesection2 = 'ESTATESECTION2',
  Estatesection3 = 'ESTATESECTION3'
}

export type NotificationDto = {
  __typename?: 'NotificationDto';
  createdDatetime: Scalars['Long'];
  id?: Maybe<Scalars['String']>;
  isUnread: Scalars['Boolean'];
  link?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  notificationInfoModel?: Maybe<Scalars['String']>;
  notificationType?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  subTypeCode?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type NotificationDtoFilter = {
  AND?: Maybe<Array<NotificationDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  id?: Maybe<Scalars['String']>;
  id_contains?: Maybe<Scalars['String']>;
  id_ends_with?: Maybe<Scalars['String']>;
  id_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not?: Maybe<Scalars['String']>;
  id_not_contains?: Maybe<Scalars['String']>;
  id_not_ends_with?: Maybe<Scalars['String']>;
  id_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  id_not_starts_with?: Maybe<Scalars['String']>;
  id_starts_with?: Maybe<Scalars['String']>;
  isUnread?: Maybe<Scalars['Boolean']>;
  isUnread_not?: Maybe<Scalars['Boolean']>;
  message?: Maybe<Scalars['String']>;
  message_contains?: Maybe<Scalars['String']>;
  message_ends_with?: Maybe<Scalars['String']>;
  message_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message_not?: Maybe<Scalars['String']>;
  message_not_contains?: Maybe<Scalars['String']>;
  message_not_ends_with?: Maybe<Scalars['String']>;
  message_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  message_not_starts_with?: Maybe<Scalars['String']>;
  message_starts_with?: Maybe<Scalars['String']>;
  notificationType?: Maybe<Scalars['String']>;
  notificationType_contains?: Maybe<Scalars['String']>;
  notificationType_ends_with?: Maybe<Scalars['String']>;
  notificationType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationType_not?: Maybe<Scalars['String']>;
  notificationType_not_contains?: Maybe<Scalars['String']>;
  notificationType_not_ends_with?: Maybe<Scalars['String']>;
  notificationType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  notificationType_not_starts_with?: Maybe<Scalars['String']>;
  notificationType_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<NotificationDtoFilter>>;
};

export type NotificationDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  isUnread?: Maybe<SortOperationKind>;
  message?: Maybe<SortOperationKind>;
  title?: Maybe<SortOperationKind>;
};

export type OffsetPagingOfActionNotificationDto = {
  __typename?: 'OffsetPagingOfActionNotificationDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ActionNotificationDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfActiveAgentSubscriptionPackageForAllUsersDto = {
  __typename?: 'OffsetPagingOfActiveAgentSubscriptionPackageForAllUsersDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ActiveAgentSubscriptionPackageForAllUsersDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAddressDto = {
  __typename?: 'OffsetPagingOfAddressDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Master_Data_AddressDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAddressTypeDto = {
  __typename?: 'OffsetPagingOfAddressTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AddressTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentDto = {
  __typename?: 'OffsetPagingOfAgentDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentGroupDto = {
  __typename?: 'OffsetPagingOfAgentGroupDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentGroupDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentGroupTrackingDto = {
  __typename?: 'OffsetPagingOfAgentGroupTrackingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentGroupTrackingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentPerformanceTrackingDto = {
  __typename?: 'OffsetPagingOfAgentPerformanceTrackingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentPerformanceTrackingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentRankingDto = {
  __typename?: 'OffsetPagingOfAgentRankingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentRankingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentRatingDto = {
  __typename?: 'OffsetPagingOfAgentRatingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Master_Data_AgentRatingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentSubscriptionPackageDto = {
  __typename?: 'OffsetPagingOfAgentSubscriptionPackageDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentSubscriptionPackageDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAgentWithKpiDto = {
  __typename?: 'OffsetPagingOfAgentWithKpiDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AgentWithKpiDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAllocationRuleDto = {
  __typename?: 'OffsetPagingOfAllocationRuleDto';
  downloadUrl?: Maybe<Scalars['String']>;
  edges?: Maybe<Array<Maybe<AllocationRuleDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Long']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAllocationRuleSpecializeDto = {
  __typename?: 'OffsetPagingOfAllocationRuleSpecializeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AllocationRuleSpecializeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAllocationRuleTypeDto = {
  __typename?: 'OffsetPagingOfAllocationRuleTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AllocationRuleTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfAllocationRulesNotAssignStaffDto = {
  __typename?: 'OffsetPagingOfAllocationRulesNotAssignStaffDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<AllocationRulesNotAssignStaffDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfB2C2CProjectBoDto = {
  __typename?: 'OffsetPagingOfB2C2CProjectBODto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<B2C2CProjectBoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfB2C2CProjectDto = {
  __typename?: 'OffsetPagingOfB2C2CProjectDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<B2C2CProjectDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfB2CTransactionContractInfoDto = {
  __typename?: 'OffsetPagingOfB2CTransactionContractInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<B2CTransactionContractInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBackOfficeRoleDto = {
  __typename?: 'OffsetPagingOfBackOfficeRoleDto';
  downloadUrl?: Maybe<Scalars['String']>;
  edges?: Maybe<Array<Maybe<BackOfficeRoleDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Long']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBankDto = {
  __typename?: 'OffsetPagingOfBankDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BankDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBankTransferDetailDto = {
  __typename?: 'OffsetPagingOfBankTransferDetailDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BankTransferDetailDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBlockFloorPlanDto = {
  __typename?: 'OffsetPagingOfBlockFloorPlanDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BlockFloorPlanDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBlockNameInfo = {
  __typename?: 'OffsetPagingOfBlockNameInfo';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BlockNameInfo>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBookingStatusDto = {
  __typename?: 'OffsetPagingOfBookingStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BookingStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfBookingTransactionToAssignConsultantDto = {
  __typename?: 'OffsetPagingOfBookingTransactionToAssignConsultantDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<BookingTransactionToAssignConsultantDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CContactTradingDto = {
  __typename?: 'OffsetPagingOfC2CContactTradingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CContactTradingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CContactTradingHistoryDto = {
  __typename?: 'OffsetPagingOfC2CContactTradingHistoryDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CContactTradingHistoryDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CContactTradingInfoForPropertyPostDto = {
  __typename?: 'OffsetPagingOfC2CContactTradingInfoForPropertyPostDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CContactTradingInfoForPropertyPostDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CDemandContactTradingDto = {
  __typename?: 'OffsetPagingOfC2CDemandContactTradingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CDemandContactTradingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CDemandDto = {
  __typename?: 'OffsetPagingOfC2CDemandDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CDemandDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CDepositRejectReasonDto = {
  __typename?: 'OffsetPagingOfC2CDepositRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CDepositRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CNegotiationRejectReasonDto = {
  __typename?: 'OffsetPagingOfC2CNegotiationRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CNegotiationRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CPanoramaImageDto = {
  __typename?: 'OffsetPagingOfC2CPanoramaImageDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CPanoramaImageDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CPostRatingDto = {
  __typename?: 'OffsetPagingOfC2CPostRatingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CPostRatingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CPropertyPostCommissionConfigDto = {
  __typename?: 'OffsetPagingOfC2CPropertyPostCommissionConfigDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CPropertyPostCommissionConfigDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CPropertyPostRejectReasonDto = {
  __typename?: 'OffsetPagingOfC2CPropertyPostRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CPropertyPostRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfC2CPropertyPostViewedDto = {
  __typename?: 'OffsetPagingOfC2CPropertyPostViewedDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<C2CPropertyPostViewedDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCToCPropertyPostAuditHistoryDto = {
  __typename?: 'OffsetPagingOfCToCPropertyPostAuditHistoryDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CToCPropertyPostAuditHistoryDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCityDto = {
  __typename?: 'OffsetPagingOfCityDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CityDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCommentApproveReasonDto = {
  __typename?: 'OffsetPagingOfCommentApproveReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommentApproveReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCommentForBackOfficeDto = {
  __typename?: 'OffsetPagingOfCommentForBackOfficeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommentForBackOfficeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCommentRejectReasonDto = {
  __typename?: 'OffsetPagingOfCommentRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommentRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCommentStatusDto = {
  __typename?: 'OffsetPagingOfCommentStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CommentStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCompetencyDto = {
  __typename?: 'OffsetPagingOfCompetencyDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CompetencyDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingAssignmentStatusDto = {
  __typename?: 'OffsetPagingOfContactTradingAssignmentStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingAssignmentStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingB2CAssigneeCurrentUserDto = {
  __typename?: 'OffsetPagingOfContactTradingB2CAssigneeCurrentUserDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingB2CAssigneeCurrentUserDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingB2CCreatedByCurrentUserDto = {
  __typename?: 'OffsetPagingOfContactTradingB2CCreatedByCurrentUserDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingB2CCreatedByCurrentUserDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingB2CDetailDto = {
  __typename?: 'OffsetPagingOfContactTradingB2CDetailDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingB2CDetailDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingB2CStatusDto = {
  __typename?: 'OffsetPagingOfContactTradingB2CStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingB2CStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingDto = {
  __typename?: 'OffsetPagingOfContactTradingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingForC2CDemandDto = {
  __typename?: 'OffsetPagingOfContactTradingForC2CDemandDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingForC2CDemandDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingHistoryDto = {
  __typename?: 'OffsetPagingOfContactTradingHistoryDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingHistoryDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingInfoForPropertyPostDto = {
  __typename?: 'OffsetPagingOfContactTradingInfoForPropertyPostDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingInfoForPropertyPostDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingRejectReasonDto = {
  __typename?: 'OffsetPagingOfContactTradingRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingRelevantPropertyStatusDto = {
  __typename?: 'OffsetPagingOfContactTradingRelevantPropertyStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingRelevantPropertyStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContactTradingStatusDto = {
  __typename?: 'OffsetPagingOfContactTradingStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContactTradingStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfContractStatusDto = {
  __typename?: 'OffsetPagingOfContractStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ContractStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCountryDto = {
  __typename?: 'OffsetPagingOfCountryDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CountryDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCrawlerProcessDto = {
  __typename?: 'OffsetPagingOfCrawlerProcessDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CrawlerProcessDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCrawlerRefuseReasonDto = {
  __typename?: 'OffsetPagingOfCrawlerRefuseReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CrawlerRefuseReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCrawlerTrackingStatusDto = {
  __typename?: 'OffsetPagingOfCrawlerTrackingStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CrawlerTrackingStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCustomerDto = {
  __typename?: 'OffsetPagingOfCustomerDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CustomerDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfCustomerInfoChangeHistoryDto = {
  __typename?: 'OffsetPagingOfCustomerInfoChangeHistoryDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<CustomerInfoChangeHistoryDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDepartmentDto = {
  __typename?: 'OffsetPagingOfDepartmentDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DepartmentDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDepositeStatusDto = {
  __typename?: 'OffsetPagingOfDepositeStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DepositeStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDepositeTransactionToAssignConsultantDto = {
  __typename?: 'OffsetPagingOfDepositeTransactionToAssignConsultantDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DepositeTransactionToAssignConsultantDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDistrictDto = {
  __typename?: 'OffsetPagingOfDistrictDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DistrictDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDocumentAttributeDto = {
  __typename?: 'OffsetPagingOfDocumentAttributeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DocumentAttributeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDocumentAttributeTypeDto = {
  __typename?: 'OffsetPagingOfDocumentAttributeTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DocumentAttributeTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDocumentTemplateDto = {
  __typename?: 'OffsetPagingOfDocumentTemplateDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DocumentTemplateDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfDocumentTypeDto = {
  __typename?: 'OffsetPagingOfDocumentTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<DocumentTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfEWalletTypeDto = {
  __typename?: 'OffsetPagingOfEWalletTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EWalletTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfEmailNotificationTemplateDto = {
  __typename?: 'OffsetPagingOfEmailNotificationTemplateDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EmailNotificationTemplateDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfEstateTypeOfInterestDto = {
  __typename?: 'OffsetPagingOfEstateTypeOfInterestDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<EstateTypeOfInterestDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfExportBookingTransactionsBySeasonIdDto = {
  __typename?: 'OffsetPagingOfExportBookingTransactionsBySeasonIdDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ExportBookingTransactionsBySeasonIdDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfFeedObjectTypeDto = {
  __typename?: 'OffsetPagingOfFeedObjectTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<FeedObjectTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfFollowerFeedItemForBackOfficeDto = {
  __typename?: 'OffsetPagingOfFollowerFeedItemForBackOfficeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<FollowerFeedItemForBackOfficeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfFundAccountDto = {
  __typename?: 'OffsetPagingOfFundAccountDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<FundAccountDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfGetFollowTopenerForFrontOfficeDto = {
  __typename?: 'OffsetPagingOfGetFollowTopenerForFrontOfficeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GetFollowTopenerForFrontOfficeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfGetTopenersByCurrentUserDto = {
  __typename?: 'OffsetPagingOfGetTopenersByCurrentUserDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GetTopenersByCurrentUserDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfGuaranteedPackageDto = {
  __typename?: 'OffsetPagingOfGuaranteedPackageDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GuaranteedPackageDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfGuestDto = {
  __typename?: 'OffsetPagingOfGuestDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<GuestDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfImageSizeDto = {
  __typename?: 'OffsetPagingOfImageSizeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ImageSizeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfInternalFacilityDto = {
  __typename?: 'OffsetPagingOfInternalFacilityDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<InternalFacilityDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfInternationalCardTypeDto = {
  __typename?: 'OffsetPagingOfInternationalCardTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<InternationalCardTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfLanguageDto = {
  __typename?: 'OffsetPagingOfLanguageDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<LanguageDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfLegalInfoDto = {
  __typename?: 'OffsetPagingOfLegalInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<LegalInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfLimitPostSettingDto = {
  __typename?: 'OffsetPagingOfLimitPostSettingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<LimitPostSettingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfMobileAppVersionDto = {
  __typename?: 'OffsetPagingOfMobileAppVersionDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<MobileAppVersionDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfNearFacilityDto = {
  __typename?: 'OffsetPagingOfNearFacilityDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NearFacilityDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfNotificationDto = {
  __typename?: 'OffsetPagingOfNotificationDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<NotificationDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfOrganizationDto = {
  __typename?: 'OffsetPagingOfOrganizationDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<OrganizationDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPanoramaImageApprovalStatusDto = {
  __typename?: 'OffsetPagingOfPanoramaImageApprovalStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PanoramaImageApprovalStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPanoramaRequestUpdateReasonDto = {
  __typename?: 'OffsetPagingOfPanoramaRequestUpdateReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PanoramaRequestUpdateReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPanoramaSceneDto = {
  __typename?: 'OffsetPagingOfPanoramaSceneDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PanoramaSceneDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPanoramaTutorialDto = {
  __typename?: 'OffsetPagingOfPanoramaTutorialDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PanoramaTutorialDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPaymentConfigNotesDto = {
  __typename?: 'OffsetPagingOfPaymentConfigNotesDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PaymentConfigNotesDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPaymentMethodDto = {
  __typename?: 'OffsetPagingOfPaymentMethodDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PaymentMethodDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPaymentStatusDto = {
  __typename?: 'OffsetPagingOfPaymentStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PaymentStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPaymentUnitDto = {
  __typename?: 'OffsetPagingOfPaymentUnitDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PaymentUnitDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPendingReasonDto = {
  __typename?: 'OffsetPagingOfPendingReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PendingReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPolicyDto = {
  __typename?: 'OffsetPagingOfPolicyDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PolicyDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPolicyTypeDto = {
  __typename?: 'OffsetPagingOfPolicyTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PolicyTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPostTypeDto = {
  __typename?: 'OffsetPagingOfPostTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PostTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPotentialAgentUserDto = {
  __typename?: 'OffsetPagingOfPotentialAgentUserDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PotentialAgentUserDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProfilePhotoApprovalStatusDto = {
  __typename?: 'OffsetPagingOfProfilePhotoApprovalStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProfilePhotoApprovalStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProfilePhotoRejectReasonDto = {
  __typename?: 'OffsetPagingOfProfilePhotoRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProfilePhotoRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectBoDto = {
  __typename?: 'OffsetPagingOfProjectBODto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectBoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectDto = {
  __typename?: 'OffsetPagingOfProjectDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectForPublicDto = {
  __typename?: 'OffsetPagingOfProjectForPublicDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectForPublicDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectInfoDto = {
  __typename?: 'OffsetPagingOfProjectInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Sale_ProjectInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectPostStatusDto = {
  __typename?: 'OffsetPagingOfProjectPostStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectPostStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectStatusDto = {
  __typename?: 'OffsetPagingOfProjectStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectSuggestionDto = {
  __typename?: 'OffsetPagingOfProjectSuggestionDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectSuggestionDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectWithPropertyPostDto = {
  __typename?: 'OffsetPagingOfProjectWithPropertyPostDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectWithPropertyPostDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfProjectsForSearchDto = {
  __typename?: 'OffsetPagingOfProjectsForSearchDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProjectsForSearchDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostApprovalStatusDto = {
  __typename?: 'OffsetPagingOfPropertyPostApprovalStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostApprovalStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostCategoryDto = {
  __typename?: 'OffsetPagingOfPropertyPostCategoryDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostCategoryDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostDto = {
  __typename?: 'OffsetPagingOfPropertyPostDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostForPublicDto = {
  __typename?: 'OffsetPagingOfPropertyPostForPublicDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostForPublicDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostStatusDto = {
  __typename?: 'OffsetPagingOfPropertyPostStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostSuggestionDto = {
  __typename?: 'OffsetPagingOfPropertyPostSuggestionDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostSuggestionDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyPostsForSearchDto = {
  __typename?: 'OffsetPagingOfPropertyPostsForSearchDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyPostsForSearchDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertySubTypeDto = {
  __typename?: 'OffsetPagingOfPropertySubTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertySubTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfPropertyTypeDto = {
  __typename?: 'OffsetPagingOfPropertyTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<PropertyTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfReactionTypeDto = {
  __typename?: 'OffsetPagingOfReactionTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReactionTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfReceivedServiceTicketForFrontOfficeDto = {
  __typename?: 'OffsetPagingOfReceivedServiceTicketForFrontOfficeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ReceivedServiceTicketForFrontOfficeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfRequestTypeDto = {
  __typename?: 'OffsetPagingOfRequestTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RequestTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfRoleDto = {
  __typename?: 'OffsetPagingOfRoleDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RoleDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfRuleDto = {
  __typename?: 'OffsetPagingOfRuleDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<RuleDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSaleSeasonDto = {
  __typename?: 'OffsetPagingOfSaleSeasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SaleSeasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSaleSeasonStatusDto = {
  __typename?: 'OffsetPagingOfSaleSeasonStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SaleSeasonStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSaleTrackingStatusDto = {
  __typename?: 'OffsetPagingOfSaleTrackingStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SaleTrackingStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSearchTermDto = {
  __typename?: 'OffsetPagingOfSearchTermDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SearchTermDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSentServiceTicketForFrontOfficeDto = {
  __typename?: 'OffsetPagingOfSentServiceTicketForFrontOfficeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SentServiceTicketForFrontOfficeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSimilarProjectInfoDto = {
  __typename?: 'OffsetPagingOfSimilarProjectInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SimilarProjectInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSimpleProjectInfoDto = {
  __typename?: 'OffsetPagingOfSimpleProjectInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SimpleProjectInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSimpleSeasonDto = {
  __typename?: 'OffsetPagingOfSimpleSeasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SimpleSeasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSimpleUserInfoDto = {
  __typename?: 'OffsetPagingOfSimpleUserInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SimpleUserInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSpamTypeDto = {
  __typename?: 'OffsetPagingOfSpamTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SpamTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSpecializeDto = {
  __typename?: 'OffsetPagingOfSpecializeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SpecializeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffContractTypeDto = {
  __typename?: 'OffsetPagingOfStaffContractTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffContractTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffDto = {
  __typename?: 'OffsetPagingOfStaffDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffForAllocationRuleDto = {
  __typename?: 'OffsetPagingOfStaffForAllocationRuleDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffForAllocationRuleDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffForBackOfficeDto = {
  __typename?: 'OffsetPagingOfStaffForBackOfficeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  edges?: Maybe<Array<Maybe<StaffForBackOfficeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Long']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffForBackOfficeRoleDto = {
  __typename?: 'OffsetPagingOfStaffForBackOfficeRoleDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffForBackOfficeRoleDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffForStaffGroupDto = {
  __typename?: 'OffsetPagingOfStaffForStaffGroupDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffForStaffGroupDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffGroupDto = {
  __typename?: 'OffsetPagingOfStaffGroupDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffGroupDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffGroupsNotAssignStaffDto = {
  __typename?: 'OffsetPagingOfStaffGroupsNotAssignStaffDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffGroupsNotAssignStaffDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffInfoDto = {
  __typename?: 'OffsetPagingOfStaffInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<Support_Requests_StaffInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffPositionDto = {
  __typename?: 'OffsetPagingOfStaffPositionDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffPositionDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffRankingDto = {
  __typename?: 'OffsetPagingOfStaffRankingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffRankingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffStatusDto = {
  __typename?: 'OffsetPagingOfStaffStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffTypeDto = {
  __typename?: 'OffsetPagingOfStaffTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StaffTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStaffsOfStaffGroupDto = {
  __typename?: 'OffsetPagingOfStaffsOfStaffGroupDto';
  downloadUrl?: Maybe<Scalars['String']>;
  edges?: Maybe<Array<Maybe<StaffsOfStaffGroupDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Long']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfStreetDto = {
  __typename?: 'OffsetPagingOfStreetDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<StreetDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSubscriptionPackageStatusDto = {
  __typename?: 'OffsetPagingOfSubscriptionPackageStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SubscriptionPackageStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSubscriptionPaymentStatusDto = {
  __typename?: 'OffsetPagingOfSubscriptionPaymentStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SubscriptionPaymentStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportRequestClosingReasonDto = {
  __typename?: 'OffsetPagingOfSupportRequestClosingReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportRequestClosingReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportRequestDto = {
  __typename?: 'OffsetPagingOfSupportRequestDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportRequestDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportRequestInfoDto = {
  __typename?: 'OffsetPagingOfSupportRequestInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportRequestInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportRequestServiceBonusDto = {
  __typename?: 'OffsetPagingOfSupportRequestServiceBonusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportRequestServiceBonusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportRequestSourceTypeDto = {
  __typename?: 'OffsetPagingOfSupportRequestSourceTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportRequestSourceTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportRequestStatusDto = {
  __typename?: 'OffsetPagingOfSupportRequestStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportRequestStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceDto = {
  __typename?: 'OffsetPagingOfSupportServiceDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketCancelReasonDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketCancelReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketCancelReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketProcessingDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketProcessingDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketProcessingDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketProcessingStatusDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketProcessingStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketProcessingStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketRejectReasonDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketRejectReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketRejectReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketResultUpdateReasonDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketResultUpdateReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketResultUpdateReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfSupportServiceTicketStatusDto = {
  __typename?: 'OffsetPagingOfSupportServiceTicketStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SupportServiceTicketStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTopenerBankAccountDto = {
  __typename?: 'OffsetPagingOfTopenerBankAccountDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TopenerBankAccountDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTopenerDto = {
  __typename?: 'OffsetPagingOfTopenerDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TopenerDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTopenerOfMonthDto = {
  __typename?: 'OffsetPagingOfTopenerOfMonthDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TopenerOfMonthDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTransactionCancelReasonDto = {
  __typename?: 'OffsetPagingOfTransactionCancelReasonDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionCancelReasonDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTransactionDetailDto = {
  __typename?: 'OffsetPagingOfTransactionDetailDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionDetailDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTransactionPaymentMethodConfigDto = {
  __typename?: 'OffsetPagingOfTransactionPaymentMethodConfigDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionPaymentMethodConfigDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTransactionPaymentStatusDto = {
  __typename?: 'OffsetPagingOfTransactionPaymentStatusDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionPaymentStatusDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfTransactionsByBuyerIdDto = {
  __typename?: 'OffsetPagingOfTransactionsByBuyerIdDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<TransactionsByBuyerIdDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUnitOfMeasureDto = {
  __typename?: 'OffsetPagingOfUnitOfMeasureDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UnitOfMeasureDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUserDto = {
  __typename?: 'OffsetPagingOfUserDto';
  downloadUrl?: Maybe<Scalars['String']>;
  edges?: Maybe<Array<Maybe<UserDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount?: Maybe<Scalars['Long']>;
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUserInfoDto = {
  __typename?: 'OffsetPagingOfUserInfoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<SimpleUserInfoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUserProfilePhotoDto = {
  __typename?: 'OffsetPagingOfUserProfilePhotoDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserProfilePhotoDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUserReportSpamDto = {
  __typename?: 'OffsetPagingOfUserReportSpamDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserReportSpamDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUserTransactionDto = {
  __typename?: 'OffsetPagingOfUserTransactionDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserTransactionDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfUserViewTypeDto = {
  __typename?: 'OffsetPagingOfUserViewTypeDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<UserViewTypeDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OffsetPagingOfWardDto = {
  __typename?: 'OffsetPagingOfWardDto';
  downloadUrl?: Maybe<Scalars['String']>;
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<WardDto>>>;
  pageSize?: Maybe<Scalars['Int']>;
  totalCount: Scalars['Int'];
  totalPages?: Maybe<Scalars['Int']>;
};

export type OrganizationDto = {
  __typename?: 'OrganizationDto';
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  faxes?: Maybe<Scalars['String']>;
  internationalOrganizationName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  operationDate?: Maybe<Scalars['String']>;
  organizationId?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
  organizationStatus?: Maybe<Scalars['String']>;
  organizationType?: Maybe<Scalars['String']>;
  profile?: Maybe<Scalars['String']>;
  representivePerson?: Maybe<Scalars['String']>;
  shortOrganizationName?: Maybe<Scalars['String']>;
  taxNo?: Maybe<Scalars['String']>;
  telephones?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OrganizationDtoFilter = {
  AND?: Maybe<Array<OrganizationDtoFilter>>;
  OR?: Maybe<Array<OrganizationDtoFilter>>;
  organizationName?: Maybe<Scalars['String']>;
  organizationName_contains?: Maybe<Scalars['String']>;
  organizationName_ends_with?: Maybe<Scalars['String']>;
  organizationName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationName_not?: Maybe<Scalars['String']>;
  organizationName_not_contains?: Maybe<Scalars['String']>;
  organizationName_not_ends_with?: Maybe<Scalars['String']>;
  organizationName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationName_not_starts_with?: Maybe<Scalars['String']>;
  organizationName_starts_with?: Maybe<Scalars['String']>;
  organizationType?: Maybe<Scalars['String']>;
  organizationType_contains?: Maybe<Scalars['String']>;
  organizationType_ends_with?: Maybe<Scalars['String']>;
  organizationType_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationType_not?: Maybe<Scalars['String']>;
  organizationType_not_contains?: Maybe<Scalars['String']>;
  organizationType_not_ends_with?: Maybe<Scalars['String']>;
  organizationType_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  organizationType_not_starts_with?: Maybe<Scalars['String']>;
  organizationType_starts_with?: Maybe<Scalars['String']>;
  representivePerson?: Maybe<Scalars['String']>;
  representivePerson_contains?: Maybe<Scalars['String']>;
  representivePerson_ends_with?: Maybe<Scalars['String']>;
  representivePerson_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  representivePerson_not?: Maybe<Scalars['String']>;
  representivePerson_not_contains?: Maybe<Scalars['String']>;
  representivePerson_not_ends_with?: Maybe<Scalars['String']>;
  representivePerson_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  representivePerson_not_starts_with?: Maybe<Scalars['String']>;
  representivePerson_starts_with?: Maybe<Scalars['String']>;
  shortOrganizationName?: Maybe<Scalars['String']>;
  shortOrganizationName_contains?: Maybe<Scalars['String']>;
  shortOrganizationName_ends_with?: Maybe<Scalars['String']>;
  shortOrganizationName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortOrganizationName_not?: Maybe<Scalars['String']>;
  shortOrganizationName_not_contains?: Maybe<Scalars['String']>;
  shortOrganizationName_not_ends_with?: Maybe<Scalars['String']>;
  shortOrganizationName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  shortOrganizationName_not_starts_with?: Maybe<Scalars['String']>;
  shortOrganizationName_starts_with?: Maybe<Scalars['String']>;
};

export type OrganizationDtoSort = {
  organizationName?: Maybe<SortOperationKind>;
  organizationType?: Maybe<SortOperationKind>;
  representivePerson?: Maybe<SortOperationKind>;
  shortOrganizationName?: Maybe<SortOperationKind>;
};

export type OrganizationInfoDto = {
  __typename?: 'OrganizationInfoDto';
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  faxes?: Maybe<Scalars['String']>;
  internationalOrganizationName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  operationDate?: Maybe<Scalars['String']>;
  organizationId?: Maybe<Scalars['String']>;
  organizationName?: Maybe<Scalars['String']>;
  organizationStatus?: Maybe<Scalars['String']>;
  organizationType?: Maybe<Scalars['String']>;
  profile?: Maybe<Scalars['String']>;
  representivePerson?: Maybe<Scalars['String']>;
  shortOrganizationName?: Maybe<Scalars['String']>;
  taxNo?: Maybe<Scalars['String']>;
  telephones?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type OwnerInfoDto = {
  __typename?: 'OwnerInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<OwnerInfoDto>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type OwnerInfoDtoInput = {
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** Indicates whether more edges exist following the set defined by the clients arguments. */
  hasNextPage: Scalars['Boolean'];
  /** Indicates whether more edges exist prior the set defined by the clients arguments. */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};


export type PaidGuaranteedPostContractInput = {
  guaranteedContractDocumentsJson?: Maybe<Scalars['String']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type PaidGuaranteedPostContractResponse = {
  __typename?: 'PaidGuaranteedPostContractResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type PanoramaImageApprovalStatusDto = {
  __typename?: 'PanoramaImageApprovalStatusDto';
  panoramaImageApprovalStatusDescription?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PanoramaImageApprovalStatusDtoFilter = {
  AND?: Maybe<Array<PanoramaImageApprovalStatusDtoFilter>>;
  OR?: Maybe<Array<PanoramaImageApprovalStatusDtoFilter>>;
  panoramaImageApprovalStatusDescription?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusDescription_not?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_not_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusDescription_starts_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusId_not?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_not_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_not_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusId_not_starts_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusId_starts_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusName_not?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_not_contains?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_not_ends_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaImageApprovalStatusName_not_starts_with?: Maybe<Scalars['String']>;
  panoramaImageApprovalStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type PanoramaImageApprovalStatusDtoSort = {
  panoramaImageApprovalStatusDescription?: Maybe<SortOperationKind>;
  panoramaImageApprovalStatusName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type PanoramaRequestUpdateReasonDto = {
  __typename?: 'PanoramaRequestUpdateReasonDto';
  panoramaRequestUpdateReasonDescription?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PanoramaRequestUpdateReasonDtoFilter = {
  AND?: Maybe<Array<PanoramaRequestUpdateReasonDtoFilter>>;
  OR?: Maybe<Array<PanoramaRequestUpdateReasonDtoFilter>>;
  panoramaRequestUpdateReasonDescription?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_contains?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_ends_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaRequestUpdateReasonDescription_not?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_not_contains?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaRequestUpdateReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonDescription_starts_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_contains?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_ends_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaRequestUpdateReasonId_not?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_not_contains?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_not_ends_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaRequestUpdateReasonId_not_starts_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId_starts_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_contains?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_ends_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaRequestUpdateReasonName_not?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_not_contains?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_not_ends_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaRequestUpdateReasonName_not_starts_with?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type PanoramaRequestUpdateReasonDtoSort = {
  panoramaRequestUpdateReasonDescription?: Maybe<SortOperationKind>;
  panoramaRequestUpdateReasonName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type PanoramaSceneDto = {
  __typename?: 'PanoramaSceneDto';
  panoramaSceneDescription?: Maybe<Scalars['String']>;
  panoramaSceneId?: Maybe<Scalars['String']>;
  panoramaSceneName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PanoramaSceneDtoFilter = {
  AND?: Maybe<Array<PanoramaSceneDtoFilter>>;
  OR?: Maybe<Array<PanoramaSceneDtoFilter>>;
  panoramaSceneDescription?: Maybe<Scalars['String']>;
  panoramaSceneDescription_contains?: Maybe<Scalars['String']>;
  panoramaSceneDescription_ends_with?: Maybe<Scalars['String']>;
  panoramaSceneDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaSceneDescription_not?: Maybe<Scalars['String']>;
  panoramaSceneDescription_not_contains?: Maybe<Scalars['String']>;
  panoramaSceneDescription_not_ends_with?: Maybe<Scalars['String']>;
  panoramaSceneDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaSceneDescription_not_starts_with?: Maybe<Scalars['String']>;
  panoramaSceneDescription_starts_with?: Maybe<Scalars['String']>;
  panoramaSceneId?: Maybe<Scalars['String']>;
  panoramaSceneId_contains?: Maybe<Scalars['String']>;
  panoramaSceneId_ends_with?: Maybe<Scalars['String']>;
  panoramaSceneId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaSceneId_not?: Maybe<Scalars['String']>;
  panoramaSceneId_not_contains?: Maybe<Scalars['String']>;
  panoramaSceneId_not_ends_with?: Maybe<Scalars['String']>;
  panoramaSceneId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaSceneId_not_starts_with?: Maybe<Scalars['String']>;
  panoramaSceneId_starts_with?: Maybe<Scalars['String']>;
  panoramaSceneName?: Maybe<Scalars['String']>;
  panoramaSceneName_contains?: Maybe<Scalars['String']>;
  panoramaSceneName_ends_with?: Maybe<Scalars['String']>;
  panoramaSceneName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaSceneName_not?: Maybe<Scalars['String']>;
  panoramaSceneName_not_contains?: Maybe<Scalars['String']>;
  panoramaSceneName_not_ends_with?: Maybe<Scalars['String']>;
  panoramaSceneName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaSceneName_not_starts_with?: Maybe<Scalars['String']>;
  panoramaSceneName_starts_with?: Maybe<Scalars['String']>;
};

export type PanoramaSceneDtoSort = {
  panoramaSceneDescription?: Maybe<SortOperationKind>;
  panoramaSceneName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type PanoramaTutorialDto = {
  __typename?: 'PanoramaTutorialDto';
  panoramaTutorialContent?: Maybe<Scalars['String']>;
  panoramaTutorialId?: Maybe<Scalars['String']>;
  panoramaTutorialName?: Maybe<Scalars['String']>;
  panoramaTutorialTitle?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PanoramaTutorialDtoFilter = {
  AND?: Maybe<Array<PanoramaTutorialDtoFilter>>;
  OR?: Maybe<Array<PanoramaTutorialDtoFilter>>;
  panoramaTutorialContent?: Maybe<Scalars['String']>;
  panoramaTutorialContent_contains?: Maybe<Scalars['String']>;
  panoramaTutorialContent_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialContent_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialContent_not?: Maybe<Scalars['String']>;
  panoramaTutorialContent_not_contains?: Maybe<Scalars['String']>;
  panoramaTutorialContent_not_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialContent_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialContent_not_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialContent_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialId?: Maybe<Scalars['String']>;
  panoramaTutorialId_contains?: Maybe<Scalars['String']>;
  panoramaTutorialId_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialId_not?: Maybe<Scalars['String']>;
  panoramaTutorialId_not_contains?: Maybe<Scalars['String']>;
  panoramaTutorialId_not_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialId_not_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialId_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialName?: Maybe<Scalars['String']>;
  panoramaTutorialName_contains?: Maybe<Scalars['String']>;
  panoramaTutorialName_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialName_not?: Maybe<Scalars['String']>;
  panoramaTutorialName_not_contains?: Maybe<Scalars['String']>;
  panoramaTutorialName_not_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialName_not_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialName_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialTitle?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_contains?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialTitle_not?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_not_contains?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_not_ends_with?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  panoramaTutorialTitle_not_starts_with?: Maybe<Scalars['String']>;
  panoramaTutorialTitle_starts_with?: Maybe<Scalars['String']>;
};

export type PanoramaTutorialDtoSort = {
  panoramaTutorialName?: Maybe<SortOperationKind>;
  panoramaTutorialTitle?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type PayAgentSubscriptionTransactionResponse = {
  __typename?: 'PayAgentSubscriptionTransactionResponse';
  disablePayment?: Maybe<Scalars['Boolean']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ipnUrl?: Maybe<Scalars['String']>;
  linkPaymentUrl?: Maybe<Scalars['String']>;
  returnUrl?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type PayBookingTransactionInput = {
  consultantId?: Maybe<Scalars['String']>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerGender: Gender;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerNationalIdType: NationalIdType;
  customerPhone?: Maybe<Scalars['String']>;
  fundAccountId?: Maybe<Scalars['String']>;
  isBuyer: Scalars['Boolean'];
  locale?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  permanentAddress?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  saleAgentId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type PayBookingTransactionResponse = {
  __typename?: 'PayBookingTransactionResponse';
  autoAssignConsultantDto?: Maybe<AutoAssignConsultantDto>;
  disablePayment?: Maybe<Scalars['Boolean']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ipnUrl?: Maybe<Scalars['String']>;
  linkPaymentUrl?: Maybe<Scalars['String']>;
  returnUrl?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type PayDepositTransactionInput = {
  consultantId?: Maybe<Scalars['String']>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerGender: Gender;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerNationalIdType: NationalIdType;
  customerPhone?: Maybe<Scalars['String']>;
  fundAccountId?: Maybe<Scalars['String']>;
  isBuyer: Scalars['Boolean'];
  locale?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  permanentAddress?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  saleAgentId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type PayDepositTransactionResponse = {
  __typename?: 'PayDepositTransactionResponse';
  autoAssignConsultantDto?: Maybe<AutoAssignConsultantDto>;
  disablePayment?: Maybe<Scalars['Boolean']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ipnUrl?: Maybe<Scalars['String']>;
  linkPaymentUrl?: Maybe<Scalars['String']>;
  returnUrl?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type PayTransactionResponse = {
  __typename?: 'PayTransactionResponse';
  disablePayment?: Maybe<Scalars['Boolean']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ipnUrl?: Maybe<Scalars['String']>;
  linkPaymentUrl?: Maybe<Scalars['String']>;
  paymentCode?: Maybe<Scalars['String']>;
  returnUrl?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type PaymentConfigNotesDto = {
  __typename?: 'PaymentConfigNotesDto';
  paymentConfigNotesCode: Scalars['Int'];
  paymentConfigNotesDescription?: Maybe<Scalars['String']>;
  paymentConfigNotesId?: Maybe<Scalars['String']>;
  paymentConfigNotesName?: Maybe<Scalars['String']>;
};

export type PaymentConfigNotesDtoFilter = {
  AND?: Maybe<Array<PaymentConfigNotesDtoFilter>>;
  OR?: Maybe<Array<PaymentConfigNotesDtoFilter>>;
  paymentConfigNotesCode?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_gt?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_gte?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_in?: Maybe<Array<Scalars['Int']>>;
  paymentConfigNotesCode_lt?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_lte?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_not?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_not_gt?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_not_gte?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_not_in?: Maybe<Array<Scalars['Int']>>;
  paymentConfigNotesCode_not_lt?: Maybe<Scalars['Int']>;
  paymentConfigNotesCode_not_lte?: Maybe<Scalars['Int']>;
  paymentConfigNotesName?: Maybe<Scalars['String']>;
  paymentConfigNotesName_contains?: Maybe<Scalars['String']>;
  paymentConfigNotesName_ends_with?: Maybe<Scalars['String']>;
  paymentConfigNotesName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentConfigNotesName_not?: Maybe<Scalars['String']>;
  paymentConfigNotesName_not_contains?: Maybe<Scalars['String']>;
  paymentConfigNotesName_not_ends_with?: Maybe<Scalars['String']>;
  paymentConfigNotesName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentConfigNotesName_not_starts_with?: Maybe<Scalars['String']>;
  paymentConfigNotesName_starts_with?: Maybe<Scalars['String']>;
};

export type PaymentConfigNotesDtoSort = {
  paymentConfigNotesCode?: Maybe<SortOperationKind>;
  paymentConfigNotesName?: Maybe<SortOperationKind>;
};

export type PaymentInfoDto = {
  __typename?: 'PaymentInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<PaymentInfoDto>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentCode?: Maybe<Scalars['String']>;
  paymentUnit: PaymentUnit;
};

export enum PaymentMethod {
  Ewallet = 'EWALLET',
  Cash = 'CASH',
  Banktransfer = 'BANKTRANSFER'
}

export type PaymentMethodDto = {
  __typename?: 'PaymentMethodDto';
  paymentMethodDescription?: Maybe<Scalars['String']>;
  paymentMethodId?: Maybe<Scalars['String']>;
  paymentMethodName?: Maybe<Scalars['String']>;
};

export type PaymentMethodDtoFilter = {
  AND?: Maybe<Array<PaymentMethodDtoFilter>>;
  OR?: Maybe<Array<PaymentMethodDtoFilter>>;
  paymentMethodName?: Maybe<Scalars['String']>;
  paymentMethodName_contains?: Maybe<Scalars['String']>;
  paymentMethodName_ends_with?: Maybe<Scalars['String']>;
  paymentMethodName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentMethodName_not?: Maybe<Scalars['String']>;
  paymentMethodName_not_contains?: Maybe<Scalars['String']>;
  paymentMethodName_not_ends_with?: Maybe<Scalars['String']>;
  paymentMethodName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentMethodName_not_starts_with?: Maybe<Scalars['String']>;
  paymentMethodName_starts_with?: Maybe<Scalars['String']>;
};

export type PaymentMethodDtoSort = {
  paymentMethodName?: Maybe<SortOperationKind>;
};

export type PaymentProgressDto = {
  __typename?: 'PaymentProgressDto';
  amount?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<PaymentProgressDto>;
  paymentProgressId?: Maybe<Scalars['String']>;
  paymentTermFrom?: Maybe<Scalars['Long']>;
  paymentTerms?: Maybe<Scalars['String']>;
  paymentTermTo?: Maybe<Scalars['Long']>;
};

export type PaymentStatusDto = {
  __typename?: 'PaymentStatusDto';
  paymentStatusCode: Scalars['Int'];
  paymentStatusDescription?: Maybe<Scalars['String']>;
  paymentStatusId?: Maybe<Scalars['String']>;
  paymentStatusName?: Maybe<Scalars['String']>;
};

export type PaymentStatusDtoFilter = {
  AND?: Maybe<Array<PaymentStatusDtoFilter>>;
  OR?: Maybe<Array<PaymentStatusDtoFilter>>;
  paymentStatusName?: Maybe<Scalars['String']>;
  paymentStatusName_contains?: Maybe<Scalars['String']>;
  paymentStatusName_ends_with?: Maybe<Scalars['String']>;
  paymentStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentStatusName_not?: Maybe<Scalars['String']>;
  paymentStatusName_not_contains?: Maybe<Scalars['String']>;
  paymentStatusName_not_ends_with?: Maybe<Scalars['String']>;
  paymentStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentStatusName_not_starts_with?: Maybe<Scalars['String']>;
  paymentStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type PaymentStatusDtoSort = {
  paymentStatusName?: Maybe<SortOperationKind>;
};

export type PaymentTransactionDto = {
  __typename?: 'PaymentTransactionDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<PaymentTransactionDto>;
  createdDatetime?: Maybe<Scalars['Long']>;
  expectedAmount?: Maybe<Scalars['Float']>;
  fundAccountId?: Maybe<Scalars['String']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentNotes?: Maybe<Scalars['String']>;
  paymentTransferNumber?: Maybe<Scalars['String']>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionPaymentStatus: TransactionPaymentStatus;
  transactionPaymentStatusId?: Maybe<Scalars['String']>;
  transactionServiceType: TransactionServiceType;
  transactionType: TransactionType;
  updatedDatimetime?: Maybe<Scalars['Long']>;
  userId?: Maybe<Scalars['String']>;
};

export type PaymentTransactionInfoDto = {
  __typename?: 'PaymentTransactionInfoDto';
  amount?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<PaymentTransactionInfoDto>;
  customerId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionNo?: Maybe<Scalars['String']>;
};

export enum PaymentUnit {
  Vnpay = 'VNPAY',
  Fast = 'FAST',
  Bidv = 'BIDV'
}

export type PaymentUnitDto = {
  __typename?: 'PaymentUnitDto';
  paymentMethod: PaymentMethod;
  paymentUnitCode: Scalars['Int'];
  paymentUnitDescription?: Maybe<Scalars['String']>;
  paymentUnitId?: Maybe<Scalars['String']>;
  paymentUnitName?: Maybe<Scalars['String']>;
};

export type PaymentUnitDtoFilter = {
  AND?: Maybe<Array<PaymentUnitDtoFilter>>;
  OR?: Maybe<Array<PaymentUnitDtoFilter>>;
  paymentMethod?: Maybe<PaymentMethod>;
  paymentMethod_gt?: Maybe<PaymentMethod>;
  paymentMethod_gte?: Maybe<PaymentMethod>;
  paymentMethod_in?: Maybe<Array<PaymentMethod>>;
  paymentMethod_lt?: Maybe<PaymentMethod>;
  paymentMethod_lte?: Maybe<PaymentMethod>;
  paymentMethod_not?: Maybe<PaymentMethod>;
  paymentMethod_not_gt?: Maybe<PaymentMethod>;
  paymentMethod_not_gte?: Maybe<PaymentMethod>;
  paymentMethod_not_in?: Maybe<Array<PaymentMethod>>;
  paymentMethod_not_lt?: Maybe<PaymentMethod>;
  paymentMethod_not_lte?: Maybe<PaymentMethod>;
  paymentUnitCode?: Maybe<Scalars['Int']>;
  paymentUnitCode_gt?: Maybe<Scalars['Int']>;
  paymentUnitCode_gte?: Maybe<Scalars['Int']>;
  paymentUnitCode_in?: Maybe<Array<Scalars['Int']>>;
  paymentUnitCode_lt?: Maybe<Scalars['Int']>;
  paymentUnitCode_lte?: Maybe<Scalars['Int']>;
  paymentUnitCode_not?: Maybe<Scalars['Int']>;
  paymentUnitCode_not_gt?: Maybe<Scalars['Int']>;
  paymentUnitCode_not_gte?: Maybe<Scalars['Int']>;
  paymentUnitCode_not_in?: Maybe<Array<Scalars['Int']>>;
  paymentUnitCode_not_lt?: Maybe<Scalars['Int']>;
  paymentUnitCode_not_lte?: Maybe<Scalars['Int']>;
  paymentUnitName?: Maybe<Scalars['String']>;
  paymentUnitName_contains?: Maybe<Scalars['String']>;
  paymentUnitName_ends_with?: Maybe<Scalars['String']>;
  paymentUnitName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentUnitName_not?: Maybe<Scalars['String']>;
  paymentUnitName_not_contains?: Maybe<Scalars['String']>;
  paymentUnitName_not_ends_with?: Maybe<Scalars['String']>;
  paymentUnitName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentUnitName_not_starts_with?: Maybe<Scalars['String']>;
  paymentUnitName_starts_with?: Maybe<Scalars['String']>;
};

export type PaymentUnitDtoSort = {
  paymentMethod?: Maybe<SortOperationKind>;
  paymentUnitCode?: Maybe<SortOperationKind>;
  paymentUnitName?: Maybe<SortOperationKind>;
};

export type PendingReasonDto = {
  __typename?: 'PendingReasonDto';
  pendingReasonDescription?: Maybe<Scalars['String']>;
  pendingReasonId?: Maybe<Scalars['String']>;
  pendingReasonName?: Maybe<Scalars['String']>;
};

export type PendingReasonDtoFilter = {
  AND?: Maybe<Array<PendingReasonDtoFilter>>;
  OR?: Maybe<Array<PendingReasonDtoFilter>>;
  pendingReasonName?: Maybe<Scalars['String']>;
  pendingReasonName_contains?: Maybe<Scalars['String']>;
  pendingReasonName_ends_with?: Maybe<Scalars['String']>;
  pendingReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pendingReasonName_not?: Maybe<Scalars['String']>;
  pendingReasonName_not_contains?: Maybe<Scalars['String']>;
  pendingReasonName_not_ends_with?: Maybe<Scalars['String']>;
  pendingReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  pendingReasonName_not_starts_with?: Maybe<Scalars['String']>;
  pendingReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type PendingReasonDtoSort = {
  pendingReasonName?: Maybe<SortOperationKind>;
};

export type PermissionDto = {
  __typename?: 'PermissionDto';
  calculateSize: Scalars['Int'];
  canAccess: Scalars['Boolean'];
  canCreate: Scalars['Boolean'];
  canDeleteAll: Scalars['Boolean'];
  canDeleteOwner: Scalars['Boolean'];
  canExport: Scalars['Boolean'];
  canImport: Scalars['Boolean'];
  canReadAll: Scalars['Boolean'];
  canReadOwner: Scalars['Boolean'];
  canUpdateAll: Scalars['Boolean'];
  canUpdateOwner: Scalars['Boolean'];
  clone?: Maybe<PermissionDto>;
  featureName?: Maybe<Scalars['String']>;
};

export type PlaceDto = {
  __typename?: 'PlaceDto';
  calculateSize: Scalars['Int'];
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<PlaceDto>;
  districts?: Maybe<Array<Maybe<C2c_Contact_Trading_DistrictDto>>>;
};

export type PolicyDto = {
  __typename?: 'PolicyDto';
  attachment?: Maybe<Scalars['String']>;
  attachmentFileSize: Scalars['Long'];
  endDate: Scalars['Long'];
  isDeleted: Scalars['Boolean'];
  policyDescription?: Maybe<Scalars['String']>;
  policyId?: Maybe<Scalars['String']>;
  policyName?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  policyTypeName?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  startDate: Scalars['Long'];
};

export type PolicyDtoFilter = {
  AND?: Maybe<Array<PolicyDtoFilter>>;
  attachment?: Maybe<Scalars['String']>;
  attachment_contains?: Maybe<Scalars['String']>;
  attachment_ends_with?: Maybe<Scalars['String']>;
  attachment_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  attachment_not?: Maybe<Scalars['String']>;
  attachment_not_contains?: Maybe<Scalars['String']>;
  attachment_not_ends_with?: Maybe<Scalars['String']>;
  attachment_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  attachment_not_starts_with?: Maybe<Scalars['String']>;
  attachment_starts_with?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Long']>;
  endDate_gt?: Maybe<Scalars['Long']>;
  endDate_gte?: Maybe<Scalars['Long']>;
  endDate_in?: Maybe<Array<Scalars['Long']>>;
  endDate_lt?: Maybe<Scalars['Long']>;
  endDate_lte?: Maybe<Scalars['Long']>;
  endDate_not?: Maybe<Scalars['Long']>;
  endDate_not_gt?: Maybe<Scalars['Long']>;
  endDate_not_gte?: Maybe<Scalars['Long']>;
  endDate_not_in?: Maybe<Array<Scalars['Long']>>;
  endDate_not_lt?: Maybe<Scalars['Long']>;
  endDate_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<PolicyDtoFilter>>;
  policyName?: Maybe<Scalars['String']>;
  policyName_contains?: Maybe<Scalars['String']>;
  policyName_ends_with?: Maybe<Scalars['String']>;
  policyName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  policyName_not?: Maybe<Scalars['String']>;
  policyName_not_contains?: Maybe<Scalars['String']>;
  policyName_not_ends_with?: Maybe<Scalars['String']>;
  policyName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  policyName_not_starts_with?: Maybe<Scalars['String']>;
  policyName_starts_with?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  policyTypeId_contains?: Maybe<Scalars['String']>;
  policyTypeId_ends_with?: Maybe<Scalars['String']>;
  policyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  policyTypeId_not?: Maybe<Scalars['String']>;
  policyTypeId_not_contains?: Maybe<Scalars['String']>;
  policyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  policyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  policyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  policyTypeId_starts_with?: Maybe<Scalars['String']>;
  startDate?: Maybe<Scalars['Long']>;
  startDate_gt?: Maybe<Scalars['Long']>;
  startDate_gte?: Maybe<Scalars['Long']>;
  startDate_in?: Maybe<Array<Scalars['Long']>>;
  startDate_lt?: Maybe<Scalars['Long']>;
  startDate_lte?: Maybe<Scalars['Long']>;
  startDate_not?: Maybe<Scalars['Long']>;
  startDate_not_gt?: Maybe<Scalars['Long']>;
  startDate_not_gte?: Maybe<Scalars['Long']>;
  startDate_not_in?: Maybe<Array<Scalars['Long']>>;
  startDate_not_lt?: Maybe<Scalars['Long']>;
  startDate_not_lte?: Maybe<Scalars['Long']>;
};

export type PolicyDtoSort = {
  attachment?: Maybe<SortOperationKind>;
  endDate?: Maybe<SortOperationKind>;
  policyName?: Maybe<SortOperationKind>;
  startDate?: Maybe<SortOperationKind>;
};

export type PolicyInfoDto = {
  __typename?: 'PolicyInfoDto';
  attachment?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<PolicyInfoDto>;
  endDate: Scalars['Long'];
  policyDescription?: Maybe<Scalars['String']>;
  policyId?: Maybe<Scalars['String']>;
  policyName?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  startDate: Scalars['Long'];
};

export type PolicyMutationResponse = {
  __typename?: 'PolicyMutationResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<PolicyMutationResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  policyDto?: Maybe<PolicyDto>;
};

export type PolicyTypeDto = {
  __typename?: 'PolicyTypeDto';
  policyTypeDescription?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  policyTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PolicyTypeDtoFilter = {
  AND?: Maybe<Array<PolicyTypeDtoFilter>>;
  OR?: Maybe<Array<PolicyTypeDtoFilter>>;
  policyTypeName?: Maybe<Scalars['String']>;
  policyTypeName_contains?: Maybe<Scalars['String']>;
  policyTypeName_ends_with?: Maybe<Scalars['String']>;
  policyTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  policyTypeName_not?: Maybe<Scalars['String']>;
  policyTypeName_not_contains?: Maybe<Scalars['String']>;
  policyTypeName_not_ends_with?: Maybe<Scalars['String']>;
  policyTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  policyTypeName_not_starts_with?: Maybe<Scalars['String']>;
  policyTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type PolicyTypeDtoSort = {
  policyTypeName?: Maybe<SortOperationKind>;
};

export type PolicyTypeInfoDto = {
  __typename?: 'PolicyTypeInfoDto';
  policyTypeDescription?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  policyTypeName?: Maybe<Scalars['String']>;
};

export enum PostAppearanceType {
  Postwaiting = 'POSTWAITING',
  Postapproval = 'POSTAPPROVAL',
  Postrejected = 'POSTREJECTED',
  Postreported = 'POSTREPORTED',
  Postsoldorclose = 'POSTSOLDORCLOSE'
}

export enum PostContractStatus {
  Unsent = 'UNSENT',
  Waittosign = 'WAITTOSIGN',
  Waitforpay = 'WAITFORPAY',
  Haspaid = 'HASPAID',
  Refuse = 'REFUSE'
}

export enum PostServiceType {
  Normal = 'NORMAL',
  Guaranteed = 'GUARANTEED'
}

export type PostTypeDto = {
  __typename?: 'PostTypeDto';
  isActive: Scalars['Boolean'];
  postTypeId?: Maybe<Scalars['String']>;
  postTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PostTypeDtoFilter = {
  AND?: Maybe<Array<PostTypeDtoFilter>>;
  OR?: Maybe<Array<PostTypeDtoFilter>>;
  postTypeName?: Maybe<Scalars['String']>;
  postTypeName_contains?: Maybe<Scalars['String']>;
  postTypeName_ends_with?: Maybe<Scalars['String']>;
  postTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTypeName_not?: Maybe<Scalars['String']>;
  postTypeName_not_contains?: Maybe<Scalars['String']>;
  postTypeName_not_ends_with?: Maybe<Scalars['String']>;
  postTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTypeName_not_starts_with?: Maybe<Scalars['String']>;
  postTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type PostTypeDtoSort = {
  postTypeName?: Maybe<SortOperationKind>;
};

export type PostTypeInfoDto = {
  __typename?: 'PostTypeInfoDto';
  isActive: Scalars['Boolean'];
  postTypeId?: Maybe<Scalars['String']>;
  postTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PotentialAgentUserDto = {
  __typename?: 'PotentialAgentUserDto';
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type PotentialAgentUserDtoFilter = {
  AND?: Maybe<Array<PotentialAgentUserDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<PotentialAgentUserDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userName_contains?: Maybe<Scalars['String']>;
  userName_ends_with?: Maybe<Scalars['String']>;
  userName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not?: Maybe<Scalars['String']>;
  userName_not_contains?: Maybe<Scalars['String']>;
  userName_not_ends_with?: Maybe<Scalars['String']>;
  userName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not_starts_with?: Maybe<Scalars['String']>;
  userName_starts_with?: Maybe<Scalars['String']>;
};

export type PriceRangeDto = {
  __typename?: 'PriceRangeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<PriceRangeDto>;
  priceFrom: Scalars['Float'];
  priceTo: Scalars['Float'];
};

export type PrintB2CContractInput = {
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  customerDto?: Maybe<CustomerDtoInput>;
};

export type PrintB2CContractResponse = {
  __typename?: 'PrintB2CContractResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ProcessingContactTradingB2CResponse = {
  __typename?: 'ProcessingContactTradingB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ProfileCurrentUserDto = {
  __typename?: 'ProfileCurrentUserDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender?: Maybe<Scalars['Int']>;
  isAgentLeader?: Maybe<Scalars['Boolean']>;
  isCompletedProfile?: Maybe<Scalars['Boolean']>;
  isStaffLeader?: Maybe<Scalars['Boolean']>;
  isVerifyProfilePhoto: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  lastReviewedDate?: Maybe<Scalars['Long']>;
  maskedEmail?: Maybe<Scalars['String']>;
  maskedPhoneNumber?: Maybe<Scalars['String']>;
  nextReviewedDate?: Maybe<Scalars['Long']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  referralCode?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  topenerDetailPath?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type ProfilePhotoApprovalStatusDto = {
  __typename?: 'ProfilePhotoApprovalStatusDto';
  approvalStatusDescription?: Maybe<Scalars['String']>;
  approvalStatusName?: Maybe<Scalars['String']>;
  profilePhotoApprovalStatusId?: Maybe<Scalars['String']>;
};

export type ProfilePhotoApprovalStatusDtoFilter = {
  AND?: Maybe<Array<ProfilePhotoApprovalStatusDtoFilter>>;
  approvalStatusName?: Maybe<Scalars['String']>;
  approvalStatusName_contains?: Maybe<Scalars['String']>;
  approvalStatusName_ends_with?: Maybe<Scalars['String']>;
  approvalStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvalStatusName_not?: Maybe<Scalars['String']>;
  approvalStatusName_not_contains?: Maybe<Scalars['String']>;
  approvalStatusName_not_ends_with?: Maybe<Scalars['String']>;
  approvalStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvalStatusName_not_starts_with?: Maybe<Scalars['String']>;
  approvalStatusName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<ProfilePhotoApprovalStatusDtoFilter>>;
};

export type ProfilePhotoApprovalStatusDtoSort = {
  approvalStatusDescription?: Maybe<SortOperationKind>;
  approvalStatusName?: Maybe<SortOperationKind>;
};

export type ProfilePhotoRejectReasonDto = {
  __typename?: 'ProfilePhotoRejectReasonDto';
  isActive: Scalars['Boolean'];
  profilePhotoRejectReasonId?: Maybe<Scalars['String']>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
};

export type ProfilePhotoRejectReasonDtoFilter = {
  AND?: Maybe<Array<ProfilePhotoRejectReasonDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<ProfilePhotoRejectReasonDtoFilter>>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonDescription_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_contains?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonDescription_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName?: Maybe<Scalars['String']>;
  rejectReasonName_contains?: Maybe<Scalars['String']>;
  rejectReasonName_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not?: Maybe<Scalars['String']>;
  rejectReasonName_not_contains?: Maybe<Scalars['String']>;
  rejectReasonName_not_ends_with?: Maybe<Scalars['String']>;
  rejectReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectReasonName_not_starts_with?: Maybe<Scalars['String']>;
  rejectReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type ProfilePhotoRejectReasonDtoSort = {
  rejectReasonDescription?: Maybe<SortOperationKind>;
  rejectReasonName?: Maybe<SortOperationKind>;
};

export type ProjectAddressInfo = {
  __typename?: 'ProjectAddressInfo';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<ProjectAddressInfo>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  directional?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  projectAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type ProjectAddressInfoDto = {
  __typename?: 'ProjectAddressInfoDto';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<ProjectAddressInfoDto>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  directional?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  projectAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type ProjectAddressInfoDtoInput = {
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  directional?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  projectAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type ProjectAddressWithPropertyPostInfo = {
  __typename?: 'ProjectAddressWithPropertyPostInfo';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<ProjectAddressWithPropertyPostInfo>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  direction: Direction;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  projectAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type ProjectBoDto = {
  __typename?: 'ProjectBODto';
  createdDatetime: Scalars['Long'];
  projectCode?: Maybe<Scalars['String']>;
  projectId: Scalars['Uuid'];
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['Uuid']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['Uuid']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['Uuid']>;
  sortOrder: Scalars['Int'];
  totalOfSaleSeasons: Scalars['Int'];
};

export type ProjectBoDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  projectName?: Maybe<SortOperationKind>;
  projectPostStatusDescription?: Maybe<SortOperationKind>;
  projectStatusDescription?: Maybe<SortOperationKind>;
  projectTypeDescription?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
  totalOfSaleSeasons?: Maybe<SortOperationKind>;
};

export type ProjectByPropertyPostDto = {
  __typename?: 'ProjectByPropertyPostDto';
  bankInfo?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<ProjectByPropertyPostDto>;
  commissionRates?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFeaturesProject: Scalars['Boolean'];
  minPrice?: Maybe<Scalars['Float']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfo>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  totalOfSaleSeasons?: Maybe<Scalars['Int']>;
};

export type ProjectByPropertyPostInfo = {
  __typename?: 'ProjectByPropertyPostInfo';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ProjectByPropertyPostInfo>;
  detailPath?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectImage?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
};

export type ProjectDelete = {
  projectId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type ProjectDto = {
  __typename?: 'ProjectDto';
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  contractSigningPeriod?: Maybe<Scalars['Int']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  deletedBy?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  facilitiesDescription?: Maybe<Scalars['String']>;
  facilitiesMediaInfo?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  fastProjectName?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  followedDatetime?: Maybe<Scalars['Long']>;
  groundPlanDescription?: Maybe<Scalars['String']>;
  groundPlanMediaInfo?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorDetailPath?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isDeleted: Scalars['Boolean'];
  isFastSync?: Maybe<Scalars['Boolean']>;
  isFeaturesProject: Scalars['Boolean'];
  isFollowed?: Maybe<Scalars['Boolean']>;
  lastModified?: Maybe<Scalars['Long']>;
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  locationDescription?: Maybe<Scalars['String']>;
  locationMediaInfo?: Maybe<Scalars['String']>;
  lockBookingDuration?: Maybe<Scalars['Long']>;
  maxBookingDefault?: Maybe<Scalars['Long']>;
  mediaLibrary?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  minSepTimeInMinute?: Maybe<Scalars['Int']>;
  modifiedBy?: Maybe<Scalars['String']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectItems?: Maybe<Array<Maybe<ProjectItemDto>>>;
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleProgramDescription?: Maybe<Scalars['String']>;
  saleProgramMediaInfo?: Maybe<Scalars['String']>;
  sizingDescription?: Maybe<Scalars['String']>;
  sizingMediaInfo?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalOfSaleSeasons?: Maybe<Scalars['Int']>;
  totalShare?: Maybe<Scalars['Long']>;
};

export type ProjectDtoFilter = {
  AND?: Maybe<Array<ProjectDtoFilter>>;
  OR?: Maybe<Array<ProjectDtoFilter>>;
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusDescription_contains?: Maybe<Scalars['String']>;
  projectPostStatusDescription_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusDescription_not?: Maybe<Scalars['String']>;
  projectPostStatusDescription_not_contains?: Maybe<Scalars['String']>;
  projectPostStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusDescription_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusId_contains?: Maybe<Scalars['String']>;
  projectPostStatusId_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusId_not?: Maybe<Scalars['String']>;
  projectPostStatusId_not_contains?: Maybe<Scalars['String']>;
  projectPostStatusId_not_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusId_not_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusId_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectPostStatusName_contains?: Maybe<Scalars['String']>;
  projectPostStatusName_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusName_not?: Maybe<Scalars['String']>;
  projectPostStatusName_not_contains?: Maybe<Scalars['String']>;
  projectPostStatusName_not_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusName_not_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusName_starts_with?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusDescription_contains?: Maybe<Scalars['String']>;
  projectStatusDescription_ends_with?: Maybe<Scalars['String']>;
  projectStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusDescription_not?: Maybe<Scalars['String']>;
  projectStatusDescription_not_contains?: Maybe<Scalars['String']>;
  projectStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  projectStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  projectStatusDescription_starts_with?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusId_contains?: Maybe<Scalars['String']>;
  projectStatusId_ends_with?: Maybe<Scalars['String']>;
  projectStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusId_not?: Maybe<Scalars['String']>;
  projectStatusId_not_contains?: Maybe<Scalars['String']>;
  projectStatusId_not_ends_with?: Maybe<Scalars['String']>;
  projectStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusId_not_starts_with?: Maybe<Scalars['String']>;
  projectStatusId_starts_with?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectStatusName_contains?: Maybe<Scalars['String']>;
  projectStatusName_ends_with?: Maybe<Scalars['String']>;
  projectStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusName_not?: Maybe<Scalars['String']>;
  projectStatusName_not_contains?: Maybe<Scalars['String']>;
  projectStatusName_not_ends_with?: Maybe<Scalars['String']>;
  projectStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusName_not_starts_with?: Maybe<Scalars['String']>;
  projectStatusName_starts_with?: Maybe<Scalars['String']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  projectTypeDescription_contains?: Maybe<Scalars['String']>;
  projectTypeDescription_ends_with?: Maybe<Scalars['String']>;
  projectTypeDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectTypeDescription_not?: Maybe<Scalars['String']>;
  projectTypeDescription_not_contains?: Maybe<Scalars['String']>;
  projectTypeDescription_not_ends_with?: Maybe<Scalars['String']>;
  projectTypeDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectTypeDescription_not_starts_with?: Maybe<Scalars['String']>;
  projectTypeDescription_starts_with?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  projectTypeName_contains?: Maybe<Scalars['String']>;
  projectTypeName_ends_with?: Maybe<Scalars['String']>;
  projectTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectTypeName_not?: Maybe<Scalars['String']>;
  projectTypeName_not_contains?: Maybe<Scalars['String']>;
  projectTypeName_not_ends_with?: Maybe<Scalars['String']>;
  projectTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectTypeName_not_starts_with?: Maybe<Scalars['String']>;
  projectTypeName_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  sortOrder_gt?: Maybe<Scalars['Int']>;
  sortOrder_gte?: Maybe<Scalars['Int']>;
  sortOrder_in?: Maybe<Array<Scalars['Int']>>;
  sortOrder_lt?: Maybe<Scalars['Int']>;
  sortOrder_lte?: Maybe<Scalars['Int']>;
  sortOrder_not?: Maybe<Scalars['Int']>;
  sortOrder_not_gt?: Maybe<Scalars['Int']>;
  sortOrder_not_gte?: Maybe<Scalars['Int']>;
  sortOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  sortOrder_not_lt?: Maybe<Scalars['Int']>;
  sortOrder_not_lte?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_gt?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_gte?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalOfSaleSeasons_lt?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_lte?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_not?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_not_gt?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_not_gte?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalOfSaleSeasons_not_lt?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons_not_lte?: Maybe<Scalars['Int']>;
};

export type ProjectDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  projectName?: Maybe<SortOperationKind>;
  projectPostStatusDescription?: Maybe<SortOperationKind>;
  projectPostStatusName?: Maybe<SortOperationKind>;
  projectStatusDescription?: Maybe<SortOperationKind>;
  projectStatusName?: Maybe<SortOperationKind>;
  projectTypeDescription?: Maybe<SortOperationKind>;
  projectTypeName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
  totalOfSaleSeasons?: Maybe<SortOperationKind>;
};

export type ProjectForPublicDto = {
  __typename?: 'ProjectForPublicDto';
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  unitOfMeasureProject?: Maybe<UnitOfMeasureProject>;
};

/** A connection to a list of items. */
export type ProjectForPublicDtoConnection = {
  __typename?: 'ProjectForPublicDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<ProjectForPublicDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<ProjectForPublicDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ProjectForPublicDtoEdge = {
  __typename?: 'ProjectForPublicDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectForPublicDto>;
};

export type ProjectForPublicDtoFilter = {
  AND?: Maybe<Array<ProjectForPublicDtoFilter>>;
  OR?: Maybe<Array<ProjectForPublicDtoFilter>>;
  projectId?: Maybe<Scalars['String']>;
  projectId_contains?: Maybe<Scalars['String']>;
  projectId_ends_with?: Maybe<Scalars['String']>;
  projectId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not?: Maybe<Scalars['String']>;
  projectId_not_contains?: Maybe<Scalars['String']>;
  projectId_not_ends_with?: Maybe<Scalars['String']>;
  projectId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not_starts_with?: Maybe<Scalars['String']>;
  projectId_starts_with?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectName_contains?: Maybe<Scalars['String']>;
  projectName_ends_with?: Maybe<Scalars['String']>;
  projectName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectName_not?: Maybe<Scalars['String']>;
  projectName_not_contains?: Maybe<Scalars['String']>;
  projectName_not_ends_with?: Maybe<Scalars['String']>;
  projectName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectName_not_starts_with?: Maybe<Scalars['String']>;
  projectName_starts_with?: Maybe<Scalars['String']>;
};

export type ProjectForPublicDtoSort = {
  projectName?: Maybe<SortOperationKind>;
};

export type ProjectInfo = {
  __typename?: 'ProjectInfo';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ProjectInfo>;
  detailPath?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfo>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
};

export type ProjectInfoDto = {
  __typename?: 'ProjectInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ProjectInfoDto>;
  detailPath?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
};

export type ProjectInput = {
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['String']>;
  facilitiesDescription?: Maybe<Scalars['String']>;
  facilitiesMediaInfo?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  groundPlanDescription?: Maybe<Scalars['String']>;
  groundPlanMediaInfo?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFeaturesProject: Scalars['Boolean'];
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  locationDescription?: Maybe<Scalars['String']>;
  locationMediaInfo?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDtoInput>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectItems?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleProgramDescription?: Maybe<Scalars['String']>;
  saleProgramMediaInfo?: Maybe<Scalars['String']>;
  sizingDescription?: Maybe<Scalars['String']>;
  sizingMediaInfo?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
};

export type ProjectItemDto = {
  __typename?: 'ProjectItemDto';
  commission?: Maybe<Scalars['String']>;
  cost?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type ProjectMutationResponse = {
  __typename?: 'ProjectMutationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectDto?: Maybe<ProjectDto>;
};

export type ProjectPostStatusDto = {
  __typename?: 'ProjectPostStatusDto';
  isActive: Scalars['Boolean'];
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
};

export type ProjectPostStatusDtoFilter = {
  AND?: Maybe<Array<ProjectPostStatusDtoFilter>>;
  OR?: Maybe<Array<ProjectPostStatusDtoFilter>>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectPostStatusName_contains?: Maybe<Scalars['String']>;
  projectPostStatusName_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusName_not?: Maybe<Scalars['String']>;
  projectPostStatusName_not_contains?: Maybe<Scalars['String']>;
  projectPostStatusName_not_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusName_not_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type ProjectPostStatusDtoSort = {
  projectPostStatusName?: Maybe<SortOperationKind>;
};

export type ProjectPostStatusInfoDto = {
  __typename?: 'ProjectPostStatusInfoDto';
  isActive: Scalars['Boolean'];
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
};

export type ProjectStatusDto = {
  __typename?: 'ProjectStatusDto';
  isActive: Scalars['Boolean'];
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
};

export type ProjectStatusDtoFilter = {
  AND?: Maybe<Array<ProjectStatusDtoFilter>>;
  OR?: Maybe<Array<ProjectStatusDtoFilter>>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectStatusName_contains?: Maybe<Scalars['String']>;
  projectStatusName_ends_with?: Maybe<Scalars['String']>;
  projectStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusName_not?: Maybe<Scalars['String']>;
  projectStatusName_not_contains?: Maybe<Scalars['String']>;
  projectStatusName_not_ends_with?: Maybe<Scalars['String']>;
  projectStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusName_not_starts_with?: Maybe<Scalars['String']>;
  projectStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type ProjectStatusDtoSort = {
  projectStatusName?: Maybe<SortOperationKind>;
};

export type ProjectStatusInfoDto = {
  __typename?: 'ProjectStatusInfoDto';
  isActive: Scalars['Boolean'];
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
};

export type ProjectSuggestionDto = {
  __typename?: 'ProjectSuggestionDto';
  commissionRates?: Maybe<Scalars['String']>;
  detailPath?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  minPrice?: Maybe<Scalars['Float']>;
  overallDescription?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectAddressCityId?: Maybe<Scalars['Int']>;
  projectAddressDistrictId?: Maybe<Scalars['Int']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectSuggestionCreatedDatetime?: Maybe<Scalars['Long']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
};

/** A connection to a list of items. */
export type ProjectSuggestionDtoConnection = {
  __typename?: 'ProjectSuggestionDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<ProjectSuggestionDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<ProjectSuggestionDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ProjectSuggestionDtoEdge = {
  __typename?: 'ProjectSuggestionDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectSuggestionDto>;
};

export type ProjectSuggestionDtoFilter = {
  AND?: Maybe<Array<ProjectSuggestionDtoFilter>>;
  OR?: Maybe<Array<ProjectSuggestionDtoFilter>>;
  projectAddressCityId?: Maybe<Scalars['Int']>;
  projectAddressCityId_gt?: Maybe<Scalars['Int']>;
  projectAddressCityId_gte?: Maybe<Scalars['Int']>;
  projectAddressCityId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  projectAddressCityId_lt?: Maybe<Scalars['Int']>;
  projectAddressCityId_lte?: Maybe<Scalars['Int']>;
  projectAddressCityId_not?: Maybe<Scalars['Int']>;
  projectAddressCityId_not_gt?: Maybe<Scalars['Int']>;
  projectAddressCityId_not_gte?: Maybe<Scalars['Int']>;
  projectAddressCityId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  projectAddressCityId_not_lt?: Maybe<Scalars['Int']>;
  projectAddressCityId_not_lte?: Maybe<Scalars['Int']>;
  projectAddressDistrictId?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_gt?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_gte?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  projectAddressDistrictId_lt?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_lte?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_not?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_not_gt?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_not_gte?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  projectAddressDistrictId_not_lt?: Maybe<Scalars['Int']>;
  projectAddressDistrictId_not_lte?: Maybe<Scalars['Int']>;
};

export type ProjectSuggestionDtoSort = {
  projectSuggestionCreatedDatetime?: Maybe<SortOperationKind>;
};

export type ProjectUpdate = {
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  facilitiesDescription?: Maybe<Scalars['String']>;
  facilitiesMediaInfo?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  groundPlanDescription?: Maybe<Scalars['String']>;
  groundPlanMediaInfo?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFeaturesProject: Scalars['Boolean'];
  lastModified?: Maybe<Scalars['String']>;
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  locationDescription?: Maybe<Scalars['String']>;
  locationMediaInfo?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  modifiedBy?: Maybe<Scalars['String']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDtoInput>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectItems?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleProgramDescription?: Maybe<Scalars['String']>;
  saleProgramMediaInfo?: Maybe<Scalars['String']>;
  sizingDescription?: Maybe<Scalars['String']>;
  sizingMediaInfo?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
};

export type ProjectWithPropertyPostDto = {
  __typename?: 'ProjectWithPropertyPostDto';
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  deletedBy?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  facilitiesDescription?: Maybe<Scalars['String']>;
  facilitiesMediaInfo?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  followedDatetime?: Maybe<Scalars['Long']>;
  groundPlanDescription?: Maybe<Scalars['String']>;
  groundPlanMediaInfo?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isDeleted: Scalars['Boolean'];
  isFeaturesProject: Scalars['Boolean'];
  isFollowed?: Maybe<Scalars['Boolean']>;
  lastModified?: Maybe<Scalars['Long']>;
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  locationDescription?: Maybe<Scalars['String']>;
  locationMediaInfo?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  modifiedBy?: Maybe<Scalars['String']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressWithPropertyPostInfo>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusDescription?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectTypeDescription?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleProgramDescription?: Maybe<Scalars['String']>;
  saleProgramMediaInfo?: Maybe<Scalars['String']>;
  sizingDescription?: Maybe<Scalars['String']>;
  sizingMediaInfo?: Maybe<Scalars['String']>;
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  unitOfMeasureProject?: Maybe<UnitOfMeasureProject>;
};

/** A connection to a list of items. */
export type ProjectWithPropertyPostDtoConnection = {
  __typename?: 'ProjectWithPropertyPostDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<ProjectWithPropertyPostDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<ProjectWithPropertyPostDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ProjectWithPropertyPostDtoEdge = {
  __typename?: 'ProjectWithPropertyPostDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ProjectWithPropertyPostDto>;
};

export type ProjectWithPropertyPostDtoFilter = {
  AND?: Maybe<Array<ProjectWithPropertyPostDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<ProjectWithPropertyPostDtoFilter>>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectAddressId_contains?: Maybe<Scalars['String']>;
  projectAddressId_ends_with?: Maybe<Scalars['String']>;
  projectAddressId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectAddressId_not?: Maybe<Scalars['String']>;
  projectAddressId_not_contains?: Maybe<Scalars['String']>;
  projectAddressId_not_ends_with?: Maybe<Scalars['String']>;
  projectAddressId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectAddressId_not_starts_with?: Maybe<Scalars['String']>;
  projectAddressId_starts_with?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectCode_contains?: Maybe<Scalars['String']>;
  projectCode_ends_with?: Maybe<Scalars['String']>;
  projectCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectCode_not?: Maybe<Scalars['String']>;
  projectCode_not_contains?: Maybe<Scalars['String']>;
  projectCode_not_ends_with?: Maybe<Scalars['String']>;
  projectCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectCode_not_starts_with?: Maybe<Scalars['String']>;
  projectCode_starts_with?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectName_contains?: Maybe<Scalars['String']>;
  projectName_ends_with?: Maybe<Scalars['String']>;
  projectName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectName_not?: Maybe<Scalars['String']>;
  projectName_not_contains?: Maybe<Scalars['String']>;
  projectName_not_ends_with?: Maybe<Scalars['String']>;
  projectName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectName_not_starts_with?: Maybe<Scalars['String']>;
  projectName_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusId_contains?: Maybe<Scalars['String']>;
  projectPostStatusId_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusId_not?: Maybe<Scalars['String']>;
  projectPostStatusId_not_contains?: Maybe<Scalars['String']>;
  projectPostStatusId_not_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusId_not_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusId_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectPostStatusName_contains?: Maybe<Scalars['String']>;
  projectPostStatusName_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusName_not?: Maybe<Scalars['String']>;
  projectPostStatusName_not_contains?: Maybe<Scalars['String']>;
  projectPostStatusName_not_ends_with?: Maybe<Scalars['String']>;
  projectPostStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectPostStatusName_not_starts_with?: Maybe<Scalars['String']>;
  projectPostStatusName_starts_with?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectProgress_contains?: Maybe<Scalars['String']>;
  projectProgress_ends_with?: Maybe<Scalars['String']>;
  projectProgress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectProgress_not?: Maybe<Scalars['String']>;
  projectProgress_not_contains?: Maybe<Scalars['String']>;
  projectProgress_not_ends_with?: Maybe<Scalars['String']>;
  projectProgress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectProgress_not_starts_with?: Maybe<Scalars['String']>;
  projectProgress_starts_with?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectStatusName_contains?: Maybe<Scalars['String']>;
  projectStatusName_ends_with?: Maybe<Scalars['String']>;
  projectStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusName_not?: Maybe<Scalars['String']>;
  projectStatusName_not_contains?: Maybe<Scalars['String']>;
  projectStatusName_not_ends_with?: Maybe<Scalars['String']>;
  projectStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectStatusName_not_starts_with?: Maybe<Scalars['String']>;
  projectStatusName_starts_with?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  projectTypeName_contains?: Maybe<Scalars['String']>;
  projectTypeName_ends_with?: Maybe<Scalars['String']>;
  projectTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectTypeName_not?: Maybe<Scalars['String']>;
  projectTypeName_not_contains?: Maybe<Scalars['String']>;
  projectTypeName_not_ends_with?: Maybe<Scalars['String']>;
  projectTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectTypeName_not_starts_with?: Maybe<Scalars['String']>;
  projectTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type ProjectWithPropertyPostDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  projectAddressId?: Maybe<SortOperationKind>;
  projectName?: Maybe<SortOperationKind>;
  projectPostStatusName?: Maybe<SortOperationKind>;
  projectProgress?: Maybe<SortOperationKind>;
  projectStatusName?: Maybe<SortOperationKind>;
  projectTypeName?: Maybe<SortOperationKind>;
};

export type ProjectsForSearchDto = {
  __typename?: 'ProjectsForSearchDto';
  isFollowed?: Maybe<Scalars['Boolean']>;
  projectId?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
};

export type PropertyAddressDto = {
  __typename?: 'PropertyAddressDto';
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  countryId: Scalars['Int'];
  countryName?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  propertyAddressId: Scalars['Uuid'];
  streetName?: Maybe<Scalars['String']>;
  wardId: Scalars['Int'];
  wardName?: Maybe<Scalars['String']>;
};

export type PropertyAddressInfo = {
  __typename?: 'PropertyAddressInfo';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<PropertyAddressInfo>;
  countryId: Scalars['Int'];
  countryName?: Maybe<Scalars['String']>;
  direction: Direction;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  propertyAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId: Scalars['Int'];
  wardName?: Maybe<Scalars['String']>;
};

export type PropertyAddressInfoDto = {
  __typename?: 'PropertyAddressInfoDto';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<PropertyAddressInfoDto>;
  countryId?: Maybe<Scalars['Int']>;
  countryName?: Maybe<Scalars['String']>;
  direction: Direction;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  propertyAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId?: Maybe<Scalars['Int']>;
  wardName?: Maybe<Scalars['String']>;
};

export type PropertyAddressInfoInput = {
  additionalLocationInfo?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  cityName?: Maybe<Scalars['String']>;
  countryId: Scalars['Int'];
  countryName?: Maybe<Scalars['String']>;
  direction: Direction;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  propertyAddressId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetName?: Maybe<Scalars['String']>;
  wardId: Scalars['Int'];
  wardName?: Maybe<Scalars['String']>;
};

export enum PropertyLocation {
  Undefined = 'UNDEFINED',
  Frontage = 'FRONTAGE',
  Alley = 'ALLEY'
}

export type PropertyPostApprovalStatusDto = {
  __typename?: 'PropertyPostApprovalStatusDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  propertyPostApprovalStatusDescription?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
};

export type PropertyPostApprovalStatusDtoFilter = {
  AND?: Maybe<Array<PropertyPostApprovalStatusDtoFilter>>;
  OR?: Maybe<Array<PropertyPostApprovalStatusDtoFilter>>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_contains?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_ends_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostApprovalStatusName_not?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_not_contains?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostApprovalStatusName_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type PropertyPostApprovalStatusDtoSort = {
  propertyPostApprovalStatusName?: Maybe<SortOperationKind>;
};

export type PropertyPostApprovalStatusInfoDto = {
  __typename?: 'PropertyPostApprovalStatusInfoDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  propertyPostApprovalStatusDescription?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
};

export type PropertyPostCategoryDto = {
  __typename?: 'PropertyPostCategoryDto';
  categoryCode?: Maybe<Scalars['String']>;
  categoryId?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
};

export type PropertyPostCategoryDtoFilter = {
  AND?: Maybe<Array<PropertyPostCategoryDtoFilter>>;
  categoryCode?: Maybe<Scalars['String']>;
  categoryCode_contains?: Maybe<Scalars['String']>;
  categoryCode_ends_with?: Maybe<Scalars['String']>;
  categoryCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryCode_not?: Maybe<Scalars['String']>;
  categoryCode_not_contains?: Maybe<Scalars['String']>;
  categoryCode_not_ends_with?: Maybe<Scalars['String']>;
  categoryCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryCode_not_starts_with?: Maybe<Scalars['String']>;
  categoryCode_starts_with?: Maybe<Scalars['String']>;
  categoryName?: Maybe<Scalars['String']>;
  categoryName_contains?: Maybe<Scalars['String']>;
  categoryName_ends_with?: Maybe<Scalars['String']>;
  categoryName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryName_not?: Maybe<Scalars['String']>;
  categoryName_not_contains?: Maybe<Scalars['String']>;
  categoryName_not_ends_with?: Maybe<Scalars['String']>;
  categoryName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  categoryName_not_starts_with?: Maybe<Scalars['String']>;
  categoryName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<PropertyPostCategoryDtoFilter>>;
};

export type PropertyPostCategoryDtoSort = {
  categoryCode?: Maybe<SortOperationKind>;
  categoryName?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
};

export type PropertyPostDto = {
  __typename?: 'PropertyPostDto';
  addressId?: Maybe<Scalars['String']>;
  agentGroup?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupInfos?: Maybe<Array<Maybe<AgentGroupInfo>>>;
  agentGroupJsonString?: Maybe<Scalars['String']>;
  agentGroupRanks?: Maybe<Scalars['String']>;
  agentRank?: Maybe<Scalars['String']>;
  agentRankIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankInfos?: Maybe<Array<Maybe<AgentRankInfo>>>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankJsonString?: Maybe<Scalars['String']>;
  alleyWidth?: Maybe<Scalars['Float']>;
  approvalStatusName?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<Scalars['String']>;
  approvedByUserFullName?: Maybe<Scalars['String']>;
  approvedDatetime?: Maybe<Scalars['Long']>;
  assigned?: Maybe<Scalars['Boolean']>;
  assignedAgentIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  b2C2CProjectId?: Maybe<Scalars['String']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  buyerId?: Maybe<Scalars['String']>;
  buyerPhoneNumber?: Maybe<Scalars['String']>;
  capetAreas?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  collateralizedAtBankDescription?: Maybe<Scalars['String']>;
  collateralizedAtBankId?: Maybe<Scalars['String']>;
  collateralizedAtBankName?: Maybe<Scalars['String']>;
  commission?: Maybe<Scalars['Float']>;
  commissionBuyer?: Maybe<Scalars['Float']>;
  commissionSeller?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  contractStatus: PostContractStatus;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  direction: Direction;
  districtId?: Maybe<Scalars['Int']>;
  expectedPrice?: Maybe<Scalars['String']>;
  expiredDate?: Maybe<Scalars['Long']>;
  exportBalconyDirection?: Maybe<Scalars['String']>;
  exportDirection?: Maybe<Scalars['String']>;
  exportPrice?: Maybe<Scalars['Float']>;
  exportPriceNoVat?: Maybe<Scalars['Float']>;
  exportPriceVat?: Maybe<Scalars['Float']>;
  fastProductId?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  followedDatetime?: Maybe<Scalars['Long']>;
  forRent: Scalars['Boolean'];
  forSale: Scalars['Boolean'];
  freeTextProject?: Maybe<Scalars['String']>;
  guaranteedPackage?: Maybe<C2CPropertyPostGuaranteedPackageDto>;
  guaranteedPackageEndTime?: Maybe<Scalars['Long']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isCollateralized?: Maybe<Scalars['Boolean']>;
  isCreateByAgent?: Maybe<Scalars['Boolean']>;
  isFeatureProperty?: Maybe<Scalars['Boolean']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isRented?: Maybe<Scalars['Boolean']>;
  isShowGoogleStreetView?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  lastModifiedByUserId?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  legalDocuments?: Maybe<Scalars['String']>;
  legalInfoDescription?: Maybe<Scalars['String']>;
  legalInfoId?: Maybe<Scalars['String']>;
  length?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  matterportUrl?: Maybe<Scalars['String']>;
  maxUserReportSpamCreatedDatetime?: Maybe<Scalars['Long']>;
  minimumPayment?: Maybe<Scalars['Float']>;
  nearFacility?: Maybe<Scalars['String']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfAllBookingTransactions?: Maybe<Scalars['Int']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfBookingTransactions?: Maybe<Scalars['Int']>;
  numberOfContact?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  numberOfFollower?: Maybe<Scalars['Int']>;
  numberOfReport?: Maybe<Scalars['Int']>;
  owner?: Maybe<OwnerInfoDto>;
  ownerId?: Maybe<Scalars['String']>;
  ownerIsAuthor?: Maybe<Scalars['Boolean']>;
  panoramaImageCode?: Maybe<Scalars['String']>;
  platformFee?: Maybe<Scalars['Float']>;
  platformFeeBasedOnCommission?: Maybe<Scalars['Float']>;
  platformFeeMinimumBasedOnSellingPrice?: Maybe<Scalars['Float']>;
  postDescription?: Maybe<Scalars['String']>;
  postServiceType: PostServiceType;
  postTitle?: Maybe<Scalars['String']>;
  postTypeDescription?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  postTypeName?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  projectInfo?: Maybe<ProjectByPropertyPostInfo>;
  propertyAddress?: Maybe<PropertyAddressInfoDto>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyLocation?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusDescription?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
  propertyPostForRentDto?: Maybe<PropertyPostForRentDto>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostStatusDescription?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertySubTypeDescription?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertySubTypeName?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectedDatetime?: Maybe<Scalars['Long']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  requestedUpdatingDatetime?: Maybe<Scalars['Long']>;
  requestedUpdatingReason?: Maybe<Scalars['String']>;
  rowIndex?: Maybe<Scalars['Int']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleTrackingStatusDescription?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
  sellerAndBuyerCommission?: Maybe<Scalars['Float']>;
  sellerInfo?: Maybe<SellerInfo>;
  sendingApprovalFrom?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  staffGroupDescriptions?: Maybe<Scalars['String']>;
  staffGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupIdsBeforeUpdate?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupInfos?: Maybe<Array<Maybe<StaffGroupInfo>>>;
  staffGroups?: Maybe<Scalars['String']>;
  staffUserFullname?: Maybe<Scalars['String']>;
  staffUserId?: Maybe<Scalars['String']>;
  supportRequestTypeIds?: Maybe<Scalars['String']>;
  tags?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  totalSpam?: Maybe<Scalars['Long']>;
  unitOfMeasure?: Maybe<Property_Posts_UnitOfMeasureInfoDto>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedUserFullName?: Maybe<Scalars['String']>;
  userReportSpam?: Maybe<Array<Maybe<UserReportSpamDto>>>;
  width?: Maybe<Scalars['Float']>;
};

/** A connection to a list of items. */
export type PropertyPostDtoConnection = {
  __typename?: 'PropertyPostDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<PropertyPostDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<PropertyPostDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PropertyPostDtoEdge = {
  __typename?: 'PropertyPostDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<PropertyPostDto>;
};

export type PropertyPostDtoFilter = {
  AND?: Maybe<Array<PropertyPostDtoFilter>>;
  approvalStatusName?: Maybe<Scalars['String']>;
  approvalStatusName_contains?: Maybe<Scalars['String']>;
  approvalStatusName_ends_with?: Maybe<Scalars['String']>;
  approvalStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvalStatusName_not?: Maybe<Scalars['String']>;
  approvalStatusName_not_contains?: Maybe<Scalars['String']>;
  approvalStatusName_not_ends_with?: Maybe<Scalars['String']>;
  approvalStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvalStatusName_not_starts_with?: Maybe<Scalars['String']>;
  approvalStatusName_starts_with?: Maybe<Scalars['String']>;
  approvedByUserFullName?: Maybe<Scalars['String']>;
  approvedByUserFullName_contains?: Maybe<Scalars['String']>;
  approvedByUserFullName_ends_with?: Maybe<Scalars['String']>;
  approvedByUserFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedByUserFullName_not?: Maybe<Scalars['String']>;
  approvedByUserFullName_not_contains?: Maybe<Scalars['String']>;
  approvedByUserFullName_not_ends_with?: Maybe<Scalars['String']>;
  approvedByUserFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  approvedByUserFullName_not_starts_with?: Maybe<Scalars['String']>;
  approvedByUserFullName_starts_with?: Maybe<Scalars['String']>;
  approvedDatetime?: Maybe<Scalars['Long']>;
  approvedDatetime_gt?: Maybe<Scalars['Long']>;
  approvedDatetime_gte?: Maybe<Scalars['Long']>;
  approvedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  approvedDatetime_lt?: Maybe<Scalars['Long']>;
  approvedDatetime_lte?: Maybe<Scalars['Long']>;
  approvedDatetime_not?: Maybe<Scalars['Long']>;
  approvedDatetime_not_gt?: Maybe<Scalars['Long']>;
  approvedDatetime_not_gte?: Maybe<Scalars['Long']>;
  approvedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  approvedDatetime_not_lt?: Maybe<Scalars['Long']>;
  approvedDatetime_not_lte?: Maybe<Scalars['Long']>;
  blockName?: Maybe<Scalars['String']>;
  blockName_contains?: Maybe<Scalars['String']>;
  blockName_ends_with?: Maybe<Scalars['String']>;
  blockName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blockName_not?: Maybe<Scalars['String']>;
  blockName_not_contains?: Maybe<Scalars['String']>;
  blockName_not_ends_with?: Maybe<Scalars['String']>;
  blockName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  blockName_not_starts_with?: Maybe<Scalars['String']>;
  blockName_starts_with?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  bookingFee_gt?: Maybe<Scalars['Float']>;
  bookingFee_gte?: Maybe<Scalars['Float']>;
  bookingFee_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  bookingFee_lt?: Maybe<Scalars['Float']>;
  bookingFee_lte?: Maybe<Scalars['Float']>;
  bookingFee_not?: Maybe<Scalars['Float']>;
  bookingFee_not_gt?: Maybe<Scalars['Float']>;
  bookingFee_not_gte?: Maybe<Scalars['Float']>;
  bookingFee_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  bookingFee_not_lt?: Maybe<Scalars['Float']>;
  bookingFee_not_lte?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingArea_gt?: Maybe<Scalars['Float']>;
  buildingArea_gte?: Maybe<Scalars['Float']>;
  buildingArea_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  buildingArea_lt?: Maybe<Scalars['Float']>;
  buildingArea_lte?: Maybe<Scalars['Float']>;
  buildingArea_not?: Maybe<Scalars['Float']>;
  buildingArea_not_gt?: Maybe<Scalars['Float']>;
  buildingArea_not_gte?: Maybe<Scalars['Float']>;
  buildingArea_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  buildingArea_not_lt?: Maybe<Scalars['Float']>;
  buildingArea_not_lte?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  capetAreas_gt?: Maybe<Scalars['Float']>;
  capetAreas_gte?: Maybe<Scalars['Float']>;
  capetAreas_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  capetAreas_lt?: Maybe<Scalars['Float']>;
  capetAreas_lte?: Maybe<Scalars['Float']>;
  capetAreas_not?: Maybe<Scalars['Float']>;
  capetAreas_not_gt?: Maybe<Scalars['Float']>;
  capetAreas_not_gte?: Maybe<Scalars['Float']>;
  capetAreas_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  capetAreas_not_lt?: Maybe<Scalars['Float']>;
  capetAreas_not_lte?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  contractStatus?: Maybe<PostContractStatus>;
  contractStatus_gt?: Maybe<PostContractStatus>;
  contractStatus_gte?: Maybe<PostContractStatus>;
  contractStatus_in?: Maybe<Array<PostContractStatus>>;
  contractStatus_lt?: Maybe<PostContractStatus>;
  contractStatus_lte?: Maybe<PostContractStatus>;
  contractStatus_not?: Maybe<PostContractStatus>;
  contractStatus_not_gt?: Maybe<PostContractStatus>;
  contractStatus_not_gte?: Maybe<PostContractStatus>;
  contractStatus_not_in?: Maybe<Array<PostContractStatus>>;
  contractStatus_not_lt?: Maybe<PostContractStatus>;
  contractStatus_not_lte?: Maybe<PostContractStatus>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserFullName_contains?: Maybe<Scalars['String']>;
  createdByUserFullName_ends_with?: Maybe<Scalars['String']>;
  createdByUserFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserFullName_not?: Maybe<Scalars['String']>;
  createdByUserFullName_not_contains?: Maybe<Scalars['String']>;
  createdByUserFullName_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserFullName_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserFullName_starts_with?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  expiredDate?: Maybe<Scalars['Long']>;
  expiredDate_gt?: Maybe<Scalars['Long']>;
  expiredDate_gte?: Maybe<Scalars['Long']>;
  expiredDate_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  expiredDate_lt?: Maybe<Scalars['Long']>;
  expiredDate_lte?: Maybe<Scalars['Long']>;
  expiredDate_not?: Maybe<Scalars['Long']>;
  expiredDate_not_gt?: Maybe<Scalars['Long']>;
  expiredDate_not_gte?: Maybe<Scalars['Long']>;
  expiredDate_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  expiredDate_not_lt?: Maybe<Scalars['Long']>;
  expiredDate_not_lte?: Maybe<Scalars['Long']>;
  floor?: Maybe<Scalars['String']>;
  floor_contains?: Maybe<Scalars['String']>;
  floor_ends_with?: Maybe<Scalars['String']>;
  floor_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floor_not?: Maybe<Scalars['String']>;
  floor_not_contains?: Maybe<Scalars['String']>;
  floor_not_ends_with?: Maybe<Scalars['String']>;
  floor_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  floor_not_starts_with?: Maybe<Scalars['String']>;
  floor_starts_with?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forRent_not?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  forSale_not?: Maybe<Scalars['Boolean']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  guaranteedPackageId_contains?: Maybe<Scalars['String']>;
  guaranteedPackageId_ends_with?: Maybe<Scalars['String']>;
  guaranteedPackageId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  guaranteedPackageId_not?: Maybe<Scalars['String']>;
  guaranteedPackageId_not_contains?: Maybe<Scalars['String']>;
  guaranteedPackageId_not_ends_with?: Maybe<Scalars['String']>;
  guaranteedPackageId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  guaranteedPackageId_not_starts_with?: Maybe<Scalars['String']>;
  guaranteedPackageId_starts_with?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  houseDesign_contains?: Maybe<Scalars['String']>;
  houseDesign_ends_with?: Maybe<Scalars['String']>;
  houseDesign_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  houseDesign_not?: Maybe<Scalars['String']>;
  houseDesign_not_contains?: Maybe<Scalars['String']>;
  houseDesign_not_ends_with?: Maybe<Scalars['String']>;
  houseDesign_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  houseDesign_not_starts_with?: Maybe<Scalars['String']>;
  houseDesign_starts_with?: Maybe<Scalars['String']>;
  isApproved?: Maybe<Scalars['Boolean']>;
  isApproved_gt?: Maybe<Scalars['Boolean']>;
  isApproved_gte?: Maybe<Scalars['Boolean']>;
  isApproved_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isApproved_lt?: Maybe<Scalars['Boolean']>;
  isApproved_lte?: Maybe<Scalars['Boolean']>;
  isApproved_not?: Maybe<Scalars['Boolean']>;
  isApproved_not_gt?: Maybe<Scalars['Boolean']>;
  isApproved_not_gte?: Maybe<Scalars['Boolean']>;
  isApproved_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isApproved_not_lt?: Maybe<Scalars['Boolean']>;
  isApproved_not_lte?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isPrivate_gt?: Maybe<Scalars['Boolean']>;
  isPrivate_gte?: Maybe<Scalars['Boolean']>;
  isPrivate_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isPrivate_lt?: Maybe<Scalars['Boolean']>;
  isPrivate_lte?: Maybe<Scalars['Boolean']>;
  isPrivate_not?: Maybe<Scalars['Boolean']>;
  isPrivate_not_gt?: Maybe<Scalars['Boolean']>;
  isPrivate_not_gte?: Maybe<Scalars['Boolean']>;
  isPrivate_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isPrivate_not_lt?: Maybe<Scalars['Boolean']>;
  isPrivate_not_lte?: Maybe<Scalars['Boolean']>;
  isRented?: Maybe<Scalars['Boolean']>;
  isRented_gt?: Maybe<Scalars['Boolean']>;
  isRented_gte?: Maybe<Scalars['Boolean']>;
  isRented_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isRented_lt?: Maybe<Scalars['Boolean']>;
  isRented_lte?: Maybe<Scalars['Boolean']>;
  isRented_not?: Maybe<Scalars['Boolean']>;
  isRented_not_gt?: Maybe<Scalars['Boolean']>;
  isRented_not_gte?: Maybe<Scalars['Boolean']>;
  isRented_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isRented_not_lt?: Maybe<Scalars['Boolean']>;
  isRented_not_lte?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBathrooms_gt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_gte?: Maybe<Scalars['Int']>;
  numberOfBathrooms_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBathrooms_lt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_lte?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_gt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_gte?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBathrooms_not_lt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_lte?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms_gt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_gte?: Maybe<Scalars['Int']>;
  numberOfBedrooms_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBedrooms_lt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_lte?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_gt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_gte?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBedrooms_not_lt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_lte?: Maybe<Scalars['Int']>;
  numberOfContact?: Maybe<Scalars['Int']>;
  numberOfContact_gt?: Maybe<Scalars['Int']>;
  numberOfContact_gte?: Maybe<Scalars['Int']>;
  numberOfContact_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfContact_lt?: Maybe<Scalars['Int']>;
  numberOfContact_lte?: Maybe<Scalars['Int']>;
  numberOfContact_not?: Maybe<Scalars['Int']>;
  numberOfContact_not_gt?: Maybe<Scalars['Int']>;
  numberOfContact_not_gte?: Maybe<Scalars['Int']>;
  numberOfContact_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfContact_not_lt?: Maybe<Scalars['Int']>;
  numberOfContact_not_lte?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  numberOfFloor_gt?: Maybe<Scalars['Int']>;
  numberOfFloor_gte?: Maybe<Scalars['Int']>;
  numberOfFloor_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfFloor_lt?: Maybe<Scalars['Int']>;
  numberOfFloor_lte?: Maybe<Scalars['Int']>;
  numberOfFloor_not?: Maybe<Scalars['Int']>;
  numberOfFloor_not_gt?: Maybe<Scalars['Int']>;
  numberOfFloor_not_gte?: Maybe<Scalars['Int']>;
  numberOfFloor_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfFloor_not_lt?: Maybe<Scalars['Int']>;
  numberOfFloor_not_lte?: Maybe<Scalars['Int']>;
  numberOfFollower?: Maybe<Scalars['Int']>;
  numberOfFollower_gt?: Maybe<Scalars['Int']>;
  numberOfFollower_gte?: Maybe<Scalars['Int']>;
  numberOfFollower_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfFollower_lt?: Maybe<Scalars['Int']>;
  numberOfFollower_lte?: Maybe<Scalars['Int']>;
  numberOfFollower_not?: Maybe<Scalars['Int']>;
  numberOfFollower_not_gt?: Maybe<Scalars['Int']>;
  numberOfFollower_not_gte?: Maybe<Scalars['Int']>;
  numberOfFollower_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfFollower_not_lt?: Maybe<Scalars['Int']>;
  numberOfFollower_not_lte?: Maybe<Scalars['Int']>;
  numberOfReport?: Maybe<Scalars['Int']>;
  numberOfReport_gt?: Maybe<Scalars['Int']>;
  numberOfReport_gte?: Maybe<Scalars['Int']>;
  numberOfReport_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfReport_lt?: Maybe<Scalars['Int']>;
  numberOfReport_lte?: Maybe<Scalars['Int']>;
  numberOfReport_not?: Maybe<Scalars['Int']>;
  numberOfReport_not_gt?: Maybe<Scalars['Int']>;
  numberOfReport_not_gte?: Maybe<Scalars['Int']>;
  numberOfReport_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfReport_not_lt?: Maybe<Scalars['Int']>;
  numberOfReport_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<PropertyPostDtoFilter>>;
  postServiceType?: Maybe<PostServiceType>;
  postServiceType_gt?: Maybe<PostServiceType>;
  postServiceType_gte?: Maybe<PostServiceType>;
  postServiceType_in?: Maybe<Array<PostServiceType>>;
  postServiceType_lt?: Maybe<PostServiceType>;
  postServiceType_lte?: Maybe<PostServiceType>;
  postServiceType_not?: Maybe<PostServiceType>;
  postServiceType_not_gt?: Maybe<PostServiceType>;
  postServiceType_not_gte?: Maybe<PostServiceType>;
  postServiceType_not_in?: Maybe<Array<PostServiceType>>;
  postServiceType_not_lt?: Maybe<PostServiceType>;
  postServiceType_not_lte?: Maybe<PostServiceType>;
  postTitle?: Maybe<Scalars['String']>;
  postTitle_contains?: Maybe<Scalars['String']>;
  postTitle_ends_with?: Maybe<Scalars['String']>;
  postTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTitle_not?: Maybe<Scalars['String']>;
  postTitle_not_contains?: Maybe<Scalars['String']>;
  postTitle_not_ends_with?: Maybe<Scalars['String']>;
  postTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTitle_not_starts_with?: Maybe<Scalars['String']>;
  postTitle_starts_with?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  postTypeId_contains?: Maybe<Scalars['String']>;
  postTypeId_ends_with?: Maybe<Scalars['String']>;
  postTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTypeId_not?: Maybe<Scalars['String']>;
  postTypeId_not_contains?: Maybe<Scalars['String']>;
  postTypeId_not_ends_with?: Maybe<Scalars['String']>;
  postTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTypeId_not_starts_with?: Maybe<Scalars['String']>;
  postTypeId_starts_with?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  price_gt?: Maybe<Scalars['Float']>;
  price_gte?: Maybe<Scalars['Float']>;
  price_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  price_lt?: Maybe<Scalars['Float']>;
  price_lte?: Maybe<Scalars['Float']>;
  price_not?: Maybe<Scalars['Float']>;
  price_not_gt?: Maybe<Scalars['Float']>;
  price_not_gte?: Maybe<Scalars['Float']>;
  price_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  price_not_lt?: Maybe<Scalars['Float']>;
  price_not_lte?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  projectId_contains?: Maybe<Scalars['String']>;
  projectId_ends_with?: Maybe<Scalars['String']>;
  projectId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not?: Maybe<Scalars['String']>;
  projectId_not_contains?: Maybe<Scalars['String']>;
  projectId_not_ends_with?: Maybe<Scalars['String']>;
  projectId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not_starts_with?: Maybe<Scalars['String']>;
  projectId_starts_with?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyCode_contains?: Maybe<Scalars['String']>;
  propertyCode_ends_with?: Maybe<Scalars['String']>;
  propertyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not?: Maybe<Scalars['String']>;
  propertyCode_not_contains?: Maybe<Scalars['String']>;
  propertyCode_not_ends_with?: Maybe<Scalars['String']>;
  propertyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not_starts_with?: Maybe<Scalars['String']>;
  propertyCode_starts_with?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyName_contains?: Maybe<Scalars['String']>;
  propertyName_ends_with?: Maybe<Scalars['String']>;
  propertyName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyName_not?: Maybe<Scalars['String']>;
  propertyName_not_contains?: Maybe<Scalars['String']>;
  propertyName_not_ends_with?: Maybe<Scalars['String']>;
  propertyName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyName_not_starts_with?: Maybe<Scalars['String']>;
  propertyName_starts_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_contains?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_ends_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostApprovalStatusId_not?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_not_contains?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostApprovalStatusId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId_starts_with?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostId_contains?: Maybe<Scalars['String']>;
  propertyPostId_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not?: Maybe<Scalars['String']>;
  propertyPostId_not_contains?: Maybe<Scalars['String']>;
  propertyPostId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostId_starts_with?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertyPostStatusId_contains?: Maybe<Scalars['String']>;
  propertyPostStatusId_ends_with?: Maybe<Scalars['String']>;
  propertyPostStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostStatusId_not?: Maybe<Scalars['String']>;
  propertyPostStatusId_not_contains?: Maybe<Scalars['String']>;
  propertyPostStatusId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostStatusId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostStatusId_starts_with?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertySubTypeId_contains?: Maybe<Scalars['String']>;
  propertySubTypeId_ends_with?: Maybe<Scalars['String']>;
  propertySubTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertySubTypeId_not?: Maybe<Scalars['String']>;
  propertySubTypeId_not_contains?: Maybe<Scalars['String']>;
  propertySubTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertySubTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertySubTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertySubTypeId_starts_with?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeDescription_contains?: Maybe<Scalars['String']>;
  propertyTypeDescription_ends_with?: Maybe<Scalars['String']>;
  propertyTypeDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeDescription_not?: Maybe<Scalars['String']>;
  propertyTypeDescription_not_contains?: Maybe<Scalars['String']>;
  propertyTypeDescription_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeDescription_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeDescription_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  propertyTypeName_contains?: Maybe<Scalars['String']>;
  propertyTypeName_ends_with?: Maybe<Scalars['String']>;
  propertyTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeName_not?: Maybe<Scalars['String']>;
  propertyTypeName_not_contains?: Maybe<Scalars['String']>;
  propertyTypeName_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeName_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeName_starts_with?: Maybe<Scalars['String']>;
  rejectedDatetime?: Maybe<Scalars['Long']>;
  rejectedDatetime_gt?: Maybe<Scalars['Long']>;
  rejectedDatetime_gte?: Maybe<Scalars['Long']>;
  rejectedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  rejectedDatetime_lt?: Maybe<Scalars['Long']>;
  rejectedDatetime_lte?: Maybe<Scalars['Long']>;
  rejectedDatetime_not?: Maybe<Scalars['Long']>;
  rejectedDatetime_not_gt?: Maybe<Scalars['Long']>;
  rejectedDatetime_not_gte?: Maybe<Scalars['Long']>;
  rejectedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  rejectedDatetime_not_lt?: Maybe<Scalars['Long']>;
  rejectedDatetime_not_lte?: Maybe<Scalars['Long']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rejectedReason_contains?: Maybe<Scalars['String']>;
  rejectedReason_ends_with?: Maybe<Scalars['String']>;
  rejectedReason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectedReason_not?: Maybe<Scalars['String']>;
  rejectedReason_not_contains?: Maybe<Scalars['String']>;
  rejectedReason_not_ends_with?: Maybe<Scalars['String']>;
  rejectedReason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  rejectedReason_not_starts_with?: Maybe<Scalars['String']>;
  rejectedReason_starts_with?: Maybe<Scalars['String']>;
  requestedUpdatingDatetime?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_gt?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_gte?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestedUpdatingDatetime_lt?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_lte?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_not?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_not_gt?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_not_gte?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  requestedUpdatingDatetime_not_lt?: Maybe<Scalars['Long']>;
  requestedUpdatingDatetime_not_lte?: Maybe<Scalars['Long']>;
  requestedUpdatingReason?: Maybe<Scalars['String']>;
  requestedUpdatingReason_contains?: Maybe<Scalars['String']>;
  requestedUpdatingReason_ends_with?: Maybe<Scalars['String']>;
  requestedUpdatingReason_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedUpdatingReason_not?: Maybe<Scalars['String']>;
  requestedUpdatingReason_not_contains?: Maybe<Scalars['String']>;
  requestedUpdatingReason_not_ends_with?: Maybe<Scalars['String']>;
  requestedUpdatingReason_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestedUpdatingReason_not_starts_with?: Maybe<Scalars['String']>;
  requestedUpdatingReason_starts_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusId_contains?: Maybe<Scalars['String']>;
  saleTrackingStatusId_ends_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleTrackingStatusId_not?: Maybe<Scalars['String']>;
  saleTrackingStatusId_not_contains?: Maybe<Scalars['String']>;
  saleTrackingStatusId_not_ends_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleTrackingStatusId_not_starts_with?: Maybe<Scalars['String']>;
  saleTrackingStatusId_starts_with?: Maybe<Scalars['String']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  totalSiteArea_gt?: Maybe<Scalars['Float']>;
  totalSiteArea_gte?: Maybe<Scalars['Float']>;
  totalSiteArea_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  totalSiteArea_lt?: Maybe<Scalars['Float']>;
  totalSiteArea_lte?: Maybe<Scalars['Float']>;
  totalSiteArea_not?: Maybe<Scalars['Float']>;
  totalSiteArea_not_gt?: Maybe<Scalars['Float']>;
  totalSiteArea_not_gte?: Maybe<Scalars['Float']>;
  totalSiteArea_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  totalSiteArea_not_lt?: Maybe<Scalars['Float']>;
  totalSiteArea_not_lte?: Maybe<Scalars['Float']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedByUserId_contains?: Maybe<Scalars['String']>;
  updatedByUserId_ends_with?: Maybe<Scalars['String']>;
  updatedByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedByUserId_not?: Maybe<Scalars['String']>;
  updatedByUserId_not_contains?: Maybe<Scalars['String']>;
  updatedByUserId_not_ends_with?: Maybe<Scalars['String']>;
  updatedByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedByUserId_not_starts_with?: Maybe<Scalars['String']>;
  updatedByUserId_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
  updatedUserFullName?: Maybe<Scalars['String']>;
  updatedUserFullName_contains?: Maybe<Scalars['String']>;
  updatedUserFullName_ends_with?: Maybe<Scalars['String']>;
  updatedUserFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedUserFullName_not?: Maybe<Scalars['String']>;
  updatedUserFullName_not_contains?: Maybe<Scalars['String']>;
  updatedUserFullName_not_ends_with?: Maybe<Scalars['String']>;
  updatedUserFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  updatedUserFullName_not_starts_with?: Maybe<Scalars['String']>;
  updatedUserFullName_starts_with?: Maybe<Scalars['String']>;
};

export type PropertyPostDtoSort = {
  approvedBy?: Maybe<SortOperationKind>;
  approvedByUserFullName?: Maybe<SortOperationKind>;
  approvedDatetime?: Maybe<SortOperationKind>;
  blockName?: Maybe<SortOperationKind>;
  bookingFee?: Maybe<SortOperationKind>;
  buildingArea?: Maybe<SortOperationKind>;
  capetAreas?: Maybe<SortOperationKind>;
  createdByUserFullName?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  expiredDate?: Maybe<SortOperationKind>;
  floor?: Maybe<SortOperationKind>;
  houseDesign?: Maybe<SortOperationKind>;
  lastModified?: Maybe<SortOperationKind>;
  numberOfBathrooms?: Maybe<SortOperationKind>;
  numberOfBedrooms?: Maybe<SortOperationKind>;
  numberOfBookingTransactions?: Maybe<SortOperationKind>;
  numberOfContact?: Maybe<SortOperationKind>;
  numberOfFloor?: Maybe<SortOperationKind>;
  numberOfFollower?: Maybe<SortOperationKind>;
  numberOfReport?: Maybe<SortOperationKind>;
  postTitle?: Maybe<SortOperationKind>;
  postTypeId?: Maybe<SortOperationKind>;
  price?: Maybe<SortOperationKind>;
  projectId?: Maybe<SortOperationKind>;
  propertyCode?: Maybe<SortOperationKind>;
  propertyName?: Maybe<SortOperationKind>;
  propertyPostApprovalStatusId?: Maybe<SortOperationKind>;
  propertyPostStatusId?: Maybe<SortOperationKind>;
  propertySubTypeId?: Maybe<SortOperationKind>;
  propertyTypeDescription?: Maybe<SortOperationKind>;
  propertyTypeId?: Maybe<SortOperationKind>;
  propertyTypeName?: Maybe<SortOperationKind>;
  rejectedDatetime?: Maybe<SortOperationKind>;
  rejectedReason?: Maybe<SortOperationKind>;
  requestedUpdatingDatetime?: Maybe<SortOperationKind>;
  requestedUpdatingReason?: Maybe<SortOperationKind>;
  saleTrackingStatusId?: Maybe<SortOperationKind>;
  totalSiteArea?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
  updatedUserFullName?: Maybe<SortOperationKind>;
};

export type PropertyPostForC2CDemandDto = {
  __typename?: 'PropertyPostForC2CDemandDto';
  buildingArea?: Maybe<Scalars['Float']>;
  commission?: Maybe<Scalars['Float']>;
  detailPath?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  images?: Maybe<Scalars['String']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  isRented?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  postDescription?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['Uuid']>;
  propertyAddressDto?: Maybe<PropertyAddressDto>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['Uuid']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
  propertyPostForRentDto?: Maybe<PropertyPostForRentDto>;
  propertyPostId: Scalars['Uuid'];
  propertyTypeId: Scalars['Uuid'];
  propertyTypeName?: Maybe<Scalars['String']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['Uuid']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  totalSpam?: Maybe<Scalars['Long']>;
};

export type PropertyPostForLastPublicVersionDto = {
  __typename?: 'PropertyPostForLastPublicVersionDto';
  balconyDirection?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  capetAreas?: Maybe<Scalars['Float']>;
  clone?: Maybe<PropertyPostForLastPublicVersionDto>;
  commission?: Maybe<Scalars['Float']>;
  commissionBuyer?: Maybe<Scalars['Float']>;
  commissionSeller?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  forRent: Scalars['Boolean'];
  forSale: Scalars['Boolean'];
  images?: Maybe<Scalars['String']>;
  isCreateByAgent?: Maybe<Scalars['Boolean']>;
  isRented?: Maybe<Scalars['Boolean']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  owner?: Maybe<OwnerInfoDto>;
  ownerId?: Maybe<Scalars['String']>;
  ownerIsAuthor?: Maybe<Scalars['Boolean']>;
  platformFee?: Maybe<Scalars['Float']>;
  platformFeeBasedOnCommission?: Maybe<Scalars['Float']>;
  platformFeeMinimumBasedOnSellingPrice?: Maybe<Scalars['Float']>;
  postDescription?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  propertyAddress?: Maybe<PropertyAddressInfoDto>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
  propertyPostForRentDto?: Maybe<PropertyPostForRentDto>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  sellerAndBuyerCommission?: Maybe<Scalars['Float']>;
  sellerInfo?: Maybe<SellerInfo>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  unitOfMeasure?: Maybe<Property_Posts_UnitOfMeasureInfoDto>;
};

export type PropertyPostForNotificationDto = {
  __typename?: 'PropertyPostForNotificationDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<PropertyPostForNotificationDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type PropertyPostForPublicDto = {
  __typename?: 'PropertyPostForPublicDto';
  addressId?: Maybe<Scalars['String']>;
  balconyDirection?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  commission?: Maybe<Scalars['Float']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  images?: Maybe<Scalars['String']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  lastModified?: Maybe<Scalars['Long']>;
  length?: Maybe<Scalars['Float']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  postDescription?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<PropertyAddressInfoDto>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusName?: Maybe<Scalars['String']>;
  propertyPostForRentDto?: Maybe<PropertyPostForRentDto>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  unitOfMeasure?: Maybe<Property_Posts_UnitOfMeasureInfoDto>;
  width?: Maybe<Scalars['Float']>;
};

/** A connection to a list of items. */
export type PropertyPostForPublicDtoConnection = {
  __typename?: 'PropertyPostForPublicDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<PropertyPostForPublicDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<PropertyPostForPublicDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PropertyPostForPublicDtoEdge = {
  __typename?: 'PropertyPostForPublicDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<PropertyPostForPublicDto>;
};

export type PropertyPostForPublicDtoFilter = {
  AND?: Maybe<Array<PropertyPostForPublicDtoFilter>>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forRent_gt?: Maybe<Scalars['Boolean']>;
  forRent_gte?: Maybe<Scalars['Boolean']>;
  forRent_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  forRent_lt?: Maybe<Scalars['Boolean']>;
  forRent_lte?: Maybe<Scalars['Boolean']>;
  forRent_not?: Maybe<Scalars['Boolean']>;
  forRent_not_gt?: Maybe<Scalars['Boolean']>;
  forRent_not_gte?: Maybe<Scalars['Boolean']>;
  forRent_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  forRent_not_lt?: Maybe<Scalars['Boolean']>;
  forRent_not_lte?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  forSale_gt?: Maybe<Scalars['Boolean']>;
  forSale_gte?: Maybe<Scalars['Boolean']>;
  forSale_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  forSale_lt?: Maybe<Scalars['Boolean']>;
  forSale_lte?: Maybe<Scalars['Boolean']>;
  forSale_not?: Maybe<Scalars['Boolean']>;
  forSale_not_gt?: Maybe<Scalars['Boolean']>;
  forSale_not_gte?: Maybe<Scalars['Boolean']>;
  forSale_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  forSale_not_lt?: Maybe<Scalars['Boolean']>;
  forSale_not_lte?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBathrooms_gt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_gte?: Maybe<Scalars['Int']>;
  numberOfBathrooms_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBathrooms_lt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_lte?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_gt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_gte?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBathrooms_not_lt?: Maybe<Scalars['Int']>;
  numberOfBathrooms_not_lte?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms_gt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_gte?: Maybe<Scalars['Int']>;
  numberOfBedrooms_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBedrooms_lt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_lte?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_gt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_gte?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  numberOfBedrooms_not_lt?: Maybe<Scalars['Int']>;
  numberOfBedrooms_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<PropertyPostForPublicDtoFilter>>;
  postTitle?: Maybe<Scalars['String']>;
  postTitle_contains?: Maybe<Scalars['String']>;
  postTitle_ends_with?: Maybe<Scalars['String']>;
  postTitle_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTitle_not?: Maybe<Scalars['String']>;
  postTitle_not_contains?: Maybe<Scalars['String']>;
  postTitle_not_ends_with?: Maybe<Scalars['String']>;
  postTitle_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTitle_not_starts_with?: Maybe<Scalars['String']>;
  postTitle_starts_with?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  postTypeId_contains?: Maybe<Scalars['String']>;
  postTypeId_ends_with?: Maybe<Scalars['String']>;
  postTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTypeId_not?: Maybe<Scalars['String']>;
  postTypeId_not_contains?: Maybe<Scalars['String']>;
  postTypeId_not_ends_with?: Maybe<Scalars['String']>;
  postTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postTypeId_not_starts_with?: Maybe<Scalars['String']>;
  postTypeId_starts_with?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  price_gt?: Maybe<Scalars['Float']>;
  price_gte?: Maybe<Scalars['Float']>;
  price_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  price_lt?: Maybe<Scalars['Float']>;
  price_lte?: Maybe<Scalars['Float']>;
  price_not?: Maybe<Scalars['Float']>;
  price_not_gt?: Maybe<Scalars['Float']>;
  price_not_gte?: Maybe<Scalars['Float']>;
  price_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  price_not_lt?: Maybe<Scalars['Float']>;
  price_not_lte?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  projectId_contains?: Maybe<Scalars['String']>;
  projectId_ends_with?: Maybe<Scalars['String']>;
  projectId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not?: Maybe<Scalars['String']>;
  projectId_not_contains?: Maybe<Scalars['String']>;
  projectId_not_ends_with?: Maybe<Scalars['String']>;
  projectId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectId_not_starts_with?: Maybe<Scalars['String']>;
  projectId_starts_with?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyCode_contains?: Maybe<Scalars['String']>;
  propertyCode_ends_with?: Maybe<Scalars['String']>;
  propertyCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not?: Maybe<Scalars['String']>;
  propertyCode_not_contains?: Maybe<Scalars['String']>;
  propertyCode_not_ends_with?: Maybe<Scalars['String']>;
  propertyCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyCode_not_starts_with?: Maybe<Scalars['String']>;
  propertyCode_starts_with?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyName_contains?: Maybe<Scalars['String']>;
  propertyName_ends_with?: Maybe<Scalars['String']>;
  propertyName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyName_not?: Maybe<Scalars['String']>;
  propertyName_not_contains?: Maybe<Scalars['String']>;
  propertyName_not_ends_with?: Maybe<Scalars['String']>;
  propertyName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyName_not_starts_with?: Maybe<Scalars['String']>;
  propertyName_starts_with?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostId_contains?: Maybe<Scalars['String']>;
  propertyPostId_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not?: Maybe<Scalars['String']>;
  propertyPostId_not_contains?: Maybe<Scalars['String']>;
  propertyPostId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostId_starts_with?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertySubTypeId_contains?: Maybe<Scalars['String']>;
  propertySubTypeId_ends_with?: Maybe<Scalars['String']>;
  propertySubTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertySubTypeId_not?: Maybe<Scalars['String']>;
  propertySubTypeId_not_contains?: Maybe<Scalars['String']>;
  propertySubTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertySubTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertySubTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertySubTypeId_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
};

export type PropertyPostForPublicDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  lastModified?: Maybe<SortOperationKind>;
  numberOfBathrooms?: Maybe<SortOperationKind>;
  numberOfBedrooms?: Maybe<SortOperationKind>;
  postTitle?: Maybe<SortOperationKind>;
  postTypeId?: Maybe<SortOperationKind>;
  price?: Maybe<SortOperationKind>;
  projectId?: Maybe<SortOperationKind>;
  propertyCode?: Maybe<SortOperationKind>;
  propertyName?: Maybe<SortOperationKind>;
  propertySubTypeId?: Maybe<SortOperationKind>;
  propertyTypeId?: Maybe<SortOperationKind>;
};

export type PropertyPostForRentDto = {
  __typename?: 'PropertyPostForRentDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<PropertyPostForRentDto>;
  detailPath?: Maybe<Scalars['String']>;
  isRented?: Maybe<Scalars['Boolean']>;
  propertyPostForRentId?: Maybe<Scalars['String']>;
  rentCommission?: Maybe<Scalars['Float']>;
  rentCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPrice?: Maybe<Scalars['Float']>;
};

export type PropertyPostForTransactionDto = {
  __typename?: 'PropertyPostForTransactionDto';
  ableConfirmDeposite?: Maybe<Scalars['Boolean']>;
  agentGroupIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentGroupInfos?: Maybe<Array<Maybe<AgentGroupInfo>>>;
  agentRankIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  agentRankInfos?: Maybe<Array<Maybe<AgentRankInfo>>>;
  assigned?: Maybe<Scalars['Boolean']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  bookingTransactionInfo?: Maybe<Property_Posts_DepositeDurationDto>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  commission?: Maybe<Scalars['Float']>;
  detailPath?: Maybe<Scalars['String']>;
  direction: Direction;
  expectedPrice?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  foSaleTrackingStatusDescription?: Maybe<Scalars['String']>;
  freeTextProject?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isBooked?: Maybe<Scalars['Boolean']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isDeposited?: Maybe<Scalars['Boolean']>;
  isFeatureProperty?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  length?: Maybe<Scalars['Float']>;
  minimumPayment?: Maybe<Scalars['Float']>;
  nearFacility?: Maybe<Scalars['String']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfBookingTransactions?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  postDescription?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  projectInfo?: Maybe<ProjectByPropertyPostDto>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertySubTypeDescription?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertySubTypeName?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonInfo?: Maybe<Property_Posts_SaleSeasonInfoDto>;
  saleTrackingStatusDescription?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  staffGroupIds?: Maybe<Scalars['String']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  width?: Maybe<Scalars['Float']>;
};

export type PropertyPostInfoDto = {
  __typename?: 'PropertyPostInfoDto';
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFeeAmount?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  capetAreas?: Maybe<Scalars['Float']>;
  clone?: Maybe<PropertyPostInfoDto>;
  commission?: Maybe<Scalars['Float']>;
  direction: Direction;
  expectedPrice?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  minimumPayment?: Maybe<Scalars['Float']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfBookingTransactions?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectInfo?: Maybe<ProjectInfoDto>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  saleSeasonInfo?: Maybe<SaleSeasonInfoDto>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  subTypeId?: Maybe<Scalars['String']>;
};

export type PropertyPostMutationResponse = {
  __typename?: 'PropertyPostMutationResponse';
  badWordListDto?: Maybe<Array<Maybe<CheckBadWordResult>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<PropertyPostDto>;
};

export type PropertyPostStatusDto = {
  __typename?: 'PropertyPostStatusDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  propertyPostStatusDescription?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertyPostStatusName?: Maybe<Scalars['String']>;
};

export type PropertyPostStatusDtoFilter = {
  AND?: Maybe<Array<PropertyPostStatusDtoFilter>>;
  OR?: Maybe<Array<PropertyPostStatusDtoFilter>>;
  propertyPostStatusName?: Maybe<Scalars['String']>;
  propertyPostStatusName_contains?: Maybe<Scalars['String']>;
  propertyPostStatusName_ends_with?: Maybe<Scalars['String']>;
  propertyPostStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostStatusName_not?: Maybe<Scalars['String']>;
  propertyPostStatusName_not_contains?: Maybe<Scalars['String']>;
  propertyPostStatusName_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostStatusName_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type PropertyPostStatusDtoSort = {
  propertyPostStatusName?: Maybe<SortOperationKind>;
};

export type PropertyPostStatusInfoDto = {
  __typename?: 'PropertyPostStatusInfoDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  propertyPostStatusDescription?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertyPostStatusName?: Maybe<Scalars['String']>;
};

export type PropertyPostSuggestionDto = {
  __typename?: 'PropertyPostSuggestionDto';
  approvalStatusName?: Maybe<Scalars['String']>;
  balconyDirection?: Maybe<Scalars['String']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  commission?: Maybe<Scalars['Float']>;
  contractStatus: PostContractStatus;
  createdByUserId?: Maybe<Scalars['String']>;
  detailPath?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  guaranteedPackageEndTime?: Maybe<Scalars['Long']>;
  images?: Maybe<Scalars['String']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  postDescription?: Maybe<Scalars['String']>;
  postServiceType: PostServiceType;
  postTitle?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  propertyAddress?: Maybe<PropertyAddressInfoDto>;
  propertyAddressCityId?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId?: Maybe<Scalars['Int']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostSuggestionCreatedDatetime?: Maybe<Scalars['Long']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  unitOfMeasure?: Maybe<Property_Posts_UnitOfMeasureInfoDto>;
};

/** A connection to a list of items. */
export type PropertyPostSuggestionDtoConnection = {
  __typename?: 'PropertyPostSuggestionDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<PropertyPostSuggestionDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<PropertyPostSuggestionDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type PropertyPostSuggestionDtoEdge = {
  __typename?: 'PropertyPostSuggestionDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<PropertyPostSuggestionDto>;
};

export type PropertyPostSuggestionDtoFilter = {
  AND?: Maybe<Array<PropertyPostSuggestionDtoFilter>>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  isFollowed_gt?: Maybe<Scalars['Boolean']>;
  isFollowed_gte?: Maybe<Scalars['Boolean']>;
  isFollowed_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isFollowed_lt?: Maybe<Scalars['Boolean']>;
  isFollowed_lte?: Maybe<Scalars['Boolean']>;
  isFollowed_not?: Maybe<Scalars['Boolean']>;
  isFollowed_not_gt?: Maybe<Scalars['Boolean']>;
  isFollowed_not_gte?: Maybe<Scalars['Boolean']>;
  isFollowed_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isFollowed_not_lt?: Maybe<Scalars['Boolean']>;
  isFollowed_not_lte?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<PropertyPostSuggestionDtoFilter>>;
  propertyAddressCityId?: Maybe<Scalars['Int']>;
  propertyAddressCityId_gt?: Maybe<Scalars['Int']>;
  propertyAddressCityId_gte?: Maybe<Scalars['Int']>;
  propertyAddressCityId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  propertyAddressCityId_lt?: Maybe<Scalars['Int']>;
  propertyAddressCityId_lte?: Maybe<Scalars['Int']>;
  propertyAddressCityId_not?: Maybe<Scalars['Int']>;
  propertyAddressCityId_not_gt?: Maybe<Scalars['Int']>;
  propertyAddressCityId_not_gte?: Maybe<Scalars['Int']>;
  propertyAddressCityId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  propertyAddressCityId_not_lt?: Maybe<Scalars['Int']>;
  propertyAddressCityId_not_lte?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_gt?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_gte?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  propertyAddressDistrictId_lt?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_lte?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_not?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_not_gt?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_not_gte?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  propertyAddressDistrictId_not_lt?: Maybe<Scalars['Int']>;
  propertyAddressDistrictId_not_lte?: Maybe<Scalars['Int']>;
};

export type PropertyPostSuggestionDtoSort = {
  contractStatus?: Maybe<SortOperationKind>;
  postServiceType?: Maybe<SortOperationKind>;
  propertyPostSuggestionCreatedDatetime?: Maybe<SortOperationKind>;
};

export type PropertyPostsBasketByBlockNameDto = {
  __typename?: 'PropertyPostsBasketByBlockNameDto';
  allTopenersCanViewProducts: Scalars['Boolean'];
  blockName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<PropertyPostsBasketByBlockNameDto>;
  propertyPosts?: Maybe<Array<Maybe<FloorInfo>>>;
  totalOfBookedPropertyPosts?: Maybe<Scalars['Int']>;
  totalOfEmptyPropertyPosts?: Maybe<Scalars['Int']>;
  totalOfPropertyPosts?: Maybe<Scalars['Int']>;
  totalOfSoldPropertyPosts?: Maybe<Scalars['Int']>;
};

export type PropertyPostsByBlockNameDto = {
  __typename?: 'PropertyPostsByBlockNameDto';
  allTopenersCanViewProducts: Scalars['Boolean'];
  blockName?: Maybe<Scalars['String']>;
  bookedPropertyPosts?: Maybe<Array<Maybe<FloorInfo>>>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<PropertyPostsByBlockNameDto>;
  emptyPropertyPosts?: Maybe<Array<Maybe<FloorInfo>>>;
  propertyPosts?: Maybe<Array<Maybe<FloorInfo>>>;
  soldPropertyPosts?: Maybe<Array<Maybe<FloorInfo>>>;
  totalOfBookedPropertyPosts?: Maybe<Scalars['Int']>;
  totalOfEmptyPropertyPosts?: Maybe<Scalars['Int']>;
  totalOfPropertyPosts?: Maybe<Scalars['Int']>;
  totalOfSoldPropertyPosts?: Maybe<Scalars['Int']>;
};

export type PropertyPostsForSearchDto = {
  __typename?: 'PropertyPostsForSearchDto';
  isFollowed?: Maybe<Scalars['Boolean']>;
  propertyPostId?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  totalSpam?: Maybe<Scalars['Long']>;
};

export type PropertySubTypeDto = {
  __typename?: 'PropertySubTypeDto';
  isActive: Scalars['Boolean'];
  propertySubTypeDescription?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertySubTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PropertySubTypeDtoFilter = {
  AND?: Maybe<Array<PropertySubTypeDtoFilter>>;
  OR?: Maybe<Array<PropertySubTypeDtoFilter>>;
  propertySubTypeName?: Maybe<Scalars['String']>;
  propertySubTypeName_contains?: Maybe<Scalars['String']>;
  propertySubTypeName_ends_with?: Maybe<Scalars['String']>;
  propertySubTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertySubTypeName_not?: Maybe<Scalars['String']>;
  propertySubTypeName_not_contains?: Maybe<Scalars['String']>;
  propertySubTypeName_not_ends_with?: Maybe<Scalars['String']>;
  propertySubTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertySubTypeName_not_starts_with?: Maybe<Scalars['String']>;
  propertySubTypeName_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeId_contains?: Maybe<Scalars['String']>;
  propertyTypeId_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not?: Maybe<Scalars['String']>;
  propertyTypeId_not_contains?: Maybe<Scalars['String']>;
  propertyTypeId_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeId_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeId_starts_with?: Maybe<Scalars['String']>;
};

export type PropertySubTypeDtoSort = {
  propertySubTypeName?: Maybe<SortOperationKind>;
};

export type PropertySubTypeInfoDto = {
  __typename?: 'PropertySubTypeInfoDto';
  isActive: Scalars['Boolean'];
  propertySubTypeDescription?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertySubTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PropertyTypeDto = {
  __typename?: 'PropertyTypeDto';
  isActive: Scalars['Boolean'];
  path?: Maybe<Scalars['String']>;
  postUsageFields?: Maybe<Scalars['String']>;
  projectUsageFields?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PropertyTypeDtoFilter = {
  AND?: Maybe<Array<PropertyTypeDtoFilter>>;
  OR?: Maybe<Array<PropertyTypeDtoFilter>>;
  postUsageFields?: Maybe<Scalars['String']>;
  postUsageFields_contains?: Maybe<Scalars['String']>;
  postUsageFields_ends_with?: Maybe<Scalars['String']>;
  postUsageFields_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postUsageFields_not?: Maybe<Scalars['String']>;
  postUsageFields_not_contains?: Maybe<Scalars['String']>;
  postUsageFields_not_ends_with?: Maybe<Scalars['String']>;
  postUsageFields_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  postUsageFields_not_starts_with?: Maybe<Scalars['String']>;
  postUsageFields_starts_with?: Maybe<Scalars['String']>;
  projectUsageFields?: Maybe<Scalars['String']>;
  projectUsageFields_contains?: Maybe<Scalars['String']>;
  projectUsageFields_ends_with?: Maybe<Scalars['String']>;
  projectUsageFields_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectUsageFields_not?: Maybe<Scalars['String']>;
  projectUsageFields_not_contains?: Maybe<Scalars['String']>;
  projectUsageFields_not_ends_with?: Maybe<Scalars['String']>;
  projectUsageFields_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  projectUsageFields_not_starts_with?: Maybe<Scalars['String']>;
  projectUsageFields_starts_with?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  propertyTypeName_contains?: Maybe<Scalars['String']>;
  propertyTypeName_ends_with?: Maybe<Scalars['String']>;
  propertyTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeName_not?: Maybe<Scalars['String']>;
  propertyTypeName_not_contains?: Maybe<Scalars['String']>;
  propertyTypeName_not_ends_with?: Maybe<Scalars['String']>;
  propertyTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyTypeName_not_starts_with?: Maybe<Scalars['String']>;
  propertyTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type PropertyTypeDtoSort = {
  postUsageFields?: Maybe<SortOperationKind>;
  projectUsageFields?: Maybe<SortOperationKind>;
  propertyTypeName?: Maybe<SortOperationKind>;
};

export type PropertyTypeInfoDto = {
  __typename?: 'PropertyTypeInfoDto';
  isActive: Scalars['Boolean'];
  path?: Maybe<Scalars['String']>;
  postUsageFields?: Maybe<Scalars['String']>;
  projectUsageFields?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type PullPropertyPostsResponse = {
  __typename?: 'PullPropertyPostsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  actionNotifications?: Maybe<OffsetPagingOfActionNotificationDto>;
  addressById?: Maybe<AddressDto>;
  addresses?: Maybe<OffsetPagingOfAddressDto>;
  addressTypeById?: Maybe<AddressTypeDto>;
  addressTypes?: Maybe<OffsetPagingOfAddressTypeDto>;
  agentById?: Maybe<AgentDto>;
  agentByIdForPublic?: Maybe<AgentForPublicDto>;
  agentContactById?: Maybe<AgentContactDto>;
  agentForTransaction?: Maybe<OffsetPagingOfAgentDto>;
  agentGroupById?: Maybe<AgentGroupDto>;
  agentGroupInfoById?: Maybe<AgentGroupInfoDto>;
  agentGroupMembersByAgentGroupId?: Maybe<OffsetPagingOfAgentDto>;
  agentGroupMembersKpiByAgentGroupId?: Maybe<OffsetPagingOfAgentWithKpiDto>;
  agentGroups?: Maybe<OffsetPagingOfAgentGroupDto>;
  agentGroupTrackingById?: Maybe<OffsetPagingOfAgentGroupTrackingDto>;
  agentGroupTrackingsById?: Maybe<Array<Maybe<AgentGroupTrackingDto>>>;
  agentPerformanceTrackingsByAgentIds?: Maybe<OffsetPagingOfAgentPerformanceTrackingDto>;
  agentRankingById?: Maybe<AgentRankingDto>;
  agentRankings?: Maybe<OffsetPagingOfAgentRankingDto>;
  agentRatingById?: Maybe<AgentRatingDto>;
  agentRatings?: Maybe<OffsetPagingOfAgentRatingDto>;
  agents?: Maybe<OffsetPagingOfAgentDto>;
  agentTypeById?: Maybe<AgentTypeDto>;
  agentTypes?: Maybe<Array<Maybe<AgentTypeDto>>>;
  allocationRuleDetailById: GetAllocationRuleDetailByIdResponse;
  allocationRulesByStaff?: Maybe<GetAllocationRulesByStaffResponse>;
  allocationRulesNotAssignStaff?: Maybe<OffsetPagingOfAllocationRulesNotAssignStaffDto>;
  allocationRuleSpecializeById?: Maybe<AllocationRuleSpecializeDto>;
  allocationRuleSpecializes?: Maybe<OffsetPagingOfAllocationRuleSpecializeDto>;
  allocationRuleTypeById?: Maybe<AllocationRuleTypeDto>;
  allocationRuleTypes?: Maybe<OffsetPagingOfAllocationRuleTypeDto>;
  allowUpdateCustomerByDepositContract?: Maybe<AllowUpdateCustomerByDepositContractResponse>;
  articleDetail?: Maybe<ArticleDto>;
  articlePage?: Maybe<ArticlePageDto>;
  autoSuggestionAgents: AutoSuggestionAgentResponse;
  autoSuggestionProject: AutoSuggestionProjectResponse;
  autoSuggestionPropertyPosts?: Maybe<AutoSuggestionPropertyPostResponse>;
  b2CPropertyPostById?: Maybe<PropertyPostDto>;
  b2CPropertyPosts?: Maybe<OffsetPagingOfPropertyPostDto>;
  b2cTransactionContractDetail?: Maybe<B2CTransactionContractDetailDto>;
  b2cTransactionContracts?: Maybe<OffsetPagingOfB2CTransactionContractInfoDto>;
  backOfficeRoleDetailById?: Maybe<GetBackOfficeRoleDetailByIdResponse>;
  backOfficeRolesByStaff?: Maybe<GetBackOfficeRolesByStaffResponse>;
  bankById?: Maybe<BankDto>;
  bankPaymentTransferInfoByTransId?: Maybe<GetBankPaymentTransferInfoByTransIdResponse>;
  banks?: Maybe<OffsetPagingOfBankDto>;
  bankTransferDetailsByTransactionId?: Maybe<OffsetPagingOfBankTransferDetailDto>;
  basicPages?: Maybe<Array<Maybe<BasicPageDto>>>;
  bestSellingAgentPage?: Maybe<Array<Maybe<StaticAgentDto>>>;
  bookingHistoriesByBuyerId?: Maybe<OffsetPagingOfTransactionsByBuyerIdDto>;
  bookingHistoriesByBuyerIdCursor?: Maybe<TransactionsByBuyerIdDtoConnection>;
  bookingStatus?: Maybe<OffsetPagingOfBookingStatusDto>;
  bookingStatusById?: Maybe<BookingStatusDto>;
  bookingTransactionByAgentId?: Maybe<Array<Maybe<GetBookingTransactionsByAgentIdDto>>>;
  bookingTransactionById?: Maybe<TransactionDetailDto>;
  bookingTransactionDetail?: Maybe<TransactionDetailDto>;
  bookingTransactionDetailForRating?: Maybe<TransactionDetailDto>;
  bookingTransactionsByPropertyPostId?: Maybe<OffsetPagingOfTransactionDetailDto>;
  bookingTransactionValidatePayment: GetTransactionValidatePaymentResponse;
  boStaffFullByUser?: Maybe<GetStaffFullByUserResponse>;
  c2cContactTrading?: Maybe<OffsetPagingOfC2CContactTradingDto>;
  c2cContactTradingByCode?: Maybe<C2CContactTradingByCodeResponse>;
  c2cContactTradingById?: Maybe<C2CContactTradingByIdResponse>;
  c2cContactTradingCreatedByAgent?: Maybe<OffsetPagingOfC2CContactTradingDto>;
  c2cContactTradingHistories?: Maybe<OffsetPagingOfC2CContactTradingHistoryDto>;
  c2cContactTradingProcessingTime?: Maybe<GetC2CContactTradingProcessingTimeResponse>;
  c2cContactTradingReceivedByAgent?: Maybe<OffsetPagingOfC2CContactTradingDto>;
  c2cContactTradingRequesterEmailInfo?: Maybe<C2CContactTradingRequesterEmailInfoDto>;
  c2cContactTradingRequesterPhoneInfo?: Maybe<C2CContactTradingRequesterPhoneInfoDto>;
  c2cContactTradingTotalCountPerStatusV2?: Maybe<Array<Maybe<TotalCountPerStatusDto>>>;
  c2cNegotiationContactTradingHistories?: Maybe<OffsetPagingOfC2CContactTradingHistoryDto>;
  c2CPostRatingByPostId?: Maybe<OffsetPagingOfC2CPostRatingDto>;
  c2CPropertyPostCommissionConfigs?: Maybe<OffsetPagingOfC2CPropertyPostCommissionConfigDto>;
  c2CPropertyPostCommissionTPLConfigByDate?: Maybe<C2CPropertyPostCommissionTplConfigByDateResponse>;
  c2cPropertyPostGuaranteedPackageInfo?: Maybe<C2CPropertyPostGuaranteedPackageDto>;
  c2cPropertyPostUpdateHistoriesById?: Maybe<GetCToCPropertyPostAuditHistoriesByIdResponse>;
  c2cPropertyPostUpdateHistoriesByPropertyPostId?: Maybe<OffsetPagingOfCToCPropertyPostAuditHistoryDto>;
  checkAnyInProgressContactTradingInGroup: CheckAnyInProgressContactTradingInGroupResponse;
  checkB2CDepositCanUpdateCustomerInfo?: Maybe<CheckB2CDepositCanUpdateCustomerInfoResponse>;
  checkBookingTransactionIsRated: Scalars['Boolean'];
  checkContactTradingB2CNotification: CheckContactTradingB2CNotificationResponse;
  checkContactTradingById?: Maybe<CheckContactTradingByIdResponse>;
  checkContactTradingRequestIsRated: Scalars['Boolean'];
  checkCurrentUserInAgentAssignedBySaleSeasonId: CheckCurrentUserInAgentAssignedBySaleSeasonIdResponse;
  checkCurrentUserIsSaleAgent: CheckCurrentUserIsSaleAgentResponse;
  checkExistingReportByPostId: Scalars['Boolean'];
  checkFollowTopenersByCurrentUserForFrontOffice?: Maybe<CheckFollowTopenersByCurrentUserForFrontOfficeResponse>;
  checkLockPropertyPostForDeposite?: Maybe<CheckLockPropertyPostForDepositResponse>;
  checkLoggedInUserIsSaleAgent: CheckLoggedInUserIsSaleAgentResponse;
  checkMobileAppVersionStable: CheckMobileAppVersionStableResponse;
  checkPropertyPostAvailableForBookingBySeasonId: CheckPropertyPostAvailableForBookingBySeasonIdResponse;
  checkPropertyPostHasC2CContactTradingDeposited?: Maybe<CheckPropertyPostHasC2CContactTradingDepositedResponse>;
  checkPropertyPostHasContactTradingDeposited?: Maybe<CheckPropertyPostHasContactTradingDepositedResponse>;
  checkPropertyPostLockedForBookingBySeasonId: CheckPropertyPostLockedForBookingBySeasonIdResponse;
  checkPropertyPostUpdateC2CContactTradingStatus?: Maybe<CheckPropertyPostUpdateC2CContactTradingStatusResponse>;
  checkPropertyPostUpdateContactTradingStatus?: Maybe<CheckPropertyPostUpdateContactTradingStatusResponse>;
  checkStaffIsLeaderBySupportRequestId: Scalars['Boolean'];
  checkUsernameValid: CheckUsernameValidResponse;
  cities?: Maybe<OffsetPagingOfCityDto>;
  cityById?: Maybe<CityDto>;
  commentApproveReasons?: Maybe<OffsetPagingOfCommentApproveReasonDto>;
  commentRejectReasons?: Maybe<OffsetPagingOfCommentRejectReasonDto>;
  commentStatuses?: Maybe<OffsetPagingOfCommentStatusDto>;
  competencies?: Maybe<OffsetPagingOfCompetencyDto>;
  competencyById?: Maybe<CompetencyDto>;
  consultantsSuggestionC2C?: Maybe<OffsetPagingOfStaffDto>;
  consultantsSupportedC2C?: Maybe<OffsetPagingOfStaffDto>;
  consultantStaffsWithDeleted?: Maybe<Array<Maybe<StaffDto>>>;
  contactTrading?: Maybe<OffsetPagingOfContactTradingDto>;
  contactTradingAssignmentStatus?: Maybe<OffsetPagingOfContactTradingAssignmentStatusDto>;
  contactTradingAssignmentStatusById?: Maybe<ContactTradingAssignmentStatusDto>;
  contactTradingB2CAssigneeByCurrentUser?: Maybe<OffsetPagingOfContactTradingB2CAssigneeCurrentUserDto>;
  contactTradingB2CCreatedByCurrentUser?: Maybe<OffsetPagingOfContactTradingB2CCreatedByCurrentUserDto>;
  contactTradingB2CForBO?: Maybe<OffsetPagingOfContactTradingB2CDetailDto>;
  contactTradingB2CStatuses?: Maybe<OffsetPagingOfContactTradingB2CStatusDto>;
  contactTradingByAssigneeId?: Maybe<OffsetPagingOfContactTradingDto>;
  contactTradingByCode?: Maybe<ContactTradingByCodeResponse>;
  contactTradingById?: Maybe<ContactTradingByIdResponse>;
  contactTradingConsultantInfo?: Maybe<ContactTradingConsultantInfoDto>;
  contactTradingCreatedByAgent?: Maybe<OffsetPagingOfContactTradingDto>;
  contactTradingHistories?: Maybe<OffsetPagingOfContactTradingHistoryDto>;
  contactTradingHistoryInfo?: Maybe<ContactTradingHistoryDto>;
  contactTradingProcessingTime?: Maybe<GetContactTradingProcessingTimeResponse>;
  contactTradingRatingById?: Maybe<ContactTradingRatingDto>;
  contactTradingRatingInfo?: Maybe<ContactTradingRatingDto>;
  contactTradingReceivedByAgent?: Maybe<OffsetPagingOfContactTradingDto>;
  contactTradingRelevantPropertyStatus?: Maybe<OffsetPagingOfContactTradingRelevantPropertyStatusDto>;
  contactTradingRelevantPropertyStatusById?: Maybe<ContactTradingRelevantPropertyStatusDto>;
  contactTradingRequesterEmailInfo?: Maybe<ContactTradingRequesterEmailInfoDto>;
  contactTradingRequesterLastContact?: Maybe<ContactTradingRequesterLastContact>;
  contactTradingRequesterPhoneInfo?: Maybe<ContactTradingRequesterPhoneInfoDto>;
  contactTradingStatus?: Maybe<OffsetPagingOfContactTradingStatusDto>;
  contactTradingStatusById?: Maybe<ContactTradingStatusDto>;
  contactTradingTotalCountPerStatus?: Maybe<Array<Maybe<TotalCountPerStatusDto>>>;
  contactTradingTotalCountPerStatusV2?: Maybe<Array<Maybe<TotalCountPerStatusDto>>>;
  contractStatus?: Maybe<OffsetPagingOfContractStatusDto>;
  countries?: Maybe<OffsetPagingOfCountryDto>;
  countryById?: Maybe<CountryDto>;
  crawlerProcesses?: Maybe<OffsetPagingOfCrawlerProcessDto>;
  crawlerProcessesForTopener?: Maybe<OffsetPagingOfCrawlerProcessDto>;
  crawlerTrackingStatus?: Maybe<OffsetPagingOfCrawlerTrackingStatusDto>;
  curAgentForTransaction?: Maybe<OffsetPagingOfAgentDto>;
  curCommentsByObjectIdForFrontOffice?: Maybe<CommentForFrontOfficeDtoConnection>;
  curProjectsAssignedToAgentForPublic?: Maybe<ProjectForPublicDtoConnection>;
  curProjectSuggestions?: Maybe<ProjectSuggestionDtoConnection>;
  curProjectWithPropertyPosts?: Maybe<ProjectWithPropertyPostDtoConnection>;
  curProjectWithPropertyPostsByFollowerId?: Maybe<ProjectWithPropertyPostDtoConnection>;
  curProjectWithPropertyPostsByUserId?: Maybe<ProjectWithPropertyPostDtoConnection>;
  curPropertyPosts?: Maybe<PropertyPostDtoConnection>;
  curPropertyPostsByAgentIdForPublic?: Maybe<PropertyPostForPublicDtoConnection>;
  curPropertyPostsByCityId?: Maybe<PropertyPostDtoConnection>;
  curPropertyPostsByCurrentUser?: Maybe<PropertyPostDtoConnection>;
  curPropertyPostsByDistrictId?: Maybe<PropertyPostDtoConnection>;
  curPropertyPostsByFollowerId?: Maybe<PropertyPostDtoConnection>;
  curPropertyPostSuggestions?: Maybe<PropertyPostSuggestionDtoConnection>;
  currentBookingTransaction?: Maybe<GetCurrentBookingTransactionResponse>;
  currentDepositTransaction?: Maybe<GetCurrentDepositTransactionResponse>;
  curRepliesByCommentIdForFrontOffice?: Maybe<ReplyForFrontOfficeDtoConnection>;
  curTransactionsByBuyerIdAdvanced?: Maybe<TransactionsByBuyerIdDtoConnection>;
  customerById?: Maybe<CustomerDto>;
  customers?: Maybe<OffsetPagingOfCustomerDto>;
  defaultAgentGroup?: Maybe<AgentGroupDto>;
  departmentById?: Maybe<DepartmentDto>;
  departments?: Maybe<OffsetPagingOfDepartmentDto>;
  depositeDurationByBookingTransactionId?: Maybe<DepositeDurationDto>;
  depositeStatus?: Maybe<OffsetPagingOfDepositeStatusDto>;
  depositeStatusById?: Maybe<DepositeStatusDto>;
  depositeTransactionById?: Maybe<TransactionDetailDto>;
  depositeTransactionDetailForRating?: Maybe<TransactionDetailDto>;
  depositeTransactionsByPropertyPostId?: Maybe<OffsetPagingOfTransactionDetailDto>;
  depositeTransactionValidatePayment: GetTransactionValidatePaymentResponse;
  depositHistoriesByBuyerId?: Maybe<OffsetPagingOfTransactionsByBuyerIdDto>;
  depositHistoriesByBuyerIdCursor?: Maybe<TransactionsByBuyerIdDtoConnection>;
  depositTransactionDetail?: Maybe<TransactionDetailDto>;
  detailtDocumentTemplate?: Maybe<DocumentTemplateDto>;
  districtById?: Maybe<DistrictDto>;
  districts?: Maybe<OffsetPagingOfDistrictDto>;
  documentAttributes?: Maybe<OffsetPagingOfDocumentAttributeDto>;
  documentAttributeTypes?: Maybe<OffsetPagingOfDocumentAttributeTypeDto>;
  documentTemplates?: Maybe<OffsetPagingOfDocumentTemplateDto>;
  documentTypes?: Maybe<OffsetPagingOfDocumentTypeDto>;
  estateTypeOfInterestById?: Maybe<EstateTypeOfInterestDto>;
  estateTypeOfInterests?: Maybe<OffsetPagingOfEstateTypeOfInterestDto>;
  eWalletTypeById?: Maybe<EWalletTypeDto>;
  eWalletTypes?: Maybe<OffsetPagingOfEWalletTypeDto>;
  exportBookingTransactionsBySeasonId?: Maybe<OffsetPagingOfExportBookingTransactionsBySeasonIdDto>;
  fastPaymentTransferInfoByTransId?: Maybe<GetFastPaymentTransferInfoByTransIdResponse>;
  feedObjectTypes?: Maybe<OffsetPagingOfFeedObjectTypeDto>;
  foProjectById?: Maybe<FoProjectDto>;
  formFintech?: Maybe<FormFintechResponse>;
  fundAccountById?: Maybe<FundAccountDto>;
  fundAccounts?: Maybe<OffsetPagingOfFundAccountDto>;
  getActiveAgentSubscriptionPackageByCurrentUser?: Maybe<GetActiveAgentSubscriptionPackageByCurrentUserResponse>;
  getActiveAgentSubscriptionPackageByUserId?: Maybe<GetActiveAgentSubscriptionPackageByUserIdResponse>;
  getActiveAgentSubscriptionPackageForAllUsers?: Maybe<OffsetPagingOfActiveAgentSubscriptionPackageForAllUsersDto>;
  GetAgentByPhoneNumber?: Maybe<AgentDto>;
  getAgentLastSubscriptionPackageByCurrentUser?: Maybe<GetAgentLastSubscriptionPackageResponse>;
  getAgentLastSubscriptionPackageByUserId?: Maybe<GetAgentLastSubscriptionPackageResponse>;
  getAgentRankingByIds?: Maybe<GetAgentRankingByIdsResponse>;
  getAgentSubscriptionTransactionValidatePayment: GetAgentSubscriptionTransactionValidatePaymentResponse;
  getAllAgentSubscriptionPackageByUserId?: Maybe<OffsetPagingOfAgentSubscriptionPackageDto>;
  getAllArticles?: Maybe<ArticlePageDto>;
  getAllocationRules?: Maybe<OffsetPagingOfAllocationRuleDto>;
  getAllSubscriptionPackage?: Maybe<GetAllSubscriptionPackageResponse>;
  GetApplicationRoles?: Maybe<GetApplicationRolesResponse>;
  getApprovalUserProfilePhotos?: Maybe<OffsetPagingOfUserProfilePhotoDto>;
  getB2C2CProjectDetailByIdBO: GetB2C2CProjectDetailByIdBoResponse;
  getB2C2CProjectDetailByIdFo: GetB2C2CProjectDetailByIdFoResponse;
  getB2C2CProjectsFo?: Maybe<OffsetPagingOfB2C2CProjectDto>;
  getB2CContractCommissionPlatformLogs?: Maybe<Array<Maybe<ContractCommissionPlatformLogDto>>>;
  getB2CProjectsHomePage: GetB2CProjectsHomePageResponse;
  getBackOfficeRoles?: Maybe<OffsetPagingOfBackOfficeRoleDto>;
  GetBackOfficeUserProfile?: Maybe<GetBackOfficeProfileForUserResponse>;
  getBlockFloorBySaleSeasonId: GetBlockFloorPlanByBySaleSeasonIdResponse;
  getBlockFloorPlanById?: Maybe<BlockFloorPlanDto>;
  getBlockFloorPlansByProjectId?: Maybe<OffsetPagingOfBlockFloorPlanDto>;
  getBookingTransactionsToAssignConsultant?: Maybe<OffsetPagingOfBookingTransactionToAssignConsultantDto>;
  getBuyerInfoByCurrentUserForTransaction?: Maybe<GetBuyerInfoByCurrentUserForTransactionResponse>;
  getC2CContactTradingByCountStatuses?: Maybe<Array<Maybe<TotalCountPerStatusDto>>>;
  getC2CContactTradingInfoForPropertyPost?: Maybe<OffsetPagingOfC2CContactTradingInfoForPropertyPostDto>;
  getC2CContactTradingsByC2CDemandId?: Maybe<OffsetPagingOfC2CDemandContactTradingDto>;
  getC2CContractCommissionPlatformLogs?: Maybe<Array<Maybe<ContractCommissionPlatformLogDto>>>;
  getC2CDepositRejectReasons?: Maybe<OffsetPagingOfC2CDepositRejectReasonDto>;
  getC2CNegotiationRejectReasons?: Maybe<OffsetPagingOfC2CNegotiationRejectReasonDto>;
  getC2CPanoramaTutorialConfigByCurrentUser: Scalars['Boolean'];
  getC2CPropertyPostByCodeForFrontOfficePrivate: GetC2CPropertyPostByCodeForFrontOfficePrivateResponse;
  getC2CPropertyPostByCodeForFrontOfficePublic: GetC2CPropertyPostByCodeForFrontOfficePublicResponse;
  getC2CPropertyPostByIdPublicLastVersionBO: GetC2CPropertyPostByIdLastPublicVersionResponse;
  getC2CPropertyPostByIdPublicLastVersionFO: GetC2CPropertyPostByIdLastPublicVersionResponse;
  getC2CPropertyPostPanoramas?: Maybe<OffsetPagingOfC2CPanoramaImageDto>;
  getC2CPropertyPostRejectReasons?: Maybe<OffsetPagingOfC2CPropertyPostRejectReasonDto>;
  getC2CPropertyPostsHomePage: GetC2CPropertyPostsHomePageResponse;
  getC2CPropertyPostsViewedByCurrentUserFO?: Maybe<OffsetPagingOfC2CPropertyPostViewedDto>;
  getC2CPropertyPostViewedByIdsForFO: GetC2CPropertyPostViewedByIdsForFoResponse;
  getC2CSimilarPosts: GetC2CSimilarPostsResponse;
  getCommentByIdForBackOffice?: Maybe<GetCommentByIdForBackOfficeResponse>;
  getCommentsForBackOffice?: Maybe<OffsetPagingOfCommentForBackOfficeDto>;
  getConsultantsByStaffGroupId?: Maybe<OffsetPagingOfStaffDto>;
  getConsultantsForC2CTransaction?: Maybe<OffsetPagingOfStaffDto>;
  getConsultantsForC2CTransactionCursor?: Maybe<StaffDtoConnection>;
  getConsultantsForTransaction?: Maybe<OffsetPagingOfStaffDto>;
  getConsultantsForTransactionCursor?: Maybe<StaffDtoConnection>;
  getConsultantStaffGroupsEligibleForB2C?: Maybe<OffsetPagingOfStaffGroupDto>;
  getConsultantsToAssignTransactionsBo?: Maybe<OffsetPagingOfStaffDto>;
  getConsultantSupportForC2CPostFO: GetConsultantSupportForC2CPostFoResponse;
  getContactTradingB2CByNotification: GetContactTradingB2CByNotificationResponse;
  getContactTradingB2CDetailById: ContactTradingB2CDetailResponse;
  getContactTradingB2CDetailForBOById: GetContactTradingB2CDetailForBoResponse;
  getContactTradingInfoForPropertyPost?: Maybe<OffsetPagingOfContactTradingInfoForPropertyPostDto>;
  getContactTradingRejectReasons?: Maybe<OffsetPagingOfContactTradingRejectReasonDto>;
  getContactTradingsForC2CDemand?: Maybe<OffsetPagingOfContactTradingForC2CDemandDto>;
  getContractExtendedHistories?: Maybe<Array<Maybe<ContractExtendedHistoryDto>>>;
  getContractHistories?: Maybe<Array<Maybe<ContractHistoryDto>>>;
  getCrawlerRefuseReasons?: Maybe<OffsetPagingOfCrawlerRefuseReasonDto>;
  getCurrentTopener?: Maybe<GetCurrentTopenerResponse>;
  getCustomerInfoChangeHistoriesForBO?: Maybe<OffsetPagingOfCustomerInfoChangeHistoryDto>;
  getCustomerInfoChangeHistoriesForFO?: Maybe<OffsetPagingOfCustomerInfoChangeHistoryDto>;
  getCustomerInfoChangeHistoryByIdForBO?: Maybe<GetCustomerInfoChangeHistoryByIdResponse>;
  getCustomerInfoChangeHistoryByIdForFO?: Maybe<GetCustomerInfoChangeHistoryByIdResponse>;
  GetDefaultPermissions?: Maybe<GetDefaultPermissionsResponse>;
  GetDepositTransactionsToAssignConsultant?: Maybe<OffsetPagingOfDepositeTransactionToAssignConsultantDto>;
  getDetailPanoramaByCodeForBO: GetPanoramaByCodeForBoResponse;
  getDiscountInfoByContract?: Maybe<GetDiscountInfoByContractResponse>;
  getDiscountInfoByDeposit?: Maybe<GetDiscountInfoByDepositResponse>;
  getDiscountInfoForFoByDeposit?: Maybe<GetDiscountInfoByDepositResponse>;
  getEmailNotificationTemplateById: GetEmailNotificationTemplateByIdResponse;
  getEmailNotificationTemplates?: Maybe<OffsetPagingOfEmailNotificationTemplateDto>;
  getEmailTemplateSetting: GetEmailTemplateSettingResponse;
  getFoC2CPropertyPostDetailPathByPostId: GetFoC2CPropertyPostDetailPathByPostIdResponse;
  getFoC2CPropertyPostForRentByCode: GetFoC2CPropertyPostForRentByCodeResponse;
  getFoC2CPropertyPostForSaleByCode: GetFoC2CPropertyPostForSaleByCodeResponse;
  getFoC2CPropertyPostRequestUpdateReason: GetFoC2CPropertyPostRequestUpdateReasonResponse;
  getFoC2CPropertyPostsForRentHomePage: GetFoC2CPropertyPostsForRentHomePageResponse;
  getFoC2CPropertyPostsHomePageV1: GetFoC2CPropertyPostsHomePageV1Response;
  getFOInvestorByCode?: Maybe<GetFoInvestorResponse>;
  getFOInvestorById?: Maybe<GetFoInvestorResponse>;
  getFollowerFeedItemsForBackOffice?: Maybe<OffsetPagingOfFollowerFeedItemForBackOfficeDto>;
  getFollowTopenersForFrontOffice?: Maybe<OffsetPagingOfGetFollowTopenerForFrontOfficeDto>;
  getFoProjectByCodeForSearch: GetFoProjectByCodeForSearchResponse;
  getFoProjectDetailPathByProjectId: GetFoProjectDetailPathByProjectIdResponse;
  getFoProjectsHomePageV1: GetFoProjectsHomePageV1Response;
  getFOProjectsOfInvestorById: GetFoProjectsOfInvestorResponse;
  getFOTopenerByCodeForSearch: GetFoTopenerByCodeForSearchResponse;
  getHierarchicalStaffGroupsForC2C?: Maybe<OffsetPagingOfStaffGroupDto>;
  getHistorySupportServiceConfigurationById?: Maybe<SupportServiceConfigurationHistoryDto>;
  getHistoryTopenerServiceConfigurationById?: Maybe<SupportServiceConfigurationHistoryDto>;
  getImageUploadUrl: GetImageUploadUrlResponse;
  getImageVersion: GetVersionResponse;
  getInvestorById?: Maybe<GetInvestorResponse>;
  getMemberInfoStringeeByPhoneBO?: Maybe<GetMemberInfoStringeeByPhoneResponse>;
  getPanoramaByCode: GetPanoramaByCodeResponse;
  getPanoramaByPropertyPostId: GetPanoramaByPropertyPostIdResponse;
  getProfilePhotoApprovalStatus?: Maybe<OffsetPagingOfProfilePhotoApprovalStatusDto>;
  getProfilePhotoRejectReason?: Maybe<OffsetPagingOfProfilePhotoRejectReasonDto>;
  getProjectAssigneeForContactTradingB2C?: Maybe<OffsetPagingOfSimpleProjectInfoDto>;
  getProjectItemsByProjectId?: Maybe<GetProjectItemsByProjectIdResponse>;
  getProjectsAdditionalForSearch?: Maybe<OffsetPagingOfProjectsForSearchDto>;
  getProjectsCI: GetProjectsCiResponse;
  getProjectsViewedByCurrentUserFO?: Maybe<OffsetPagingOfProjectInfoDto>;
  getPropertyPostApprovalStatusByPropertyPostIds?: Maybe<GetPropertyPostApprovalStatusByPropertyPostIdsResponse>;
  getPropertyPostDetailByConsultantForBackOffice?: Maybe<PropertyPostDto>;
  getPropertyPostsAdditionalForSearch?: Maybe<OffsetPagingOfPropertyPostsForSearchDto>;
  getPushNotificationForContactTradingB2C: GetPushNotificationForContactTradingB2CResponse;
  getReceivedServiceTicketsByCurrentUserForFrontOffice?: Maybe<OffsetPagingOfReceivedServiceTicketForFrontOfficeDto>;
  getSaleSeasonBlocksAndFloors?: Maybe<SaleSeasonBlockFloorInfo>;
  getSaleSeasonStatsBookingAndDepositPhaseBo: GetSaleSeasonStatsBookingAndDepositPhaseResponse;
  getSearchTerms?: Maybe<OffsetPagingOfSearchTermDto>;
  getSecuredFileUploadUrl: GetSecuredFileUploadUrlResponse;
  getSecuredFileUrl: GetSecuredFileUrlResponse;
  getSentServiceTicketsByCurrentUserForFrontOffice?: Maybe<OffsetPagingOfSentServiceTicketForFrontOfficeDto>;
  getServiceTicketByIdForFrontOffice?: Maybe<GetServiceTicketByIdForFrontOfficeResponse>;
  getServiceTicketResultByIdForFrontOffice?: Maybe<GetServiceTicketResultByIdForFrontOfficeResponse>;
  getSimilarProjectsForFO?: Maybe<OffsetPagingOfSimilarProjectInfoDto>;
  getSimpleSupportServiceTicketById?: Maybe<GetSimpleSupportServiceTicketByIdResponse>;
  GetStaffGroupsById: GetStaffGroupsByIdResponse;
  getStaffsBackOffice?: Maybe<OffsetPagingOfStaffForBackOfficeDto>;
  getStaffsOfStaffGroup?: Maybe<OffsetPagingOfStaffsOfStaffGroupDto>;
  getStatisticPropertyPostsBySaleSeason?: Maybe<StatisticPropertyPostsBySaleSeasonResult>;
  getStringeeXAccounts: GetStringeeXAccountsResponse;
  getStringeeXCallHistories: GetStringeeXCallHistoriesResponse;
  getStringeeXChatConversation: GetStringeeXChatConversationResponse;
  getStringeeXChatConversations: GetStringeeXChatConversationsResponse;
  getStringeeXCompanies: GetStringeeXCompaniesResponse;
  getStringeeXContacts: GetStringeeXContactsResponse;
  getStringeeXNumberList: GetStringeeXNumberListResponse;
  getStringeeXPccAgents: GetStringeeXPccAgentsResponse;
  getStringeeXPccGroups: GetStringeeXPccGroupsResponse;
  getStringeeXPccNumbers: GetStringeeXPccNumbersResponse;
  getStringeeXQueues: GetStringeeXQueuesResponse;
  getStringeeXTickets: GetStringeeXTicketsResponse;
  getSubscriptionNotificationConfig?: Maybe<GetSubscriptionNotificationConfigResponse>;
  getSubscriptionPackageById?: Maybe<GetSubscriptionPackageByIdResponse>;
  getSummaryNotificationByCurrentUser?: Maybe<GetSummaryNotificationByCurrentUserResponse>;
  getSupportRequestClosingReasonById?: Maybe<SupportRequestClosingReasonDto>;
  getSupportRequestClosingReasons?: Maybe<OffsetPagingOfSupportRequestClosingReasonDto>;
  getSupportRequestsByRequesterUserId?: Maybe<OffsetPagingOfSupportRequestInfoDto>;
  getSupportServiceConfiguration?: Maybe<Array<Maybe<SupportServiceConfigurationDto>>>;
  getSupportServiceConfigurationById?: Maybe<SupportServiceConfigurationDto>;
  getSupportServiceTicketDetail?: Maybe<GetSupportServiceTicketDetailResponse>;
  getSupportServiceTicketProcessingHistories?: Maybe<OffsetPagingOfSupportServiceTicketProcessingDto>;
  getSupportServiceTicketsByPropertyPostId?: Maybe<OffsetPagingOfSupportServiceTicketDto>;
  getSupportServiceTypeById?: Maybe<GetSupportServiceTypeByIdResponse>;
  getSupportServiceTypesForFrontOffice?: Maybe<GetSupportServiceTypesResponse>;
  getTopenerBankAccountsByCurrentUserFO?: Maybe<OffsetPagingOfTopenerBankAccountDto>;
  getTopenerProfileByCurrentUserFO: GetTopenerProfileByCurrentUserFoResponse;
  getTopenersAvailable?: Maybe<OffsetPagingOfTopenerDto>;
  getTopenersByCurrentUserForFrontOffice?: Maybe<OffsetPagingOfGetTopenersByCurrentUserDto>;
  getTopenerServiceConfiguration?: Maybe<Array<Maybe<SupportServiceConfigurationDto>>>;
  getTopenerServiceConfigurationById?: Maybe<SupportServiceConfigurationDto>;
  getTopenersRecentlySupportTicket?: Maybe<OffsetPagingOfTopenerDto>;
  getTopenersSuggestion?: Maybe<OffsetPagingOfTopenerDto>;
  getTopenersViewedByCurrentUserFO?: Maybe<OffsetPagingOfAgentDto>;
  getTopVibrantAreaForHomePage?: Maybe<GetTopVibrantAreaForHomePageResponse>;
  getTotalAccountsPerSubscriptionPackage?: Maybe<GetTotalAccountsPerSubscriptionPackageResponse>;
  getTotalB2CTransactionContract?: Maybe<GetTotalB2CTransactionContractResponse>;
  getTotalFollowerByFeedObjectIdForFrontOffice?: Maybe<GetTotalFollowerByFeedObjectIdForFrontOfficeResponse>;
  getUserByIdBackOffice: GetUserByIdBackOfficeResponse;
  getUserC2CDemands?: Maybe<OffsetPagingOfC2CDemandDto>;
  getUserFollowOnPostsByPropertyPostIds: GetUserFollowOnPostsByPropertyPostIdsResponse;
  getUserFollowOnProjectsByProjectIds: GetUserFollowOnProjectsByProjectIdsResponse;
  GetUserInfoByPhoneNumber?: Maybe<GetUserInfoByPhoneNumberResponse>;
  getUsers?: Maybe<OffsetPagingOfUserDto>;
  getUsersForMessenger: GetUsersForMessengerResponse;
  guaranteedPackages?: Maybe<OffsetPagingOfGuaranteedPackageDto>;
  guestById?: Maybe<GuestDto>;
  guests?: Maybe<OffsetPagingOfGuestDto>;
  haveContactTradingB2CByPropertyPostId: HaveContactTradingB2CByPropertyPostIdResponse;
  imageSizes?: Maybe<OffsetPagingOfImageSizeDto>;
  internalFacilities?: Maybe<OffsetPagingOfInternalFacilityDto>;
  internationalCardTypeById?: Maybe<InternationalCardTypeDto>;
  internationalCardTypes?: Maybe<OffsetPagingOfInternationalCardTypeDto>;
  introductionPage?: Maybe<IntroductionPageDto>;
  investors?: Maybe<Array<Maybe<InvestorDto>>>;
  inviteInfo?: Maybe<GenerateInviteResponse>;
  inviteStatusById?: Maybe<InviteStatusDto>;
  inviteStatuses?: Maybe<Array<Maybe<InviteStatusDto>>>;
  inviteUserActive?: Maybe<OffsetPagingOfSimpleUserInfoDto>;
  IsAdminOrConsultantLeader: Scalars['Boolean'];
  IsAdminOrCustomerServiceLeader: Scalars['Boolean'];
  languageById?: Maybe<LanguageDto>;
  languages?: Maybe<OffsetPagingOfLanguageDto>;
  latestAgentPage?: Maybe<Array<Maybe<StaticAgentDto>>>;
  legalInfoById?: Maybe<LegalInfoDto>;
  legalInfoes?: Maybe<OffsetPagingOfLegalInfoDto>;
  limitPostApproved?: Maybe<GetLimitPostApprovedResponse>;
  limitPostSettings?: Maybe<OffsetPagingOfLimitPostSettingDto>;
  maxFavoritePropertyPostNumber?: Maybe<GetMaxFavoritePropertyPostNumberResponse>;
  mobileAppVersionById?: Maybe<MobileAppVersionDto>;
  mobileAppVersions?: Maybe<OffsetPagingOfMobileAppVersionDto>;
  nearFacilities?: Maybe<OffsetPagingOfNearFacilityDto>;
  newlyUpdatedNewsPage?: Maybe<NewlyUpdatedNewsPageDto>;
  notificationsByUserId?: Maybe<OffsetPagingOfNotificationDto>;
  organizationById?: Maybe<OrganizationDto>;
  organizations?: Maybe<OffsetPagingOfOrganizationDto>;
  panoramaImageApprovalStatuses?: Maybe<OffsetPagingOfPanoramaImageApprovalStatusDto>;
  panoramaRequestUpdateReasons?: Maybe<OffsetPagingOfPanoramaRequestUpdateReasonDto>;
  panoramaScenes?: Maybe<OffsetPagingOfPanoramaSceneDto>;
  panoramaTutorials?: Maybe<OffsetPagingOfPanoramaTutorialDto>;
  paymentConfigNotes?: Maybe<OffsetPagingOfPaymentConfigNotesDto>;
  paymentMethodById?: Maybe<PaymentMethodDto>;
  paymentMethods?: Maybe<OffsetPagingOfPaymentMethodDto>;
  paymentStatusById?: Maybe<PaymentStatusDto>;
  paymentStatuses?: Maybe<OffsetPagingOfPaymentStatusDto>;
  paymentTransactionById?: Maybe<GetPaymentTransactionByIdResponse>;
  paymentUnits?: Maybe<OffsetPagingOfPaymentUnitDto>;
  pendingReasonById?: Maybe<PendingReasonDto>;
  pendingReasons?: Maybe<OffsetPagingOfPendingReasonDto>;
  plusServices?: Maybe<OffsetPagingOfRequestTypeDto>;
  plusServicesBo?: Maybe<OffsetPagingOfRequestTypeDto>;
  policies?: Maybe<OffsetPagingOfPolicyDto>;
  policyById?: Maybe<PolicyDto>;
  policyByPolicyTypeId?: Maybe<OffsetPagingOfPolicyDto>;
  policyByPropertyPostIdForTransaction?: Maybe<OffsetPagingOfPolicyDto>;
  policyBySaleSeasonId?: Maybe<OffsetPagingOfPolicyDto>;
  policyTypeById?: Maybe<PolicyTypeDto>;
  policyTypes?: Maybe<OffsetPagingOfPolicyTypeDto>;
  postTypeById?: Maybe<PostTypeDto>;
  postTypes?: Maybe<OffsetPagingOfPostTypeDto>;
  potentialAgentUsers?: Maybe<OffsetPagingOfPotentialAgentUserDto>;
  profileCurrentUser?: Maybe<ProfileCurrentUserDto>;
  projectById?: Maybe<ProjectDto>;
  projectPostStatus?: Maybe<OffsetPagingOfProjectPostStatusDto>;
  projectPostStatusById?: Maybe<ProjectPostStatusDto>;
  projects?: Maybe<OffsetPagingOfProjectDto>;
  projectsAssignedToAgentIdForPublic?: Maybe<OffsetPagingOfProjectForPublicDto>;
  projectsForPublic?: Maybe<OffsetPagingOfProjectDto>;
  projectStatus?: Maybe<OffsetPagingOfProjectStatusDto>;
  projectStatusById?: Maybe<ProjectStatusDto>;
  projectSuggestions?: Maybe<OffsetPagingOfProjectSuggestionDto>;
  projectWithPropertyPostDistrictId?: Maybe<OffsetPagingOfProjectWithPropertyPostDto>;
  projectWithPropertyPosts?: Maybe<OffsetPagingOfProjectWithPropertyPostDto>;
  projectWithPropertyPostsByFollowerId?: Maybe<OffsetPagingOfProjectWithPropertyPostDto>;
  projectWithPropertyPostsByUserId?: Maybe<OffsetPagingOfProjectWithPropertyPostDto>;
  projectWithPropertyPostsCityId?: Maybe<OffsetPagingOfProjectWithPropertyPostDto>;
  propertyPostApprovalStatus?: Maybe<OffsetPagingOfPropertyPostApprovalStatusDto>;
  propertyPostApprovalStatusById?: Maybe<PropertyPostApprovalStatusDto>;
  propertyPostBlockNamesBySeasonId?: Maybe<OffsetPagingOfBlockNameInfo>;
  propertyPostById?: Maybe<PropertyPostDto>;
  propertyPostByIdForTransaction?: Maybe<PropertyPostForTransactionDto>;
  propertyPostCategories?: Maybe<OffsetPagingOfPropertyPostCategoryDto>;
  propertyPostDetail?: Maybe<PropertyPostDto>;
  propertyPostDetailForBackOffice?: Maybe<PropertyPostDto>;
  propertyPosts?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostsBasket?: Maybe<GetPropertyPostBasketResponse>;
  propertyPostsBasketForTopener?: Maybe<GetPropertyPostsBasketForTopenerResponse>;
  propertyPostsBasketForTopenerTransfer?: Maybe<GetPropertyPostsBasketForTopenerTransferResponse>;
  propertyPostsBasketForWeb?: Maybe<GetPropertyPostsBasketForVisitorResponse>;
  propertyPostsByBlockNameAdvanced?: Maybe<PropertyPostsByBlockNameDto>;
  propertyPostsByBlockNameForTransferAdvanced?: Maybe<PropertyPostsByBlockNameDto>;
  propertyPostsByCityId?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostsByCurrentUser?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostsByDistrictId?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostsByFollowerId?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostsBySeasonId?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostsByUserIdForPublic?: Maybe<OffsetPagingOfPropertyPostForPublicDto>;
  propertyPostsForBackOffice?: Maybe<OffsetPagingOfPropertyPostDto>;
  propertyPostStatus?: Maybe<OffsetPagingOfPropertyPostStatusDto>;
  propertyPostStatusById?: Maybe<PropertyPostStatusDto>;
  propertyPostSuggestions?: Maybe<OffsetPagingOfPropertyPostSuggestionDto>;
  propertySubTypeById?: Maybe<PropertySubTypeDto>;
  propertySubTypes?: Maybe<OffsetPagingOfPropertySubTypeDto>;
  propertyTypeById?: Maybe<PropertyTypeDto>;
  propertyTypes?: Maybe<OffsetPagingOfPropertyTypeDto>;
  qnaPage?: Maybe<BasicNewsPagesDto>;
  reactionTypeById?: Maybe<ReactionTypeDto>;
  reactionTypes?: Maybe<OffsetPagingOfReactionTypeDto>;
  recruitmentDetail?: Maybe<ArticleDto>;
  recruitmentPage?: Maybe<ArticlePageDto>;
  referredAgentsByAgentId?: Maybe<OffsetPagingOfAgentDto>;
  refundPaymentTransferInfoByTransId?: Maybe<GetRefundPaymentTransferInfoByTransIdResponse>;
  representiveAgentPage?: Maybe<Array<Maybe<StaticAgentDto>>>;
  requestTypeById?: Maybe<RequestTypeDto>;
  requestTypes?: Maybe<OffsetPagingOfRequestTypeDto>;
  roles?: Maybe<OffsetPagingOfRoleDto>;
  ruleById?: Maybe<RuleInfoDto>;
  rules?: Maybe<OffsetPagingOfRuleDto>;
  saleSeasonById?: Maybe<SaleSeasonDto>;
  saleSeasonByProjectId?: Maybe<OffsetPagingOfSaleSeasonDto>;
  saleSeasonStatusById?: Maybe<SaleSeasonStatusDto>;
  saleSeasonStatuses?: Maybe<OffsetPagingOfSaleSeasonStatusDto>;
  saleTrackingStatus?: Maybe<OffsetPagingOfSaleTrackingStatusDto>;
  saleTrackingStatusById?: Maybe<SaleTrackingStatusDto>;
  searchAgents: SearchAgentResponse;
  searchArticles?: Maybe<SearchArticleResponse>;
  searchB2C2CProjectsBO?: Maybe<OffsetPagingOfB2C2CProjectBoDto>;
  searchBOProjects?: Maybe<OffsetPagingOfProjectBoDto>;
  searchContactTradingCount?: Maybe<Array<Maybe<TotalCountPerStatusDto>>>;
  searchFOInvestors: SearchFoInvestorResponse;
  searchInvestors: SearchInvestorResponse;
  searchPrePropertyPosts?: Maybe<SearchPropertyPostResponse>;
  searchProjects: SearchProjectResponse;
  searchPropertyPostForConsultantSupportForBO?: Maybe<OffsetPagingOfPropertyPostDto>;
  searchPropertyPostForSaleForBO?: Maybe<OffsetPagingOfPropertyPostDto>;
  searchPropertyPosts?: Maybe<SearchPropertyPostResponse>;
  searchPropertyPostsForRent?: Maybe<SearchPropertyPostForRentResponse>;
  searchPropertyPostsForRentForBO?: Maybe<OffsetPagingOfPropertyPostDto>;
  searchPropertyPostsOnC2CDemandForRent?: Maybe<SearchPropertyPostsC2CDemandForRentResponse>;
  searchPropertyPostsOnC2CDemandForSale?: Maybe<SearchPropertyPostsC2CDemandForSaleResponse>;
  simpleSaleSeasonNameByProjectId?: Maybe<OffsetPagingOfSimpleSeasonDto>;
  simpleSeasonById?: Maybe<SimpleSeasonDto>;
  simpleTransactionDetail: GetSimpleTransactionDetailResponse;
  spamTypeById?: Maybe<SpamTypeDto>;
  spamTypes?: Maybe<OffsetPagingOfSpamTypeDto>;
  specializeById?: Maybe<SpecializeDto>;
  specializes?: Maybe<OffsetPagingOfSpecializeDto>;
  staffById?: Maybe<StaffDto>;
  staffByUserId?: Maybe<StaffDto>;
  staffContractTypeById?: Maybe<StaffContractTypeDto>;
  staffContractTypes?: Maybe<OffsetPagingOfStaffContractTypeDto>;
  staffGroupById?: Maybe<StaffGroupDto>;
  staffGroups?: Maybe<OffsetPagingOfStaffGroupDto>;
  staffGroupsByStaff?: Maybe<GetStaffGroupsByStaffResponse>;
  staffGroupsByStaffTypeId?: Maybe<OffsetPagingOfStaffGroupDto>;
  staffGroupsByStaffTypeIdFO?: Maybe<OffsetPagingOfStaffGroupDto>;
  staffGroupsNotAssignStaff?: Maybe<OffsetPagingOfStaffGroupsNotAssignStaffDto>;
  staffPositionById?: Maybe<StaffPositionDto>;
  staffPositions?: Maybe<OffsetPagingOfStaffPositionDto>;
  staffRankingById?: Maybe<StaffRankingDto>;
  staffRankings?: Maybe<OffsetPagingOfStaffRankingDto>;
  staffs?: Maybe<OffsetPagingOfStaffDto>;
  staffsBelongToAllocationRule?: Maybe<OffsetPagingOfStaffForAllocationRuleDto>;
  staffsBelongToBackOfficeRole?: Maybe<OffsetPagingOfStaffForBackOfficeRoleDto>;
  staffsBelongToStaffGroup?: Maybe<OffsetPagingOfStaffForStaffGroupDto>;
  staffsByGroupLeaderUserId?: Maybe<OffsetPagingOfStaffDto>;
  staffsByRoleName?: Maybe<OffsetPagingOfStaffDto>;
  staffsByStaffGroupId?: Maybe<OffsetPagingOfStaffDto>;
  staffsInfosBySupportRequestId?: Maybe<OffsetPagingOfStaffInfoDto>;
  staffsNotBelongToAllocationRule?: Maybe<OffsetPagingOfStaffForAllocationRuleDto>;
  staffsNotBelongToBackOfficeRole?: Maybe<OffsetPagingOfStaffForBackOfficeRoleDto>;
  staffsNotBelongToStaffGroup?: Maybe<OffsetPagingOfStaffForStaffGroupDto>;
  staffStatus?: Maybe<OffsetPagingOfStaffStatusDto>;
  staffStatusById?: Maybe<StaffStatusDto>;
  staffTypeById?: Maybe<StaffTypeDto>;
  staffTypes?: Maybe<OffsetPagingOfStaffTypeDto>;
  streetById?: Maybe<StreetDto>;
  streets?: Maybe<OffsetPagingOfStreetDto>;
  subscriptionPackageStatus?: Maybe<OffsetPagingOfSubscriptionPackageStatusDto>;
  subscriptionPackageStatusById?: Maybe<SubscriptionPackageStatusDto>;
  subscriptionPaymentStatus?: Maybe<OffsetPagingOfSubscriptionPaymentStatusDto>;
  subscriptionPaymentStatusId?: Maybe<SubscriptionPaymentStatusDto>;
  summaryByCrawlerTrackingStatus?: Maybe<GetSummaryByCrawlerTrackingStatusResponse>;
  summaryC2CPropertyPostsForRentForWeb?: Maybe<GetC2CSummaryPropertyPostForWebResponse>;
  summaryC2CPropertyPostsForSaleForWeb?: Maybe<GetC2CSummaryPropertyPostForWebResponse>;
  summaryPropertyPosts?: Maybe<GetSummaryPropertyPostResponse>;
  summaryPropertyPostsForWeb?: Maybe<GetSummaryPropertyPostResponse>;
  supportRequestByAssigneeId?: Maybe<OffsetPagingOfSupportRequestInfoDto>;
  supportRequestByContactTradingId?: Maybe<SupportRequestContactTradingResponse>;
  supportRequestById?: Maybe<SupportRequestInfoDto>;
  supportRequestExactById?: Maybe<SupportRequestInfoDto>;
  supportRequestHistoryById?: Maybe<Array<Maybe<SupportResultsDto>>>;
  supportRequests?: Maybe<OffsetPagingOfSupportRequestDto>;
  supportRequestServiceBonuses?: Maybe<OffsetPagingOfSupportRequestServiceBonusDto>;
  supportRequestsExactByCurrentUser?: Maybe<OffsetPagingOfSupportRequestInfoDto>;
  supportRequestsExactByCurrentUserMobile?: Maybe<SupportRequestInfoDtoConnection>;
  supportRequestsFOByContactTradingId?: Maybe<SupportRequestsFoContactTradingResponse>;
  supportRequestsInfo?: Maybe<OffsetPagingOfSupportRequestInfoDto>;
  supportRequestsInfoByCurrentUser?: Maybe<OffsetPagingOfSupportRequestInfoDto>;
  supportRequestSourceType?: Maybe<OffsetPagingOfSupportRequestSourceTypeDto>;
  supportRequestStatusById?: Maybe<SupportRequestStatusDto>;
  supportRequestStatuses?: Maybe<OffsetPagingOfSupportRequestStatusDto>;
  supportServiceById?: Maybe<SupportServiceDto>;
  supportServices?: Maybe<OffsetPagingOfSupportServiceDto>;
  supportServiceTicketCancelReasons?: Maybe<OffsetPagingOfSupportServiceTicketCancelReasonDto>;
  supportServiceTicketProcessingStatuses?: Maybe<OffsetPagingOfSupportServiceTicketProcessingStatusDto>;
  supportServiceTicketRejectReasons?: Maybe<OffsetPagingOfSupportServiceTicketRejectReasonDto>;
  supportServiceTicketResultUpdateReasons?: Maybe<OffsetPagingOfSupportServiceTicketResultUpdateReasonDto>;
  supportServiceTicketStatuses?: Maybe<OffsetPagingOfSupportServiceTicketStatusDto>;
  topenerOfMonth?: Maybe<OffsetPagingOfTopenerOfMonthDto>;
  topenerServiceRequestTypes?: Maybe<OffsetPagingOfRequestTypeDto>;
  totalNotificationsCounterByUserId: Scalars['Long'];
  transactionCancelReasonById?: Maybe<TransactionCancelReasonDto>;
  transactionCancelReasons?: Maybe<OffsetPagingOfTransactionCancelReasonDto>;
  transactionPaymentMethodConfigs?: Maybe<OffsetPagingOfTransactionPaymentMethodConfigDto>;
  transactionPaymentStatusById?: Maybe<TransactionPaymentStatusDto>;
  transactionPaymentStatuses?: Maybe<OffsetPagingOfTransactionPaymentStatusDto>;
  transactionPaymentValidate: GetTransactionPaymentValidateResponse;
  transactionsByBuyerId?: Maybe<Array<Maybe<TransactionsByBuyerIdDto>>>;
  unitOfMeasureById?: Maybe<UnitOfMeasureDto>;
  unitOfMeasures?: Maybe<OffsetPagingOfUnitOfMeasureDto>;
  unreadNotificationsCounterByUserId: Scalars['Long'];
  userById?: Maybe<GetUserResponse>;
  userForMessengerById: GetUserForMessengerByIdResponse;
  userReportSpamsByPostId?: Maybe<OffsetPagingOfUserReportSpamDto>;
  usersByRoleId?: Maybe<OffsetPagingOfUserInfoDto>;
  usersByStaffTypeId?: Maybe<OffsetPagingOfSimpleUserInfoDto>;
  userTransactionById?: Maybe<GetUserTransactionByIdResponse>;
  userTransactions?: Maybe<OffsetPagingOfUserTransactionDto>;
  userViewTypes?: Maybe<OffsetPagingOfUserViewTypeDto>;
  validateBookingTransaction?: Maybe<ValidateBookingTransactionResponse>;
  validateDepositeTransaction?: Maybe<ValidateDepositeTransactionResponse>;
  validateExpireReCaptchaForPropertyPost?: Maybe<ValidateExpireReCaptchaForPropertyPostResponse>;
  validateNumberPostByUserId: ValidateNumberOfPostByUserIdResponse;
  vnpayPaymentTransferInfoByTransId?: Maybe<GetVnpayPaymentTransferInfoByTransIdResponse>;
  wardById?: Maybe<WardDto>;
  wards?: Maybe<OffsetPagingOfWardDto>;
};


export type QueryActionNotificationsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ActionNotificationDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ActionNotificationDtoFilter>;
};


export type QueryAddressByIdArgs = {
  addressId?: Maybe<Scalars['Uuid']>;
};


export type QueryAddressesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AddressDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AddressDtoFilter>;
};


export type QueryAddressTypeByIdArgs = {
  addressTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryAddressTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AddressTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AddressTypeDtoFilter>;
};


export type QueryAgentByIdArgs = {
  agentId?: Maybe<Scalars['Uuid']>;
  fromCache?: Maybe<Scalars['Boolean']>;
};


export type QueryAgentByIdForPublicArgs = {
  agentId?: Maybe<Scalars['Uuid']>;
};


export type QueryAgentContactByIdArgs = {
  agentId?: Maybe<Scalars['Uuid']>;
};


export type QueryAgentForTransactionArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetAgentForTransactionInput;
};


export type QueryAgentGroupByIdArgs = {
  agentGroupId?: Maybe<Scalars['Uuid']>;
};


export type QueryAgentGroupInfoByIdArgs = {
  getAgentGroupInfoByIdInput?: Maybe<AgentGroupInput>;
};


export type QueryAgentGroupMembersByAgentGroupIdArgs = {
  agentGroupId?: Maybe<Scalars['Uuid']>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentDtoFilter>;
};


export type QueryAgentGroupMembersKpiByAgentGroupIdArgs = {
  agentGroupId?: Maybe<Scalars['Uuid']>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentWithKpiDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentWithKpiDtoFilter>;
};


export type QueryAgentGroupsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentGroupDtoFilter>;
};


export type QueryAgentGroupTrackingByIdArgs = {
  agentId?: Maybe<Scalars['Uuid']>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentGroupTrackingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentGroupTrackingDtoFilter>;
};


export type QueryAgentGroupTrackingsByIdArgs = {
  agentId: Scalars['Uuid'];
};


export type QueryAgentPerformanceTrackingsByAgentIdsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  getAgentPerformanceTrackingsByAgentIdsInput?: Maybe<AgentPerformanceTrackingInput>;
  order_by?: Maybe<AgentPerformanceTrackingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request?: Maybe<AgentPerformanceTrackingInput>;
  where?: Maybe<AgentPerformanceTrackingDtoFilter>;
};


export type QueryAgentRankingByIdArgs = {
  agentRankingId?: Maybe<Scalars['Uuid']>;
};


export type QueryAgentRankingsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentRankingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentRankingDtoFilter>;
};


export type QueryAgentRatingByIdArgs = {
  agentRatingId?: Maybe<Scalars['Uuid']>;
};


export type QueryAgentRatingsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentRatingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentRatingDtoFilter>;
};


export type QueryAgentsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentDtoFilter>;
};


export type QueryAgentTypeByIdArgs = {
  agentTypeId: Scalars['Uuid'];
};


export type QueryAllocationRuleDetailByIdArgs = {
  allocationRuleId: Scalars['Uuid'];
};


export type QueryAllocationRulesByStaffArgs = {
  staffId: Scalars['Uuid'];
  userId: Scalars['Uuid'];
};


export type QueryAllocationRulesNotAssignStaffArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AllocationRulesNotAssignStaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['Uuid']>;
  staffTypeId?: Maybe<Scalars['Uuid']>;
  userId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<AllocationRulesNotAssignStaffDtoFilter>;
};


export type QueryAllocationRuleSpecializeByIdArgs = {
  allocationRuleSpecializeId?: Maybe<Scalars['Uuid']>;
};


export type QueryAllocationRuleSpecializesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AllocationRuleSpecializeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AllocationRuleSpecializeDtoFilter>;
};


export type QueryAllocationRuleTypeByIdArgs = {
  allocationRuleTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryAllocationRuleTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AllocationRuleTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AllocationRuleTypeDtoFilter>;
};


export type QueryAllowUpdateCustomerByDepositContractArgs = {
  b2CDepositTransactionId: Scalars['Uuid'];
};


export type QueryArticleDetailArgs = {
  request?: Maybe<GetArticleByIdRequestInput>;
};


export type QueryArticlePageArgs = {
  request: GetArticleRequest;
};


export type QueryAutoSuggestionAgentsArgs = {
  autoSuggestionAgentsInput: AutoSuggestionAgentsInput;
};


export type QueryAutoSuggestionProjectArgs = {
  autoSuggestionsProjectInput: AutoSuggestionProjectInput;
};


export type QueryAutoSuggestionPropertyPostsArgs = {
  autoSuggestionPropertyPostsInput: AutoSuggestionPropertyPostsInput;
};


export type QueryB2CPropertyPostByIdArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryB2CPropertyPostsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryB2cTransactionContractDetailArgs = {
  b2cTransactionContractId: Scalars['Uuid'];
};


export type QueryB2cTransactionContractsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<B2CTransactionContractInfoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<B2CTransactionContractInfoDtoFilter>;
};


export type QueryBackOfficeRoleDetailByIdArgs = {
  backOfficeRoleId: Scalars['Uuid'];
};


export type QueryBackOfficeRolesByStaffArgs = {
  staffId: Scalars['Uuid'];
  userId: Scalars['Uuid'];
};


export type QueryBankByIdArgs = {
  bankId?: Maybe<Scalars['Uuid']>;
};


export type QueryBankPaymentTransferInfoByTransIdArgs = {
  transactionId: Scalars['Uuid'];
};


export type QueryBanksArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<BankDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<BankDtoFilter>;
};


export type QueryBankTransferDetailsByTransactionIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<BankTransferDetailDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  transactionId: Scalars['Uuid'];
  where?: Maybe<BankTransferDetailDtoFilter>;
};


export type QueryBasicPagesArgs = {
  request: BasicPageRequestInput;
};


export type QueryBestSellingAgentPageArgs = {
  languageCode?: Maybe<Scalars['String']>;
};


export type QueryBookingHistoriesByBuyerIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionsByBuyerIdDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTransactionsByBuyerIdAdvancedInput;
  where?: Maybe<TransactionsByBuyerIdDtoFilter>;
};


export type QueryBookingHistoriesByBuyerIdCursorArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<TransactionsByBuyerIdDtoSort>;
  request: GetTransactionsByBuyerIdAdvancedInput;
  where?: Maybe<TransactionsByBuyerIdDtoFilter>;
};


export type QueryBookingStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<BookingStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<BookingStatusDtoFilter>;
};


export type QueryBookingStatusByIdArgs = {
  bookingStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryBookingTransactionByAgentIdArgs = {
  agentId?: Maybe<Scalars['Uuid']>;
};


export type QueryBookingTransactionByIdArgs = {
  bookingTransactionId: Scalars['Uuid'];
};


export type QueryBookingTransactionDetailArgs = {
  bookingTransactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
};


export type QueryBookingTransactionDetailForRatingArgs = {
  bookingTransactionId: Scalars['Uuid'];
};


export type QueryBookingTransactionsByPropertyPostIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionDetailDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
  where?: Maybe<TransactionDetailDtoFilter>;
};


export type QueryBookingTransactionValidatePaymentArgs = {
  bookingTransactionValidatePaymentInput: BookingTransactionValidatePaymentInput;
};


export type QueryBoStaffFullByUserArgs = {
  staffId?: Maybe<Scalars['Uuid']>;
  userId?: Maybe<Scalars['Uuid']>;
};


export type QueryC2cContactTradingArgs = {
  c2CContactTradingsInput?: Maybe<C2CContactTradingsInput>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CContactTradingDtoFilter>;
};


export type QueryC2cContactTradingByCodeArgs = {
  c2cContactTradingCode?: Maybe<Scalars['String']>;
};


export type QueryC2cContactTradingByIdArgs = {
  c2cContactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryC2cContactTradingCreatedByAgentArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  order_by?: Maybe<C2CContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CContactTradingDtoFilter>;
};


export type QueryC2cContactTradingHistoriesArgs = {
  c2cContactTradingId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CContactTradingHistoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryC2cContactTradingReceivedByAgentArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  order_by?: Maybe<C2CContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CContactTradingDtoFilter>;
};


export type QueryC2cContactTradingRequesterEmailInfoArgs = {
  c2cContactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryC2cContactTradingRequesterPhoneInfoArgs = {
  c2cContactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryC2cContactTradingTotalCountPerStatusV2Args = {
  c2cContactTradingTotalCountPerStatusV2Input: C2CContactTradingTotalCountPerStatusV2Input;
};


export type QueryC2cNegotiationContactTradingHistoriesArgs = {
  c2cContactTradingId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CContactTradingHistoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryC2CPostRatingByPostIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CPostRatingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
  where?: Maybe<C2CPostRatingDtoFilter>;
};


export type QueryC2CPropertyPostCommissionConfigsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CPropertyPostCommissionConfigDtoFilter>;
};


export type QueryC2CPropertyPostCommissionTplConfigByDateArgs = {
  date: Scalars['Long'];
};


export type QueryC2cPropertyPostGuaranteedPackageInfoArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryC2cPropertyPostUpdateHistoriesByIdArgs = {
  id?: Maybe<Scalars['Uuid']>;
};


export type QueryC2cPropertyPostUpdateHistoriesByPropertyPostIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CToCPropertyPostAuditHistoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckAnyInProgressContactTradingInGroupArgs = {
  staffGroupId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckB2CDepositCanUpdateCustomerInfoArgs = {
  b2CDepositTransactionId: Scalars['Uuid'];
};


export type QueryCheckBookingTransactionIsRatedArgs = {
  input?: Maybe<Scalars['String']>;
};


export type QueryCheckContactTradingB2CNotificationArgs = {
  notificationId: Scalars['Uuid'];
};


export type QueryCheckContactTradingByIdArgs = {
  checkContactTradingByIdInput: CheckContactTradingByIdInput;
};


export type QueryCheckContactTradingRequestIsRatedArgs = {
  supportRequestId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckCurrentUserInAgentAssignedBySaleSeasonIdArgs = {
  request: CheckCurrentUserInAgentAssignedBySaleSeasonIdInput;
};


export type QueryCheckCurrentUserIsSaleAgentArgs = {
  request: CheckCurrentUserIsSaleAgentInput;
};


export type QueryCheckExistingReportByPostIdArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryCheckFollowTopenersByCurrentUserForFrontOfficeArgs = {
  topenerIds: Scalars['String'];
};


export type QueryCheckLockPropertyPostForDepositeArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryCheckLoggedInUserIsSaleAgentArgs = {
  request: CheckLoggedInUserIsSaleAgentInput;
};


export type QueryCheckMobileAppVersionStableArgs = {
  checkMobileAppVersionStableInput: CheckMobileAppVersionStableInput;
};


export type QueryCheckPropertyPostAvailableForBookingBySeasonIdArgs = {
  checkPropertyPostAvailableForBookingBySeasonIdInput: CheckPropertyPostAvailableForBookingBySeasonIdInput;
};


export type QueryCheckPropertyPostHasC2CContactTradingDepositedArgs = {
  propertyPostId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckPropertyPostHasContactTradingDepositedArgs = {
  propertyPostId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckPropertyPostLockedForBookingBySeasonIdArgs = {
  checkPropertyPostLockedForBookingBySeasonIdInput: CheckPropertyPostLockedForBookingBySeasonIdInput;
};


export type QueryCheckPropertyPostUpdateC2CContactTradingStatusArgs = {
  propertyPostId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckPropertyPostUpdateContactTradingStatusArgs = {
  propertyPostId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckStaffIsLeaderBySupportRequestIdArgs = {
  supportRequestId?: Maybe<Scalars['Uuid']>;
};


export type QueryCheckUsernameValidArgs = {
  username?: Maybe<Scalars['String']>;
};


export type QueryCitiesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CityDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CityDtoFilter>;
};


export type QueryCityByIdArgs = {
  cityId?: Maybe<Scalars['Int']>;
};


export type QueryCommentApproveReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CommentApproveReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CommentApproveReasonDtoFilter>;
};


export type QueryCommentRejectReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CommentRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CommentRejectReasonDtoFilter>;
};


export type QueryCommentStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CommentStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CommentStatusDtoFilter>;
};


export type QueryCompetenciesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CompetencyDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CompetencyDtoFilter>;
};


export type QueryCompetencyByIdArgs = {
  competencyId?: Maybe<Scalars['Uuid']>;
};


export type QueryConsultantsSuggestionC2CArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request?: Maybe<GetConsultantsSuggestionC2CRequestInput>;
  where?: Maybe<StaffDtoFilter>;
};


export type QueryConsultantsSupportedC2CArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffDtoFilter>;
};


export type QueryConsultantStaffsWithDeletedArgs = {
  createdDatetimeFrom?: Maybe<Scalars['Long']>;
  createdDatetimeTo?: Maybe<Scalars['Long']>;
  fullName?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
};


export type QueryContactTradingArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  searchContactTradingInput?: Maybe<SearchContactTradingInput>;
  where?: Maybe<ContactTradingDtoFilter>;
};


export type QueryContactTradingAssignmentStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingAssignmentStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingAssignmentStatusDtoFilter>;
};


export type QueryContactTradingAssignmentStatusByIdArgs = {
  contactTradingAssignmentStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingB2CAssigneeByCurrentUserArgs = {
  order_by?: Maybe<ContactTradingB2CAssigneeCurrentUserDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['String']>;
  where?: Maybe<ContactTradingB2CAssigneeCurrentUserDtoFilter>;
};


export type QueryContactTradingB2CCreatedByCurrentUserArgs = {
  order_by?: Maybe<ContactTradingB2CCreatedByCurrentUserDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['String']>;
  where?: Maybe<ContactTradingB2CCreatedByCurrentUserDtoFilter>;
};


export type QueryContactTradingB2CForBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  getContactTradingB2CForBOInput?: Maybe<GetContactTradingB2CForBoInput>;
  order_by?: Maybe<ContactTradingB2CDetailDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingB2CDetailDtoFilter>;
};


export type QueryContactTradingB2CStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingB2CStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingB2CStatusDtoFilter>;
};


export type QueryContactTradingByAssigneeIdArgs = {
  assigneeId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingDtoFilter>;
};


export type QueryContactTradingByCodeArgs = {
  contactTradingCode?: Maybe<Scalars['String']>;
};


export type QueryContactTradingByIdArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingConsultantInfoArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingCreatedByAgentArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  order_by?: Maybe<ContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingDtoFilter>;
};


export type QueryContactTradingHistoriesArgs = {
  contactTradingId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingHistoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryContactTradingHistoryInfoArgs = {
  contactTradingHistoryId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingRatingByIdArgs = {
  supportRequestId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingRatingInfoArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingReceivedByAgentArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  order_by?: Maybe<ContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingDtoFilter>;
};


export type QueryContactTradingRelevantPropertyStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingRelevantPropertyStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingRelevantPropertyStatusDtoFilter>;
};


export type QueryContactTradingRelevantPropertyStatusByIdArgs = {
  contactTradingAssignmentStatusId: Scalars['Uuid'];
  contactTradingRelevantPropertyStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingRequesterEmailInfoArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingRequesterLastContactArgs = {
  requesterId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingRequesterPhoneInfoArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingStatusDtoFilter>;
};


export type QueryContactTradingStatusByIdArgs = {
  contactTradingStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryContactTradingTotalCountPerStatusArgs = {
  where?: Maybe<TotalCountPerStatusFilter>;
};


export type QueryContactTradingTotalCountPerStatusV2Args = {
  contactTradingTotalCountPerStatusV2Input: ContactTradingTotalCountPerStatusV2Input;
};


export type QueryContractStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContractStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContractStatusDtoFilter>;
};


export type QueryCountriesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CountryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CountryDtoFilter>;
};


export type QueryCountryByIdArgs = {
  countryId?: Maybe<Scalars['Uuid']>;
};


export type QueryCrawlerProcessesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CrawlerProcessDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CrawlerProcessDtoFilter>;
};


export type QueryCrawlerProcessesForTopenerArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  order_by?: Maybe<CrawlerProcessDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CrawlerProcessDtoFilter>;
};


export type QueryCrawlerTrackingStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CrawlerTrackingStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CrawlerTrackingStatusDtoFilter>;
};


export type QueryCurAgentForTransactionArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetAgentForTransactionInput;
};


export type QueryCurCommentsByObjectIdForFrontOfficeArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  input: GetCommentsByObjectIdCursorInput;
  last?: Maybe<Scalars['PaginationAmount']>;
};


export type QueryCurProjectsAssignedToAgentForPublicArgs = {
  after?: Maybe<Scalars['String']>;
  agentId: Scalars['Uuid'];
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<ProjectForPublicDtoSort>;
  where?: Maybe<ProjectForPublicDtoFilter>;
};


export type QueryCurProjectSuggestionsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<ProjectSuggestionDtoSort>;
  where?: Maybe<ProjectSuggestionDtoFilter>;
};


export type QueryCurProjectWithPropertyPostsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryCurProjectWithPropertyPostsByFollowerIdArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  followerId?: Maybe<Scalars['Uuid']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryCurProjectWithPropertyPostsByUserIdArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  userId: Scalars['Uuid'];
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryCurPropertyPostsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryCurPropertyPostsByAgentIdForPublicArgs = {
  after?: Maybe<Scalars['String']>;
  agentId: Scalars['Uuid'];
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostForPublicDtoSort>;
  where?: Maybe<PropertyPostForPublicDtoFilter>;
};


export type QueryCurPropertyPostsByCityIdArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryCurPropertyPostsByCurrentUserArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryCurPropertyPostsByDistrictIdArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryCurPropertyPostsByFollowerIdArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  followerId?: Maybe<Scalars['Uuid']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryCurPropertyPostSuggestionsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<PropertyPostSuggestionDtoSort>;
  where?: Maybe<PropertyPostSuggestionDtoFilter>;
};


export type QueryCurrentBookingTransactionArgs = {
  bookingTransactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
};


export type QueryCurrentDepositTransactionArgs = {
  depositTransactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
};


export type QueryCurRepliesByCommentIdForFrontOfficeArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  commentId?: Maybe<Scalars['Uuid']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
};


export type QueryCurTransactionsByBuyerIdAdvancedArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<TransactionsByBuyerIdDtoSort>;
  request: GetTransactionsByBuyerIdAdvancedInput;
};


export type QueryCustomerByIdArgs = {
  customerId?: Maybe<Scalars['Uuid']>;
};


export type QueryCustomersArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CustomerDtoFilter>;
};


export type QueryDepartmentByIdArgs = {
  departmentId?: Maybe<Scalars['Uuid']>;
};


export type QueryDepartmentsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DepartmentDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DepartmentDtoFilter>;
};


export type QueryDepositeDurationByBookingTransactionIdArgs = {
  bookingTransactionId: Scalars['Uuid'];
};


export type QueryDepositeStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DepositeStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DepositeStatusDtoFilter>;
};


export type QueryDepositeStatusByIdArgs = {
  depositeStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryDepositeTransactionByIdArgs = {
  depositeTransactionId: Scalars['Uuid'];
};


export type QueryDepositeTransactionDetailForRatingArgs = {
  depositeTransactionId: Scalars['Uuid'];
};


export type QueryDepositeTransactionsByPropertyPostIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionDetailDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
  where?: Maybe<TransactionDetailDtoFilter>;
};


export type QueryDepositeTransactionValidatePaymentArgs = {
  depositeTransactionValidatePaymentInput: DepositeTransactionValidatePaymentInput;
};


export type QueryDepositHistoriesByBuyerIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionsByBuyerIdDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTransactionsByBuyerIdAdvancedInput;
  where?: Maybe<TransactionsByBuyerIdDtoFilter>;
};


export type QueryDepositHistoriesByBuyerIdCursorArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<TransactionsByBuyerIdDtoSort>;
  request: GetTransactionsByBuyerIdAdvancedInput;
  where?: Maybe<TransactionsByBuyerIdDtoFilter>;
};


export type QueryDepositTransactionDetailArgs = {
  depositTransactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
};


export type QueryDetailtDocumentTemplateArgs = {
  documentTemplateId?: Maybe<Scalars['Uuid']>;
};


export type QueryDistrictByIdArgs = {
  districtId?: Maybe<Scalars['Int']>;
};


export type QueryDistrictsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DistrictDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DistrictDtoFilter>;
};


export type QueryDocumentAttributesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DocumentAttributeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DocumentAttributeDtoFilter>;
};


export type QueryDocumentAttributeTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DocumentAttributeTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DocumentAttributeTypeDtoFilter>;
};


export type QueryDocumentTemplatesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DocumentTemplateDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DocumentTemplateDtoFilter>;
};


export type QueryDocumentTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DocumentTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DocumentTypeDtoFilter>;
};


export type QueryEstateTypeOfInterestByIdArgs = {
  estateTypeOfInterestId?: Maybe<Scalars['Uuid']>;
};


export type QueryEstateTypeOfInterestsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<EstateTypeOfInterestDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<EstateTypeOfInterestDtoFilter>;
};


export type QueryEWalletTypeByIdArgs = {
  eWalletTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryEWalletTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<EWalletTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<EWalletTypeDtoFilter>;
};


export type QueryExportBookingTransactionsBySeasonIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  saleSeasonId: Scalars['Uuid'];
};


export type QueryFastPaymentTransferInfoByTransIdArgs = {
  transactionId: Scalars['Uuid'];
};


export type QueryFeedObjectTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<FeedObjectTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<FeedObjectTypeDtoFilter>;
};


export type QueryFoProjectByIdArgs = {
  projectId: Scalars['Uuid'];
};


export type QueryFormFintechArgs = {
  getFormFintech?: Maybe<GetFormFintechQueryInput>;
};


export type QueryFundAccountByIdArgs = {
  fundAccountId?: Maybe<Scalars['Uuid']>;
};


export type QueryFundAccountsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<FundAccountDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<FundAccountDtoFilter>;
};


export type QueryGetActiveAgentSubscriptionPackageByUserIdArgs = {
  userId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetActiveAgentSubscriptionPackageForAllUsersArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ActiveAgentSubscriptionPackageForAllUsersDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ActiveAgentSubscriptionPackageForAllUsersDtoFilter>;
};


export type QueryGetAgentByPhoneNumberArgs = {
  phoneNumber?: Maybe<Scalars['String']>;
};


export type QueryGetAgentLastSubscriptionPackageByUserIdArgs = {
  userId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetAgentRankingByIdsArgs = {
  agentIds?: Maybe<Scalars['String']>;
};


export type QueryGetAgentSubscriptionTransactionValidatePaymentArgs = {
  getAgentSubscriptionTransactionValidatePaymentInput: GetAgentSubscriptionTransactionValidatePaymentInput;
};


export type QueryGetAllAgentSubscriptionPackageByUserIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentSubscriptionPackageDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<AgentSubscriptionPackageDtoFilter>;
};


export type QueryGetAllArticlesArgs = {
  request: GetAllArticlesInput;
};


export type QueryGetAllocationRulesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: GetAllocationRulesInput;
  order_by?: Maybe<AllocationRuleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AllocationRuleDtoFilter>;
};


export type QueryGetApprovalUserProfilePhotosArgs = {
  order_by?: Maybe<UserProfilePhotoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<UserProfilePhotoDtoFilter>;
};


export type QueryGetB2C2CProjectDetailByIdBoArgs = {
  b2C2CProjectId: Scalars['Uuid'];
};


export type QueryGetB2C2CProjectDetailByIdFoArgs = {
  b2C2CProjectId: Scalars['Uuid'];
};


export type QueryGetB2C2CProjectsFoArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};


export type QueryGetB2CContractCommissionPlatformLogsArgs = {
  b2CTransactionContractId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetB2CProjectsHomePageArgs = {
  getB2CProjectsHomePageInput: GetB2CProjectsHomePageInput;
};


export type QueryGetBackOfficeRolesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: GetBackOfficeRolesInput;
  order_by?: Maybe<BackOfficeRoleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<BackOfficeRoleDtoFilter>;
};


export type QueryGetBlockFloorBySaleSeasonIdArgs = {
  projectId: Scalars['Uuid'];
  saleSeasonId: Scalars['Uuid'];
};


export type QueryGetBlockFloorPlanByIdArgs = {
  blockFloorPlanId: Scalars['Uuid'];
};


export type QueryGetBlockFloorPlansByProjectIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<BlockFloorPlanDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['Uuid']>;
  saleSeasonId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<BlockFloorPlanDtoFilter>;
};


export type QueryGetBookingTransactionsToAssignConsultantArgs = {
  bookingTransactionsToAssignConsultantInput?: Maybe<BookingTransactionsToAssignConsultantInput>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<BookingTransactionToAssignConsultantDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<BookingTransactionToAssignConsultantDtoFilter>;
};


export type QueryGetC2CContactTradingByCountStatusesArgs = {
  c2CContactTradingsInput: C2CContactTradingsInput;
};


export type QueryGetC2CContactTradingInfoForPropertyPostArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CContactTradingInfoForPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetC2CContactTradingsByC2CDemandIdArgs = {
  c2CDemandId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CDemandContactTradingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetC2CContractCommissionPlatformLogsArgs = {
  c2CContactTradingId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetC2CDepositRejectReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CDepositRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CDepositRejectReasonDtoFilter>;
};


export type QueryGetC2CNegotiationRejectReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CNegotiationRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CNegotiationRejectReasonDtoFilter>;
};


export type QueryGetC2CPropertyPostByCodeForFrontOfficePrivateArgs = {
  propertyPostCode: Scalars['String'];
};


export type QueryGetC2CPropertyPostByCodeForFrontOfficePublicArgs = {
  propertyPostCode: Scalars['String'];
};


export type QueryGetC2CPropertyPostByIdPublicLastVersionBoArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetC2CPropertyPostByIdPublicLastVersionFoArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetC2CPropertyPostPanoramasArgs = {
  order_by?: Maybe<C2CPanoramaImageDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CPanoramaImageDtoFilter>;
};


export type QueryGetC2CPropertyPostRejectReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<C2CPropertyPostRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<C2CPropertyPostRejectReasonDtoFilter>;
};


export type QueryGetC2CPropertyPostsHomePageArgs = {
  getC2CPropertyPostsHomePageInput: GetC2CPropertyPostsHomePageInput;
};


export type QueryGetC2CPropertyPostsViewedByCurrentUserFoArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetC2CPropertyPostViewedByIdsForFoArgs = {
  propertyPostIds: GetC2CPropertyPostViewedByIdsForFoInput;
};


export type QueryGetC2CSimilarPostsArgs = {
  request: GetC2CSimilarPostsInput;
};


export type QueryGetCommentByIdForBackOfficeArgs = {
  commentId: Scalars['Uuid'];
};


export type QueryGetCommentsForBackOfficeArgs = {
  order_by?: Maybe<CommentForBackOfficeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  searchUserName?: Maybe<Scalars['String']>;
  where?: Maybe<CommentForBackOfficeDtoFilter>;
};


export type QueryGetConsultantsByStaffGroupIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  getConsultantsByStaffGroupIdInput: GetConsultantsByStaffGroupIdRequestInput;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetConsultantsForC2CTransactionArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  getConsultantsForC2CTransactionInput: GetConsultantsForC2CTransactionInput;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetConsultantsForC2CTransactionCursorArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  getConsultantsForC2CTransactionInput: GetConsultantsForC2CTransactionInput;
  last?: Maybe<Scalars['PaginationAmount']>;
};


export type QueryGetConsultantsForTransactionArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  getConsultantsForTransactionInput: GetConsultantsForTransactionInput;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetConsultantsForTransactionCursorArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  getConsultantsForTransactionInput: GetConsultantsForTransactionInput;
  last?: Maybe<Scalars['PaginationAmount']>;
};


export type QueryGetConsultantStaffGroupsEligibleForB2CArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffGroupDtoFilter>;
};


export type QueryGetConsultantsToAssignTransactionsBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  getConsultantsToAssignTransactionsBoInput: GetConsultantsToAssignTransactionsBoInput;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetConsultantSupportForC2CPostFoArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetContactTradingB2CByNotificationArgs = {
  notificationId: Scalars['Uuid'];
};


export type QueryGetContactTradingB2CDetailByIdArgs = {
  contactTradingB2CId: Scalars['Uuid'];
};


export type QueryGetContactTradingB2CDetailForBoByIdArgs = {
  contactTradingB2CId: Scalars['Uuid'];
};


export type QueryGetContactTradingInfoForPropertyPostArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingInfoForPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetContactTradingRejectReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ContactTradingRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingRejectReasonDtoFilter>;
};


export type QueryGetContactTradingsForC2CDemandArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ContactTradingForC2CDemandDtoFilter>;
};


export type QueryGetContractExtendedHistoriesArgs = {
  b2cTransactionContractId: Scalars['Uuid'];
};


export type QueryGetContractHistoriesArgs = {
  b2cTransactionContractId: Scalars['Uuid'];
};


export type QueryGetCrawlerRefuseReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<CrawlerRefuseReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<CrawlerRefuseReasonDtoFilter>;
};


export type QueryGetCustomerInfoChangeHistoriesForBoArgs = {
  depositTransactionId: Scalars['Uuid'];
  order_by?: Maybe<CustomerInfoChangeHistoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetCustomerInfoChangeHistoriesForFoArgs = {
  depositTransactionId: Scalars['Uuid'];
  order_by?: Maybe<CustomerInfoChangeHistoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetCustomerInfoChangeHistoryByIdForBoArgs = {
  customerInfoChangeHistoryId: Scalars['Uuid'];
};


export type QueryGetCustomerInfoChangeHistoryByIdForFoArgs = {
  customerInfoChangeHistoryId: Scalars['Uuid'];
};


export type QueryGetDefaultPermissionsArgs = {
  getDefaultPermissionsInput: GetDefaultPermissionsInput;
};


export type QueryGetDepositTransactionsToAssignConsultantArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeTransactionToAssignConsultantInput?: Maybe<DepositeTransactionToAssignConsultantInput>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<DepositeTransactionToAssignConsultantDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<DepositeTransactionToAssignConsultantDtoFilter>;
};


export type QueryGetDetailPanoramaByCodeForBoArgs = {
  panoramaImageCode: Scalars['String'];
};


export type QueryGetDiscountInfoByContractArgs = {
  b2CTransactionContractId: Scalars['Uuid'];
};


export type QueryGetDiscountInfoByDepositArgs = {
  b2CDepositTransactionId: Scalars['Uuid'];
};


export type QueryGetDiscountInfoForFoByDepositArgs = {
  b2CDepositTransactionId: Scalars['Uuid'];
};


export type QueryGetEmailNotificationTemplateByIdArgs = {
  notificationTemplateId: Scalars['Uuid'];
};


export type QueryGetEmailNotificationTemplatesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<EmailNotificationTemplateDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<EmailNotificationTemplateDtoFilter>;
};


export type QueryGetFoC2CPropertyPostDetailPathByPostIdArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetFoC2CPropertyPostForRentByCodeArgs = {
  propertyPostCode: Scalars['String'];
};


export type QueryGetFoC2CPropertyPostForSaleByCodeArgs = {
  propertyPostCode: Scalars['String'];
};


export type QueryGetFoC2CPropertyPostRequestUpdateReasonArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetFoC2CPropertyPostsForRentHomePageArgs = {
  getFoC2CPropertyPostsForRentHomePageInput: GetFoC2CPropertyPostsForRentHomePageInput;
};


export type QueryGetFoC2CPropertyPostsHomePageV1Args = {
  getFoC2CPropertyPostsHomePageV1Input: GetFoC2CPropertyPostsHomePageV1Input;
};


export type QueryGetFoInvestorByCodeArgs = {
  foInvestorCode: Scalars['String'];
};


export type QueryGetFoInvestorByIdArgs = {
  foInvestorId: Scalars['Uuid'];
};


export type QueryGetFollowerFeedItemsForBackOfficeArgs = {
  order_by?: Maybe<FollowerFeedItemForBackOfficeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<FollowerFeedItemForBackOfficeDtoFilter>;
};


export type QueryGetFollowTopenersForFrontOfficeArgs = {
  input?: Maybe<GetFollowTopenerForFrontOfficeInput>;
  order_by?: Maybe<GetFollowTopenerForFrontOfficeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetFoProjectByCodeForSearchArgs = {
  projectCode: Scalars['String'];
};


export type QueryGetFoProjectDetailPathByProjectIdArgs = {
  projectId: Scalars['Uuid'];
};


export type QueryGetFoProjectsHomePageV1Args = {
  getFoProjectsHomePageV1Input: GetFoProjectsHomePageV1Input;
};


export type QueryGetFoProjectsOfInvestorByIdArgs = {
  getFOProjectsOfInvestorInput: GetFoProjectsOfInvestorInput;
};


export type QueryGetFoTopenerByCodeForSearchArgs = {
  topenerCode: Scalars['String'];
};


export type QueryGetHierarchicalStaffGroupsForC2CArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffGroupId?: Maybe<Scalars['String']>;
  where?: Maybe<StaffGroupDtoFilter>;
};


export type QueryGetHistorySupportServiceConfigurationByIdArgs = {
  supportServiceId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetHistoryTopenerServiceConfigurationByIdArgs = {
  supportServiceId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetImageUploadUrlArgs = {
  request: GetImageUploadUrlInput;
};


export type QueryGetInvestorByIdArgs = {
  investorId: Scalars['Uuid'];
};


export type QueryGetMemberInfoStringeeByPhoneBoArgs = {
  phone: Scalars['String'];
};


export type QueryGetPanoramaByCodeArgs = {
  panoramaImageCode: Scalars['String'];
};


export type QueryGetPanoramaByPropertyPostIdArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetProfilePhotoApprovalStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProfilePhotoApprovalStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProfilePhotoApprovalStatusDtoFilter>;
};


export type QueryGetProfilePhotoRejectReasonArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProfilePhotoRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProfilePhotoRejectReasonDtoFilter>;
};


export type QueryGetProjectAssigneeForContactTradingB2CArgs = {
  keyWords?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetProjectItemsByProjectIdArgs = {
  projectId: Scalars['Uuid'];
};


export type QueryGetProjectsAdditionalForSearchArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectsAdditionalForSearchInput: ProjectsAdditionalForSearchInput;
};


export type QueryGetProjectsCiArgs = {
  request: GetProjectsCiInput;
};


export type QueryGetProjectsViewedByCurrentUserFoArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetPropertyPostApprovalStatusByPropertyPostIdsArgs = {
  propertyPostIds?: Maybe<Scalars['String']>;
};


export type QueryGetPropertyPostDetailByConsultantForBackOfficeArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryGetPropertyPostsAdditionalForSearchArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostsAdditionalForSearchInput: PropertyPostsAdditionalForSearchInput;
};


export type QueryGetReceivedServiceTicketsByCurrentUserForFrontOfficeArgs = {
  order_by?: Maybe<ReceivedServiceTicketForFrontOfficeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ReceivedServiceTicketForFrontOfficeDtoFilter>;
};


export type QueryGetSaleSeasonBlocksAndFloorsArgs = {
  saleSeasonId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetSaleSeasonStatsBookingAndDepositPhaseBoArgs = {
  saleSeasonId: Scalars['Uuid'];
};


export type QueryGetSearchTermsArgs = {
  order_by?: Maybe<SearchTermDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SearchTermDtoFilter>;
};


export type QueryGetSecuredFileUploadUrlArgs = {
  request: GetSecuredFileUploadUrlInput;
};


export type QueryGetSecuredFileUrlArgs = {
  request: GetSecuredFileUrlInput;
};


export type QueryGetSentServiceTicketsByCurrentUserForFrontOfficeArgs = {
  order_by?: Maybe<SentServiceTicketForFrontOfficeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SentServiceTicketForFrontOfficeDtoFilter>;
};


export type QueryGetServiceTicketByIdForFrontOfficeArgs = {
  supportServiceTicketId: Scalars['Uuid'];
};


export type QueryGetServiceTicketResultByIdForFrontOfficeArgs = {
  supportServiceTicketResultId: Scalars['Uuid'];
};


export type QueryGetSimilarProjectsForFoArgs = {
  getSimilarProjectsForFOInput: GetSimilarProjectsForFoInput;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetSimpleSupportServiceTicketByIdArgs = {
  supportServiceTicketId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetStaffGroupsByIdArgs = {
  staffGroupId?: Maybe<Scalars['String']>;
};


export type QueryGetStaffsBackOfficeArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: GetStaffsBackOfficeInput;
  order_by?: Maybe<StaffForBackOfficeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForBackOfficeDtoFilter>;
};


export type QueryGetStaffsOfStaffGroupArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: GetStaffsOfStaffGroupInput;
  order_by?: Maybe<StaffsOfStaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffsOfStaffGroupDtoFilter>;
};


export type QueryGetStatisticPropertyPostsBySaleSeasonArgs = {
  saleSeasonId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetStringeeXAccountsArgs = {
  request: GetStringeeXAccountsInput;
};


export type QueryGetStringeeXCallHistoriesArgs = {
  request: GetStringeeXCallHistoriesInput;
};


export type QueryGetStringeeXChatConversationArgs = {
  request: GetStringeeXChatConversationInput;
};


export type QueryGetStringeeXChatConversationsArgs = {
  request: GetStringeeXChatConversationsInput;
};


export type QueryGetStringeeXCompaniesArgs = {
  request: GetStringeeXCompaniesInput;
};


export type QueryGetStringeeXContactsArgs = {
  request: GetStringeeXContactsInput;
};


export type QueryGetStringeeXNumberListArgs = {
  request: GetStringeeXNumberListInput;
};


export type QueryGetStringeeXPccAgentsArgs = {
  request: GetStringeeXPccAgentsInput;
};


export type QueryGetStringeeXPccGroupsArgs = {
  request: GetStringeeXPccGroupsInput;
};


export type QueryGetStringeeXPccNumbersArgs = {
  request: GetStringeeXPccNumbersInput;
};


export type QueryGetStringeeXQueuesArgs = {
  request: GetStringeeXQueuesInput;
};


export type QueryGetStringeeXTicketsArgs = {
  request: GetStringeeXTicketsInput;
};


export type QueryGetSubscriptionPackageByIdArgs = {
  subscriptionPackageId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetSupportRequestClosingReasonByIdArgs = {
  Id?: Maybe<Scalars['Uuid']>;
  id: Scalars['Uuid'];
};


export type QueryGetSupportRequestClosingReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportRequestClosingReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestClosingReasonDtoFilter>;
};


export type QueryGetSupportRequestsByRequesterUserIdArgs = {
  order_by?: Maybe<SupportRequestInfoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QueryGetSupportServiceConfigurationByIdArgs = {
  supportServiceId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetSupportServiceTicketDetailArgs = {
  supportServiceTicketId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetSupportServiceTicketProcessingHistoriesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  supportServiceTicketId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetSupportServiceTicketsByPropertyPostIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetSupportServiceTypeByIdArgs = {
  supportServiceTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetTopenerBankAccountsByCurrentUserFoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetTopenersAvailableArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTopenersAvailableInput;
};


export type QueryGetTopenersByCurrentUserForFrontOfficeArgs = {
  input?: Maybe<GetTopenersByCurrentUserInput>;
  order_by?: Maybe<GetTopenersByCurrentUserDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetTopenerServiceConfigurationByIdArgs = {
  supportServiceId?: Maybe<Scalars['Uuid']>;
};


export type QueryGetTopenersRecentlySupportTicketArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTopenersRecentlySupportTicketInput;
};


export type QueryGetTopenersSuggestionArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTopenersSuggestionInput;
};


export type QueryGetTopenersViewedByCurrentUserFoArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryGetTotalB2CTransactionContractArgs = {
  getTotalB2CTransactionContractInput?: Maybe<GetTotalB2CTransactionContractInput>;
};


export type QueryGetTotalFollowerByFeedObjectIdForFrontOfficeArgs = {
  feedObjectId?: Maybe<Scalars['String']>;
};


export type QueryGetUserByIdBackOfficeArgs = {
  userId: Scalars['Uuid'];
};


export type QueryGetUserC2CDemandsArgs = {
  order_by?: Maybe<C2CDemandDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetUserC2CDemandsInput;
  where?: Maybe<C2CDemandDtoFilter>;
};


export type QueryGetUserFollowOnPostsByPropertyPostIdsArgs = {
  getUserFollowOnPostsByPropertyPostIdsInput: GetUserFollowOnPostsByPropertyPostIdsInput;
};


export type QueryGetUserFollowOnProjectsByProjectIdsArgs = {
  getUserFollowOnProjectsByProjectIdsInput: GetUserFollowOnProjectsByProjectIdsInput;
};


export type QueryGetUserInfoByPhoneNumberArgs = {
  getUserInfoByPhoneNumberInput?: Maybe<GetUserInfoByPhoneNumberInput>;
};


export type QueryGetUsersArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<UserDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<UserDtoFilter>;
};


export type QueryGetUsersForMessengerArgs = {
  request: GetUsersForMessengerInput;
};


export type QueryGuaranteedPackagesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<GuaranteedPackageDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<GuaranteedPackageDtoFilter>;
};


export type QueryGuestByIdArgs = {
  guestId?: Maybe<Scalars['Uuid']>;
};


export type QueryGuestsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<GuestDtoFilter>;
};


export type QueryHaveContactTradingB2CByPropertyPostIdArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryImageSizesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ImageSizeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ImageSizeDtoFilter>;
};


export type QueryInternalFacilitiesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<InternalFacilityDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<InternalFacilityDtoFilter>;
};


export type QueryInternationalCardTypeByIdArgs = {
  internationalCardTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryInternationalCardTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<InternationalCardTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<InternationalCardTypeDtoFilter>;
};


export type QueryIntroductionPageArgs = {
  languageCode?: Maybe<Scalars['String']>;
};


export type QueryInviteInfoArgs = {
  userId?: Maybe<Scalars['Uuid']>;
};


export type QueryInviteStatusByIdArgs = {
  inviteStatusId: Scalars['Uuid'];
};


export type QueryInviteUserActiveArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  userId: Scalars['Uuid'];
  where?: Maybe<SimpleUserInfoDtoFilter>;
};


export type QueryLanguageByIdArgs = {
  languageId?: Maybe<Scalars['Uuid']>;
};


export type QueryLanguagesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<LanguageDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<LanguageDtoFilter>;
};


export type QueryLatestAgentPageArgs = {
  languageCode?: Maybe<Scalars['String']>;
};


export type QueryLegalInfoByIdArgs = {
  legalInfoId?: Maybe<Scalars['Uuid']>;
};


export type QueryLegalInfoesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<LegalInfoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<LegalInfoDtoFilter>;
};


export type QueryLimitPostSettingsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<LimitPostSettingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<LimitPostSettingDtoFilter>;
};


export type QueryMobileAppVersionByIdArgs = {
  mobileAppVersionId?: Maybe<Scalars['Int']>;
};


export type QueryMobileAppVersionsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<MobileAppVersionDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<MobileAppVersionDtoFilter>;
};


export type QueryNearFacilitiesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<NearFacilityDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<NearFacilityDtoFilter>;
};


export type QueryNewlyUpdatedNewsPageArgs = {
  request?: Maybe<GetNewlyUpdatedNewsRequestInput>;
};


export type QueryNotificationsByUserIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<NotificationDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<NotificationDtoFilter>;
};


export type QueryOrganizationByIdArgs = {
  organizationId?: Maybe<Scalars['Uuid']>;
};


export type QueryOrganizationsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<OrganizationDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<OrganizationDtoFilter>;
};


export type QueryPanoramaImageApprovalStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PanoramaImageApprovalStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PanoramaImageApprovalStatusDtoFilter>;
};


export type QueryPanoramaRequestUpdateReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PanoramaRequestUpdateReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PanoramaRequestUpdateReasonDtoFilter>;
};


export type QueryPanoramaScenesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PanoramaSceneDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PanoramaSceneDtoFilter>;
};


export type QueryPanoramaTutorialsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PanoramaTutorialDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PanoramaTutorialDtoFilter>;
};


export type QueryPaymentConfigNotesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PaymentConfigNotesDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PaymentConfigNotesDtoFilter>;
};


export type QueryPaymentMethodByIdArgs = {
  paymentMethodId?: Maybe<Scalars['Uuid']>;
};


export type QueryPaymentMethodsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PaymentMethodDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PaymentMethodDtoFilter>;
};


export type QueryPaymentStatusByIdArgs = {
  paymentStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryPaymentStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PaymentStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PaymentStatusDtoFilter>;
};


export type QueryPaymentTransactionByIdArgs = {
  paymentTransactionInput: PaymentTransactionInput;
};


export type QueryPaymentUnitsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PaymentUnitDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PaymentUnitDtoFilter>;
};


export type QueryPendingReasonByIdArgs = {
  pendingReasonId?: Maybe<Scalars['Uuid']>;
};


export type QueryPendingReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PendingReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PendingReasonDtoFilter>;
};


export type QueryPlusServicesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<RequestTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<RequestTypeDtoFilter>;
};


export type QueryPlusServicesBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<RequestTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<RequestTypeDtoFilter>;
};


export type QueryPoliciesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PolicyDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PolicyDtoFilter>;
};


export type QueryPolicyByIdArgs = {
  policyId?: Maybe<Scalars['Uuid']>;
};


export type QueryPolicyByPolicyTypeIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  policyTypeId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<PolicyDtoFilter>;
};


export type QueryPolicyByPropertyPostIdForTransactionArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetPolicyByPropertyPostIdForTransactionInput;
};


export type QueryPolicyBySaleSeasonIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PolicyDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<PolicyDtoFilter>;
};


export type QueryPolicyTypeByIdArgs = {
  policyTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryPolicyTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PolicyTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PolicyTypeDtoFilter>;
};


export type QueryPostTypeByIdArgs = {
  postTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryPostTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PostTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PostTypeDtoFilter>;
};


export type QueryPotentialAgentUsersArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PotentialAgentUserDtoFilter>;
};


export type QueryProjectByIdArgs = {
  projectId: Scalars['Uuid'];
};


export type QueryProjectPostStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectPostStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectPostStatusDtoFilter>;
};


export type QueryProjectPostStatusByIdArgs = {
  projectPostStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryProjectsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectDtoFilter>;
};


export type QueryProjectsAssignedToAgentIdForPublicArgs = {
  agentId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectForPublicDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectForPublicDtoFilter>;
};


export type QueryProjectsForPublicArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectName: Scalars['String'];
  where?: Maybe<ProjectDtoFilter>;
};


export type QueryProjectStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectStatusDtoFilter>;
};


export type QueryProjectStatusByIdArgs = {
  projectStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryProjectSuggestionsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectSuggestionDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectSuggestionDtoFilter>;
};


export type QueryProjectWithPropertyPostDistrictIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  districtId: Scalars['Int'];
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryProjectWithPropertyPostsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryProjectWithPropertyPostsByFollowerIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  followerId?: Maybe<Scalars['Uuid']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryProjectWithPropertyPostsByUserIdArgs = {
  cityId?: Maybe<Scalars['Int']>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  districtId?: Maybe<Scalars['Int']>;
  export?: Maybe<Scalars['Boolean']>;
  keyword?: Maybe<Scalars['String']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  userId: Scalars['Uuid'];
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryProjectWithPropertyPostsCityIdArgs = {
  cityId: Scalars['Int'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectWithPropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectWithPropertyPostDtoFilter>;
};


export type QueryPropertyPostApprovalStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostApprovalStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostApprovalStatusDtoFilter>;
};


export type QueryPropertyPostApprovalStatusByIdArgs = {
  propertyPostApprovalStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryPropertyPostBlockNamesBySeasonIdArgs = {
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  saleSeasonId: Scalars['Uuid'];
  where?: Maybe<BlockNameInfoFilter>;
};


export type QueryPropertyPostByIdArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryPropertyPostByIdForTransactionArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryPropertyPostCategoriesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostCategoryDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostCategoryDtoFilter>;
};


export type QueryPropertyPostDetailArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryPropertyPostDetailForBackOfficeArgs = {
  propertyPostId: Scalars['Uuid'];
};


export type QueryPropertyPostsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostsBasketArgs = {
  request: GetPropertyPostsBasketInputType;
};


export type QueryPropertyPostsBasketForTopenerArgs = {
  request: GetPropertyPostsBasketForTopenerInput;
};


export type QueryPropertyPostsBasketForTopenerTransferArgs = {
  request: GetPropertyPostsBasketForTopenerTransferInput;
};


export type QueryPropertyPostsBasketForWebArgs = {
  request: GetPropertyPostsBasketForWebInputType;
};


export type QueryPropertyPostsByBlockNameAdvancedArgs = {
  request: GetPropertyPostsByBlockNameAdvancedInput;
};


export type QueryPropertyPostsByBlockNameForTransferAdvancedArgs = {
  request: GetPropertyPostsByBlockNameForTransferAdvancedInput;
};


export type QueryPropertyPostsByCityIdArgs = {
  cityId: Scalars['Int'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostsByCurrentUserArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostsByDistrictIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  districtId: Scalars['Int'];
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostsByFollowerIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  followerId?: Maybe<Scalars['Uuid']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostsBySeasonIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  saleSeasonId: Scalars['Uuid'];
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostsByUserIdForPublicArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostForPublicDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  userId: Scalars['Uuid'];
  where?: Maybe<PropertyPostForPublicDtoFilter>;
};


export type QueryPropertyPostsForBackOfficeArgs = {
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  postAppearanceType: PostAppearanceType;
  where?: Maybe<PropertyPostDtoFilter>;
};


export type QueryPropertyPostStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostStatusDtoFilter>;
};


export type QueryPropertyPostStatusByIdArgs = {
  propertyPostStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryPropertyPostSuggestionsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostSuggestionDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostSuggestionDtoFilter>;
};


export type QueryPropertySubTypeByIdArgs = {
  propertySubTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryPropertySubTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertySubTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertySubTypeDtoFilter>;
};


export type QueryPropertyTypeByIdArgs = {
  propertyTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryPropertyTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyTypeDtoFilter>;
};


export type QueryQnaPageArgs = {
  request: GetPagesWithPaging;
};


export type QueryReactionTypeByIdArgs = {
  reactionTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryReactionTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ReactionTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ReactionTypeDtoFilter>;
};


export type QueryRecruitmentDetailArgs = {
  request?: Maybe<GetRecruitmentByIdRequestInput>;
};


export type QueryRecruitmentPageArgs = {
  request: GetPagesWithPaging;
};


export type QueryReferredAgentsByAgentIdArgs = {
  agentId: Scalars['Uuid'];
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<AgentDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<AgentDtoFilter>;
};


export type QueryRefundPaymentTransferInfoByTransIdArgs = {
  transactionId: Scalars['Uuid'];
};


export type QueryRepresentiveAgentPageArgs = {
  languageCode?: Maybe<Scalars['String']>;
};


export type QueryRequestTypeByIdArgs = {
  requestTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryRequestTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<RequestTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<RequestTypeDtoFilter>;
};


export type QueryRolesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
};


export type QueryRuleByIdArgs = {
  ruleId?: Maybe<Scalars['Uuid']>;
};


export type QueryRulesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<RuleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<RuleDtoFilter>;
};


export type QuerySaleSeasonByIdArgs = {
  saleSeasonId?: Maybe<Scalars['Uuid']>;
};


export type QuerySaleSeasonByProjectIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SaleSeasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<SaleSeasonDtoFilter>;
};


export type QuerySaleSeasonStatusByIdArgs = {
  saleSeasonStatusId?: Maybe<Scalars['Uuid']>;
};


export type QuerySaleSeasonStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SaleSeasonStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SaleSeasonStatusDtoFilter>;
};


export type QuerySaleTrackingStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SaleTrackingStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SaleTrackingStatusDtoFilter>;
};


export type QuerySaleTrackingStatusByIdArgs = {
  saleTrackingStatusId?: Maybe<Scalars['Uuid']>;
};


export type QuerySearchAgentsArgs = {
  searchAgentInput: SearchAgentInput;
};


export type QuerySearchArticlesArgs = {
  request: SearchArticleRequest;
};


export type QuerySearchB2C2CProjectsBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<B2C2CProjectBoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  searchB2C2CProjectsBOInput: SearchB2C2CProjectsBoInput;
};


export type QuerySearchBoProjectsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<ProjectBoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  searchBOProjectsInput: SearchBoProjectsInput;
};


export type QuerySearchContactTradingCountArgs = {
  searchContactTradingInput: SearchContactTradingInput;
};


export type QuerySearchFoInvestorsArgs = {
  searchFOInvestorInput: SearchFoInvestorInput;
};


export type QuerySearchInvestorsArgs = {
  searchInvestorInput: SearchInvestorInput;
};


export type QuerySearchPrePropertyPostsArgs = {
  searchPropertyPostInput: SearchPropertyPostInput;
};


export type QuerySearchProjectsArgs = {
  searchProjectInput: SearchProjectInput;
};


export type QuerySearchPropertyPostForConsultantSupportForBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<PropertyPostDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: SearchPropertyPostForConsultantSupportInput;
};


export type QuerySearchPropertyPostForSaleForBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  searchPropertyPostsInput: SearchPropertyPostInput;
};


export type QuerySearchPropertyPostsArgs = {
  searchPropertyPostInput: SearchPropertyPostInput;
};


export type QuerySearchPropertyPostsForRentArgs = {
  searchPropertyPostForRentInput: SearchPropertyPostForRentInput;
};


export type QuerySearchPropertyPostsForRentForBoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  searchPropertyPostForRentInput: SearchPropertyPostForRentInput;
};


export type QuerySearchPropertyPostsOnC2CDemandForRentArgs = {
  input: SearchPropertyPostsC2CDemandForRentInput;
};


export type QuerySearchPropertyPostsOnC2CDemandForSaleArgs = {
  input: SearchPropertyPostsC2CDemandForSaleInput;
};


export type QuerySimpleSaleSeasonNameByProjectIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SimpleSeasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['Uuid']>;
};


export type QuerySimpleSeasonByIdArgs = {
  saleSeasonId?: Maybe<Scalars['Uuid']>;
};


export type QuerySimpleTransactionDetailArgs = {
  simpleTransactionDetailInput: SimpleTransactionDetailInput;
};


export type QuerySpamTypeByIdArgs = {
  spamTypeId?: Maybe<Scalars['Uuid']>;
};


export type QuerySpamTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SpamTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SpamTypeDtoFilter>;
};


export type QuerySpecializeByIdArgs = {
  specializeId?: Maybe<Scalars['Uuid']>;
};


export type QuerySpecializesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SpecializeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SpecializeDtoFilter>;
};


export type QueryStaffByIdArgs = {
  staffId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffByUserIdArgs = {
  userId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffContractTypeByIdArgs = {
  staffContractTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffContractTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffContractTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffContractTypeDtoFilter>;
};


export type QueryStaffGroupByIdArgs = {
  staffGroupId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffGroupsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffGroupDtoFilter>;
};


export type QueryStaffGroupsByStaffArgs = {
  staffId: Scalars['Uuid'];
  userId: Scalars['Uuid'];
};


export type QueryStaffGroupsByStaffTypeIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffTypeId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<StaffGroupDtoFilter>;
};


export type QueryStaffGroupsByStaffTypeIdFoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffTypeId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<StaffGroupDtoFilter>;
};


export type QueryStaffGroupsNotAssignStaffArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffGroupsNotAssignStaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffId?: Maybe<Scalars['Uuid']>;
  staffTypeId?: Maybe<Scalars['Uuid']>;
  userId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<StaffGroupsNotAssignStaffDtoFilter>;
};


export type QueryStaffPositionByIdArgs = {
  staffPositionId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffPositionsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffPositionDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffPositionDtoFilter>;
};


export type QueryStaffRankingByIdArgs = {
  staffRankingId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffRankingsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffRankingDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffRankingDtoFilter>;
};


export type QueryStaffsArgs = {
  createdDatetimeFrom?: Maybe<Scalars['Long']>;
  createdDatetimeTo?: Maybe<Scalars['Long']>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  fullName?: Maybe<Scalars['String']>;
  order_by?: Maybe<StaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffCode?: Maybe<Scalars['String']>;
  where?: Maybe<StaffDtoFilter>;
};


export type QueryStaffsBelongToAllocationRuleArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: StaffsBelongAllocationRuleInput;
  order_by?: Maybe<StaffForAllocationRuleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForAllocationRuleDtoFilter>;
};


export type QueryStaffsBelongToBackOfficeRoleArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: StaffForBackOfficeRoleInput;
  order_by?: Maybe<StaffForBackOfficeRoleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForBackOfficeRoleDtoFilter>;
};


export type QueryStaffsBelongToStaffGroupArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: StaffForStaffGroupInput;
  order_by?: Maybe<StaffForStaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForStaffGroupDtoFilter>;
};


export type QueryStaffsByGroupLeaderUserIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  groupLeaderUserId: Scalars['Uuid'];
  order_by?: Maybe<StaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffDtoFilter>;
};


export type QueryStaffsByRoleNameArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  roleName?: Maybe<Scalars['String']>;
  where?: Maybe<StaffDtoFilter>;
};


export type QueryStaffsByStaffGroupIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffGroupId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<StaffDtoFilter>;
};


export type QueryStaffsInfosBySupportRequestIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffInfoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  supportRequestId: Scalars['Uuid'];
};


export type QueryStaffsNotBelongToAllocationRuleArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: StaffNotBelongAllocationRuleInput;
  order_by?: Maybe<StaffForAllocationRuleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForAllocationRuleDtoFilter>;
};


export type QueryStaffsNotBelongToBackOfficeRoleArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: StaffForBackOfficeRoleInput;
  order_by?: Maybe<StaffForBackOfficeRoleDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForBackOfficeRoleDtoFilter>;
};


export type QueryStaffsNotBelongToStaffGroupArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  input: StaffForStaffGroupInput;
  order_by?: Maybe<StaffForStaffGroupDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffForStaffGroupDtoFilter>;
};


export type QueryStaffStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffStatusDtoFilter>;
};


export type QueryStaffStatusByIdArgs = {
  staffStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffTypeByIdArgs = {
  staffTypeId?: Maybe<Scalars['Uuid']>;
};


export type QueryStaffTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StaffTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffTypeDtoFilter>;
};


export type QueryStreetByIdArgs = {
  streetId?: Maybe<Scalars['Int']>;
};


export type QueryStreetsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<StreetDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StreetDtoFilter>;
};


export type QuerySubscriptionPackageStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SubscriptionPackageStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SubscriptionPackageStatusDtoFilter>;
};


export type QuerySubscriptionPackageStatusByIdArgs = {
  subscriptionPackageStatusId?: Maybe<Scalars['Uuid']>;
};


export type QuerySubscriptionPaymentStatusArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SubscriptionPaymentStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SubscriptionPaymentStatusDtoFilter>;
};


export type QuerySubscriptionPaymentStatusIdArgs = {
  subscriptionPaymentStatusId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportRequestByAssigneeIdArgs = {
  assigneeId?: Maybe<Scalars['Uuid']>;
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestByContactTradingIdArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
  order_by?: Maybe<SupportRequestContactTradingDtoSort>;
};


export type QuerySupportRequestByIdArgs = {
  supportRequestId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportRequestExactByIdArgs = {
  supportRequestId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportRequestHistoryByIdArgs = {
  order_by?: Maybe<SupportResultsDtoSort>;
  supportRequestId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportRequestsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestServiceBonusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestsExactByCurrentUserArgs = {
  order_by?: Maybe<SupportRequestInfoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestsExactByCurrentUserMobileArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['PaginationAmount']>;
  last?: Maybe<Scalars['PaginationAmount']>;
  order_by?: Maybe<SupportRequestInfoDtoSort>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestsFoByContactTradingIdArgs = {
  contactTradingId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportRequestsInfoArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestsInfoByCurrentUserArgs = {
  order_by?: Maybe<SupportRequestInfoDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
};


export type QuerySupportRequestSourceTypeArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportRequestSourceTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestSourceTypeDtoFilter>;
};


export type QuerySupportRequestStatusByIdArgs = {
  supportRequestStatusId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportRequestStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportRequestStatusDtoFilter>;
};


export type QuerySupportServiceByIdArgs = {
  supportServiceId?: Maybe<Scalars['Uuid']>;
};


export type QuerySupportServicesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportServiceDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportServiceDtoFilter>;
};


export type QuerySupportServiceTicketCancelReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportServiceTicketCancelReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportServiceTicketCancelReasonDtoFilter>;
};


export type QuerySupportServiceTicketProcessingStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportServiceTicketProcessingStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportServiceTicketProcessingStatusDtoFilter>;
};


export type QuerySupportServiceTicketRejectReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportServiceTicketRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportServiceTicketRejectReasonDtoFilter>;
};


export type QuerySupportServiceTicketResultUpdateReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportServiceTicketResultUpdateReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportServiceTicketResultUpdateReasonDtoFilter>;
};


export type QuerySupportServiceTicketStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<SupportServiceTicketStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SupportServiceTicketStatusDtoFilter>;
};


export type QueryTopenerOfMonthArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TopenerOfMonthDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<TopenerOfMonthDtoFilter>;
};


export type QueryTopenerServiceRequestTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<RequestTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<RequestTypeDtoFilter>;
};


export type QueryTransactionCancelReasonByIdArgs = {
  transactionCancelReasonId?: Maybe<Scalars['Uuid']>;
};


export type QueryTransactionCancelReasonsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionCancelReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<TransactionCancelReasonDtoFilter>;
};


export type QueryTransactionPaymentMethodConfigsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionPaymentMethodConfigDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<TransactionPaymentMethodConfigDtoFilter>;
};


export type QueryTransactionPaymentStatusByIdArgs = {
  transactionPaymentStatusId?: Maybe<Scalars['Uuid']>;
};


export type QueryTransactionPaymentStatusesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<TransactionPaymentStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<TransactionPaymentStatusDtoFilter>;
};


export type QueryTransactionPaymentValidateArgs = {
  transactionPaymentValidate: TransactionPaymentValidateInput;
};


export type QueryTransactionsByBuyerIdArgs = {
  buyerId: Scalars['Uuid'];
};


export type QueryUnitOfMeasureByIdArgs = {
  unitOfMeasureId?: Maybe<Scalars['Uuid']>;
};


export type QueryUnitOfMeasuresArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<UnitOfMeasureDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<UnitOfMeasureDtoFilter>;
};


export type QueryUserByIdArgs = {
  fromCache?: Maybe<Scalars['Boolean']>;
  userId?: Maybe<Scalars['Uuid']>;
};


export type QueryUserForMessengerByIdArgs = {
  request: GetUserForMessengerByIdInput;
};


export type QueryUserReportSpamsByPostIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<UserReportSpamDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
  where?: Maybe<UserReportSpamDtoFilter>;
};


export type QueryUsersByRoleIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  roleId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<SimpleUserInfoDtoFilter>;
};


export type QueryUsersByStaffTypeIdArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  staffTypeId?: Maybe<Scalars['Uuid']>;
  where?: Maybe<SimpleUserInfoDtoFilter>;
};


export type QueryUserTransactionByIdArgs = {
  userTransactionInput: UserTransactionInput;
};


export type QueryUserTransactionsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<UserTransactionDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<UserTransactionDtoFilter>;
};


export type QueryUserViewTypesArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<UserViewTypeDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<UserViewTypeDtoFilter>;
};


export type QueryValidateBookingTransactionArgs = {
  bookingTransactionId: Scalars['Uuid'];
};


export type QueryValidateDepositeTransactionArgs = {
  depositeTransactionId: Scalars['Uuid'];
};


export type QueryValidateExpireReCaptchaForPropertyPostArgs = {
  requestId: Scalars['Uuid'];
};


export type QueryValidateNumberPostByUserIdArgs = {
  validateNumberOfPostByUserIdInput: ValidateNumberOfPostByUserIdInput;
};


export type QueryVnpayPaymentTransferInfoByTransIdArgs = {
  transactionId: Scalars['Uuid'];
};


export type QueryWardByIdArgs = {
  wardId?: Maybe<Scalars['Int']>;
};


export type QueryWardsArgs = {
  csvHeaders?: Maybe<Array<Maybe<Scalars['String']>>>;
  export?: Maybe<Scalars['Boolean']>;
  order_by?: Maybe<WardDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<WardDtoFilter>;
};

export type RatingC2CPostInput = {
  c2CPropertyPostId?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  rating: Scalars['Int'];
};

export type RatingC2CPostResponse = {
  __typename?: 'RatingC2CPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ReactionTypeDto = {
  __typename?: 'ReactionTypeDto';
  isActive: Scalars['Boolean'];
  reactionTypeDescription?: Maybe<Scalars['String']>;
  reactionTypeId?: Maybe<Scalars['String']>;
  reactionTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type ReactionTypeDtoFilter = {
  AND?: Maybe<Array<ReactionTypeDtoFilter>>;
  OR?: Maybe<Array<ReactionTypeDtoFilter>>;
  reactionTypeName?: Maybe<Scalars['String']>;
  reactionTypeName_contains?: Maybe<Scalars['String']>;
  reactionTypeName_ends_with?: Maybe<Scalars['String']>;
  reactionTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reactionTypeName_not?: Maybe<Scalars['String']>;
  reactionTypeName_not_contains?: Maybe<Scalars['String']>;
  reactionTypeName_not_ends_with?: Maybe<Scalars['String']>;
  reactionTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reactionTypeName_not_starts_with?: Maybe<Scalars['String']>;
  reactionTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type ReactionTypeDtoSort = {
  reactionTypeName?: Maybe<SortOperationKind>;
};

export type ReactionTypeInfoDto = {
  __typename?: 'ReactionTypeInfoDto';
  isActive: Scalars['Boolean'];
  reactionTypeDescription?: Maybe<Scalars['String']>;
  reactionTypeId?: Maybe<Scalars['String']>;
  reactionTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type ReassignC2CContactTradingToTeamLeaderInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectSupportReasonId?: Maybe<Scalars['String']>;
};

export type ReassignC2CContactTradingToTeamLeaderResponse = {
  __typename?: 'ReassignC2CContactTradingToTeamLeaderResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ReassignContractTradingToTeamLeaderInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectSupportReasonId?: Maybe<Scalars['String']>;
};

export type ReassignContractTradingToTeamLeaderResponse = {
  __typename?: 'ReassignContractTradingToTeamLeaderResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ReassignToTeamLeaderInput = {
  recordVersion?: Maybe<Scalars['Int']>;
  supportRequestClosingReasonId?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
};

export type ReassignToTeamLeaderResponse = {
  __typename?: 'ReassignToTeamLeaderResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ReceivedServiceTicketForFrontOfficeDto = {
  __typename?: 'ReceivedServiceTicketForFrontOfficeDto';
  appointmentDatetime?: Maybe<Scalars['Float']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostDetailPath?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketProcessingStatusId?: Maybe<Scalars['String']>;
  ticketProcessingStatusName?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
  ticketStatusName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Float']>;
};

export type ReceivedServiceTicketForFrontOfficeDtoFilter = {
  AND?: Maybe<Array<ReceivedServiceTicketForFrontOfficeDtoFilter>>;
  appointmentDatetime?: Maybe<Scalars['Float']>;
  appointmentDatetime_gt?: Maybe<Scalars['Float']>;
  appointmentDatetime_gte?: Maybe<Scalars['Float']>;
  appointmentDatetime_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  appointmentDatetime_lt?: Maybe<Scalars['Float']>;
  appointmentDatetime_lte?: Maybe<Scalars['Float']>;
  appointmentDatetime_not?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_gt?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_gte?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  appointmentDatetime_not_lt?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_lte?: Maybe<Scalars['Float']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<ReceivedServiceTicketForFrontOfficeDtoFilter>>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostId_contains?: Maybe<Scalars['String']>;
  propertyPostId_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not?: Maybe<Scalars['String']>;
  propertyPostId_not_contains?: Maybe<Scalars['String']>;
  propertyPostId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostId_starts_with?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterFullName_contains?: Maybe<Scalars['String']>;
  requesterFullName_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not?: Maybe<Scalars['String']>;
  requesterFullName_not_contains?: Maybe<Scalars['String']>;
  requesterFullName_not_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not_starts_with?: Maybe<Scalars['String']>;
  requesterFullName_starts_with?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  requesterId_contains?: Maybe<Scalars['String']>;
  requesterId_ends_with?: Maybe<Scalars['String']>;
  requesterId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterId_not?: Maybe<Scalars['String']>;
  requesterId_not_contains?: Maybe<Scalars['String']>;
  requesterId_not_ends_with?: Maybe<Scalars['String']>;
  requesterId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterId_not_starts_with?: Maybe<Scalars['String']>;
  requesterId_starts_with?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceId_contains?: Maybe<Scalars['String']>;
  supportServiceId_ends_with?: Maybe<Scalars['String']>;
  supportServiceId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceId_not?: Maybe<Scalars['String']>;
  supportServiceId_not_contains?: Maybe<Scalars['String']>;
  supportServiceId_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceId_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceId_starts_with?: Maybe<Scalars['String']>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketCode_contains?: Maybe<Scalars['String']>;
  ticketCode_ends_with?: Maybe<Scalars['String']>;
  ticketCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketCode_not?: Maybe<Scalars['String']>;
  ticketCode_not_contains?: Maybe<Scalars['String']>;
  ticketCode_not_ends_with?: Maybe<Scalars['String']>;
  ticketCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketCode_not_starts_with?: Maybe<Scalars['String']>;
  ticketCode_starts_with?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
  ticketStatusId_contains?: Maybe<Scalars['String']>;
  ticketStatusId_ends_with?: Maybe<Scalars['String']>;
  ticketStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketStatusId_not?: Maybe<Scalars['String']>;
  ticketStatusId_not_contains?: Maybe<Scalars['String']>;
  ticketStatusId_not_ends_with?: Maybe<Scalars['String']>;
  ticketStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketStatusId_not_starts_with?: Maybe<Scalars['String']>;
  ticketStatusId_starts_with?: Maybe<Scalars['String']>;
};

export type ReceivedServiceTicketForFrontOfficeDtoSort = {
  appointmentDatetime?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  requesterFullName?: Maybe<SortOperationKind>;
};

export type RefundPaymentTransferInfoDto = {
  __typename?: 'RefundPaymentTransferInfoDto';
  bankAccountName?: Maybe<Scalars['String']>;
  bankAccountNo?: Maybe<Scalars['String']>;
  bankInfo?: Maybe<SimpleBankInfoDto>;
  branchName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  clone?: Maybe<RefundPaymentTransferInfoDto>;
  customerInfo?: Maybe<Transaction_CustomerInfoDto>;
  fundAccount?: Maybe<FundAccountInfoDto>;
  notes?: Maybe<Scalars['String']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paidFundAccount?: Maybe<FundAccountInfoDto>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  refundAmount?: Maybe<Scalars['Float']>;
  refundContents?: Maybe<Scalars['String']>;
  refundDatetime?: Maybe<Scalars['Long']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionPaymentStatus: TransactionPaymentStatus;
  transactionType: TransactionType;
  vnpayAccountNumber?: Maybe<Scalars['String']>;
};

export type RefundTransactionDto = {
  __typename?: 'RefundTransactionDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<RefundTransactionDto>;
  refundNotes?: Maybe<Scalars['String']>;
  refundTransactionId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type RegisterImageToResizeInput = {
  originalUrl?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type RegisterImageToResizeResponse = {
  __typename?: 'RegisterImageToResizeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  resizedImages?: Maybe<Array<Maybe<ResizedImageDto>>>;
};

export type RegisterImagesToResizeInput = {
  originalUrls?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type RegisterImagesToResizeResponse = {
  __typename?: 'RegisterImagesToResizeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  resizedImages?: Maybe<Array<Maybe<ComplexResizedImageDto>>>;
};

export type RegisterTopenMapUserInput = {
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};

export type RegisterTopenMapUserResponse = {
  __typename?: 'RegisterTopenMapUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  user?: Maybe<TopenMapUserDto>;
};

export type RejectCommentByIdsForBackOfficeResponse = {
  __typename?: 'RejectCommentByIdsForBackOfficeResponse';
  commentIds?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RejectCommentByIdsInput = {
  commentIds?: Maybe<Scalars['String']>;
};

export type RejectCommentForBackOfficeResponse = {
  __typename?: 'RejectCommentForBackOfficeResponse';
  comment?: Maybe<CommentForBackOfficeDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RejectCommentInput = {
  commentId?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type RejectPropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
};

export type RejectPropertyPostResponse = {
  __typename?: 'RejectPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RelatedTransactionDto = {
  __typename?: 'RelatedTransactionDto';
  bookingCode?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  changeAnotherPropertyDatetime?: Maybe<Scalars['Long']>;
  changeToPropertyPostId?: Maybe<Scalars['String']>;
  clone?: Maybe<RelatedTransactionDto>;
  depositeCode?: Maybe<Scalars['String']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  paymentUnit: PaymentUnit;
  priorBookingTransactionId?: Maybe<Scalars['String']>;
  priorPropertyPostId?: Maybe<Scalars['String']>;
};

export type RemoveStaffFromAllocationRuleInput = {
  allocationRuleId?: Maybe<Scalars['String']>;
  userIds?: Maybe<Scalars['String']>;
};

export type RemoveStaffFromAllocationRuleResponse = {
  __typename?: 'RemoveStaffFromAllocationRuleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RemoveStaffFromMultiAllocationRulesInput = {
  allocationRuleIds?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type RemoveStaffFromMultiAllocationRulesResponse = {
  __typename?: 'RemoveStaffFromMultiAllocationRulesResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RemoveStaffFromMultiGroupsInput = {
  staffGroupIds?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type RemoveStaffFromMultiGroupsResponse = {
  __typename?: 'RemoveStaffFromMultiGroupsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RemoveStaffsFromGroupInput = {
  staffGroupId?: Maybe<Scalars['String']>;
  userIds?: Maybe<Scalars['String']>;
};

export type RemoveStaffsFromGroupResponse = {
  __typename?: 'RemoveStaffsFromGroupResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RemoveStaffsFromRoleInput = {
  backOfficeRoleId?: Maybe<Scalars['String']>;
  userIds?: Maybe<Scalars['String']>;
};

export type RemoveStaffsFromRoleResponse = {
  __typename?: 'RemoveStaffsFromRoleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export enum RentPeriodUnit {
  Month = 'MONTH',
  Year = 'YEAR'
}

export type ReplyForBackOfficeDto = {
  __typename?: 'ReplyForBackOfficeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ReplyForBackOfficeDto>;
  commentId?: Maybe<Scalars['String']>;
  commentStatusId?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  linkFeedObject?: Maybe<Scalars['String']>;
  modifiedBy?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
  parentCommentId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  totalLike: Scalars['Int'];
  totalReply: Scalars['Int'];
  updatedByUserId?: Maybe<Scalars['String']>;
  userInfo?: Maybe<UserProfileDto>;
};

export type ReplyForFrontOfficeDto = {
  __typename?: 'ReplyForFrontOfficeDto';
  commentId?: Maybe<Scalars['String']>;
  commentStatusId?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['String']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  currentUserLikeComment: Scalars['Boolean'];
  feedItemId?: Maybe<Scalars['String']>;
  feedObjectId?: Maybe<Scalars['String']>;
  feedObjectTitle?: Maybe<Scalars['String']>;
  feedObjectTypeId?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  modifiedBy?: Maybe<Scalars['String']>;
  parentCommentId?: Maybe<Scalars['String']>;
  totalLike: Scalars['Int'];
  totalReply: Scalars['Int'];
  userInfo?: Maybe<UserProfileDto>;
};

/** A connection to a list of items. */
export type ReplyForFrontOfficeDtoConnection = {
  __typename?: 'ReplyForFrontOfficeDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<ReplyForFrontOfficeDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<ReplyForFrontOfficeDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type ReplyForFrontOfficeDtoEdge = {
  __typename?: 'ReplyForFrontOfficeDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<ReplyForFrontOfficeDto>;
};

export type RequestPrintContractResponse = {
  __typename?: 'RequestPrintContractResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RequestTypeDto = {
  __typename?: 'RequestTypeDto';
  businessCategoryTypeName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDisplayHomepage?: Maybe<Scalars['Boolean']>;
  isTopenerService?: Maybe<Scalars['Boolean']>;
  path?: Maybe<Scalars['String']>;
  requestTypeCategoryId?: Maybe<Scalars['String']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  staffTypeId?: Maybe<Scalars['String']>;
};

export type RequestTypeDtoFilter = {
  AND?: Maybe<Array<RequestTypeDtoFilter>>;
  OR?: Maybe<Array<RequestTypeDtoFilter>>;
  requestTypeCategoryId?: Maybe<Scalars['String']>;
  requestTypeCategoryId_contains?: Maybe<Scalars['String']>;
  requestTypeCategoryId_ends_with?: Maybe<Scalars['String']>;
  requestTypeCategoryId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeCategoryId_not?: Maybe<Scalars['String']>;
  requestTypeCategoryId_not_contains?: Maybe<Scalars['String']>;
  requestTypeCategoryId_not_ends_with?: Maybe<Scalars['String']>;
  requestTypeCategoryId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeCategoryId_not_starts_with?: Maybe<Scalars['String']>;
  requestTypeCategoryId_starts_with?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  requestTypeName_contains?: Maybe<Scalars['String']>;
  requestTypeName_ends_with?: Maybe<Scalars['String']>;
  requestTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeName_not?: Maybe<Scalars['String']>;
  requestTypeName_not_contains?: Maybe<Scalars['String']>;
  requestTypeName_not_ends_with?: Maybe<Scalars['String']>;
  requestTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeName_not_starts_with?: Maybe<Scalars['String']>;
  requestTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type RequestTypeDtoSort = {
  requestTypeName?: Maybe<SortOperationKind>;
  sortOrder?: Maybe<SortOperationKind>;
};

export type RequestTypeInfoDto = {
  __typename?: 'RequestTypeInfoDto';
  isActive: Scalars['Boolean'];
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
  staffTypeId?: Maybe<Scalars['String']>;
};

export type RequestUpdateC2CPanoramaImageInput = {
  c2CPanoramaImageId?: Maybe<Scalars['String']>;
  createdPropertyPostUserId?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReason?: Maybe<Scalars['String']>;
  panoramaRequestUpdateReasonId?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion: Scalars['Int'];
};

export type RequestUpdateC2CPanoramaImageResponse = {
  __typename?: 'RequestUpdateC2CPanoramaImageResponse';
  c2CPanoramaImageDto?: Maybe<C2CPanoramaImageDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RequestUpdateCustomerInfoByContractDto = {
  __typename?: 'RequestUpdateCustomerInfoByContractDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<RequestUpdateCustomerInfoByContractDto>;
  email?: Maybe<Scalars['String']>;
  expireUpdateCustomer: Scalars['Long'];
  fullName?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  transactionDepositeId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type RequestUpdateCustomerInfoByContractResponse = {
  __typename?: 'RequestUpdateCustomerInfoByContractResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  historyUpdateCustomerDto?: Maybe<RequestUpdateCustomerInfoByContractDto>;
};

export type RequestUpdatingPropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  requestedUpdatingReason?: Maybe<Scalars['String']>;
};

export type RequestUpdatingPropertyPostResponse = {
  __typename?: 'RequestUpdatingPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RequestUserUpdateProfilePhotoResponse = {
  __typename?: 'RequestUserUpdateProfilePhotoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RequesterAcceptServiceTicketResultInput = {
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
};

export type RequesterAcceptServiceTicketResultResponse = {
  __typename?: 'RequesterAcceptServiceTicketResultResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type RequesterRejectServiceTicketResultInput = {
  reasonId?: Maybe<Scalars['String']>;
  reasonNote?: Maybe<Scalars['String']>;
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
};

export type RequesterRejectServiceTicketResultResponse = {
  __typename?: 'RequesterRejectServiceTicketResultResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ResizeImageInput = {
  resizedImageId?: Maybe<Scalars['String']>;
};

export type ResizeImageResponse = {
  __typename?: 'ResizeImageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ResizedImageDto = {
  __typename?: 'ResizedImageDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ResizedImageDto>;
  fileName?: Maybe<Scalars['String']>;
  height?: Maybe<Scalars['Int']>;
  imageUrl?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  resizedImageId?: Maybe<Scalars['String']>;
  typeName?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Int']>;
};

export type ResultDescriptionsDtoInput = {
  isCorrectAddressOfPropertyPost: Scalars['Boolean'];
  isCorrectDescriptionPropertyPost: Scalars['Boolean'];
};

export type ResultDocumentsDtoInput = {
  descriptionImproveContent?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['String']>;
  isCorrectDocumentOfPropertyPost: Scalars['Boolean'];
  titleImproveContent?: Maybe<Scalars['String']>;
};

export type ResultImagesDtoInput = {
  bedRoomImages?: Maybe<Scalars['String']>;
  entranceImages?: Maybe<Scalars['String']>;
  frontHouseImages?: Maybe<Scalars['String']>;
  kitchenImages?: Maybe<Scalars['String']>;
  livingRoomImages?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
};

export type RoleDto = {
  __typename?: 'RoleDto';
  normalizedName?: Maybe<Scalars['String']>;
  roleDescription?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
};

export type RuleConditionDto = {
  __typename?: 'RuleConditionDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<RuleConditionDto>;
  interestedProperty?: Maybe<Scalars['String']>;
  interestedRentalPriceFrom?: Maybe<Scalars['Long']>;
  interestedRentalPriceTo?: Maybe<Scalars['Long']>;
  interestedSellingPriceFrom?: Maybe<Scalars['Long']>;
  interestedSellingPriceTo?: Maybe<Scalars['Long']>;
  specialize?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type RuleConditionDtoInput = {
  interestedProperty?: Maybe<Scalars['String']>;
  interestedRentalPriceFrom?: Maybe<Scalars['Long']>;
  interestedRentalPriceTo?: Maybe<Scalars['Long']>;
  interestedSellingPriceFrom?: Maybe<Scalars['Long']>;
  interestedSellingPriceTo?: Maybe<Scalars['Long']>;
  specialize?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type RuleDto = {
  __typename?: 'RuleDto';
  createdByUserId?: Maybe<Scalars['String']>;
  effectiveToDatetime?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime?: Maybe<Scalars['Long']>;
  isEnable: Scalars['Boolean'];
  isGenericRule: Scalars['Boolean'];
  numberOfMatches?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  propertyCriteria?: Maybe<RulePropertyCriteriaDto>;
  recordVersion?: Maybe<Scalars['Int']>;
  ruleDescription?: Maybe<Scalars['String']>;
  ruleId?: Maybe<Scalars['String']>;
  ruleName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userCriteria?: Maybe<RuleUserCriteriaDto>;
};

export type RuleDtoFilter = {
  AND?: Maybe<Array<RuleDtoFilter>>;
  effectiveToDatetime?: Maybe<Scalars['Long']>;
  effectiveToDatetime_gt?: Maybe<Scalars['Long']>;
  effectiveToDatetime_gte?: Maybe<Scalars['Long']>;
  effectiveToDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  effectiveToDatetime_lt?: Maybe<Scalars['Long']>;
  effectiveToDatetime_lte?: Maybe<Scalars['Long']>;
  effectiveToDatetime_not?: Maybe<Scalars['Long']>;
  effectiveToDatetime_not_gt?: Maybe<Scalars['Long']>;
  effectiveToDatetime_not_gte?: Maybe<Scalars['Long']>;
  effectiveToDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  effectiveToDatetime_not_lt?: Maybe<Scalars['Long']>;
  effectiveToDatetime_not_lte?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_gt?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_gte?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  ineffectiveToDatetime_lt?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_lte?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_not?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_not_gt?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_not_gte?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  ineffectiveToDatetime_not_lt?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime_not_lte?: Maybe<Scalars['Long']>;
  isEnable?: Maybe<Scalars['Boolean']>;
  isEnable_not?: Maybe<Scalars['Boolean']>;
  isGenericRule?: Maybe<Scalars['Boolean']>;
  isGenericRule_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<RuleDtoFilter>>;
  order?: Maybe<Scalars['Int']>;
  order_gt?: Maybe<Scalars['Int']>;
  order_gte?: Maybe<Scalars['Int']>;
  order_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  order_lt?: Maybe<Scalars['Int']>;
  order_lte?: Maybe<Scalars['Int']>;
  order_not?: Maybe<Scalars['Int']>;
  order_not_gt?: Maybe<Scalars['Int']>;
  order_not_gte?: Maybe<Scalars['Int']>;
  order_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  order_not_lt?: Maybe<Scalars['Int']>;
  order_not_lte?: Maybe<Scalars['Int']>;
  ruleName?: Maybe<Scalars['String']>;
  ruleName_contains?: Maybe<Scalars['String']>;
  ruleName_ends_with?: Maybe<Scalars['String']>;
  ruleName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ruleName_not?: Maybe<Scalars['String']>;
  ruleName_not_contains?: Maybe<Scalars['String']>;
  ruleName_not_ends_with?: Maybe<Scalars['String']>;
  ruleName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ruleName_not_starts_with?: Maybe<Scalars['String']>;
  ruleName_starts_with?: Maybe<Scalars['String']>;
};

export type RuleDtoInput = {
  createdByUserId?: Maybe<Scalars['String']>;
  effectiveToDatetime?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime?: Maybe<Scalars['Long']>;
  isEnable: Scalars['Boolean'];
  isGenericRule: Scalars['Boolean'];
  numberOfMatches?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  propertyCriteria?: Maybe<RulePropertyCriteriaDtoInput>;
  recordVersion?: Maybe<Scalars['Int']>;
  ruleDescription?: Maybe<Scalars['String']>;
  ruleId?: Maybe<Scalars['String']>;
  ruleName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userCriteria?: Maybe<RuleUserCriteriaDtoInput>;
};

export type RuleDtoSort = {
  createdByUserId?: Maybe<SortOperationKind>;
  effectiveToDatetime?: Maybe<SortOperationKind>;
  ineffectiveToDatetime?: Maybe<SortOperationKind>;
  isEnable?: Maybe<SortOperationKind>;
  order?: Maybe<SortOperationKind>;
  ruleName?: Maybe<SortOperationKind>;
  updatedByUserId?: Maybe<SortOperationKind>;
};

export type RuleInfoDto = {
  __typename?: 'RuleInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<RuleInfoDto>;
  effectiveToDatetime?: Maybe<Scalars['Long']>;
  ineffectiveToDatetime?: Maybe<Scalars['Long']>;
  isEnable: Scalars['Boolean'];
  isGenericRule: Scalars['Boolean'];
  numberOfMatches?: Maybe<Scalars['Int']>;
  order?: Maybe<Scalars['Int']>;
  propertyCriteria?: Maybe<RulePropertyCriteriaDto>;
  recordVersion?: Maybe<Scalars['Int']>;
  ruleDescription?: Maybe<Scalars['String']>;
  ruleId?: Maybe<Scalars['String']>;
  ruleName?: Maybe<Scalars['String']>;
  userCriteria?: Maybe<RuleUserCriteriaDto>;
};

export type RulePropertyCriteriaDto = {
  __typename?: 'RulePropertyCriteriaDto';
  areaFrom?: Maybe<Scalars['Float']>;
  areaTo?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  clone?: Maybe<RulePropertyCriteriaDto>;
  districtId?: Maybe<Scalars['Int']>;
  postTypeId?: Maybe<Scalars['String']>;
  priceFrom?: Maybe<Scalars['Float']>;
  priceTo?: Maybe<Scalars['Float']>;
  projectStatusId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
};

export type RulePropertyCriteriaDtoInput = {
  areaFrom?: Maybe<Scalars['Float']>;
  areaTo?: Maybe<Scalars['Float']>;
  cityId?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  postTypeId?: Maybe<Scalars['String']>;
  priceFrom?: Maybe<Scalars['Float']>;
  priceTo?: Maybe<Scalars['Float']>;
  projectStatusId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
};

export type RuleUserCriteriaDto = {
  __typename?: 'RuleUserCriteriaDto';
  agentGroupId?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  clone?: Maybe<RuleUserCriteriaDto>;
  districtId?: Maybe<Scalars['Int']>;
  priceFrom?: Maybe<Scalars['Float']>;
  priceTo?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
};

export type RuleUserCriteriaDtoInput = {
  agentGroupId?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  priceFrom?: Maybe<Scalars['Float']>;
  priceTo?: Maybe<Scalars['Float']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
};

export type SaleSeasonBlockFloorInfo = {
  __typename?: 'SaleSeasonBlockFloorInfo';
  allTopenersCanViewProducts: Scalars['Boolean'];
  blocksInfo?: Maybe<Array<Maybe<SimpleBlockInfo>>>;
  closeDatetime?: Maybe<Scalars['Long']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  openDatetime?: Maybe<Scalars['Long']>;
  projectInfo?: Maybe<ProjectInfo>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonName?: Maybe<Scalars['String']>;
  saleSeasonStatusDescription?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  saleSeasonStatusName?: Maybe<Scalars['String']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
};

export type SaleSeasonDelete = {
  recordVersion?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type SaleSeasonDto = {
  __typename?: 'SaleSeasonDto';
  allTopenersCanViewProducts: Scalars['Boolean'];
  closeDatetime?: Maybe<Scalars['Long']>;
  contractSigningPeriod?: Maybe<Scalars['Int']>;
  createdBy?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  deletedBy?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  hasBookingTransactions?: Maybe<Scalars['Boolean']>;
  isDeleted: Scalars['Boolean'];
  isSkipBooking: Scalars['Boolean'];
  lastModified?: Maybe<Scalars['Long']>;
  lockBookingDatetime?: Maybe<Scalars['Long']>;
  lockBookingDuration?: Maybe<Scalars['Long']>;
  maxBookingDefault?: Maybe<Scalars['Long']>;
  maxBookingNumber?: Maybe<Scalars['Int']>;
  minSepTimeInMinute?: Maybe<Scalars['Int']>;
  modifiedBy?: Maybe<Scalars['String']>;
  numberOfTimesCanUpdateCustomer: Scalars['Int'];
  openDatetime?: Maybe<Scalars['Long']>;
  projectId?: Maybe<Scalars['String']>;
  projectInfo?: Maybe<Sale_ProjectInfoDto>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonStatsBookingPhaseDto?: Maybe<SaleSeasonStatsBookingPhaseDto>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  seasonStatusDescription?: Maybe<Scalars['String']>;
  seasonStatusName?: Maybe<Scalars['String']>;
  sendNotificationToCustomer?: Maybe<Scalars['Boolean']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
  totalOfProperties?: Maybe<Scalars['Int']>;
  viewingCount?: Maybe<Scalars['Int']>;
};

export type SaleSeasonDtoFilter = {
  AND?: Maybe<Array<SaleSeasonDtoFilter>>;
  closeDatetime?: Maybe<Scalars['Long']>;
  closeDatetime_gt?: Maybe<Scalars['Long']>;
  closeDatetime_gte?: Maybe<Scalars['Long']>;
  closeDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  closeDatetime_lt?: Maybe<Scalars['Long']>;
  closeDatetime_lte?: Maybe<Scalars['Long']>;
  closeDatetime_not?: Maybe<Scalars['Long']>;
  closeDatetime_not_gt?: Maybe<Scalars['Long']>;
  closeDatetime_not_gte?: Maybe<Scalars['Long']>;
  closeDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  closeDatetime_not_lt?: Maybe<Scalars['Long']>;
  closeDatetime_not_lte?: Maybe<Scalars['Long']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  endBookingDatetime_gt?: Maybe<Scalars['Long']>;
  endBookingDatetime_gte?: Maybe<Scalars['Long']>;
  endBookingDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  endBookingDatetime_lt?: Maybe<Scalars['Long']>;
  endBookingDatetime_lte?: Maybe<Scalars['Long']>;
  endBookingDatetime_not?: Maybe<Scalars['Long']>;
  endBookingDatetime_not_gt?: Maybe<Scalars['Long']>;
  endBookingDatetime_not_gte?: Maybe<Scalars['Long']>;
  endBookingDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  endBookingDatetime_not_lt?: Maybe<Scalars['Long']>;
  endBookingDatetime_not_lte?: Maybe<Scalars['Long']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  genericBasketDatetime_gt?: Maybe<Scalars['Long']>;
  genericBasketDatetime_gte?: Maybe<Scalars['Long']>;
  genericBasketDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  genericBasketDatetime_lt?: Maybe<Scalars['Long']>;
  genericBasketDatetime_lte?: Maybe<Scalars['Long']>;
  genericBasketDatetime_not?: Maybe<Scalars['Long']>;
  genericBasketDatetime_not_gt?: Maybe<Scalars['Long']>;
  genericBasketDatetime_not_gte?: Maybe<Scalars['Long']>;
  genericBasketDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  genericBasketDatetime_not_lt?: Maybe<Scalars['Long']>;
  genericBasketDatetime_not_lte?: Maybe<Scalars['Long']>;
  openDatetime?: Maybe<Scalars['Long']>;
  openDatetime_gt?: Maybe<Scalars['Long']>;
  openDatetime_gte?: Maybe<Scalars['Long']>;
  openDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  openDatetime_lt?: Maybe<Scalars['Long']>;
  openDatetime_lte?: Maybe<Scalars['Long']>;
  openDatetime_not?: Maybe<Scalars['Long']>;
  openDatetime_not_gt?: Maybe<Scalars['Long']>;
  openDatetime_not_gte?: Maybe<Scalars['Long']>;
  openDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  openDatetime_not_lt?: Maybe<Scalars['Long']>;
  openDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<SaleSeasonDtoFilter>>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  saleSeasonStatusId_contains?: Maybe<Scalars['String']>;
  saleSeasonStatusId_ends_with?: Maybe<Scalars['String']>;
  saleSeasonStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleSeasonStatusId_not?: Maybe<Scalars['String']>;
  saleSeasonStatusId_not_contains?: Maybe<Scalars['String']>;
  saleSeasonStatusId_not_ends_with?: Maybe<Scalars['String']>;
  saleSeasonStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleSeasonStatusId_not_starts_with?: Maybe<Scalars['String']>;
  saleSeasonStatusId_starts_with?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  seasonName_contains?: Maybe<Scalars['String']>;
  seasonName_ends_with?: Maybe<Scalars['String']>;
  seasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  seasonName_not?: Maybe<Scalars['String']>;
  seasonName_not_contains?: Maybe<Scalars['String']>;
  seasonName_not_ends_with?: Maybe<Scalars['String']>;
  seasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  seasonName_not_starts_with?: Maybe<Scalars['String']>;
  seasonName_starts_with?: Maybe<Scalars['String']>;
  seasonStatusDescription?: Maybe<Scalars['String']>;
  seasonStatusDescription_contains?: Maybe<Scalars['String']>;
  seasonStatusDescription_ends_with?: Maybe<Scalars['String']>;
  seasonStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  seasonStatusDescription_not?: Maybe<Scalars['String']>;
  seasonStatusDescription_not_contains?: Maybe<Scalars['String']>;
  seasonStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  seasonStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  seasonStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  seasonStatusDescription_starts_with?: Maybe<Scalars['String']>;
  seasonStatusName?: Maybe<Scalars['String']>;
  seasonStatusName_contains?: Maybe<Scalars['String']>;
  seasonStatusName_ends_with?: Maybe<Scalars['String']>;
  seasonStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  seasonStatusName_not?: Maybe<Scalars['String']>;
  seasonStatusName_not_contains?: Maybe<Scalars['String']>;
  seasonStatusName_not_ends_with?: Maybe<Scalars['String']>;
  seasonStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  seasonStatusName_not_starts_with?: Maybe<Scalars['String']>;
  seasonStatusName_starts_with?: Maybe<Scalars['String']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
  startBookingDatetime_gt?: Maybe<Scalars['Long']>;
  startBookingDatetime_gte?: Maybe<Scalars['Long']>;
  startBookingDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  startBookingDatetime_lt?: Maybe<Scalars['Long']>;
  startBookingDatetime_lte?: Maybe<Scalars['Long']>;
  startBookingDatetime_not?: Maybe<Scalars['Long']>;
  startBookingDatetime_not_gt?: Maybe<Scalars['Long']>;
  startBookingDatetime_not_gte?: Maybe<Scalars['Long']>;
  startBookingDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  startBookingDatetime_not_lt?: Maybe<Scalars['Long']>;
  startBookingDatetime_not_lte?: Maybe<Scalars['Long']>;
  totalOfProperties?: Maybe<Scalars['Int']>;
  totalOfProperties_gt?: Maybe<Scalars['Int']>;
  totalOfProperties_gte?: Maybe<Scalars['Int']>;
  totalOfProperties_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalOfProperties_lt?: Maybe<Scalars['Int']>;
  totalOfProperties_lte?: Maybe<Scalars['Int']>;
  totalOfProperties_not?: Maybe<Scalars['Int']>;
  totalOfProperties_not_gt?: Maybe<Scalars['Int']>;
  totalOfProperties_not_gte?: Maybe<Scalars['Int']>;
  totalOfProperties_not_in?: Maybe<Array<Maybe<Scalars['Int']>>>;
  totalOfProperties_not_lt?: Maybe<Scalars['Int']>;
  totalOfProperties_not_lte?: Maybe<Scalars['Int']>;
};

export type SaleSeasonDtoSort = {
  closeDatetime?: Maybe<SortOperationKind>;
  endBookingDatetime?: Maybe<SortOperationKind>;
  genericBasketDatetime?: Maybe<SortOperationKind>;
  openDatetime?: Maybe<SortOperationKind>;
  seasonName?: Maybe<SortOperationKind>;
  seasonStatusDescription?: Maybe<SortOperationKind>;
  seasonStatusName?: Maybe<SortOperationKind>;
  startBookingDatetime?: Maybe<SortOperationKind>;
  totalOfProperties?: Maybe<SortOperationKind>;
};

export type SaleSeasonInfoDto = {
  __typename?: 'SaleSeasonInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SaleSeasonInfoDto>;
  closeDatetime?: Maybe<Scalars['Long']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  isSkipBooking: Scalars['Boolean'];
  openDatetime?: Maybe<Scalars['Long']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
};

export type SaleSeasonInput = {
  allTopenersCanViewProducts: Scalars['Boolean'];
  closeDatetime?: Maybe<Scalars['Long']>;
  contractSigningPeriod?: Maybe<Scalars['Int']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  isSkipBooking: Scalars['Boolean'];
  lockBookingDatetime?: Maybe<Scalars['Long']>;
  maxBookingNumber?: Maybe<Scalars['Int']>;
  numberOfTimesCanUpdateCustomer: Scalars['Int'];
  openDatetime?: Maybe<Scalars['Long']>;
  projectId?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  sendNotificationToCustomer?: Maybe<Scalars['Boolean']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
  totalOfProperties?: Maybe<Scalars['Int']>;
  viewingCount?: Maybe<Scalars['Int']>;
};

export type SaleSeasonMutationResponse = {
  __typename?: 'SaleSeasonMutationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  saleSeasonDto?: Maybe<SaleSeasonDto>;
};

export type SaleSeasonStatisticDto = {
  __typename?: 'SaleSeasonStatisticDto';
  availableCount?: Maybe<Scalars['Int']>;
  bookedCount?: Maybe<Scalars['Int']>;
  depositCount?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  isEnd?: Maybe<Scalars['Boolean']>;
  projectId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  soldCount?: Maybe<Scalars['Int']>;
  viewingCount?: Maybe<Scalars['Int']>;
};

export type SaleSeasonStatsBookingPhaseDto = {
  __typename?: 'SaleSeasonStatsBookingPhaseDto';
  bookingTransactionCount: Scalars['Int'];
  calculateSize: Scalars['Int'];
  clone?: Maybe<SaleSeasonStatsBookingPhaseDto>;
  postAvailableCount: Scalars['Int'];
  postBookedCount: Scalars['Int'];
  postDepositOutsideCount: Scalars['Int'];
  priorityNumberOneCount: Scalars['Int'];
  priorityNumberThreeCount: Scalars['Int'];
  priorityNumberTwoCount: Scalars['Int'];
  totalPostCount: Scalars['Int'];
};

export type SaleSeasonStatsDepositPhaseDto = {
  __typename?: 'SaleSeasonStatsDepositPhaseDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SaleSeasonStatsDepositPhaseDto>;
  depositFromMovingPostCount: Scalars['Int'];
  depositFromPriorityNumberCount: Scalars['Int'];
  depositOutsideCount: Scalars['Int'];
  depositSuccessCount: Scalars['Int'];
  depositWithoutBookingCount: Scalars['Int'];
  noDepositCount: Scalars['Int'];
  postAvailableCount: Scalars['Int'];
  totalPostCount: Scalars['Int'];
};

export type SaleSeasonStatusDto = {
  __typename?: 'SaleSeasonStatusDto';
  saleSeasonStatusDescription?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  saleSeasonStatusName?: Maybe<Scalars['String']>;
};

export type SaleSeasonStatusDtoFilter = {
  AND?: Maybe<Array<SaleSeasonStatusDtoFilter>>;
  OR?: Maybe<Array<SaleSeasonStatusDtoFilter>>;
  saleSeasonStatusName?: Maybe<Scalars['String']>;
  saleSeasonStatusName_contains?: Maybe<Scalars['String']>;
  saleSeasonStatusName_ends_with?: Maybe<Scalars['String']>;
  saleSeasonStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleSeasonStatusName_not?: Maybe<Scalars['String']>;
  saleSeasonStatusName_not_contains?: Maybe<Scalars['String']>;
  saleSeasonStatusName_not_ends_with?: Maybe<Scalars['String']>;
  saleSeasonStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleSeasonStatusName_not_starts_with?: Maybe<Scalars['String']>;
  saleSeasonStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SaleSeasonStatusDtoSort = {
  saleSeasonStatusName?: Maybe<SortOperationKind>;
};

export type SaleSeasonUpdate = {
  allTopenersCanViewProducts: Scalars['Boolean'];
  closeDatetime?: Maybe<Scalars['Long']>;
  contractSigningPeriod?: Maybe<Scalars['Int']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  isSkipBooking: Scalars['Boolean'];
  lockBookingDatetime?: Maybe<Scalars['Long']>;
  maxBookingNumber?: Maybe<Scalars['Int']>;
  numberOfTimesCanUpdateCustomer: Scalars['Int'];
  openDatetime?: Maybe<Scalars['Long']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  sendNotificationToCustomer?: Maybe<Scalars['Boolean']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
  totalOfProperties?: Maybe<Scalars['Int']>;
};

export type SaleTrackingStatusDto = {
  __typename?: 'SaleTrackingStatusDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  saleTrackingStatusDescription?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
};

export type SaleTrackingStatusDtoFilter = {
  AND?: Maybe<Array<SaleTrackingStatusDtoFilter>>;
  OR?: Maybe<Array<SaleTrackingStatusDtoFilter>>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
  saleTrackingStatusName_contains?: Maybe<Scalars['String']>;
  saleTrackingStatusName_ends_with?: Maybe<Scalars['String']>;
  saleTrackingStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleTrackingStatusName_not?: Maybe<Scalars['String']>;
  saleTrackingStatusName_not_contains?: Maybe<Scalars['String']>;
  saleTrackingStatusName_not_ends_with?: Maybe<Scalars['String']>;
  saleTrackingStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleTrackingStatusName_not_starts_with?: Maybe<Scalars['String']>;
  saleTrackingStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SaleTrackingStatusDtoSort = {
  saleTrackingStatusName?: Maybe<SortOperationKind>;
};

export type SaleTrackingStatusInfoDto = {
  __typename?: 'SaleTrackingStatusInfoDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  saleTrackingStatusDescription?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  saleTrackingStatusName?: Maybe<Scalars['String']>;
};

export type SaveSupportRequestInput = {
  assigneeId?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type SaveSupportRequestResponse = {
  __typename?: 'SaveSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type SearchAgentInfoDto = {
  __typename?: 'SearchAgentInfoDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingLevel?: Maybe<Scalars['Int']>;
  agentRankingName?: Maybe<Scalars['String']>;
  biography?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<SearchAgentInfoDto>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  instruction?: Maybe<Scalars['String']>;
  isAgentLeader?: Maybe<Scalars['Boolean']>;
  isInitialAccount?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  nationalId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  refererCode?: Maybe<Scalars['String']>;
  sellingTotal?: Maybe<Scalars['Float']>;
  soldTotal?: Maybe<Scalars['Float']>;
  topenerServiceTypes?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
  userStatus?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type SearchAgentInput = {
  agentGroupJson?: Maybe<Scalars['String']>;
  agentRankingJson?: Maybe<Scalars['String']>;
  fuzziness?: Maybe<Scalars['Boolean']>;
  geoLocationJson?: Maybe<Scalars['String']>;
  keyword?: Maybe<Scalars['String']>;
  orderBy: SearchAgentOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
  topenerServiceTypeJson?: Maybe<Scalars['String']>;
};

export enum SearchAgentOrderBy {
  Nameasc = 'NAMEASC',
  Namedesc = 'NAMEDESC',
  Rankingasc = 'RANKINGASC',
  Rankingdesc = 'RANKINGDESC',
  Ratingasc = 'RATINGASC',
  Ratingdesc = 'RATINGDESC'
}

export type SearchAgentResponse = {
  __typename?: 'SearchAgentResponse';
  agentInfoDtos?: Maybe<Array<Maybe<SearchAgentInfoDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  totalCount?: Maybe<Scalars['Long']>;
};

export enum SearchArticleOrderBy {
  Updatedlatest = 'UPDATEDLATEST',
  Createdlatest = 'CREATEDLATEST'
}

export type SearchArticleRequest = {
  articleSubTypeIdsJson?: Maybe<Scalars['String']>;
  articleTypeIdsJson?: Maybe<Scalars['String']>;
  fuzziness?: Maybe<Scalars['Boolean']>;
  highlightTagIdsJson?: Maybe<Scalars['String']>;
  keyword?: Maybe<Scalars['String']>;
  languageCode?: Maybe<Scalars['String']>;
  orderBy: SearchArticleOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  promotedToFrontPage?: Maybe<Scalars['Boolean']>;
};

export type SearchArticleResponse = {
  __typename?: 'SearchArticleResponse';
  articleDtos?: Maybe<Array<Maybe<ArticleDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type SearchB2C2CProjectsBoInput = {
  b2C2CProjectName?: Maybe<Scalars['String']>;
  b2CProjectId?: Maybe<Scalars['Uuid']>;
  b2CProjectName?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  isActive?: Maybe<Scalars['Boolean']>;
  propertyTypeId?: Maybe<Scalars['Uuid']>;
};

export type SearchBoProjectsInput = {
  projectName?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['Uuid']>;
  projectStatusId?: Maybe<Scalars['Uuid']>;
  propertyTypeId?: Maybe<Scalars['Uuid']>;
  sortOrder?: Maybe<Scalars['Int']>;
  totalOfSaleSeasons?: Maybe<Scalars['Int']>;
};

export type SearchContactTradingInput = {
  assigneeId?: Maybe<Scalars['String']>;
  assigneeStaffGroupId?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  contactTradingCode?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  customerFullName?: Maybe<Scalars['String']>;
  customerPhoneNumber?: Maybe<Scalars['String']>;
  depositStatus?: Maybe<Scalars['String']>;
  districtId?: Maybe<Scalars['Int']>;
  negotiationStatus?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  rangeCreatedDatetimeJson?: Maybe<Scalars['String']>;
  rangePriceJson?: Maybe<Scalars['String']>;
  rangeSquareJson?: Maybe<Scalars['String']>;
};

export type SearchFoInvestorInput = {
  endDate?: Maybe<Scalars['Long']>;
  keyword?: Maybe<Scalars['String']>;
  orderBy: SearchInvestorOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['Long']>;
  status?: Maybe<Scalars['Int']>;
  userName?: Maybe<Scalars['String']>;
};

export type SearchFoInvestorResponse = {
  __typename?: 'SearchFOInvestorResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  investorInfoDtos?: Maybe<Array<Maybe<InvestorDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type SearchInvestorInput = {
  endDate?: Maybe<Scalars['Long']>;
  keyword?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  startDate?: Maybe<Scalars['Long']>;
  status?: Maybe<Scalars['Int']>;
  userName?: Maybe<Scalars['String']>;
};

export enum SearchInvestorOrderBy {
  Investorlatest = 'INVESTORLATEST',
  Investoroldest = 'INVESTOROLDEST'
}

export type SearchInvestorResponse = {
  __typename?: 'SearchInvestorResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  investorInfoDtos?: Maybe<Array<Maybe<InvestorDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type SearchProjectInfoDto = {
  __typename?: 'SearchProjectInfoDto';
  bankInfo?: Maybe<Scalars['String']>;
  commissionRates?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  detailPath?: Maybe<Scalars['String']>;
  facilitiesDescription?: Maybe<Scalars['String']>;
  facilitiesMediaInfo?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  groundPlanDescription?: Maybe<Scalars['String']>;
  groundPlanMediaInfo?: Maybe<Scalars['String']>;
  handoverMaterialDescription?: Maybe<Scalars['String']>;
  handoverMaterialMediaInfo?: Maybe<Scalars['String']>;
  investorDetailPath?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorOwnerInfo?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  isFeaturesProject?: Maybe<Scalars['Boolean']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  latitude?: Maybe<Scalars['Float']>;
  legalInformationDescription?: Maybe<Scalars['String']>;
  legalInformationMediaInfo?: Maybe<Scalars['String']>;
  locationDescription?: Maybe<Scalars['String']>;
  locationMediaInfo?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['Float']>;
  mediaLibrary?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  overallDescription?: Maybe<Scalars['String']>;
  overviewDescription?: Maybe<Scalars['String']>;
  overviewMediaInfo?: Maybe<Scalars['String']>;
  partnersInfo?: Maybe<Scalars['String']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectAddressId?: Maybe<Scalars['String']>;
  projectCode?: Maybe<Scalars['String']>;
  projectDescription?: Maybe<Scalars['String']>;
  projectDescriptionHighlight?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectItems?: Maybe<Array<Maybe<ProjectItemDto>>>;
  projectName?: Maybe<Scalars['String']>;
  projectNameHighlight?: Maybe<Scalars['String']>;
  projectPostStatusId?: Maybe<Scalars['String']>;
  projectPostStatusName?: Maybe<Scalars['String']>;
  projectProgress?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  projectTypeName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  saleProgramDescription?: Maybe<Scalars['String']>;
  saleProgramMediaInfo?: Maybe<Scalars['String']>;
  saleSeason?: Maybe<Sale_SaleSeasonInfoDto>;
  saleSeasonStatistic?: Maybe<SaleSeasonStatisticDto>;
  sizingDescription?: Maybe<Scalars['String']>;
  sizingMediaInfo?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  startYear?: Maybe<Scalars['Int']>;
  totalArea?: Maybe<Scalars['String']>;
  totalBlock?: Maybe<Scalars['Int']>;
  totalFloor?: Maybe<Scalars['Int']>;
  totalFollower?: Maybe<Scalars['Int']>;
  totalPropertyPost?: Maybe<Scalars['Int']>;
  totalPropertyPostAvailable?: Maybe<Scalars['Int']>;
  totalPropertyPostDeposited?: Maybe<Scalars['Int']>;
  totalShare?: Maybe<Scalars['Int']>;
};

export type SearchProjectInput = {
  featureProject?: Maybe<Scalars['Boolean']>;
  fuzziness?: Maybe<Scalars['Boolean']>;
  geoLocationJson?: Maybe<Scalars['String']>;
  keyword?: Maybe<Scalars['String']>;
  orderBy: SearchProjectOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  projectStatus?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
  rangePriceJson?: Maybe<Scalars['String']>;
  showHomePage?: Maybe<Scalars['Boolean']>;
};

export enum SearchProjectOrderBy {
  Latest = 'LATEST',
  Oldest = 'OLDEST',
  Opening = 'OPENING',
  Comingsoon = 'COMINGSOON',
  Hotpriority = 'HOTPRIORITY',
  Pricehighest = 'PRICEHIGHEST',
  Pricelowest = 'PRICELOWEST'
}

export type SearchProjectResponse = {
  __typename?: 'SearchProjectResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  projectInfoDtos?: Maybe<Array<Maybe<SearchProjectInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type SearchPropertyPostForConsultantSupportInput = {
  createdByUserFullName?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  guaranteedContractStatusJson?: Maybe<Scalars['String']>;
  guaranteedPackageJson?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusJson?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
  rangeExpiredDatetimeJson?: Maybe<Scalars['String']>;
  rangeUpdatedDatetimeJson?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffUserId?: Maybe<Scalars['String']>;
};

export type SearchPropertyPostForRentInfoDto = {
  __typename?: 'SearchPropertyPostForRentInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SearchPropertyPostForRentInfoDto>;
  isRented?: Maybe<Scalars['Boolean']>;
  propertyPostForRentId?: Maybe<Scalars['String']>;
  rentCommission?: Maybe<Scalars['Float']>;
  rentCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPrice?: Maybe<Scalars['Float']>;
  searchPropertyPostInfoDto?: Maybe<SearchPropertyPostInfoDto>;
};

export type SearchPropertyPostForRentInput = {
  approvedPeriodJson?: Maybe<Scalars['String']>;
  balconyDirectionJson?: Maybe<Scalars['String']>;
  createdByAgent?: Maybe<Scalars['Boolean']>;
  directionJson?: Maybe<Scalars['String']>;
  excludeCreatedUserId?: Maybe<Scalars['String']>;
  excludePropertyJson?: Maybe<Scalars['String']>;
  fuzziness?: Maybe<Scalars['Boolean']>;
  geoLocationJson?: Maybe<Scalars['String']>;
  isRented?: Maybe<Scalars['Boolean']>;
  keyword?: Maybe<Scalars['String']>;
  numberOfBathRoom?: Maybe<Scalars['Int']>;
  numberOfBedRoom?: Maybe<Scalars['Int']>;
  orderBy: SearchPropertyPostOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyLocation?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusJson?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
  rangePriceJson?: Maybe<Scalars['String']>;
  rangeRentPeriodJson?: Maybe<Scalars['String']>;
  rangeSquareJson?: Maybe<Scalars['String']>;
  saleTrackingStatusJson?: Maybe<Scalars['String']>;
  showHomePage?: Maybe<Scalars['Boolean']>;
};

export type SearchPropertyPostForRentResponse = {
  __typename?: 'SearchPropertyPostForRentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostForRentInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostForRentInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type SearchPropertyPostInfoDto = {
  __typename?: 'SearchPropertyPostInfoDto';
  addressId?: Maybe<Scalars['String']>;
  agentGroupIds?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  agentRating?: Maybe<Scalars['Float']>;
  approvedByUserId?: Maybe<Scalars['String']>;
  approvedTime?: Maybe<Scalars['Long']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  capetAreas?: Maybe<Scalars['Float']>;
  clone?: Maybe<SearchPropertyPostInfoDto>;
  commission?: Maybe<Scalars['Float']>;
  contactEmail?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  contactPhone?: Maybe<Scalars['String']>;
  createdByUserFullName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  detailPath?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['String']>;
  expiredDate?: Maybe<Scalars['Long']>;
  floor?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  freeTextProject?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isCreatedByAgent?: Maybe<Scalars['Boolean']>;
  isFollowed?: Maybe<Scalars['Boolean']>;
  isGuaranteed?: Maybe<Scalars['Boolean']>;
  isRented?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  isVip?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  legalInfoId?: Maybe<Scalars['String']>;
  length?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  nearFacility?: Maybe<Scalars['String']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  otherPropertyDescription?: Maybe<Scalars['String']>;
  postDescription?: Maybe<Scalars['String']>;
  postDescriptionHighlight?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTitleHighlight?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<PropertyAddressInfo>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyLocation?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyNotes?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  purpose?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rejectedTime?: Maybe<Scalars['Long']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  sellerInfo?: Maybe<SellerInfo>;
  sendingApprovalFromUserId?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  tags?: Maybe<Scalars['String']>;
  totalFollower?: Maybe<Scalars['Long']>;
  totalShare?: Maybe<Scalars['Long']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  totalSpam?: Maybe<Scalars['Long']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

export type SearchPropertyPostInput = {
  approvedPeriodJson?: Maybe<Scalars['String']>;
  balconyDirectionJson?: Maybe<Scalars['String']>;
  createdByAgent?: Maybe<Scalars['Boolean']>;
  createdByUserId?: Maybe<Scalars['String']>;
  directionJson?: Maybe<Scalars['String']>;
  excludeCreatedUserId?: Maybe<Scalars['String']>;
  excludePropertyJson?: Maybe<Scalars['String']>;
  fuzziness?: Maybe<Scalars['Boolean']>;
  geoLocationJson?: Maybe<Scalars['String']>;
  isActiveGuaranteedPackage?: Maybe<Scalars['Boolean']>;
  isRated?: Maybe<Scalars['Boolean']>;
  keyword?: Maybe<Scalars['String']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathRoom?: Maybe<Scalars['Int']>;
  numberOfBedRoom?: Maybe<Scalars['Int']>;
  orderBy: SearchPropertyPostOrderBy;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyLocation?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusJson?: Maybe<Scalars['String']>;
  propertyTypeJson?: Maybe<Scalars['String']>;
  rangePriceJson?: Maybe<Scalars['String']>;
  rangeSquareJson?: Maybe<Scalars['String']>;
  saleTrackingStatusJson?: Maybe<Scalars['String']>;
  showHomePage?: Maybe<Scalars['Boolean']>;
};

export enum SearchPropertyPostOrderBy {
  Pricelowest = 'PRICELOWEST',
  Pricehighest = 'PRICEHIGHEST',
  Squaresmall = 'SQUARESMALL',
  Squarelarge = 'SQUARELARGE',
  Latest = 'LATEST',
  Agentranking = 'AGENTRANKING'
}

export type SearchPropertyPostResponse = {
  __typename?: 'SearchPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostInfoDto>>>;
  totalCount?: Maybe<Scalars['Long']>;
};

export type SearchPropertyPostsC2CDemandForRentInput = {
  c2CDemandId: Scalars['Uuid'];
  orderBy: SearchPropertyPostOrderBy;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
  propertyPostApprovalStatusJson?: Maybe<Scalars['String']>;
};

export type SearchPropertyPostsC2CDemandForRentResponse = {
  __typename?: 'SearchPropertyPostsC2CDemandForRentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostForC2CDemandDtos?: Maybe<Array<Maybe<PropertyPostForC2CDemandDto>>>;
  totalCount: Scalars['Long'];
};

export type SearchPropertyPostsC2CDemandForSaleInput = {
  c2CDemandId: Scalars['Uuid'];
  orderBy: SearchPropertyPostOrderBy;
  page: Scalars['Int'];
  pageSize: Scalars['Int'];
  propertyPostApprovalStatusJson?: Maybe<Scalars['String']>;
};

export type SearchPropertyPostsC2CDemandForSaleResponse = {
  __typename?: 'SearchPropertyPostsC2CDemandForSaleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostForC2CDemandDtos?: Maybe<Array<Maybe<PropertyPostForC2CDemandDto>>>;
  totalCount: Scalars['Long'];
};

export type SearchTermDto = {
  __typename?: 'SearchTermDto';
  createdDatetime?: Maybe<Scalars['Long']>;
  keyWord?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type SearchTermDtoFilter = {
  AND?: Maybe<Array<SearchTermDtoFilter>>;
  keyWord?: Maybe<Scalars['String']>;
  keyWord_contains?: Maybe<Scalars['String']>;
  keyWord_ends_with?: Maybe<Scalars['String']>;
  keyWord_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  keyWord_not?: Maybe<Scalars['String']>;
  keyWord_not_contains?: Maybe<Scalars['String']>;
  keyWord_not_ends_with?: Maybe<Scalars['String']>;
  keyWord_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  keyWord_not_starts_with?: Maybe<Scalars['String']>;
  keyWord_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<SearchTermDtoFilter>>;
};

export type SearchTermDtoSort = {
  keyWord?: Maybe<SortOperationKind>;
};

export type SeedingPropertyPostBasketByPropertyPostRequestInput = {
  propertyPostId?: Maybe<Scalars['String']>;
};

export type SeedingPropertyPostBasketByPropertyPostResponse = {
  __typename?: 'SeedingPropertyPostBasketByPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SeedingPropertyPostBasketBySaleSeasonInput = {
  saleSeasonId?: Maybe<Scalars['String']>;
};

export type SeedingPropertyPostBasketBySaleSeasonResponse = {
  __typename?: 'SeedingPropertyPostBasketBySaleSeasonResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SellerInfo = {
  __typename?: 'SellerInfo';
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  agentRating: Scalars['Float'];
  avatar?: Maybe<Scalars['String']>;
  avatars?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<SellerInfo>;
  detailPath?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isAgent: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  sellerId?: Maybe<Scalars['String']>;
};

export type SendB2CContractToCommissionPlatformInput = {
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type SendC2CContactTradingContractToCommissionPlatformInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type SendC2CContactTradingContractToCommissionPlatformResponse = {
  __typename?: 'SendC2CContactTradingContractToCommissionPlatformResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendC2CContactTradingDepositCompleteEmailResponse = {
  __typename?: 'SendC2CContactTradingDepositCompleteEmailResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendC2CContactTradingDepositCompleteSmsResponse = {
  __typename?: 'SendC2CContactTradingDepositCompleteSMSResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendContactTradingDepositeCompleteEmailResponse = {
  __typename?: 'SendContactTradingDepositeCompleteEmailResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendContactTradingDepositeCompleteSmsResponse = {
  __typename?: 'SendContactTradingDepositeCompleteSMSResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendContactTradingToSaleConsultantInput = {
  contactTradingId?: Maybe<Scalars['String']>;
};

export type SendContactTradingToSaleConsultantResponse = {
  __typename?: 'SendContactTradingToSaleConsultantResponse';
  assigneeId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendContractToCommissionPlatformResponse = {
  __typename?: 'SendContractToCommissionPlatformResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendInfoUserInput = {
  userId?: Maybe<Scalars['String']>;
};

export type SendInfoUserResponse = {
  __typename?: 'SendInfoUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type SendLinkVerifyEmailFoInput = {
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type SendLinkVerifyEmailResponse = {
  __typename?: 'SendLinkVerifyEmailResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendMailContactTradingFavoritePropertyResponse = {
  __typename?: 'SendMailContactTradingFavoritePropertyResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendOtpToUpdateCustomerForDepositTransactionInput = {
  depositTransactionId?: Maybe<Scalars['String']>;
};

export type SendOtpToUpdateCustomerForDepositTransactionResponse = {
  __typename?: 'SendOtpToUpdateCustomerForDepositTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendPhoneVerificationTokenForTransactionInput = {
  phoneNumber?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type SendPhoneVerificationTokenForTransactionResponse = {
  __typename?: 'SendPhoneVerificationTokenForTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SendUserInfoByEmailInput = {
  userId?: Maybe<Scalars['String']>;
};

export type SendUserInfoByEmailResponse = {
  __typename?: 'SendUserInfoByEmailResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type SentServiceTicketForFrontOfficeDto = {
  __typename?: 'SentServiceTicketForFrontOfficeDto';
  appointmentDatetime?: Maybe<Scalars['Float']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  currentExecutorId?: Maybe<Scalars['String']>;
  currentExecutorName?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostDetailPath?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketPaymentStatusId?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
  ticketStatusName?: Maybe<Scalars['String']>;
};

export type SentServiceTicketForFrontOfficeDtoFilter = {
  AND?: Maybe<Array<SentServiceTicketForFrontOfficeDtoFilter>>;
  appointmentDatetime?: Maybe<Scalars['Float']>;
  appointmentDatetime_gt?: Maybe<Scalars['Float']>;
  appointmentDatetime_gte?: Maybe<Scalars['Float']>;
  appointmentDatetime_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  appointmentDatetime_lt?: Maybe<Scalars['Float']>;
  appointmentDatetime_lte?: Maybe<Scalars['Float']>;
  appointmentDatetime_not?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_gt?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_gte?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  appointmentDatetime_not_lt?: Maybe<Scalars['Float']>;
  appointmentDatetime_not_lte?: Maybe<Scalars['Float']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  currentExecutorId?: Maybe<Scalars['String']>;
  currentExecutorId_contains?: Maybe<Scalars['String']>;
  currentExecutorId_ends_with?: Maybe<Scalars['String']>;
  currentExecutorId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentExecutorId_not?: Maybe<Scalars['String']>;
  currentExecutorId_not_contains?: Maybe<Scalars['String']>;
  currentExecutorId_not_ends_with?: Maybe<Scalars['String']>;
  currentExecutorId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentExecutorId_not_starts_with?: Maybe<Scalars['String']>;
  currentExecutorId_starts_with?: Maybe<Scalars['String']>;
  currentExecutorName?: Maybe<Scalars['String']>;
  currentExecutorName_contains?: Maybe<Scalars['String']>;
  currentExecutorName_ends_with?: Maybe<Scalars['String']>;
  currentExecutorName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentExecutorName_not?: Maybe<Scalars['String']>;
  currentExecutorName_not_contains?: Maybe<Scalars['String']>;
  currentExecutorName_not_ends_with?: Maybe<Scalars['String']>;
  currentExecutorName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentExecutorName_not_starts_with?: Maybe<Scalars['String']>;
  currentExecutorName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<SentServiceTicketForFrontOfficeDtoFilter>>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostId_contains?: Maybe<Scalars['String']>;
  propertyPostId_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not?: Maybe<Scalars['String']>;
  propertyPostId_not_contains?: Maybe<Scalars['String']>;
  propertyPostId_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostId_starts_with?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceId_contains?: Maybe<Scalars['String']>;
  supportServiceId_ends_with?: Maybe<Scalars['String']>;
  supportServiceId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceId_not?: Maybe<Scalars['String']>;
  supportServiceId_not_contains?: Maybe<Scalars['String']>;
  supportServiceId_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceId_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceId_starts_with?: Maybe<Scalars['String']>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketCode_contains?: Maybe<Scalars['String']>;
  ticketCode_ends_with?: Maybe<Scalars['String']>;
  ticketCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketCode_not?: Maybe<Scalars['String']>;
  ticketCode_not_contains?: Maybe<Scalars['String']>;
  ticketCode_not_ends_with?: Maybe<Scalars['String']>;
  ticketCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketCode_not_starts_with?: Maybe<Scalars['String']>;
  ticketCode_starts_with?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
  ticketStatusId_contains?: Maybe<Scalars['String']>;
  ticketStatusId_ends_with?: Maybe<Scalars['String']>;
  ticketStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketStatusId_not?: Maybe<Scalars['String']>;
  ticketStatusId_not_contains?: Maybe<Scalars['String']>;
  ticketStatusId_not_ends_with?: Maybe<Scalars['String']>;
  ticketStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  ticketStatusId_not_starts_with?: Maybe<Scalars['String']>;
  ticketStatusId_starts_with?: Maybe<Scalars['String']>;
};

export type SentServiceTicketForFrontOfficeDtoSort = {
  appointmentDatetime?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  currentExecutorName?: Maybe<SortOperationKind>;
};

export type ServiceConfigHistoryDto = {
  __typename?: 'ServiceConfigHistoryDto';
  price: Scalars['Decimal'];
  serviceSelectableStepDescription?: Maybe<Scalars['String']>;
  updatedByFullName?: Maybe<Scalars['String']>;
  updatedByUserId: Scalars['Uuid'];
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type ServiceSelectableStepConfigDto = {
  __typename?: 'ServiceSelectableStepConfigDto';
  requestTypeSelectableStepDescription?: Maybe<Scalars['String']>;
  selectable: Scalars['Boolean'];
  selectableStepConfigId?: Maybe<Scalars['String']>;
  selectableStepConfigName?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
};

export type SetLeadersIntoGroupInput = {
  setLeaders?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type SetLeadersIntoGroupResponse = {
  __typename?: 'SetLeadersIntoGroupResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ShareProjectByIdInput = {
  projectId?: Maybe<Scalars['String']>;
};

export type ShareProjectByIdResponse = {
  __typename?: 'ShareProjectByIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SharePropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
};

export type SharePropertyPostResponse = {
  __typename?: 'SharePropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};


export type SimilarProjectInfoDto = {
  __typename?: 'SimilarProjectInfoDto';
  detailPath?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  minPrice?: Maybe<Scalars['Float']>;
  order?: Maybe<Scalars['Int']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectCode?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
};

export type SimpleBankInfoDto = {
  __typename?: 'SimpleBankInfoDto';
  bankAddress?: Maybe<Scalars['String']>;
  bankCode?: Maybe<Scalars['String']>;
  bankDescription?: Maybe<Scalars['String']>;
  bankEmail?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  bankName?: Maybe<Scalars['String']>;
  bankTelephone?: Maybe<Scalars['String']>;
  bankWebsite?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<SimpleBankInfoDto>;
};

export type SimpleBlockInfo = {
  __typename?: 'SimpleBlockInfo';
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<SimpleBlockInfo>;
  floorsInfo?: Maybe<Array<Maybe<SimpleFloorInfo>>>;
};

export type SimpleFloorInfo = {
  __typename?: 'SimpleFloorInfo';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SimpleFloorInfo>;
  floor?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
};

export type SimpleProjectInfoDto = {
  __typename?: 'SimpleProjectInfoDto';
  buildingArea?: Maybe<Scalars['Float']>;
  expectedPrice?: Maybe<Scalars['String']>;
  investorOwnerLogo?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  projectAddress?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  startYear?: Maybe<Scalars['Int']>;
};

export type SimpleSeasonDto = {
  __typename?: 'SimpleSeasonDto';
  allTopenersCanViewProducts: Scalars['Boolean'];
  closeDatetime?: Maybe<Scalars['Long']>;
  contractSigningPeriod?: Maybe<Scalars['Long']>;
  createdByUserId?: Maybe<Scalars['String']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  id?: Maybe<Scalars['String']>;
  isSkipBooking: Scalars['Boolean'];
  lockBookingDatetime?: Maybe<Scalars['Long']>;
  maxBookingNumber?: Maybe<Scalars['Int']>;
  numberOfTimesCanUpdateCustomer: Scalars['Int'];
  openDatetime?: Maybe<Scalars['Long']>;
  projectInfo?: Maybe<Sale_ProjectInfoDto>;
  saleSeasonName?: Maybe<Scalars['String']>;
  saleSeasonStatusDescription?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  saleSeasonStatusName?: Maybe<Scalars['String']>;
  sendNotificationToCustomer: Scalars['Boolean'];
  startBookingDatetime?: Maybe<Scalars['Long']>;
  updatedByUserId?: Maybe<Scalars['String']>;
};

export type SimpleSeasonDtoSort = {
  saleSeasonName?: Maybe<SortOperationKind>;
};

export type SimpleSupportServiceTicketDto = {
  __typename?: 'SimpleSupportServiceTicketDto';
  paymentInfoDto?: Maybe<PaymentInfoDto>;
  propertyPostId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
};

export type SimpleTransactionDetailDto = {
  __typename?: 'SimpleTransactionDetailDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SimpleTransactionDetailDto>;
  commission?: Maybe<Scalars['Float']>;
  consultantInfo?: Maybe<ConsultantInfoDto>;
  customerId?: Maybe<Scalars['String']>;
  paymentMethod?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<PropertyPostInfoDto>;
  transactionAmount?: Maybe<Scalars['Float']>;
  transactionCode?: Maybe<Scalars['String']>;
  transactionConfirmedDatetime?: Maybe<Scalars['Long']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionIndex?: Maybe<Scalars['Long']>;
  transactionNumber?: Maybe<Scalars['Long']>;
  transactionStatus?: Maybe<Scalars['String']>;
  transactionStatusId?: Maybe<Scalars['String']>;
  transactionStatusName?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

export type SimpleUserInfoDto = {
  __typename?: 'SimpleUserInfoDto';
  agentCode?: Maybe<Scalars['String']>;
  contactAddress?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  imageSizes?: Maybe<Scalars['String']>;
  isCreatedByAdmin?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isMember?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumberConfirmed?: Maybe<Scalars['Boolean']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  pushNotificationEnable?: Maybe<Scalars['Boolean']>;
  pushNotificationId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  topenerDetailPath?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userStatus: UserStatus;
};

export type SimpleUserInfoDtoFilter = {
  AND?: Maybe<Array<SimpleUserInfoDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<SimpleUserInfoDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userName_contains?: Maybe<Scalars['String']>;
  userName_ends_with?: Maybe<Scalars['String']>;
  userName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not?: Maybe<Scalars['String']>;
  userName_not_contains?: Maybe<Scalars['String']>;
  userName_not_ends_with?: Maybe<Scalars['String']>;
  userName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not_starts_with?: Maybe<Scalars['String']>;
  userName_starts_with?: Maybe<Scalars['String']>;
};

export type SkipPropertyPostC2CDemandInput = {
  c2CDemandId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type SkipPropertyPostC2CDemandResponse = {
  __typename?: 'SkipPropertyPostC2CDemandResponse';
  c2CDemandId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export enum SortOperationKind {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type SpamTypeDto = {
  __typename?: 'SpamTypeDto';
  isActive: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
  spamTypeDescription?: Maybe<Scalars['String']>;
  spamTypeId?: Maybe<Scalars['String']>;
  spamTypeName?: Maybe<Scalars['String']>;
};

export type SpamTypeDtoFilter = {
  AND?: Maybe<Array<SpamTypeDtoFilter>>;
  OR?: Maybe<Array<SpamTypeDtoFilter>>;
  spamTypeName?: Maybe<Scalars['String']>;
  spamTypeName_contains?: Maybe<Scalars['String']>;
  spamTypeName_ends_with?: Maybe<Scalars['String']>;
  spamTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  spamTypeName_not?: Maybe<Scalars['String']>;
  spamTypeName_not_contains?: Maybe<Scalars['String']>;
  spamTypeName_not_ends_with?: Maybe<Scalars['String']>;
  spamTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  spamTypeName_not_starts_with?: Maybe<Scalars['String']>;
  spamTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type SpamTypeDtoSort = {
  sortOrder?: Maybe<SortOperationKind>;
  spamTypeName?: Maybe<SortOperationKind>;
};

export type SpamTypeInfoDto = {
  __typename?: 'SpamTypeInfoDto';
  isActive: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
  spamTypeDescription?: Maybe<Scalars['String']>;
  spamTypeId?: Maybe<Scalars['String']>;
  spamTypeName?: Maybe<Scalars['String']>;
};

export type SpecializeDto = {
  __typename?: 'SpecializeDto';
  isActive: Scalars['Boolean'];
  specializeDescription?: Maybe<Scalars['String']>;
  specializeId?: Maybe<Scalars['String']>;
  specializeName?: Maybe<Scalars['String']>;
};

export type SpecializeDtoFilter = {
  AND?: Maybe<Array<SpecializeDtoFilter>>;
  OR?: Maybe<Array<SpecializeDtoFilter>>;
  specializeName?: Maybe<Scalars['String']>;
  specializeName_contains?: Maybe<Scalars['String']>;
  specializeName_ends_with?: Maybe<Scalars['String']>;
  specializeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  specializeName_not?: Maybe<Scalars['String']>;
  specializeName_not_contains?: Maybe<Scalars['String']>;
  specializeName_not_ends_with?: Maybe<Scalars['String']>;
  specializeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  specializeName_not_starts_with?: Maybe<Scalars['String']>;
  specializeName_starts_with?: Maybe<Scalars['String']>;
};

export type SpecializeDtoSort = {
  specializeName?: Maybe<SortOperationKind>;
};

export type SpecializeInfoDto = {
  __typename?: 'SpecializeInfoDto';
  isActive: Scalars['Boolean'];
  specializeDescription?: Maybe<Scalars['String']>;
  specializeId?: Maybe<Scalars['String']>;
  specializeName?: Maybe<Scalars['String']>;
};

export type SquareRangeDto = {
  __typename?: 'SquareRangeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SquareRangeDto>;
  squareFrom: Scalars['Float'];
  squareTo: Scalars['Float'];
};

export type StaffContractTypeDto = {
  __typename?: 'StaffContractTypeDto';
  isActive: Scalars['Boolean'];
  staffContractTypeDescription?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffContractTypeName?: Maybe<Scalars['String']>;
};

export type StaffContractTypeDtoFilter = {
  AND?: Maybe<Array<StaffContractTypeDtoFilter>>;
  OR?: Maybe<Array<StaffContractTypeDtoFilter>>;
  staffContractTypeName?: Maybe<Scalars['String']>;
  staffContractTypeName_contains?: Maybe<Scalars['String']>;
  staffContractTypeName_ends_with?: Maybe<Scalars['String']>;
  staffContractTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffContractTypeName_not?: Maybe<Scalars['String']>;
  staffContractTypeName_not_contains?: Maybe<Scalars['String']>;
  staffContractTypeName_not_ends_with?: Maybe<Scalars['String']>;
  staffContractTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffContractTypeName_not_starts_with?: Maybe<Scalars['String']>;
  staffContractTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type StaffContractTypeDtoSort = {
  staffContractTypeName?: Maybe<SortOperationKind>;
};

export type StaffContractTypeInfoDto = {
  __typename?: 'StaffContractTypeInfoDto';
  isActive: Scalars['Boolean'];
  staffContractTypeDescription?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffContractTypeName?: Maybe<Scalars['String']>;
};

export type StaffDto = {
  __typename?: 'StaffDto';
  createdDatetime?: Maybe<Scalars['Long']>;
  currentApplicationRoleDescriptions?: Maybe<Scalars['String']>;
  currentStaffRoles?: Maybe<Array<Maybe<Property_Posts_BackOfficeRoleDto>>>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  isActive: Scalars['Boolean'];
  isConsultant?: Maybe<Scalars['Boolean']>;
  isCreatedByAdmin: Scalars['Boolean'];
  isDeleted?: Maybe<Scalars['Boolean']>;
  isFastSync: Scalars['Boolean'];
  isGroupLeader: Scalars['Boolean'];
  isLocked: Scalars['Boolean'];
  isMember: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom: Scalars['Float'];
  preferPropertyPriceTo: Scalars['Float'];
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  pushNotificationEnable?: Maybe<Scalars['Boolean']>;
  pushNotificationId?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
  specialityIds?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionName?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusName?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
  supportedDatetime?: Maybe<Scalars['Long']>;
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetimeString?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userStatus: UserStatus;
  workingAreas?: Maybe<Scalars['String']>;
};

/** A connection to a list of items. */
export type StaffDtoConnection = {
  __typename?: 'StaffDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<StaffDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<StaffDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type StaffDtoEdge = {
  __typename?: 'StaffDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<StaffDto>;
};

export type StaffDtoFilter = {
  AND?: Maybe<Array<StaffDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentId_contains?: Maybe<Scalars['String']>;
  departmentId_ends_with?: Maybe<Scalars['String']>;
  departmentId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentId_not?: Maybe<Scalars['String']>;
  departmentId_not_contains?: Maybe<Scalars['String']>;
  departmentId_not_ends_with?: Maybe<Scalars['String']>;
  departmentId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentId_not_starts_with?: Maybe<Scalars['String']>;
  departmentId_starts_with?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  isFastSync?: Maybe<Scalars['Boolean']>;
  isFastSync_not?: Maybe<Scalars['Boolean']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<StaffDtoFilter>>;
  permanentAddress?: Maybe<Scalars['String']>;
  permanentAddress_contains?: Maybe<Scalars['String']>;
  permanentAddress_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not?: Maybe<Scalars['String']>;
  permanentAddress_not_contains?: Maybe<Scalars['String']>;
  permanentAddress_not_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not_starts_with?: Maybe<Scalars['String']>;
  permanentAddress_starts_with?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceFrom_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_lte?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceFrom_not_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_lte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceTo_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_lte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceTo_not_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_lte?: Maybe<Scalars['Float']>;
  rating?: Maybe<Scalars['Float']>;
  rating_gt?: Maybe<Scalars['Float']>;
  rating_gte?: Maybe<Scalars['Float']>;
  rating_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  rating_lt?: Maybe<Scalars['Float']>;
  rating_lte?: Maybe<Scalars['Float']>;
  rating_not?: Maybe<Scalars['Float']>;
  rating_not_gt?: Maybe<Scalars['Float']>;
  rating_not_gte?: Maybe<Scalars['Float']>;
  rating_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  rating_not_lt?: Maybe<Scalars['Float']>;
  rating_not_lte?: Maybe<Scalars['Float']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffContractTypeId_contains?: Maybe<Scalars['String']>;
  staffContractTypeId_ends_with?: Maybe<Scalars['String']>;
  staffContractTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffContractTypeId_not?: Maybe<Scalars['String']>;
  staffContractTypeId_not_contains?: Maybe<Scalars['String']>;
  staffContractTypeId_not_ends_with?: Maybe<Scalars['String']>;
  staffContractTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffContractTypeId_not_starts_with?: Maybe<Scalars['String']>;
  staffContractTypeId_starts_with?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupId_contains?: Maybe<Scalars['String']>;
  staffGroupId_ends_with?: Maybe<Scalars['String']>;
  staffGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupId_not?: Maybe<Scalars['String']>;
  staffGroupId_not_contains?: Maybe<Scalars['String']>;
  staffGroupId_not_ends_with?: Maybe<Scalars['String']>;
  staffGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupId_not_starts_with?: Maybe<Scalars['String']>;
  staffGroupId_starts_with?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffId_contains?: Maybe<Scalars['String']>;
  staffId_ends_with?: Maybe<Scalars['String']>;
  staffId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffId_not?: Maybe<Scalars['String']>;
  staffId_not_contains?: Maybe<Scalars['String']>;
  staffId_not_ends_with?: Maybe<Scalars['String']>;
  staffId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffId_not_starts_with?: Maybe<Scalars['String']>;
  staffId_starts_with?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionId_contains?: Maybe<Scalars['String']>;
  staffPositionId_ends_with?: Maybe<Scalars['String']>;
  staffPositionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffPositionId_not?: Maybe<Scalars['String']>;
  staffPositionId_not_contains?: Maybe<Scalars['String']>;
  staffPositionId_not_ends_with?: Maybe<Scalars['String']>;
  staffPositionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffPositionId_not_starts_with?: Maybe<Scalars['String']>;
  staffPositionId_starts_with?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffRankingId_contains?: Maybe<Scalars['String']>;
  staffRankingId_ends_with?: Maybe<Scalars['String']>;
  staffRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffRankingId_not?: Maybe<Scalars['String']>;
  staffRankingId_not_contains?: Maybe<Scalars['String']>;
  staffRankingId_not_ends_with?: Maybe<Scalars['String']>;
  staffRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffRankingId_not_starts_with?: Maybe<Scalars['String']>;
  staffRankingId_starts_with?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusId_contains?: Maybe<Scalars['String']>;
  staffStatusId_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not?: Maybe<Scalars['String']>;
  staffStatusId_not_contains?: Maybe<Scalars['String']>;
  staffStatusId_not_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not_starts_with?: Maybe<Scalars['String']>;
  staffStatusId_starts_with?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeId_contains?: Maybe<Scalars['String']>;
  staffTypeId_ends_with?: Maybe<Scalars['String']>;
  staffTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeId_not?: Maybe<Scalars['String']>;
  staffTypeId_not_contains?: Maybe<Scalars['String']>;
  staffTypeId_not_ends_with?: Maybe<Scalars['String']>;
  staffTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeId_not_starts_with?: Maybe<Scalars['String']>;
  staffTypeId_starts_with?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userId_contains?: Maybe<Scalars['String']>;
  userId_ends_with?: Maybe<Scalars['String']>;
  userId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userId_not?: Maybe<Scalars['String']>;
  userId_not_contains?: Maybe<Scalars['String']>;
  userId_not_ends_with?: Maybe<Scalars['String']>;
  userId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userId_not_starts_with?: Maybe<Scalars['String']>;
  userId_starts_with?: Maybe<Scalars['String']>;
};

export type StaffDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  email?: Maybe<SortOperationKind>;
  firstName?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  isGroupLeader?: Maybe<SortOperationKind>;
  lastName?: Maybe<SortOperationKind>;
  nationalId?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  rating?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
  supportedDatetime?: Maybe<SortOperationKind>;
  userName?: Maybe<SortOperationKind>;
};

export type StaffForAllocationRuleDto = {
  __typename?: 'StaffForAllocationRuleDto';
  currentAssignmentRoles?: Maybe<Scalars['String']>;
  currentAssignmentRolesCount: Scalars['Int'];
  currentAssignmentRules?: Maybe<Scalars['String']>;
  currentAssignmentRulesCount: Scalars['Int'];
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type StaffForAllocationRuleDtoFilter = {
  AND?: Maybe<Array<StaffForAllocationRuleDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<StaffForAllocationRuleDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
};

export type StaffForAllocationRuleDtoSort = {
  email?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
};

export type StaffForBackOfficeDto = {
  __typename?: 'StaffForBackOfficeDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  createdDatetimeString?: Maybe<Scalars['String']>;
  currentRoleDescriptions?: Maybe<Scalars['String']>;
  departmentDescription?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  isFastSync: Scalars['Boolean'];
  isGroupLeader: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffStatusDescription?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffTypeDescription?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
  syncToFastStatusDescription?: Maybe<Scalars['String']>;
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetimeString?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type StaffForBackOfficeDtoFilter = {
  AND?: Maybe<Array<StaffForBackOfficeDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  isFastSync?: Maybe<Scalars['Boolean']>;
  isFastSync_not?: Maybe<Scalars['Boolean']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<StaffForBackOfficeDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupId_contains?: Maybe<Scalars['String']>;
  staffGroupId_ends_with?: Maybe<Scalars['String']>;
  staffGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupId_not?: Maybe<Scalars['String']>;
  staffGroupId_not_contains?: Maybe<Scalars['String']>;
  staffGroupId_not_ends_with?: Maybe<Scalars['String']>;
  staffGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupId_not_starts_with?: Maybe<Scalars['String']>;
  staffGroupId_starts_with?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusId_contains?: Maybe<Scalars['String']>;
  staffStatusId_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not?: Maybe<Scalars['String']>;
  staffStatusId_not_contains?: Maybe<Scalars['String']>;
  staffStatusId_not_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not_starts_with?: Maybe<Scalars['String']>;
  staffStatusId_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type StaffForBackOfficeDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  email?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  isFastSync?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
  staffStatusId?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type StaffForBackOfficeRoleDto = {
  __typename?: 'StaffForBackOfficeRoleDto';
  currentAssignments?: Maybe<Scalars['String']>;
  currentAssignmentsCount: Scalars['Int'];
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type StaffForBackOfficeRoleDtoFilter = {
  AND?: Maybe<Array<StaffForBackOfficeRoleDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<StaffForBackOfficeRoleDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
};

export type StaffForBackOfficeRoleDtoSort = {
  email?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
};

export type StaffForBackOfficeRoleInput = {
  backofficeRoleId?: Maybe<Scalars['String']>;
  searchAssignedRoleName?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type StaffForStaffGroupDto = {
  __typename?: 'StaffForStaffGroupDto';
  createdDatetime: Scalars['Long'];
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  isMainGroup: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  userId?: Maybe<Scalars['String']>;
};

export type StaffForStaffGroupDtoFilter = {
  AND?: Maybe<Array<StaffForStaffGroupDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  isGroupLeader_gt?: Maybe<Scalars['Boolean']>;
  isGroupLeader_gte?: Maybe<Scalars['Boolean']>;
  isGroupLeader_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isGroupLeader_lt?: Maybe<Scalars['Boolean']>;
  isGroupLeader_lte?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not_gt?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not_gte?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not_in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
  isGroupLeader_not_lt?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not_lte?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<StaffForStaffGroupDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
};

export type StaffForStaffGroupDtoSort = {
  email?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type StaffForStaffGroupInput = {
  staffGroupId?: Maybe<Scalars['String']>;
};

export type StaffFullByUserDto = {
  __typename?: 'StaffFullByUserDto';
  allowUpdateEmail: Scalars['Boolean'];
  biography?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StaffFullByUserDto>;
  contactAddress?: Maybe<Scalars['String']>;
  createdByName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  currentApplicationRoleDescriptions?: Maybe<Scalars['String']>;
  currentStaffRoles?: Maybe<Array<Maybe<BackOfficeRoleDto>>>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  dob?: Maybe<Timestamp>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  isActive: Scalars['Boolean'];
  isConsultant?: Maybe<Scalars['Boolean']>;
  isCreatedByAdmin: Scalars['Boolean'];
  isDeleted?: Maybe<Scalars['Boolean']>;
  isFastSync: Scalars['Boolean'];
  isGroupLeader: Scalars['Boolean'];
  isLocked: Scalars['Boolean'];
  isMember: Scalars['Boolean'];
  isVerifyProfilePhoto: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalStaffInfo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumberConfirmed?: Maybe<Scalars['Boolean']>;
  preferPropertyPriceFrom: Scalars['Float'];
  preferPropertyPriceTo: Scalars['Float'];
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  pushNotificationEnable?: Maybe<Scalars['Boolean']>;
  pushNotificationId?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
  roleDescription?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
  specialityIds?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionName?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusName?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
  supportedDatetime?: Maybe<Scalars['Long']>;
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetimeString?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userStatus: UserStatus;
  workingAreas?: Maybe<Scalars['String']>;
};

export type StaffGroupDto = {
  __typename?: 'StaffGroupDto';
  contactTradingAssignable: Scalars['Boolean'];
  createdDatetime: Scalars['Long'];
  eligibleForB2C: Scalars['Boolean'];
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  isMainGroup: Scalars['Boolean'];
  parentStaffGroupId?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
};

export type StaffGroupDtoFilter = {
  AND?: Maybe<Array<StaffGroupDtoFilter>>;
  OR?: Maybe<Array<StaffGroupDtoFilter>>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupDescription_contains?: Maybe<Scalars['String']>;
  staffGroupDescription_ends_with?: Maybe<Scalars['String']>;
  staffGroupDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupDescription_not?: Maybe<Scalars['String']>;
  staffGroupDescription_not_contains?: Maybe<Scalars['String']>;
  staffGroupDescription_not_ends_with?: Maybe<Scalars['String']>;
  staffGroupDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupDescription_not_starts_with?: Maybe<Scalars['String']>;
  staffGroupDescription_starts_with?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffGroupName_contains?: Maybe<Scalars['String']>;
  staffGroupName_ends_with?: Maybe<Scalars['String']>;
  staffGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupName_not?: Maybe<Scalars['String']>;
  staffGroupName_not_contains?: Maybe<Scalars['String']>;
  staffGroupName_not_ends_with?: Maybe<Scalars['String']>;
  staffGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupName_not_starts_with?: Maybe<Scalars['String']>;
  staffGroupName_starts_with?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeId_contains?: Maybe<Scalars['String']>;
  staffTypeId_ends_with?: Maybe<Scalars['String']>;
  staffTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeId_not?: Maybe<Scalars['String']>;
  staffTypeId_not_contains?: Maybe<Scalars['String']>;
  staffTypeId_not_ends_with?: Maybe<Scalars['String']>;
  staffTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeId_not_starts_with?: Maybe<Scalars['String']>;
  staffTypeId_starts_with?: Maybe<Scalars['String']>;
};

export type StaffGroupDtoSort = {
  staffGroupName?: Maybe<SortOperationKind>;
};

export type StaffGroupInfo = {
  __typename?: 'StaffGroupInfo';
  calculateSize: Scalars['Int'];
  clone?: Maybe<StaffGroupInfo>;
  id?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
};

export type StaffGroupInfoDto = {
  __typename?: 'StaffGroupInfoDto';
  contactTradingAssignable: Scalars['Boolean'];
  eligibleForB2C: Scalars['Boolean'];
  isActive: Scalars['Boolean'];
  parentStaffGroupId?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
};

export type StaffGroupsNotAssignStaffDto = {
  __typename?: 'StaffGroupsNotAssignStaffDto';
  leaders?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
};

export type StaffGroupsNotAssignStaffDtoFilter = {
  AND?: Maybe<Array<StaffGroupsNotAssignStaffDtoFilter>>;
  OR?: Maybe<Array<StaffGroupsNotAssignStaffDtoFilter>>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffGroupName_contains?: Maybe<Scalars['String']>;
  staffGroupName_ends_with?: Maybe<Scalars['String']>;
  staffGroupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupName_not?: Maybe<Scalars['String']>;
  staffGroupName_not_contains?: Maybe<Scalars['String']>;
  staffGroupName_not_ends_with?: Maybe<Scalars['String']>;
  staffGroupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupName_not_starts_with?: Maybe<Scalars['String']>;
  staffGroupName_starts_with?: Maybe<Scalars['String']>;
};

export type StaffGroupsNotAssignStaffDtoSort = {
  staffGroupName?: Maybe<SortOperationKind>;
};

export type StaffInfoDto = {
  __typename?: 'StaffInfoDto';
  currentStaffRoles?: Maybe<Array<Maybe<BackOfficeRoleDto>>>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  isActive: Scalars['Boolean'];
  isConsultant?: Maybe<Scalars['Boolean']>;
  isCreatedByAdmin: Scalars['Boolean'];
  isGroupLeader: Scalars['Boolean'];
  isLocked: Scalars['Boolean'];
  isMember: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom: Scalars['Float'];
  preferPropertyPriceTo: Scalars['Float'];
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  specialityIds?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionName?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userStatus: UserStatus;
  workingAreas?: Maybe<Scalars['String']>;
};

export type StaffInfoDtoSort = {
  firstName?: Maybe<SortOperationKind>;
  lastName?: Maybe<SortOperationKind>;
};

export type StaffNotBelongAllocationRuleInput = {
  allocationRuleId?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type StaffPositionDto = {
  __typename?: 'StaffPositionDto';
  isActive: Scalars['Boolean'];
  staffPositionDescription?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionName?: Maybe<Scalars['String']>;
};

export type StaffPositionDtoFilter = {
  AND?: Maybe<Array<StaffPositionDtoFilter>>;
  OR?: Maybe<Array<StaffPositionDtoFilter>>;
  staffPositionName?: Maybe<Scalars['String']>;
  staffPositionName_contains?: Maybe<Scalars['String']>;
  staffPositionName_ends_with?: Maybe<Scalars['String']>;
  staffPositionName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffPositionName_not?: Maybe<Scalars['String']>;
  staffPositionName_not_contains?: Maybe<Scalars['String']>;
  staffPositionName_not_ends_with?: Maybe<Scalars['String']>;
  staffPositionName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffPositionName_not_starts_with?: Maybe<Scalars['String']>;
  staffPositionName_starts_with?: Maybe<Scalars['String']>;
};

export type StaffPositionDtoSort = {
  staffPositionName?: Maybe<SortOperationKind>;
};

export type StaffPositionInfoDto = {
  __typename?: 'StaffPositionInfoDto';
  isActive: Scalars['Boolean'];
  staffPositionDescription?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionName?: Maybe<Scalars['String']>;
};

export type StaffProfileDto = {
  __typename?: 'StaffProfileDto';
  backofficeRoles?: Maybe<Array<Maybe<BackOfficeRoleDto>>>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StaffProfileDto>;
  isLeader?: Maybe<Scalars['Boolean']>;
  permissions?: Maybe<Array<Maybe<PermissionDto>>>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Array<Maybe<Scalars['String']>>>;
};

export type StaffRankingDto = {
  __typename?: 'StaffRankingDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  deletedByUserId?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
  staffRankingDescription?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffRankingName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type StaffRankingDtoFilter = {
  AND?: Maybe<Array<StaffRankingDtoFilter>>;
  OR?: Maybe<Array<StaffRankingDtoFilter>>;
  staffRankingName?: Maybe<Scalars['String']>;
  staffRankingName_contains?: Maybe<Scalars['String']>;
  staffRankingName_ends_with?: Maybe<Scalars['String']>;
  staffRankingName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffRankingName_not?: Maybe<Scalars['String']>;
  staffRankingName_not_contains?: Maybe<Scalars['String']>;
  staffRankingName_not_ends_with?: Maybe<Scalars['String']>;
  staffRankingName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffRankingName_not_starts_with?: Maybe<Scalars['String']>;
  staffRankingName_starts_with?: Maybe<Scalars['String']>;
};

export type StaffRankingDtoSort = {
  staffRankingName?: Maybe<SortOperationKind>;
};

export type StaffRankingInfoDto = {
  __typename?: 'StaffRankingInfoDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  deletedByUserId?: Maybe<Scalars['String']>;
  deletedDatetime?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  sortOrder: Scalars['Int'];
  staffRankingDescription?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffRankingName?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type StaffStatusDto = {
  __typename?: 'StaffStatusDto';
  isActive: Scalars['Boolean'];
  staffStatusDescription?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusName?: Maybe<Scalars['String']>;
};

export type StaffStatusDtoFilter = {
  AND?: Maybe<Array<StaffStatusDtoFilter>>;
  OR?: Maybe<Array<StaffStatusDtoFilter>>;
  staffStatusName?: Maybe<Scalars['String']>;
  staffStatusName_contains?: Maybe<Scalars['String']>;
  staffStatusName_ends_with?: Maybe<Scalars['String']>;
  staffStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusName_not?: Maybe<Scalars['String']>;
  staffStatusName_not_contains?: Maybe<Scalars['String']>;
  staffStatusName_not_ends_with?: Maybe<Scalars['String']>;
  staffStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusName_not_starts_with?: Maybe<Scalars['String']>;
  staffStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type StaffStatusDtoSort = {
  staffStatusName?: Maybe<SortOperationKind>;
};

export type StaffStatusInfoDto = {
  __typename?: 'StaffStatusInfoDto';
  isActive: Scalars['Boolean'];
  staffStatusDescription?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusName?: Maybe<Scalars['String']>;
};

export type StaffTypeDto = {
  __typename?: 'StaffTypeDto';
  aspNetRoleId?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  isConsultant: Scalars['Boolean'];
  staffTypeDescription?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
};

export type StaffTypeDtoFilter = {
  AND?: Maybe<Array<StaffTypeDtoFilter>>;
  OR?: Maybe<Array<StaffTypeDtoFilter>>;
  staffTypeName?: Maybe<Scalars['String']>;
  staffTypeName_contains?: Maybe<Scalars['String']>;
  staffTypeName_ends_with?: Maybe<Scalars['String']>;
  staffTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeName_not?: Maybe<Scalars['String']>;
  staffTypeName_not_contains?: Maybe<Scalars['String']>;
  staffTypeName_not_ends_with?: Maybe<Scalars['String']>;
  staffTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeName_not_starts_with?: Maybe<Scalars['String']>;
  staffTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type StaffTypeDtoSort = {
  staffTypeName?: Maybe<SortOperationKind>;
};

export type StaffTypeInfoDto = {
  __typename?: 'StaffTypeInfoDto';
  aspNetRoleId?: Maybe<Scalars['String']>;
  isConsultant: Scalars['Boolean'];
  staffTypeDescription?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
};

export type StaffsBelongAllocationRuleInput = {
  allocationRuleId?: Maybe<Scalars['String']>;
  searchAssignedRuleName?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
};

export type StaffsOfStaffGroupDto = {
  __typename?: 'StaffsOfStaffGroupDto';
  createdDatetime: Scalars['Long'];
  createdDatetimeString?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isGroupLeader: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffStatusDescription?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type StaffsOfStaffGroupDtoFilter = {
  AND?: Maybe<Array<StaffsOfStaffGroupDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Scalars['Long']>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<StaffsOfStaffGroupDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusId_contains?: Maybe<Scalars['String']>;
  staffStatusId_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not?: Maybe<Scalars['String']>;
  staffStatusId_not_contains?: Maybe<Scalars['String']>;
  staffStatusId_not_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not_starts_with?: Maybe<Scalars['String']>;
  staffStatusId_starts_with?: Maybe<Scalars['String']>;
};

export type StaffsOfStaffGroupDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  email?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  staffCode?: Maybe<SortOperationKind>;
  staffStatusId?: Maybe<SortOperationKind>;
};

export type StartProcessingSupportRequestInput = {
  notes?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type StartProcessingSupportRequestResponse = {
  __typename?: 'StartProcessingSupportRequestResponse';
  commonSupportRequestResponse?: Maybe<CommonSupportRequestResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type StaticAgentDto = {
  __typename?: 'StaticAgentDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<StaticAgentDto>;
  description?: Maybe<Scalars['String']>;
  imageUrl?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  profileUrl?: Maybe<Scalars['String']>;
  soldRealEstatesNumber: Scalars['Int'];
};

export type StatisticPropertyPostsBySaleSeasonResult = {
  __typename?: 'StatisticPropertyPostsBySaleSeasonResult';
  totalBookings: Scalars['Int'];
  totalPropertyPosts: Scalars['Int'];
};

export type StreetAddressDto = {
  __typename?: 'StreetAddressDto';
  city?: Maybe<Scalars['String']>;
  country?: Maybe<Scalars['String']>;
  state?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  zipcode?: Maybe<Scalars['String']>;
};

export type StreetDto = {
  __typename?: 'StreetDto';
  additionalStreetInfo?: Maybe<Scalars['String']>;
  area?: Maybe<Scalars['String']>;
  beginLatitude?: Maybe<Scalars['String']>;
  beginLongitude?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  districtId: Scalars['Int'];
  endLatitude?: Maybe<Scalars['String']>;
  endLongitude?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  streetId: Scalars['Int'];
  streetName?: Maybe<Scalars['String']>;
};

export type StreetDtoFilter = {
  AND?: Maybe<Array<StreetDtoFilter>>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Scalars['Int']>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Scalars['Int']>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<StreetDtoFilter>>;
  streetName?: Maybe<Scalars['String']>;
  streetName_contains?: Maybe<Scalars['String']>;
  streetName_ends_with?: Maybe<Scalars['String']>;
  streetName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  streetName_not?: Maybe<Scalars['String']>;
  streetName_not_contains?: Maybe<Scalars['String']>;
  streetName_not_ends_with?: Maybe<Scalars['String']>;
  streetName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  streetName_not_starts_with?: Maybe<Scalars['String']>;
  streetName_starts_with?: Maybe<Scalars['String']>;
};

export type StreetDtoSort = {
  streetName?: Maybe<SortOperationKind>;
};

export type StreetInfoDto = {
  __typename?: 'StreetInfoDto';
  additionalStreetInfo?: Maybe<Scalars['String']>;
  beginLatitude?: Maybe<Scalars['String']>;
  beginLongitude?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  districtId: Scalars['Int'];
  endLatitude?: Maybe<Scalars['String']>;
  endLongitude?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  streetId: Scalars['Int'];
  streetName?: Maybe<Scalars['String']>;
};

export type StringeeXAccountDto = {
  __typename?: 'StringeeXAccountDto';
  accountId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXAccountDto>;
  disableLogin?: Maybe<Scalars['Boolean']>;
  email?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  joinTime?: Maybe<Scalars['Long']>;
  language?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  portalId?: Maybe<Scalars['String']>;
  portalName?: Maybe<Scalars['String']>;
  removed?: Maybe<Scalars['Boolean']>;
  ringCall?: Maybe<Scalars['Boolean']>;
  ringChat?: Maybe<Scalars['Boolean']>;
  role?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['Int']>;
  superAdmin?: Maybe<Scalars['Boolean']>;
};

export type StringeeXCallHistoryDto = {
  __typename?: 'StringeeXCallHistoryDto';
  account?: Maybe<Scalars['String']>;
  accountEmail?: Maybe<Scalars['String']>;
  accountName?: Maybe<Scalars['String']>;
  acwDuration?: Maybe<Scalars['Int']>;
  answerDuration?: Maybe<Scalars['Int']>;
  answerDurationMinutes?: Maybe<Scalars['Int']>;
  answerTime?: Maybe<Scalars['Long']>;
  calculateSize: Scalars['Int'];
  callee?: Maybe<Scalars['String']>;
  campaignId?: Maybe<Scalars['String']>;
  campaignName?: Maybe<Scalars['String']>;
  clone?: Maybe<StringeeXCallHistoryDto>;
  companyId?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  customerNumber?: Maybe<Scalars['String']>;
  direction?: Maybe<Scalars['Int']>;
  duration?: Maybe<Scalars['Int']>;
  endCallReason?: Maybe<Scalars['String']>;
  endTime?: Maybe<Scalars['Long']>;
  enqueueTime?: Maybe<Scalars['Long']>;
  firstAnswerTime?: Maybe<Scalars['String']>;
  fromUserId?: Maybe<Scalars['String']>;
  haveVoiceMail?: Maybe<Scalars['Boolean']>;
  holdDuration?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  ivrDuration?: Maybe<Scalars['Int']>;
  objectType?: Maybe<Scalars['String']>;
  participants?: Maybe<Scalars['String']>;
  portal?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
  recorded?: Maybe<Scalars['Boolean']>;
  recordPath?: Maybe<Scalars['String']>;
  routeToAgent?: Maybe<Scalars['Boolean']>;
  startTime?: Maybe<Scalars['Long']>;
  status?: Maybe<Scalars['Int']>;
  stringeeNumber?: Maybe<Scalars['String']>;
  talkDuration?: Maybe<Scalars['Int']>;
  videoCall?: Maybe<Scalars['Int']>;
};

export type StringeeXChatConversationDto = {
  __typename?: 'StringeeXChatConversationDto';
  agentId?: Maybe<Scalars['String']>;
  agentName?: Maybe<Scalars['String']>;
  agentUnread?: Maybe<Scalars['Int']>;
  answerTime?: Maybe<Scalars['Long']>;
  calculateSize: Scalars['Int'];
  channelType?: Maybe<Scalars['Int']>;
  chatStatus?: Maybe<Scalars['Int']>;
  clone?: Maybe<StringeeXChatConversationDto>;
  contactId?: Maybe<Scalars['String']>;
  convId?: Maybe<Scalars['String']>;
  countMsg?: Maybe<Scalars['Int']>;
  created?: Maybe<Scalars['Long']>;
  creator?: Maybe<Scalars['String']>;
  ended?: Maybe<Scalars['Int']>;
  endTime?: Maybe<Scalars['Long']>;
  lastMsg?: Maybe<StringeeXChatMessageDto>;
  lastMsgType?: Maybe<Scalars['Int']>;
  lastUpdate?: Maybe<Scalars['Long']>;
  missedViewed?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['Int']>;
  queueId?: Maybe<Scalars['String']>;
  queueName?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  resolved?: Maybe<Scalars['Int']>;
  ticketSerial?: Maybe<Scalars['Int']>;
  userId?: Maybe<Scalars['String']>;
  visitorAvatar?: Maybe<Scalars['String']>;
  visitorEmail?: Maybe<Scalars['String']>;
  visitorName?: Maybe<Scalars['String']>;
  visitorPhone?: Maybe<Scalars['String']>;
};

export type StringeeXChatConversationMessageDto = {
  __typename?: 'StringeeXChatConversationMessageDto';
  agentId?: Maybe<Scalars['String']>;
  avatarUrl?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXChatConversationMessageDto>;
  content?: Maybe<StringeeXChatMessageDto>;
  convId?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['Long']>;
  isUser?: Maybe<Scalars['Boolean']>;
  msgId?: Maybe<Scalars['String']>;
  sender?: Maybe<Scalars['String']>;
  seq?: Maybe<Scalars['Long']>;
  status?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['Int']>;
  userName?: Maybe<Scalars['String']>;
};

export type StringeeXChatMessageDto = {
  __typename?: 'StringeeXChatMessageDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXChatMessageDto>;
  content?: Maybe<Scalars['String']>;
  creator?: Maybe<Scalars['String']>;
  endedBy?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  metadata?: Maybe<Scalars['String']>;
  participants?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
};

export type StringeeXCompanyDto = {
  __typename?: 'StringeeXCompanyDto';
  about?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXCompanyDto>;
  created?: Maybe<Scalars['Long']>;
  id?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  name?: Maybe<Scalars['String']>;
  portal?: Maybe<Scalars['String']>;
};

export type StringeeXContactDto = {
  __typename?: 'StringeeXContactDto';
  about?: Maybe<Scalars['String']>;
  accountManager?: Maybe<Scalars['String']>;
  accountManagerName?: Maybe<Scalars['String']>;
  avatar?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  chatVisitorId?: Maybe<Array<Maybe<Scalars['String']>>>;
  clone?: Maybe<StringeeXContactDto>;
  company?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  contactType?: Maybe<Scalars['Int']>;
  created?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  emails?: Maybe<Array<Maybe<StringeeXContactFieldValueDto>>>;
  id?: Maybe<Scalars['String']>;
  jobTitle?: Maybe<Scalars['String']>;
  lastModified?: Maybe<Scalars['Long']>;
  name?: Maybe<Scalars['String']>;
  objectType?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  phones?: Maybe<Array<Maybe<StringeeXContactFieldValueDto>>>;
  portal?: Maybe<Scalars['String']>;
  ticketRole?: Maybe<Scalars['Int']>;
};

export type StringeeXContactFieldValueDto = {
  __typename?: 'StringeeXContactFieldValueDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXContactFieldValueDto>;
  fieldvalueId?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['String']>;
};

export type StringeeXNumberDto = {
  __typename?: 'StringeeXNumberDto';
  available?: Maybe<Scalars['Int']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXNumberDto>;
  countryCode?: Maybe<Scalars['String']>;
  countryIsoCode?: Maybe<Scalars['String']>;
  countryName?: Maybe<Scalars['String']>;
  emailBuyNumber?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  idBuyNumber?: Maybe<Scalars['String']>;
  isCustomerNumber?: Maybe<Scalars['Int']>;
  monthlyPrice?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['String']>;
  setupFee?: Maybe<Scalars['String']>;
  smsEnabled?: Maybe<Scalars['Int']>;
  smsProviderKey?: Maybe<Scalars['String']>;
  telco?: Maybe<Scalars['Int']>;
  telcoId?: Maybe<Scalars['Int']>;
  telcoName?: Maybe<Scalars['String']>;
  viaKamailio?: Maybe<Scalars['Int']>;
  voiceEnabled?: Maybe<Scalars['Int']>;
};

export type StringeeXPccAgentDto = {
  __typename?: 'StringeeXPccAgentDto';
  account?: Maybe<Scalars['Int']>;
  allowOutOfBusinessHourCallout?: Maybe<Scalars['Int']>;
  autoPickup?: Maybe<Scalars['Int']>;
  autoRouteToPhoneAfter?: Maybe<Scalars['Int']>;
  businessHourId?: Maybe<Scalars['Int']>;
  calculateSize: Scalars['Int'];
  calloutMonthlyMinute?: Maybe<Scalars['Int']>;
  calloutSecondsCalled?: Maybe<Scalars['Int']>;
  campaignId?: Maybe<Scalars['String']>;
  campaignStatus?: Maybe<Scalars['Int']>;
  chatManualStatus?: Maybe<Scalars['Int']>;
  chatSystemStatus?: Maybe<Scalars['Int']>;
  clone?: Maybe<StringeeXPccAgentDto>;
  deviceStatus?: Maybe<Scalars['Int']>;
  groups?: Maybe<Array<Maybe<StringeeXPccAgentGroupDto>>>;
  id?: Maybe<Scalars['String']>;
  lastTimeAssignedTicket?: Maybe<Scalars['Long']>;
  lastTimePickup?: Maybe<Scalars['Long']>;
  lastTimePickupCallEnded?: Maybe<Scalars['Long']>;
  lastTimePickupChat?: Maybe<Scalars['Long']>;
  lastTimePickupChatEnded?: Maybe<Scalars['Long']>;
  lastTimeSupportCallEnded?: Maybe<Scalars['Long']>;
  lastTimeSupportEmail?: Maybe<Scalars['Long']>;
  lastTimeSupportFb?: Maybe<Scalars['Long']>;
  lastTimeSupportZalo?: Maybe<Scalars['Long']>;
  manualStatus?: Maybe<Scalars['String']>;
  maxChat?: Maybe<Scalars['Int']>;
  maxConnectTimeExternal?: Maybe<Scalars['Int']>;
  maxConnectTimeInternal?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
  onlineStatus?: Maybe<Scalars['Int']>;
  phoneNumber?: Maybe<Scalars['String']>;
  project?: Maybe<Scalars['Int']>;
  removedInStringeex?: Maybe<Scalars['Int']>;
  routingType?: Maybe<Scalars['Int']>;
  sipPhoneExtension?: Maybe<Scalars['String']>;
  sipPhoneExtensionOld?: Maybe<Scalars['String']>;
  stringeeUserId?: Maybe<Scalars['String']>;
  systemStatus?: Maybe<Scalars['Int']>;
  transferToPhoneIfNotOnline?: Maybe<Scalars['Int']>;
  transferToPhoneWhenBusy?: Maybe<Scalars['Int']>;
};

export type StringeeXPccAgentGroupDto = {
  __typename?: 'StringeeXPccAgentGroupDto';
  agentId?: Maybe<Scalars['String']>;
  agentName?: Maybe<Scalars['String']>;
  businessHourId?: Maybe<Scalars['Int']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXPccAgentGroupDto>;
  groupId?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  lastTimePickup?: Maybe<Scalars['Long']>;
  lastTimePickupCallEnded?: Maybe<Scalars['Long']>;
  lastTimeSupportCallEnded?: Maybe<Scalars['Long']>;
  manualStatus?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  routingType?: Maybe<Scalars['Int']>;
  sipPhoneExtension?: Maybe<Scalars['String']>;
  stringeeUserId?: Maybe<Scalars['String']>;
  systemStatus?: Maybe<Scalars['Int']>;
};

export type StringeeXPccGroupDto = {
  __typename?: 'StringeeXPccGroupDto';
  account?: Maybe<Scalars['Int']>;
  allowOutOfBusinessHourCallout?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXPccGroupDto>;
  id?: Maybe<Scalars['String']>;
  maxConnectTimeExternal?: Maybe<Scalars['String']>;
  maxConnectTimeInternal?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  numberOfAgent?: Maybe<Scalars['Int']>;
  project?: Maybe<Scalars['Int']>;
  queues?: Maybe<Array<Maybe<StringeeXPccGroupQueueDto>>>;
  viewAllContact?: Maybe<Scalars['Int']>;
  viewAllTicket?: Maybe<Scalars['Int']>;
  viewHistory?: Maybe<Scalars['Int']>;
};

export type StringeeXPccGroupQueueDto = {
  __typename?: 'StringeeXPccGroupQueueDto';
  account?: Maybe<Scalars['Int']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXPccGroupQueueDto>;
  groupId?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isBackup?: Maybe<Scalars['Int']>;
  primaryGroup?: Maybe<Scalars['Int']>;
  project?: Maybe<Scalars['Int']>;
  queueId?: Maybe<Scalars['String']>;
  queueName?: Maybe<Scalars['String']>;
};

export type StringeeXPccNumberDto = {
  __typename?: 'StringeeXPccNumberDto';
  account?: Maybe<Scalars['Int']>;
  allGroupCanMakeOutboundCall?: Maybe<Scalars['Int']>;
  allowOutboundCalls?: Maybe<Scalars['Int']>;
  answerCall?: Maybe<Scalars['Int']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXPccNumberDto>;
  created?: Maybe<Scalars['Long']>;
  enableIvr?: Maybe<Scalars['Int']>;
  id?: Maybe<Scalars['String']>;
  nickname?: Maybe<Scalars['String']>;
  notifyAnswerTime?: Maybe<Scalars['Int']>;
  number?: Maybe<Scalars['String']>;
  project?: Maybe<Scalars['Int']>;
  queueId?: Maybe<Scalars['String']>;
  queueName?: Maybe<Scalars['String']>;
  recordOutboundCalls?: Maybe<Scalars['Int']>;
  wrapUpTimeLimit?: Maybe<Scalars['Int']>;
};

export type StringeeXQueueDto = {
  __typename?: 'StringeeXQueueDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXQueueDto>;
  queueId?: Maybe<Scalars['String']>;
  queueName?: Maybe<Scalars['String']>;
  totalAnsweringCall?: Maybe<Scalars['Int']>;
  totalRingingCall?: Maybe<Scalars['Int']>;
  totalWaitingCall?: Maybe<Scalars['Int']>;
};

export type StringeeXTicketDto = {
  __typename?: 'StringeeXTicketDto';
  assignee?: Maybe<Scalars['String']>;
  assigneeGroup?: Maybe<Scalars['String']>;
  assigneeGroupName?: Maybe<Scalars['String']>;
  assigneeName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  callId?: Maybe<Scalars['String']>;
  clone?: Maybe<StringeeXTicketDto>;
  company?: Maybe<Scalars['String']>;
  companyName?: Maybe<Scalars['String']>;
  contact?: Maybe<Scalars['String']>;
  contactName?: Maybe<Scalars['String']>;
  created?: Maybe<Scalars['Long']>;
  createReason?: Maybe<Scalars['Int']>;
  creator?: Maybe<Scalars['String']>;
  creatorName?: Maybe<Scalars['String']>;
  customerNumber?: Maybe<Scalars['String']>;
  graph?: Maybe<StringeeXTicketGraphDto>;
  id?: Maybe<Scalars['String']>;
  inCall?: Maybe<Scalars['Int']>;
  lastModified?: Maybe<Scalars['Long']>;
  objectType?: Maybe<Scalars['String']>;
  portal?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['Int']>;
  serial?: Maybe<Scalars['Int']>;
  status?: Maybe<Scalars['Int']>;
  subject?: Maybe<Scalars['String']>;
  ticketRole?: Maybe<Scalars['Int']>;
  type?: Maybe<Scalars['Int']>;
  updated?: Maybe<Scalars['Long']>;
};

export type StringeeXTicketGraphAssigneeDto = {
  __typename?: 'StringeeXTicketGraphAssigneeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXTicketGraphAssigneeDto>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type StringeeXTicketGraphContractDto = {
  __typename?: 'StringeeXTicketGraphContractDto';
  avatar?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXTicketGraphContractDto>;
  id?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

export type StringeeXTicketGraphDto = {
  __typename?: 'StringeeXTicketGraphDto';
  assignee?: Maybe<StringeeXTicketGraphAssigneeDto>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<StringeeXTicketGraphDto>;
  contract?: Maybe<StringeeXTicketGraphContractDto>;
};

export type SubscribeEmailForNewsInput = {
  email?: Maybe<Scalars['String']>;
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type SubscribeEmailForNewsResponse = {
  __typename?: 'SubscribeEmailForNewsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isRequiredToUseCaptcha?: Maybe<Scalars['Boolean']>;
};

export type SubscriptionNotificationMethod = {
  __typename?: 'SubscriptionNotificationMethod';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SubscriptionNotificationMethod>;
  emailNoti?: Maybe<Scalars['Boolean']>;
  pushNoti?: Maybe<Scalars['Boolean']>;
  smsNoti?: Maybe<Scalars['Boolean']>;
};

export type SubscriptionPackageDto = {
  __typename?: 'SubscriptionPackageDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SubscriptionPackageDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  subscriptionPackageAccountUsedCount?: Maybe<Scalars['Int']>;
  subscriptionPackageCode?: Maybe<Scalars['String']>;
  subscriptionPackageDescription?: Maybe<Scalars['String']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackageName?: Maybe<Scalars['String']>;
  subscriptionPackagePrice?: Maybe<Scalars['Float']>;
  subscriptionPackageValidDays?: Maybe<Scalars['Int']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedByUserName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type SubscriptionPackageStatusDto = {
  __typename?: 'SubscriptionPackageStatusDto';
  subscriptionPackageStatusDescription?: Maybe<Scalars['String']>;
  subscriptionPackageStatusId?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName?: Maybe<Scalars['String']>;
};

export type SubscriptionPackageStatusDtoFilter = {
  AND?: Maybe<Array<SubscriptionPackageStatusDtoFilter>>;
  OR?: Maybe<Array<SubscriptionPackageStatusDtoFilter>>;
  subscriptionPackageStatusName?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_contains?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_ends_with?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPackageStatusName_not?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_not_contains?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_not_ends_with?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPackageStatusName_not_starts_with?: Maybe<Scalars['String']>;
  subscriptionPackageStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SubscriptionPackageStatusDtoSort = {
  subscriptionPackageStatusName?: Maybe<SortOperationKind>;
};

export type SubscriptionPaymentStatusDto = {
  __typename?: 'SubscriptionPaymentStatusDto';
  subscriptionPaymentStatusDescription?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusId?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName?: Maybe<Scalars['String']>;
};

export type SubscriptionPaymentStatusDtoFilter = {
  AND?: Maybe<Array<SubscriptionPaymentStatusDtoFilter>>;
  OR?: Maybe<Array<SubscriptionPaymentStatusDtoFilter>>;
  subscriptionPaymentStatusName?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_contains?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_ends_with?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPaymentStatusName_not?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_not_contains?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_not_ends_with?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  subscriptionPaymentStatusName_not_starts_with?: Maybe<Scalars['String']>;
  subscriptionPaymentStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SubscriptionPaymentStatusDtoSort = {
  subscriptionPaymentStatusName?: Maybe<SortOperationKind>;
};

export type SummaryC2CPropertyPostByApprovalStatusDto = {
  __typename?: 'SummaryC2CPropertyPostByApprovalStatusDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SummaryC2CPropertyPostByApprovalStatusDto>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  totalCount: Scalars['Int'];
};

export type SummaryNotificationDto = {
  __typename?: 'SummaryNotificationDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SummaryNotificationDto>;
  totalNotificationUnread: Scalars['Int'];
  totalTypeSuggestionUnread: Scalars['Int'];
  totalTypeSystemUnread: Scalars['Int'];
  totalTypeTransactionUnread: Scalars['Int'];
};

export type SupportRequestClosingReasonDto = {
  __typename?: 'SupportRequestClosingReasonDto';
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  type: Scalars['Int'];
};

export type SupportRequestClosingReasonDtoFilter = {
  AND?: Maybe<Array<SupportRequestClosingReasonDtoFilter>>;
  name?: Maybe<Scalars['String']>;
  name_contains?: Maybe<Scalars['String']>;
  name_ends_with?: Maybe<Scalars['String']>;
  name_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not?: Maybe<Scalars['String']>;
  name_not_contains?: Maybe<Scalars['String']>;
  name_not_ends_with?: Maybe<Scalars['String']>;
  name_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  name_not_starts_with?: Maybe<Scalars['String']>;
  name_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<SupportRequestClosingReasonDtoFilter>>;
};

export type SupportRequestClosingReasonDtoSort = {
  name?: Maybe<SortOperationKind>;
};

export type SupportRequestClosingReasonInfoDto = {
  __typename?: 'SupportRequestClosingReasonInfoDto';
  description?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  name?: Maybe<Scalars['String']>;
  type: Scalars['Int'];
};

export type SupportRequestContactTradingDto = {
  __typename?: 'SupportRequestContactTradingDto';
  assigneeFullName?: Maybe<Scalars['String']>;
  businessCategoryTypeName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  supportRequestCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  supportRequestStatusDescription?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type SupportRequestContactTradingDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  requestTypeName?: Maybe<SortOperationKind>;
  supportRequestCode?: Maybe<SortOperationKind>;
  supportRequestStatusName?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
};

export type SupportRequestContactTradingResponse = {
  __typename?: 'SupportRequestContactTradingResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportRequestContactTradingResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestContactTradingDtos?: Maybe<Array<Maybe<SupportRequestContactTradingDto>>>;
};

export type SupportRequestDto = {
  __typename?: 'SupportRequestDto';
  assignedDatetime?: Maybe<Scalars['Long']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  attachment?: Maybe<Scalars['String']>;
  cancelledDatetime?: Maybe<Scalars['Long']>;
  closeDatetime?: Maybe<Scalars['Long']>;
  closedByUserFullName?: Maybe<Scalars['String']>;
  completeDatetime?: Maybe<Scalars['Long']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  dueDate?: Maybe<Scalars['Long']>;
  externalTicketId?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  notes?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['Int']>;
  processingDatetime?: Maybe<Scalars['Long']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  requestData?: Maybe<Scalars['String']>;
  requestDescription?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGuestId?: Maybe<Scalars['String']>;
  requesterIsUser?: Maybe<Scalars['Boolean']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterUserId?: Maybe<Scalars['String']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  supportRating?: Maybe<Scalars['Int']>;
  supportRequestClosingReasonId?: Maybe<Scalars['String']>;
  supportRequestCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestTitle?: Maybe<Scalars['String']>;
  supportResults?: Maybe<Scalars['String']>;
  xPath?: Maybe<Scalars['String']>;
};

export type SupportRequestFintechDto = {
  __typename?: 'SupportRequestFintechDto';
  createdUserId?: Maybe<Scalars['Uuid']>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  guestId?: Maybe<Scalars['Uuid']>;
  notes?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  requestTypeIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestId: Scalars['Uuid'];
  ticketId?: Maybe<Scalars['String']>;
};

export type SupportRequestFintechResponse = {
  __typename?: 'SupportRequestFintechResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestFintechDto?: Maybe<SupportRequestFintechDto>;
};

export type SupportRequestInfoDto = {
  __typename?: 'SupportRequestInfoDto';
  assignedDatetime?: Maybe<Scalars['Long']>;
  assigneeEmail?: Maybe<Scalars['String']>;
  assigneeFirstName?: Maybe<Scalars['String']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneeLastName?: Maybe<Scalars['String']>;
  assigneePhoneNumber?: Maybe<Scalars['String']>;
  assigneeProfilePhoto?: Maybe<Scalars['String']>;
  assigneeProfilePhotos?: Maybe<Scalars['String']>;
  assigneeStaffGroupDescription?: Maybe<Scalars['String']>;
  assigneeStaffGroupId?: Maybe<Scalars['String']>;
  assigneeStaffGroupName?: Maybe<Scalars['String']>;
  assigneeStaffRating?: Maybe<Scalars['Int']>;
  attachment?: Maybe<Scalars['String']>;
  bookingCode?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  cancelledByUserFullName?: Maybe<Scalars['String']>;
  cancelledByUserId?: Maybe<Scalars['String']>;
  cancelledDatetime?: Maybe<Scalars['Long']>;
  closeDatetime?: Maybe<Scalars['Long']>;
  closedByUserFullName?: Maybe<Scalars['String']>;
  completeDatetime?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime?: Maybe<Scalars['Long']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  departmentDescription?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  depositeCode?: Maybe<Scalars['String']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  dueDate?: Maybe<Scalars['Long']>;
  externalTicketId?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isBooking?: Maybe<Scalars['Boolean']>;
  notes?: Maybe<Scalars['String']>;
  paymentDatetime?: Maybe<Scalars['Long']>;
  paymentMethod?: Maybe<Scalars['String']>;
  priority?: Maybe<Scalars['Int']>;
  processingByUserFullName?: Maybe<Scalars['String']>;
  processingByUserId?: Maybe<Scalars['String']>;
  processingDatetime?: Maybe<Scalars['Long']>;
  productDetailPath?: Maybe<Scalars['String']>;
  productId?: Maybe<Scalars['String']>;
  productName?: Maybe<Scalars['String']>;
  productType?: Maybe<Scalars['Int']>;
  projectDetailPath?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostCreatedUserEmail?: Maybe<Scalars['String']>;
  propertyPostCreatedUserFullName?: Maybe<Scalars['String']>;
  propertyPostCreatedUserPhoneNumber?: Maybe<Scalars['String']>;
  propertyPostDetailPathForRent?: Maybe<Scalars['String']>;
  propertyPostDetailPathForSale?: Maybe<Scalars['String']>;
  propertyPostForRent: Scalars['Boolean'];
  propertyPostForSale: Scalars['Boolean'];
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostName?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  requestData?: Maybe<Scalars['String']>;
  requestDescription?: Maybe<Scalars['String']>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterFirstName?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterGuestEmail?: Maybe<Scalars['String']>;
  requesterGuestFirstName?: Maybe<Scalars['String']>;
  requesterGuestId?: Maybe<Scalars['String']>;
  requesterGuestLastName?: Maybe<Scalars['String']>;
  requesterGuestPhoneNumber?: Maybe<Scalars['String']>;
  requesterIsUser?: Maybe<Scalars['Boolean']>;
  requesterLastName?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterUserEmail?: Maybe<Scalars['String']>;
  requesterUserFirstName?: Maybe<Scalars['String']>;
  requesterUserId?: Maybe<Scalars['String']>;
  requesterUserLastName?: Maybe<Scalars['String']>;
  requesterUserPhoneNumber?: Maybe<Scalars['String']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  rowNumber?: Maybe<Scalars['Int']>;
  saleSeasonEndBookingDatetime?: Maybe<Scalars['Long']>;
  saleSeasonStartBookingDatetime?: Maybe<Scalars['Long']>;
  seasonName?: Maybe<Scalars['String']>;
  sourceTypeDescription?: Maybe<Scalars['String']>;
  sourceTypeId?: Maybe<Scalars['String']>;
  sourceTypeName?: Maybe<Scalars['String']>;
  supportRating?: Maybe<Scalars['Int']>;
  supportRequestClosingReasonId?: Maybe<Scalars['String']>;
  supportRequestCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  supportRequestServiceBonusDtos?: Maybe<Array<Maybe<SupportRequestServiceBonusDto>>>;
  supportRequestStatusDescription?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
  supportRequestTitle?: Maybe<Scalars['String']>;
  supportResults?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  transactionAmount?: Maybe<Scalars['Float']>;
  transactionNo?: Maybe<Scalars['String']>;
  xmin?: Maybe<Scalars['Int']>;
  xPath?: Maybe<Scalars['String']>;
};

/** A connection to a list of items. */
export type SupportRequestInfoDtoConnection = {
  __typename?: 'SupportRequestInfoDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<SupportRequestInfoDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<SupportRequestInfoDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type SupportRequestInfoDtoEdge = {
  __typename?: 'SupportRequestInfoDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<SupportRequestInfoDto>;
};

export type SupportRequestInfoDtoFilter = {
  AND?: Maybe<Array<SupportRequestInfoDtoFilter>>;
  assigneeFirstName?: Maybe<Scalars['String']>;
  assigneeFirstName_contains?: Maybe<Scalars['String']>;
  assigneeFirstName_ends_with?: Maybe<Scalars['String']>;
  assigneeFirstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeFirstName_not?: Maybe<Scalars['String']>;
  assigneeFirstName_not_contains?: Maybe<Scalars['String']>;
  assigneeFirstName_not_ends_with?: Maybe<Scalars['String']>;
  assigneeFirstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeFirstName_not_starts_with?: Maybe<Scalars['String']>;
  assigneeFirstName_starts_with?: Maybe<Scalars['String']>;
  assigneeFullName?: Maybe<Scalars['String']>;
  assigneeFullName_contains?: Maybe<Scalars['String']>;
  assigneeFullName_ends_with?: Maybe<Scalars['String']>;
  assigneeFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeFullName_not?: Maybe<Scalars['String']>;
  assigneeFullName_not_contains?: Maybe<Scalars['String']>;
  assigneeFullName_not_ends_with?: Maybe<Scalars['String']>;
  assigneeFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeFullName_not_starts_with?: Maybe<Scalars['String']>;
  assigneeFullName_starts_with?: Maybe<Scalars['String']>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneeId_contains?: Maybe<Scalars['String']>;
  assigneeId_ends_with?: Maybe<Scalars['String']>;
  assigneeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not?: Maybe<Scalars['String']>;
  assigneeId_not_contains?: Maybe<Scalars['String']>;
  assigneeId_not_ends_with?: Maybe<Scalars['String']>;
  assigneeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not_starts_with?: Maybe<Scalars['String']>;
  assigneeId_starts_with?: Maybe<Scalars['String']>;
  assigneeLastName?: Maybe<Scalars['String']>;
  assigneeLastName_contains?: Maybe<Scalars['String']>;
  assigneeLastName_ends_with?: Maybe<Scalars['String']>;
  assigneeLastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeLastName_not?: Maybe<Scalars['String']>;
  assigneeLastName_not_contains?: Maybe<Scalars['String']>;
  assigneeLastName_not_ends_with?: Maybe<Scalars['String']>;
  assigneeLastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeLastName_not_starts_with?: Maybe<Scalars['String']>;
  assigneeLastName_starts_with?: Maybe<Scalars['String']>;
  closeDatetime?: Maybe<Scalars['Long']>;
  closeDatetime_gt?: Maybe<Scalars['Long']>;
  closeDatetime_gte?: Maybe<Scalars['Long']>;
  closeDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  closeDatetime_lt?: Maybe<Scalars['Long']>;
  closeDatetime_lte?: Maybe<Scalars['Long']>;
  closeDatetime_not?: Maybe<Scalars['Long']>;
  closeDatetime_not_gt?: Maybe<Scalars['Long']>;
  closeDatetime_not_gte?: Maybe<Scalars['Long']>;
  closeDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  closeDatetime_not_lt?: Maybe<Scalars['Long']>;
  closeDatetime_not_lte?: Maybe<Scalars['Long']>;
  completeDatetime?: Maybe<Scalars['Long']>;
  completeDatetime_gt?: Maybe<Scalars['Long']>;
  completeDatetime_gte?: Maybe<Scalars['Long']>;
  completeDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  completeDatetime_lt?: Maybe<Scalars['Long']>;
  completeDatetime_lte?: Maybe<Scalars['Long']>;
  completeDatetime_not?: Maybe<Scalars['Long']>;
  completeDatetime_not_gt?: Maybe<Scalars['Long']>;
  completeDatetime_not_gte?: Maybe<Scalars['Long']>;
  completeDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  completeDatetime_not_lt?: Maybe<Scalars['Long']>;
  completeDatetime_not_lte?: Maybe<Scalars['Long']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<SupportRequestInfoDtoFilter>>;
  requesterEmail?: Maybe<Scalars['String']>;
  requesterEmail_contains?: Maybe<Scalars['String']>;
  requesterEmail_ends_with?: Maybe<Scalars['String']>;
  requesterEmail_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterEmail_not?: Maybe<Scalars['String']>;
  requesterEmail_not_contains?: Maybe<Scalars['String']>;
  requesterEmail_not_ends_with?: Maybe<Scalars['String']>;
  requesterEmail_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterEmail_not_starts_with?: Maybe<Scalars['String']>;
  requesterEmail_starts_with?: Maybe<Scalars['String']>;
  requesterFirstName?: Maybe<Scalars['String']>;
  requesterFirstName_contains?: Maybe<Scalars['String']>;
  requesterFirstName_ends_with?: Maybe<Scalars['String']>;
  requesterFirstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFirstName_not?: Maybe<Scalars['String']>;
  requesterFirstName_not_contains?: Maybe<Scalars['String']>;
  requesterFirstName_not_ends_with?: Maybe<Scalars['String']>;
  requesterFirstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFirstName_not_starts_with?: Maybe<Scalars['String']>;
  requesterFirstName_starts_with?: Maybe<Scalars['String']>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterFullName_contains?: Maybe<Scalars['String']>;
  requesterFullName_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not?: Maybe<Scalars['String']>;
  requesterFullName_not_contains?: Maybe<Scalars['String']>;
  requesterFullName_not_ends_with?: Maybe<Scalars['String']>;
  requesterFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterFullName_not_starts_with?: Maybe<Scalars['String']>;
  requesterFullName_starts_with?: Maybe<Scalars['String']>;
  requesterLastName?: Maybe<Scalars['String']>;
  requesterLastName_contains?: Maybe<Scalars['String']>;
  requesterLastName_ends_with?: Maybe<Scalars['String']>;
  requesterLastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterLastName_not?: Maybe<Scalars['String']>;
  requesterLastName_not_contains?: Maybe<Scalars['String']>;
  requesterLastName_not_ends_with?: Maybe<Scalars['String']>;
  requesterLastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterLastName_not_starts_with?: Maybe<Scalars['String']>;
  requesterLastName_starts_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber?: Maybe<Scalars['String']>;
  requesterPhoneNumber_contains?: Maybe<Scalars['String']>;
  requesterPhoneNumber_ends_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterPhoneNumber_not?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_contains?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterPhoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  requesterPhoneNumber_starts_with?: Maybe<Scalars['String']>;
  requesterUserId?: Maybe<Scalars['String']>;
  requesterUserId_contains?: Maybe<Scalars['String']>;
  requesterUserId_ends_with?: Maybe<Scalars['String']>;
  requesterUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterUserId_not?: Maybe<Scalars['String']>;
  requesterUserId_not_contains?: Maybe<Scalars['String']>;
  requesterUserId_not_ends_with?: Maybe<Scalars['String']>;
  requesterUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requesterUserId_not_starts_with?: Maybe<Scalars['String']>;
  requesterUserId_starts_with?: Maybe<Scalars['String']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeDescription_contains?: Maybe<Scalars['String']>;
  requestTypeDescription_ends_with?: Maybe<Scalars['String']>;
  requestTypeDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeDescription_not?: Maybe<Scalars['String']>;
  requestTypeDescription_not_contains?: Maybe<Scalars['String']>;
  requestTypeDescription_not_ends_with?: Maybe<Scalars['String']>;
  requestTypeDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeDescription_not_starts_with?: Maybe<Scalars['String']>;
  requestTypeDescription_starts_with?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeId_contains?: Maybe<Scalars['String']>;
  requestTypeId_ends_with?: Maybe<Scalars['String']>;
  requestTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeId_not?: Maybe<Scalars['String']>;
  requestTypeId_not_contains?: Maybe<Scalars['String']>;
  requestTypeId_not_ends_with?: Maybe<Scalars['String']>;
  requestTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeId_not_starts_with?: Maybe<Scalars['String']>;
  requestTypeId_starts_with?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  requestTypeName_contains?: Maybe<Scalars['String']>;
  requestTypeName_ends_with?: Maybe<Scalars['String']>;
  requestTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeName_not?: Maybe<Scalars['String']>;
  requestTypeName_not_contains?: Maybe<Scalars['String']>;
  requestTypeName_not_ends_with?: Maybe<Scalars['String']>;
  requestTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  requestTypeName_not_starts_with?: Maybe<Scalars['String']>;
  requestTypeName_starts_with?: Maybe<Scalars['String']>;
  sourceTypeId?: Maybe<Scalars['String']>;
  sourceTypeId_contains?: Maybe<Scalars['String']>;
  sourceTypeId_ends_with?: Maybe<Scalars['String']>;
  sourceTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceTypeId_not?: Maybe<Scalars['String']>;
  sourceTypeId_not_contains?: Maybe<Scalars['String']>;
  sourceTypeId_not_ends_with?: Maybe<Scalars['String']>;
  sourceTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceTypeId_not_starts_with?: Maybe<Scalars['String']>;
  sourceTypeId_starts_with?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_contains?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_ends_with?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestClosingReasonId_not?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_not_contains?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_not_ends_with?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestClosingReasonId_not_starts_with?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId_starts_with?: Maybe<Scalars['String']>;
  supportRequestCode?: Maybe<Scalars['String']>;
  supportRequestCode_contains?: Maybe<Scalars['String']>;
  supportRequestCode_ends_with?: Maybe<Scalars['String']>;
  supportRequestCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestCode_not?: Maybe<Scalars['String']>;
  supportRequestCode_not_contains?: Maybe<Scalars['String']>;
  supportRequestCode_not_ends_with?: Maybe<Scalars['String']>;
  supportRequestCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestCode_not_starts_with?: Maybe<Scalars['String']>;
  supportRequestCode_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusDescription?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_contains?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusDescription_not?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_not_contains?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_not_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusDescription_not_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusDescription_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusId_contains?: Maybe<Scalars['String']>;
  supportRequestStatusId_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusId_not?: Maybe<Scalars['String']>;
  supportRequestStatusId_not_contains?: Maybe<Scalars['String']>;
  supportRequestStatusId_not_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusId_not_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusId_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
  supportRequestStatusName_contains?: Maybe<Scalars['String']>;
  supportRequestStatusName_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusName_not?: Maybe<Scalars['String']>;
  supportRequestStatusName_not_contains?: Maybe<Scalars['String']>;
  supportRequestStatusName_not_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusName_not_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportRequestInfoDtoSort = {
  assigneeFirstName?: Maybe<SortOperationKind>;
  assigneeFullName?: Maybe<SortOperationKind>;
  assigneeId?: Maybe<SortOperationKind>;
  assigneeLastName?: Maybe<SortOperationKind>;
  closeDatetime?: Maybe<SortOperationKind>;
  completeDatetime?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  requesterEmail?: Maybe<SortOperationKind>;
  requesterFirstName?: Maybe<SortOperationKind>;
  requesterFullName?: Maybe<SortOperationKind>;
  requesterLastName?: Maybe<SortOperationKind>;
  requesterPhoneNumber?: Maybe<SortOperationKind>;
  requestTypeDescription?: Maybe<SortOperationKind>;
  requestTypeId?: Maybe<SortOperationKind>;
  requestTypeName?: Maybe<SortOperationKind>;
  sourceTypeDescription?: Maybe<SortOperationKind>;
  supportRequestCode?: Maybe<SortOperationKind>;
  supportRequestStatusDescription?: Maybe<SortOperationKind>;
  supportRequestStatusId?: Maybe<SortOperationKind>;
  supportRequestStatusName?: Maybe<SortOperationKind>;
};

export type SupportRequestServiceBonusDto = {
  __typename?: 'SupportRequestServiceBonusDto';
  price: Scalars['Float'];
  supportRequestServiceBonusDescription?: Maybe<Scalars['String']>;
  supportRequestServiceBonusId?: Maybe<Scalars['String']>;
  supportRequestServiceBonusName?: Maybe<Scalars['String']>;
  unitOfMeasureCode?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  unitOfMeasureName?: Maybe<Scalars['String']>;
};

export type SupportRequestSourceTypeDto = {
  __typename?: 'SupportRequestSourceTypeDto';
  sourceTypeDescription?: Maybe<Scalars['String']>;
  sourceTypeName?: Maybe<Scalars['String']>;
  supportRequestSourceTypeId?: Maybe<Scalars['String']>;
};

export type SupportRequestSourceTypeDtoFilter = {
  AND?: Maybe<Array<SupportRequestSourceTypeDtoFilter>>;
  OR?: Maybe<Array<SupportRequestSourceTypeDtoFilter>>;
  sourceTypeName?: Maybe<Scalars['String']>;
  sourceTypeName_contains?: Maybe<Scalars['String']>;
  sourceTypeName_ends_with?: Maybe<Scalars['String']>;
  sourceTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceTypeName_not?: Maybe<Scalars['String']>;
  sourceTypeName_not_contains?: Maybe<Scalars['String']>;
  sourceTypeName_not_ends_with?: Maybe<Scalars['String']>;
  sourceTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  sourceTypeName_not_starts_with?: Maybe<Scalars['String']>;
  sourceTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportRequestSourceTypeDtoSort = {
  sourceTypeName?: Maybe<SortOperationKind>;
};

export type SupportRequestStatusDto = {
  __typename?: 'SupportRequestStatusDto';
  isActive: Scalars['Boolean'];
  supportRequestStatusDescription?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
};

export type SupportRequestStatusDtoFilter = {
  AND?: Maybe<Array<SupportRequestStatusDtoFilter>>;
  OR?: Maybe<Array<SupportRequestStatusDtoFilter>>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
  supportRequestStatusName_contains?: Maybe<Scalars['String']>;
  supportRequestStatusName_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusName_not?: Maybe<Scalars['String']>;
  supportRequestStatusName_not_contains?: Maybe<Scalars['String']>;
  supportRequestStatusName_not_ends_with?: Maybe<Scalars['String']>;
  supportRequestStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportRequestStatusName_not_starts_with?: Maybe<Scalars['String']>;
  supportRequestStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportRequestStatusInfoDto = {
  __typename?: 'SupportRequestStatusInfoDto';
  isActive: Scalars['Boolean'];
  supportRequestStatusDescription?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
};

export type SupportRequestsFoContactTradingResponse = {
  __typename?: 'SupportRequestsFOContactTradingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestContactTradingDtos?: Maybe<Array<Maybe<SupportRequestContactTradingDto>>>;
};

export type SupportResultsDto = {
  __typename?: 'SupportResultsDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportResultsDto>;
  externalTicketId?: Maybe<Scalars['String']>;
  notes?: Maybe<Scalars['String']>;
  responseDatetime?: Maybe<Scalars['Long']>;
  responseFirstName?: Maybe<Scalars['String']>;
  responseLastName?: Maybe<Scalars['String']>;
  responseUserId?: Maybe<Scalars['String']>;
  supportRequestClosingReasonId?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  supportRequestStatusDescription?: Maybe<Scalars['String']>;
  supportRequestStatusId?: Maybe<Scalars['String']>;
  supportRequestStatusName?: Maybe<Scalars['String']>;
};

export type SupportResultsDtoSort = {
  notes?: Maybe<SortOperationKind>;
  responseDatetime?: Maybe<SortOperationKind>;
  responseFirstName?: Maybe<SortOperationKind>;
  responseLastName?: Maybe<SortOperationKind>;
  supportRequestStatusDescription?: Maybe<SortOperationKind>;
  supportRequestStatusId?: Maybe<SortOperationKind>;
  supportRequestStatusName?: Maybe<SortOperationKind>;
};

export type SupportServiceConfigurationDto = {
  __typename?: 'SupportServiceConfigurationDto';
  businessCategoryTypeName?: Maybe<Scalars['String']>;
  isTopenerService: Scalars['Boolean'];
  price: Scalars['Decimal'];
  processSourceName?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  selectableStepsDescription?: Maybe<Scalars['String']>;
  serviceSelectableStepConfigDtos?: Maybe<Array<Maybe<ServiceSelectableStepConfigDto>>>;
  supportServiceDescription?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type SupportServiceConfigurationHistoryDto = {
  __typename?: 'SupportServiceConfigurationHistoryDto';
  processSourceName?: Maybe<Scalars['String']>;
  serviceConfigHistoryDtos?: Maybe<Array<Maybe<ServiceConfigHistoryDto>>>;
  supportServiceDescription?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
};

export type SupportServiceDto = {
  __typename?: 'SupportServiceDto';
  effectiveDatetime: Scalars['Long'];
  ineffectiveDatetime: Scalars['Long'];
  isActive: Scalars['Boolean'];
  supportServiceDescription?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServicePrice: Scalars['Float'];
};

export type SupportServiceDtoFilter = {
  AND?: Maybe<Array<SupportServiceDtoFilter>>;
  OR?: Maybe<Array<SupportServiceDtoFilter>>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServiceName_contains?: Maybe<Scalars['String']>;
  supportServiceName_ends_with?: Maybe<Scalars['String']>;
  supportServiceName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceName_not?: Maybe<Scalars['String']>;
  supportServiceName_not_contains?: Maybe<Scalars['String']>;
  supportServiceName_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceName_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportServiceDtoSort = {
  supportServiceName?: Maybe<SortOperationKind>;
};

export type SupportServiceInfoDto = {
  __typename?: 'SupportServiceInfoDto';
  effectiveDatetime: Scalars['Long'];
  ineffectiveDatetime: Scalars['Long'];
  isActive: Scalars['Boolean'];
  supportServiceDescription?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServicePrice: Scalars['Float'];
};

export type SupportServiceTicketCancelReasonDto = {
  __typename?: 'SupportServiceTicketCancelReasonDto';
  supportServiceTicketCancelReasonDescription?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonId?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketCancelReasonDtoFilter = {
  AND?: Maybe<Array<SupportServiceTicketCancelReasonDtoFilter>>;
  OR?: Maybe<Array<SupportServiceTicketCancelReasonDtoFilter>>;
  supportServiceTicketCancelReasonName?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_contains?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketCancelReasonName_not?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_not_contains?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketCancelReasonName_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceTicketCancelReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketCancelReasonDtoSort = {
  supportServiceTicketCancelReasonName?: Maybe<SortOperationKind>;
};

export type SupportServiceTicketDto = {
  __typename?: 'SupportServiceTicketDto';
  appointmentDatetime?: Maybe<Scalars['Float']>;
  consultantStaffId?: Maybe<Scalars['String']>;
  consultantStaffName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  currentExecutor?: Maybe<Support_Service_UserCommonInfoDto>;
  currentExecutorId?: Maybe<Scalars['String']>;
  currentExecutorName?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  propertyPostCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  requester?: Maybe<Support_Service_UserCommonInfoDto>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketNote?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
  ticketStatusName?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketForFrontOfficeDto = {
  __typename?: 'SupportServiceTicketForFrontOfficeDto';
  appointmentDatetime?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportServiceTicketForFrontOfficeDto>;
  consultantStaffId?: Maybe<Scalars['String']>;
  consultantStaffName?: Maybe<Scalars['String']>;
  currentAllStates?: Maybe<Array<Maybe<Scalars['String']>>>;
  currentExecutor?: Maybe<Support_Service_UserCommonInfoDto>;
  currentExecutorId?: Maybe<Scalars['String']>;
  currentExecutorName?: Maybe<Scalars['String']>;
  nextStates?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostId?: Maybe<Scalars['String']>;
  requester?: Maybe<Support_Service_UserCommonInfoDto>;
  requesterFullName?: Maybe<Scalars['String']>;
  requesterId?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  supportServiceTicketId?: Maybe<Scalars['String']>;
  supportServiceTicketProcessings?: Maybe<Array<Maybe<SupportServiceTicketProcessingForFrontOfficeDto>>>;
  supportServiceTicketResult?: Maybe<SupportServiceTicketResultForFrontOfficeDto>;
  ticketCode?: Maybe<Scalars['String']>;
  ticketNote?: Maybe<Scalars['String']>;
  ticketPaymentStatusId?: Maybe<Scalars['String']>;
  ticketStatusId?: Maybe<Scalars['String']>;
  ticketStatusName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Float']>;
};

export type SupportServiceTicketProcessingDto = {
  __typename?: 'SupportServiceTicketProcessingDto';
  executorId?: Maybe<Scalars['String']>;
  executorName?: Maybe<Scalars['String']>;
  logEvent?: Maybe<Scalars['String']>;
  reasonNote?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type SupportServiceTicketProcessingForFrontOfficeDto = {
  __typename?: 'SupportServiceTicketProcessingForFrontOfficeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportServiceTicketProcessingForFrontOfficeDto>;
  reasonId?: Maybe<Scalars['String']>;
  reasonNote?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingId?: Maybe<Scalars['String']>;
  ticketProcessingStatusId?: Maybe<Scalars['String']>;
  ticketProcessingStatusName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Float']>;
};

export type SupportServiceTicketProcessingStatusDto = {
  __typename?: 'SupportServiceTicketProcessingStatusDto';
  supportServiceTicketProcessingStatusDescription?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusId?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketProcessingStatusDtoFilter = {
  AND?: Maybe<Array<SupportServiceTicketProcessingStatusDtoFilter>>;
  OR?: Maybe<Array<SupportServiceTicketProcessingStatusDtoFilter>>;
  supportServiceTicketProcessingStatusName?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_contains?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketProcessingStatusName_not?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_not_contains?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketProcessingStatusName_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceTicketProcessingStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketProcessingStatusDtoSort = {
  supportServiceTicketProcessingStatusName?: Maybe<SortOperationKind>;
};

export type SupportServiceTicketRejectReasonDto = {
  __typename?: 'SupportServiceTicketRejectReasonDto';
  supportServiceTicketRejectReasonDescription?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonId?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketRejectReasonDtoFilter = {
  AND?: Maybe<Array<SupportServiceTicketRejectReasonDtoFilter>>;
  OR?: Maybe<Array<SupportServiceTicketRejectReasonDtoFilter>>;
  supportServiceTicketRejectReasonName?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_contains?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketRejectReasonName_not?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_not_contains?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketRejectReasonName_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceTicketRejectReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketRejectReasonDtoSort = {
  supportServiceTicketRejectReasonName?: Maybe<SortOperationKind>;
};

export type SupportServiceTicketResultDto = {
  __typename?: 'SupportServiceTicketResultDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportServiceTicketResultDto>;
  note?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  rejectReasonNote?: Maybe<Scalars['String']>;
  resultDescriptions?: Maybe<Scalars['String']>;
  resultDocuments?: Maybe<Scalars['String']>;
  resultImages?: Maybe<Scalars['String']>;
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
  ticketResultStatusId?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketResultForFrontOfficeDto = {
  __typename?: 'SupportServiceTicketResultForFrontOfficeDto';
  autoAcceptTicketInMinutes?: Maybe<Scalars['Float']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportServiceTicketResultForFrontOfficeDto>;
  note?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
  rejectReasonNote?: Maybe<Scalars['String']>;
  resultDescriptions?: Maybe<Scalars['String']>;
  resultDocuments?: Maybe<Scalars['String']>;
  resultImages?: Maybe<Scalars['String']>;
  supportServiceTicketResultId?: Maybe<Scalars['String']>;
  ticketResultStatusId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Float']>;
};

export type SupportServiceTicketResultUpdateReasonDto = {
  __typename?: 'SupportServiceTicketResultUpdateReasonDto';
  supportServiceTicketResultUpdateReasonDescription?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonId?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketResultUpdateReasonDtoFilter = {
  AND?: Maybe<Array<SupportServiceTicketResultUpdateReasonDtoFilter>>;
  OR?: Maybe<Array<SupportServiceTicketResultUpdateReasonDtoFilter>>;
  supportServiceTicketResultUpdateReasonName?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_contains?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketResultUpdateReasonName_not?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_not_contains?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketResultUpdateReasonName_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceTicketResultUpdateReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketResultUpdateReasonDtoSort = {
  supportServiceTicketResultUpdateReasonName?: Maybe<SortOperationKind>;
};

export type SupportServiceTicketStatusDto = {
  __typename?: 'SupportServiceTicketStatusDto';
  supportServiceTicketStatusDescription?: Maybe<Scalars['String']>;
  supportServiceTicketStatusId?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketStatusDtoFilter = {
  AND?: Maybe<Array<SupportServiceTicketStatusDtoFilter>>;
  OR?: Maybe<Array<SupportServiceTicketStatusDtoFilter>>;
  supportServiceTicketStatusName?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_contains?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketStatusName_not?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_not_contains?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_not_ends_with?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceTicketStatusName_not_starts_with?: Maybe<Scalars['String']>;
  supportServiceTicketStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type SupportServiceTicketStatusDtoSort = {
  supportServiceTicketStatusName?: Maybe<SortOperationKind>;
};

export type SupportServiceTypeByIdDto = {
  __typename?: 'SupportServiceTypeByIdDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportServiceTypeByIdDto>;
  price?: Maybe<Scalars['Float']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
};

export type SupportServiceTypeDto = {
  __typename?: 'SupportServiceTypeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<SupportServiceTypeDto>;
  price?: Maybe<Scalars['Float']>;
  requestTypeDescription?: Maybe<Scalars['String']>;
  requestTypeId?: Maybe<Scalars['String']>;
  requestTypeName?: Maybe<Scalars['String']>;
  selectableStepIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  sortOrder?: Maybe<Scalars['Int']>;
};

export type SyncStringeeExternalTicketsResponse = {
  __typename?: 'SyncStringeeExternalTicketsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SyncTplAgentsToStringeeContactsResponse = {
  __typename?: 'SyncTPLAgentsToStringeeContactsResponse';
  contacts?: Maybe<Array<Maybe<StringeeXContactDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SyncTplCustomersToStringeeContactsResponse = {
  __typename?: 'SyncTPLCustomersToStringeeContactsResponse';
  contacts?: Maybe<Array<Maybe<StringeeXContactDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SyncTplGuestsToStringeeContactsResponse = {
  __typename?: 'SyncTPLGuestsToStringeeContactsResponse';
  contacts?: Maybe<Array<Maybe<StringeeXContactDto>>>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SyncTplStaffGroupsToStringeeGroupsResponse = {
  __typename?: 'SyncTPLStaffGroupsToStringeeGroupsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SyncTplStaffsToStringeeAccountsResponse = {
  __typename?: 'SyncTPLStaffsToStringeeAccountsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type SyncTplSupportRequestsToStringeeTicketsForNewResponse = {
  __typename?: 'SyncTPLSupportRequestsToStringeeTicketsForNewResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  tickets?: Maybe<Array<Maybe<StringeeXTicketDto>>>;
};

export type SyncTplSupportRequestsToStringeeTicketsForUpdateResponse = {
  __typename?: 'SyncTPLSupportRequestsToStringeeTicketsForUpdateResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  tickets?: Maybe<Array<Maybe<StringeeXTicketDto>>>;
};

export type SyncToTopenIdResult = {
  __typename?: 'SyncToTopenIdResult';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type Timestamp = {
  __typename?: 'Timestamp';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Timestamp>;
  compareTo: Scalars['Int'];
  nanos: Scalars['Int'];
  seconds: Scalars['Long'];
  toDateTime: Scalars['DateTime'];
  toDateTimeOffset: Scalars['DateTime'];
  toDiagnosticString?: Maybe<Scalars['String']>;
};

export type TopVibrantAreaDto = {
  __typename?: 'TopVibrantAreaDto';
  calculateSize: Scalars['Int'];
  cityId: Scalars['Int'];
  clone?: Maybe<TopVibrantAreaDto>;
  totalCount: Scalars['Int'];
};

export type TopenMapUserDto = {
  __typename?: 'TopenMapUserDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<TopenMapUserDto>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['Int']>;
  isActive?: Maybe<Scalars['Boolean']>;
  isSuperuser?: Maybe<Scalars['Boolean']>;
};

export type TopenerBankAccountDto = {
  __typename?: 'TopenerBankAccountDto';
  bankAccountBranch?: Maybe<Scalars['String']>;
  bankAccountHolderName?: Maybe<Scalars['String']>;
  bankAccountNumber?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  isDefault: Scalars['Boolean'];
  recordVersion?: Maybe<Scalars['Int']>;
  topenerBankAccountId?: Maybe<Scalars['String']>;
  topenerId?: Maybe<Scalars['String']>;
};

export type TopenerDto = {
  __typename?: 'TopenerDto';
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  agentRating: Scalars['Float'];
  avatar?: Maybe<Scalars['String']>;
  detailPath?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  isAgent: Scalars['Boolean'];
  phoneNumber?: Maybe<Scalars['String']>;
  topenerId?: Maybe<Scalars['String']>;
};

export type TopenerInfoDto = {
  __typename?: 'TopenerInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<TopenerInfoDto>;
  contactAddress?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['Long']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  isCompletedProfile?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type TopenerOfMonthDto = {
  __typename?: 'TopenerOfMonthDto';
  agentId?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  groupNameDescription?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  propertyPostInfoDtos?: Maybe<Array<Maybe<SearchPropertyPostInfoDto>>>;
  rankingName?: Maybe<Scalars['String']>;
  rankingNameDescription?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  sellingTotal?: Maybe<Scalars['Int']>;
  soldTotal?: Maybe<Scalars['Int']>;
};

export type TopenerOfMonthDtoFilter = {
  AND?: Maybe<Array<TopenerOfMonthDtoFilter>>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  groupName?: Maybe<Scalars['String']>;
  groupName_contains?: Maybe<Scalars['String']>;
  groupName_ends_with?: Maybe<Scalars['String']>;
  groupName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  groupName_not?: Maybe<Scalars['String']>;
  groupName_not_contains?: Maybe<Scalars['String']>;
  groupName_not_ends_with?: Maybe<Scalars['String']>;
  groupName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  groupName_not_starts_with?: Maybe<Scalars['String']>;
  groupName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<TopenerOfMonthDtoFilter>>;
};

export type TopenerOfMonthDtoSort = {
  fullName?: Maybe<SortOperationKind>;
  groupName?: Maybe<SortOperationKind>;
  soldTotal?: Maybe<SortOperationKind>;
};

export type TopenerProfileDto = {
  __typename?: 'TopenerProfileDto';
  agentCode?: Maybe<Scalars['String']>;
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<TopenerProfileDto>;
  contactAddress?: Maybe<Scalars['String']>;
  initialAccountCode?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  isCompletedProfile?: Maybe<Scalars['Boolean']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  propertyAllocates?: Maybe<Scalars['Boolean']>;
  recordVersion?: Maybe<Scalars['Int']>;
  taxIdentificationNumber?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type TopenerReadC2CDemandResponse = {
  __typename?: 'TopenerReadC2CDemandResponse';
  c2CDemandDto?: Maybe<C2CDemandDto>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<TopenerReadC2CDemandResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type TotalAccountsPerSubscriptionPackageDto = {
  __typename?: 'TotalAccountsPerSubscriptionPackageDto';
  accTotal?: Maybe<Scalars['Int']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<TotalAccountsPerSubscriptionPackageDto>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
};

export type TotalB2CTransactionContractDto = {
  __typename?: 'TotalB2CTransactionContractDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<TotalB2CTransactionContractDto>;
  contractStatusDescription?: Maybe<Scalars['String']>;
  contractStatusId?: Maybe<Scalars['String']>;
  total?: Maybe<Scalars['Int']>;
};

export enum TotalComissionUnit {
  Bypercentage = 'BYPERCENTAGE',
  Byvnd = 'BYVND',
  Bymonth = 'BYMONTH'
}

export enum TotalCommissionUnit {
  Bypercentage = 'BYPERCENTAGE',
  Byvnd = 'BYVND',
  Bymonth = 'BYMONTH'
}

export type TotalCountPerStatusDto = {
  __typename?: 'TotalCountPerStatusDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<TotalCountPerStatusDto>;
  contactTradingStatusId?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Int']>;
};

export type TotalCountPerStatusFilter = {
  AND?: Maybe<Array<TotalCountPerStatusFilter>>;
  assigneeId?: Maybe<Scalars['String']>;
  assigneeId_contains?: Maybe<Scalars['String']>;
  assigneeId_ends_with?: Maybe<Scalars['String']>;
  assigneeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not?: Maybe<Scalars['String']>;
  assigneeId_not_contains?: Maybe<Scalars['String']>;
  assigneeId_not_ends_with?: Maybe<Scalars['String']>;
  assigneeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  assigneeId_not_starts_with?: Maybe<Scalars['String']>;
  assigneeId_starts_with?: Maybe<Scalars['String']>;
  contactType?: Maybe<ContactTradingType>;
  contactType_gt?: Maybe<ContactTradingType>;
  contactType_gte?: Maybe<ContactTradingType>;
  contactType_in?: Maybe<Array<ContactTradingType>>;
  contactType_lt?: Maybe<ContactTradingType>;
  contactType_lte?: Maybe<ContactTradingType>;
  contactType_not?: Maybe<ContactTradingType>;
  contactType_not_gt?: Maybe<ContactTradingType>;
  contactType_not_gte?: Maybe<ContactTradingType>;
  contactType_not_in?: Maybe<Array<ContactTradingType>>;
  contactType_not_lt?: Maybe<ContactTradingType>;
  contactType_not_lte?: Maybe<ContactTradingType>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserId_contains?: Maybe<Scalars['String']>;
  createdByUserId_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not?: Maybe<Scalars['String']>;
  createdByUserId_not_contains?: Maybe<Scalars['String']>;
  createdByUserId_not_ends_with?: Maybe<Scalars['String']>;
  createdByUserId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  createdByUserId_not_starts_with?: Maybe<Scalars['String']>;
  createdByUserId_starts_with?: Maybe<Scalars['String']>;
  customerServiceAssigneeId?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_contains?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_ends_with?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerServiceAssigneeId_not?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_not_contains?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_not_ends_with?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerServiceAssigneeId_not_starts_with?: Maybe<Scalars['String']>;
  customerServiceAssigneeId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<TotalCountPerStatusFilter>>;
};

export type TrackContactTradingB2CInput = {
  contactTradingB2CId?: Maybe<Scalars['String']>;
  viewType?: Maybe<Scalars['String']>;
};

export type TrackContactTradingB2CResponse = {
  __typename?: 'TrackContactTradingB2CResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export enum TransactionCancelReason {
  Bookingsaleseasonend = 'BOOKINGSALESEASONEND',
  Newsaleseason = 'NEWSALESEASON',
  Propertysold = 'PROPERTYSOLD',
  Incompletepayment = 'INCOMPLETEPAYMENT',
  None = 'NONE'
}

export type TransactionCancelReasonDto = {
  __typename?: 'TransactionCancelReasonDto';
  transactionCancelReasonCode: Scalars['Int'];
  transactionCancelReasonDescription?: Maybe<Scalars['String']>;
  transactionCancelReasonId?: Maybe<Scalars['String']>;
  transactionCancelReasonName?: Maybe<Scalars['String']>;
};

export type TransactionCancelReasonDtoFilter = {
  AND?: Maybe<Array<TransactionCancelReasonDtoFilter>>;
  OR?: Maybe<Array<TransactionCancelReasonDtoFilter>>;
  transactionCancelReasonCode?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_gt?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_gte?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_in?: Maybe<Array<Scalars['Int']>>;
  transactionCancelReasonCode_lt?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_lte?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_not?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_not_gt?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_not_gte?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_not_in?: Maybe<Array<Scalars['Int']>>;
  transactionCancelReasonCode_not_lt?: Maybe<Scalars['Int']>;
  transactionCancelReasonCode_not_lte?: Maybe<Scalars['Int']>;
  transactionCancelReasonDescription?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_contains?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_ends_with?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionCancelReasonDescription_not?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_not_contains?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_not_ends_with?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionCancelReasonDescription_not_starts_with?: Maybe<Scalars['String']>;
  transactionCancelReasonDescription_starts_with?: Maybe<Scalars['String']>;
  transactionCancelReasonName?: Maybe<Scalars['String']>;
  transactionCancelReasonName_contains?: Maybe<Scalars['String']>;
  transactionCancelReasonName_ends_with?: Maybe<Scalars['String']>;
  transactionCancelReasonName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionCancelReasonName_not?: Maybe<Scalars['String']>;
  transactionCancelReasonName_not_contains?: Maybe<Scalars['String']>;
  transactionCancelReasonName_not_ends_with?: Maybe<Scalars['String']>;
  transactionCancelReasonName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionCancelReasonName_not_starts_with?: Maybe<Scalars['String']>;
  transactionCancelReasonName_starts_with?: Maybe<Scalars['String']>;
};

export type TransactionCancelReasonDtoSort = {
  transactionCancelReasonCode?: Maybe<SortOperationKind>;
  transactionCancelReasonDescription?: Maybe<SortOperationKind>;
  transactionCancelReasonName?: Maybe<SortOperationKind>;
};

export type TransactionDetailDto = {
  __typename?: 'TransactionDetailDto';
  ableConfirmDeposite?: Maybe<Scalars['Boolean']>;
  ableConfirmRefund?: Maybe<Scalars['Boolean']>;
  allowUpdateCustomer?: Maybe<Scalars['Boolean']>;
  beginDepositeDatetime?: Maybe<Scalars['Long']>;
  bookingCode?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  buyAgentInfo?: Maybe<AgentInfoDto>;
  buyCommission?: Maybe<Scalars['Float']>;
  cancelReason: TransactionCancelReason;
  changeToTransaction?: Maybe<RelatedTransactionDto>;
  confirmedBookingDatetime?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime?: Maybe<Scalars['Long']>;
  consultantInfo?: Maybe<ConsultantInfoDto>;
  contractDueDate?: Maybe<Scalars['Long']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerInfo?: Maybe<Transaction_CustomerInfoDto>;
  depositeCode?: Maybe<Scalars['String']>;
  depositedByAnotherUser?: Maybe<Scalars['Boolean']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  documentName?: Maybe<Scalars['String']>;
  documentUrl?: Maybe<Scalars['String']>;
  endDepositeDatetime?: Maybe<Scalars['Long']>;
  endDepositeDatetimeByPropertyPostId?: Maybe<Scalars['Long']>;
  endDepositeTimeInSecond?: Maybe<Scalars['Int']>;
  fastSendToDatetime?: Maybe<Scalars['Long']>;
  fastSendToStatus?: Maybe<Scalars['String']>;
  fastTransactionId?: Maybe<Scalars['String']>;
  fastTransactionNumber?: Maybe<Scalars['String']>;
  fastUpdateFromDatetime?: Maybe<Scalars['Long']>;
  hasCustomerInfoChangeHistory?: Maybe<Scalars['Boolean']>;
  isBuyer?: Maybe<Scalars['Boolean']>;
  isCancelled?: Maybe<Scalars['Boolean']>;
  newPropertyPostId?: Maybe<Scalars['String']>;
  numberOfTimesRemainingCustomerCanUpdate?: Maybe<Scalars['Int']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paymentCode?: Maybe<Scalars['String']>;
  paymentDatetime?: Maybe<Scalars['Long']>;
  paymentMethod?: Maybe<Scalars['String']>;
  paymentTransactionInfo?: Maybe<PaymentTransactionInfoDto>;
  paymentUnit: PaymentUnit;
  policyDtos?: Maybe<Array<Maybe<PolicyInfoDto>>>;
  priorBookingTransactionId?: Maybe<Scalars['String']>;
  priorTransaction?: Maybe<RelatedTransactionDto>;
  projectName?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<PropertyPostInfoDto>;
  recordVersion?: Maybe<Scalars['Int']>;
  refundReady?: Maybe<Scalars['Boolean']>;
  refundTransactionDatetime?: Maybe<Scalars['Long']>;
  saleAgentFullName?: Maybe<Scalars['String']>;
  saleAgentInfo?: Maybe<AgentInfoDto>;
  saleCommission?: Maybe<Scalars['Float']>;
  supportRequestCode?: Maybe<Scalars['String']>;
  supportRequestId?: Maybe<Scalars['String']>;
  transactionAmount?: Maybe<Scalars['Float']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionIndex?: Maybe<Scalars['Long']>;
  transactionStatus?: Maybe<Scalars['String']>;
  transactionStatusName?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type TransactionDetailDtoFilter = {
  AND?: Maybe<Array<TransactionDetailDtoFilter>>;
  bookingCode?: Maybe<Scalars['String']>;
  bookingCode_contains?: Maybe<Scalars['String']>;
  bookingCode_ends_with?: Maybe<Scalars['String']>;
  bookingCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bookingCode_not?: Maybe<Scalars['String']>;
  bookingCode_not_contains?: Maybe<Scalars['String']>;
  bookingCode_not_ends_with?: Maybe<Scalars['String']>;
  bookingCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bookingCode_not_starts_with?: Maybe<Scalars['String']>;
  bookingCode_starts_with?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  bookingTransactionId_contains?: Maybe<Scalars['String']>;
  bookingTransactionId_ends_with?: Maybe<Scalars['String']>;
  bookingTransactionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bookingTransactionId_not?: Maybe<Scalars['String']>;
  bookingTransactionId_not_contains?: Maybe<Scalars['String']>;
  bookingTransactionId_not_ends_with?: Maybe<Scalars['String']>;
  bookingTransactionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  bookingTransactionId_not_starts_with?: Maybe<Scalars['String']>;
  bookingTransactionId_starts_with?: Maybe<Scalars['String']>;
  confirmedBookingDatetime?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_gt?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_gte?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  confirmedBookingDatetime_lt?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_lte?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_not?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_not_gt?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_not_gte?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  confirmedBookingDatetime_not_lt?: Maybe<Scalars['Long']>;
  confirmedBookingDatetime_not_lte?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_gt?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_gte?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  confirmedDepositeDatetime_lt?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_lte?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_not?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_not_gt?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_not_gte?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  confirmedDepositeDatetime_not_lt?: Maybe<Scalars['Long']>;
  confirmedDepositeDatetime_not_lte?: Maybe<Scalars['Long']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerFullName_contains?: Maybe<Scalars['String']>;
  customerFullName_ends_with?: Maybe<Scalars['String']>;
  customerFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFullName_not?: Maybe<Scalars['String']>;
  customerFullName_not_contains?: Maybe<Scalars['String']>;
  customerFullName_not_ends_with?: Maybe<Scalars['String']>;
  customerFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  customerFullName_not_starts_with?: Maybe<Scalars['String']>;
  customerFullName_starts_with?: Maybe<Scalars['String']>;
  depositeCode?: Maybe<Scalars['String']>;
  depositeCode_contains?: Maybe<Scalars['String']>;
  depositeCode_ends_with?: Maybe<Scalars['String']>;
  depositeCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeCode_not?: Maybe<Scalars['String']>;
  depositeCode_not_contains?: Maybe<Scalars['String']>;
  depositeCode_not_ends_with?: Maybe<Scalars['String']>;
  depositeCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeCode_not_starts_with?: Maybe<Scalars['String']>;
  depositeCode_starts_with?: Maybe<Scalars['String']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  depositeTransactionId_contains?: Maybe<Scalars['String']>;
  depositeTransactionId_ends_with?: Maybe<Scalars['String']>;
  depositeTransactionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeTransactionId_not?: Maybe<Scalars['String']>;
  depositeTransactionId_not_contains?: Maybe<Scalars['String']>;
  depositeTransactionId_not_ends_with?: Maybe<Scalars['String']>;
  depositeTransactionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  depositeTransactionId_not_starts_with?: Maybe<Scalars['String']>;
  depositeTransactionId_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<TransactionDetailDtoFilter>>;
  paymentDatetime?: Maybe<Scalars['Long']>;
  paymentDatetime_gt?: Maybe<Scalars['Long']>;
  paymentDatetime_gte?: Maybe<Scalars['Long']>;
  paymentDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  paymentDatetime_lt?: Maybe<Scalars['Long']>;
  paymentDatetime_lte?: Maybe<Scalars['Long']>;
  paymentDatetime_not?: Maybe<Scalars['Long']>;
  paymentDatetime_not_gt?: Maybe<Scalars['Long']>;
  paymentDatetime_not_gte?: Maybe<Scalars['Long']>;
  paymentDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  paymentDatetime_not_lt?: Maybe<Scalars['Long']>;
  paymentDatetime_not_lte?: Maybe<Scalars['Long']>;
  saleAgentFullName?: Maybe<Scalars['String']>;
  saleAgentFullName_contains?: Maybe<Scalars['String']>;
  saleAgentFullName_ends_with?: Maybe<Scalars['String']>;
  saleAgentFullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleAgentFullName_not?: Maybe<Scalars['String']>;
  saleAgentFullName_not_contains?: Maybe<Scalars['String']>;
  saleAgentFullName_not_ends_with?: Maybe<Scalars['String']>;
  saleAgentFullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  saleAgentFullName_not_starts_with?: Maybe<Scalars['String']>;
  saleAgentFullName_starts_with?: Maybe<Scalars['String']>;
  transactionStatus?: Maybe<Scalars['String']>;
  transactionStatusName?: Maybe<Scalars['String']>;
  transactionStatusName_contains?: Maybe<Scalars['String']>;
  transactionStatusName_ends_with?: Maybe<Scalars['String']>;
  transactionStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatusName_not?: Maybe<Scalars['String']>;
  transactionStatusName_not_contains?: Maybe<Scalars['String']>;
  transactionStatusName_not_ends_with?: Maybe<Scalars['String']>;
  transactionStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatusName_not_starts_with?: Maybe<Scalars['String']>;
  transactionStatusName_starts_with?: Maybe<Scalars['String']>;
  transactionStatus_contains?: Maybe<Scalars['String']>;
  transactionStatus_ends_with?: Maybe<Scalars['String']>;
  transactionStatus_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatus_not?: Maybe<Scalars['String']>;
  transactionStatus_not_contains?: Maybe<Scalars['String']>;
  transactionStatus_not_ends_with?: Maybe<Scalars['String']>;
  transactionStatus_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionStatus_not_starts_with?: Maybe<Scalars['String']>;
  transactionStatus_starts_with?: Maybe<Scalars['String']>;
};

export type TransactionDetailDtoSort = {
  bookingCode?: Maybe<SortOperationKind>;
  bookingTransactionId?: Maybe<SortOperationKind>;
  confirmedBookingDatetime?: Maybe<SortOperationKind>;
  confirmedDepositeDatetime?: Maybe<SortOperationKind>;
  customerFullName?: Maybe<SortOperationKind>;
  depositeCode?: Maybe<SortOperationKind>;
  depositeTransactionId?: Maybe<SortOperationKind>;
  paymentDatetime?: Maybe<SortOperationKind>;
  saleAgentFullName?: Maybe<SortOperationKind>;
  transactionStatus?: Maybe<SortOperationKind>;
  transactionStatusName?: Maybe<SortOperationKind>;
};

export type TransactionPaymentMethodConfigDto = {
  __typename?: 'TransactionPaymentMethodConfigDto';
  createdByUserId?: Maybe<Scalars['String']>;
  createdByUserName?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  notes?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  paymentMethodOrder: Scalars['Int'];
  transactionPaymentUnitDtos?: Maybe<Array<Maybe<TransactionPaymentUnitConfigDto>>>;
  transactionType: TransactionType;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedByUserName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type TransactionPaymentMethodConfigDtoFilter = {
  AND?: Maybe<Array<TransactionPaymentMethodConfigDtoFilter>>;
  isActive?: Maybe<Scalars['Boolean']>;
  isActive_not?: Maybe<Scalars['Boolean']>;
  OR?: Maybe<Array<TransactionPaymentMethodConfigDtoFilter>>;
  paymentMethod?: Maybe<PaymentMethod>;
  paymentMethod_gt?: Maybe<PaymentMethod>;
  paymentMethod_gte?: Maybe<PaymentMethod>;
  paymentMethod_in?: Maybe<Array<PaymentMethod>>;
  paymentMethod_lt?: Maybe<PaymentMethod>;
  paymentMethod_lte?: Maybe<PaymentMethod>;
  paymentMethod_not?: Maybe<PaymentMethod>;
  paymentMethod_not_gt?: Maybe<PaymentMethod>;
  paymentMethod_not_gte?: Maybe<PaymentMethod>;
  paymentMethod_not_in?: Maybe<Array<PaymentMethod>>;
  paymentMethod_not_lt?: Maybe<PaymentMethod>;
  paymentMethod_not_lte?: Maybe<PaymentMethod>;
  transactionType?: Maybe<TransactionType>;
  transactionType_gt?: Maybe<TransactionType>;
  transactionType_gte?: Maybe<TransactionType>;
  transactionType_in?: Maybe<Array<TransactionType>>;
  transactionType_lt?: Maybe<TransactionType>;
  transactionType_lte?: Maybe<TransactionType>;
  transactionType_not?: Maybe<TransactionType>;
  transactionType_not_gt?: Maybe<TransactionType>;
  transactionType_not_gte?: Maybe<TransactionType>;
  transactionType_not_in?: Maybe<Array<TransactionType>>;
  transactionType_not_lt?: Maybe<TransactionType>;
  transactionType_not_lte?: Maybe<TransactionType>;
};

export type TransactionPaymentMethodConfigDtoSort = {
  createdByUserId?: Maybe<SortOperationKind>;
  paymentMethod?: Maybe<SortOperationKind>;
  paymentMethodOrder?: Maybe<SortOperationKind>;
  transactionType?: Maybe<SortOperationKind>;
  updatedByUserId?: Maybe<SortOperationKind>;
};

export enum TransactionPaymentStatus {
  Awaitingpayment = 'AWAITINGPAYMENT',
  Partialpayment = 'PARTIALPAYMENT',
  Paid = 'PAID',
  Refundrequest = 'REFUNDREQUEST',
  Refunded = 'REFUNDED',
  Cancelled = 'CANCELLED'
}

export type TransactionPaymentStatusDto = {
  __typename?: 'TransactionPaymentStatusDto';
  transactionPaymentStatusCode: Scalars['Int'];
  transactionPaymentStatusDescription?: Maybe<Scalars['String']>;
  transactionPaymentStatusId?: Maybe<Scalars['String']>;
  transactionPaymentStatusName?: Maybe<Scalars['String']>;
};

export type TransactionPaymentStatusDtoFilter = {
  AND?: Maybe<Array<TransactionPaymentStatusDtoFilter>>;
  OR?: Maybe<Array<TransactionPaymentStatusDtoFilter>>;
  transactionPaymentStatusName?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_contains?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_ends_with?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionPaymentStatusName_not?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_not_contains?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_not_ends_with?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  transactionPaymentStatusName_not_starts_with?: Maybe<Scalars['String']>;
  transactionPaymentStatusName_starts_with?: Maybe<Scalars['String']>;
};

export type TransactionPaymentStatusDtoSort = {
  transactionPaymentStatusName?: Maybe<SortOperationKind>;
};

export type TransactionPaymentUnitConfigDto = {
  __typename?: 'TransactionPaymentUnitConfigDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<TransactionPaymentUnitConfigDto>;
  isActive: Scalars['Boolean'];
  paymentMethod: PaymentMethod;
  paymentUnitCode: Scalars['Int'];
  transactionPaymentUnitId?: Maybe<Scalars['String']>;
  transactionType: TransactionType;
};

export enum TransactionServiceType {
  C2Ctype = 'C2CTYPE',
  B2Ctype = 'B2CTYPE',
  Subtype = 'SUBTYPE',
  Refundtype = 'REFUNDTYPE',
  Supportservicetype = 'SUPPORTSERVICETYPE',
  Subscriptiontype = 'SUBSCRIPTIONTYPE'
}

export enum TransactionType {
  Booking = 'BOOKING',
  Deposit = 'DEPOSIT',
  Subscription = 'SUBSCRIPTION',
  Refund = 'REFUND',
  Supportservice = 'SUPPORTSERVICE'
}

export type TransactionsByBuyerIdDto = {
  __typename?: 'TransactionsByBuyerIdDto';
  beginDepositeDatetime?: Maybe<Scalars['Long']>;
  bookingCode?: Maybe<Scalars['String']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  buyerId?: Maybe<Scalars['String']>;
  depositeCode?: Maybe<Scalars['String']>;
  depositeTransactionId?: Maybe<Scalars['String']>;
  endDepositeDatetime?: Maybe<Scalars['Long']>;
  endDepositeTimeInSecond?: Maybe<Scalars['Int']>;
  expectedPrice?: Maybe<Scalars['String']>;
  paymentDatetime?: Maybe<Scalars['Long']>;
  price?: Maybe<Scalars['Float']>;
  projectName?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostInfo?: Maybe<Scalars['String']>;
  rowNumber?: Maybe<Scalars['Int']>;
  saleAgentInfo?: Maybe<AgentInfoDto>;
  saleSeasonOpenDatetime?: Maybe<Scalars['Long']>;
  transactionAmount?: Maybe<Scalars['Float']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionIndex?: Maybe<Scalars['Long']>;
  transactionStatusDescription?: Maybe<Scalars['String']>;
  transactionStatusName?: Maybe<Scalars['String']>;
  transactionType?: Maybe<Scalars['String']>;
};

/** A connection to a list of items. */
export type TransactionsByBuyerIdDtoConnection = {
  __typename?: 'TransactionsByBuyerIdDtoConnection';
  /** A list of edges. */
  edges?: Maybe<Array<TransactionsByBuyerIdDtoEdge>>;
  /** A flattened list of the nodes. */
  nodes?: Maybe<Array<Maybe<TransactionsByBuyerIdDto>>>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  totalCount: Scalars['Int'];
};

/** An edge in a connection. */
export type TransactionsByBuyerIdDtoEdge = {
  __typename?: 'TransactionsByBuyerIdDtoEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node?: Maybe<TransactionsByBuyerIdDto>;
};

export type TransactionsByBuyerIdDtoFilter = {
  AND?: Maybe<Array<TransactionsByBuyerIdDtoFilter>>;
  OR?: Maybe<Array<TransactionsByBuyerIdDtoFilter>>;
  propertyPostInfo?: Maybe<Scalars['String']>;
  propertyPostInfo_contains?: Maybe<Scalars['String']>;
  propertyPostInfo_ends_with?: Maybe<Scalars['String']>;
  propertyPostInfo_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostInfo_not?: Maybe<Scalars['String']>;
  propertyPostInfo_not_contains?: Maybe<Scalars['String']>;
  propertyPostInfo_not_ends_with?: Maybe<Scalars['String']>;
  propertyPostInfo_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  propertyPostInfo_not_starts_with?: Maybe<Scalars['String']>;
  propertyPostInfo_starts_with?: Maybe<Scalars['String']>;
  transactionAmount?: Maybe<Scalars['Float']>;
  transactionAmount_gt?: Maybe<Scalars['Float']>;
  transactionAmount_gte?: Maybe<Scalars['Float']>;
  transactionAmount_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  transactionAmount_lt?: Maybe<Scalars['Float']>;
  transactionAmount_lte?: Maybe<Scalars['Float']>;
  transactionAmount_not?: Maybe<Scalars['Float']>;
  transactionAmount_not_gt?: Maybe<Scalars['Float']>;
  transactionAmount_not_gte?: Maybe<Scalars['Float']>;
  transactionAmount_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  transactionAmount_not_lt?: Maybe<Scalars['Float']>;
  transactionAmount_not_lte?: Maybe<Scalars['Float']>;
};

export type TransactionsByBuyerIdDtoSort = {
  bookingCode?: Maybe<SortOperationKind>;
  bookingTransactionId?: Maybe<SortOperationKind>;
  depositeCode?: Maybe<SortOperationKind>;
  depositeTransactionId?: Maybe<SortOperationKind>;
  paymentDatetime?: Maybe<SortOperationKind>;
  transactionDatetime?: Maybe<SortOperationKind>;
  transactionStatusName?: Maybe<SortOperationKind>;
};

export type UnfollowPropertyPostInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UnitOfMeasureDto = {
  __typename?: 'UnitOfMeasureDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  isRound: Scalars['Boolean'];
  multiplyWithBaseUnit?: Maybe<Scalars['Int']>;
  numberOfDecimal?: Maybe<Scalars['Int']>;
  unitOfMeasureCode?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  unitOfMeasureName?: Maybe<Scalars['String']>;
};

export type UnitOfMeasureDtoFilter = {
  AND?: Maybe<Array<UnitOfMeasureDtoFilter>>;
  OR?: Maybe<Array<UnitOfMeasureDtoFilter>>;
  unitOfMeasureName?: Maybe<Scalars['String']>;
  unitOfMeasureName_contains?: Maybe<Scalars['String']>;
  unitOfMeasureName_ends_with?: Maybe<Scalars['String']>;
  unitOfMeasureName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitOfMeasureName_not?: Maybe<Scalars['String']>;
  unitOfMeasureName_not_contains?: Maybe<Scalars['String']>;
  unitOfMeasureName_not_ends_with?: Maybe<Scalars['String']>;
  unitOfMeasureName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  unitOfMeasureName_not_starts_with?: Maybe<Scalars['String']>;
  unitOfMeasureName_starts_with?: Maybe<Scalars['String']>;
};

export type UnitOfMeasureDtoSort = {
  unitOfMeasureName?: Maybe<SortOperationKind>;
};

export type UnitOfMeasureInfoDto = {
  __typename?: 'UnitOfMeasureInfoDto';
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  isRound: Scalars['Boolean'];
  multiplyWithBaseUnit?: Maybe<Scalars['Int']>;
  numberOfDecimal?: Maybe<Scalars['Int']>;
  unitOfMeasureCode?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  unitOfMeasureName?: Maybe<Scalars['String']>;
};

export type UnitOfMeasureProject = {
  __typename?: 'UnitOfMeasureProject';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UnitOfMeasureProject>;
  isRound: Scalars['Boolean'];
  multiplyWithBaseUnit?: Maybe<Scalars['Int']>;
  numberOfDecimal?: Maybe<Scalars['Int']>;
  unitOfMeasureCode?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  unitOfMeasureName?: Maybe<Scalars['String']>;
};

export type UnlockDepositB2CPropertyPostResponse = {
  __typename?: 'UnlockDepositB2CPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UnlockDepositForB2CPropertyPostInput = {
  depositTransactionId?: Maybe<Scalars['String']>;
};

export type UpdateAgentForRatingResponse = {
  __typename?: 'UpdateAgentForRatingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateAgentInput = {
  agentId?: Maybe<Scalars['String']>;
  contactAddress?: Maybe<Scalars['String']>;
  initialAccountCode?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  propertyAllocates?: Maybe<Scalars['Boolean']>;
  recordVersion?: Maybe<Scalars['Int']>;
  referralCode?: Maybe<Scalars['String']>;
  taxIdentificationNumber?: Maybe<Scalars['String']>;
  topenerServiceTypes?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type UpdateAgentRatingForSupportRequestInput = {
  agentId?: Maybe<Scalars['String']>;
  agentRating?: Maybe<Scalars['Float']>;
  supportRequestId?: Maybe<Scalars['String']>;
};

export type UpdateAgentRatingForSupportRequestResponse = {
  __typename?: 'UpdateAgentRatingForSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateAgentRatingInput = {
  agentRatingDto?: Maybe<AgentRatingDtoInput>;
};

export type UpdateAgentRatingResponse = {
  __typename?: 'UpdateAgentRatingResponse';
  agentRatingDto?: Maybe<Master_Data_AgentRatingDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateAgentResponse = {
  __typename?: 'UpdateAgentResponse';
  agentDto?: Maybe<AgentDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateAllocationRuleInput = {
  allocationRuleDescription?: Maybe<Scalars['String']>;
  allocationRuleId?: Maybe<Scalars['String']>;
  allocationRuleName?: Maybe<Scalars['String']>;
  allocationRuleShortDescription?: Maybe<Scalars['String']>;
  allocationRuleTypeId?: Maybe<Scalars['String']>;
  ruleCondition?: Maybe<RuleConditionDtoInput>;
};

export type UpdateAllocationRuleResponse = {
  __typename?: 'UpdateAllocationRuleResponse';
  allocationRuleId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateAssigneeC2CContactTradingInput = {
  assigneeId?: Maybe<Scalars['String']>;
  contactTradingIds?: Maybe<Scalars['String']>;
  customerSupportAssigneeId?: Maybe<Scalars['String']>;
};

export type UpdateAssigneeC2CContactTradingResponse = {
  __typename?: 'UpdateAssigneeC2CContactTradingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateAssigneeContactTradingInput = {
  assigneeId?: Maybe<Scalars['String']>;
  contactTradingIds?: Maybe<Scalars['String']>;
  customerSupportAssigneeId?: Maybe<Scalars['String']>;
};

export type UpdateAssigneeContactTradingResponse = {
  __typename?: 'UpdateAssigneeContactTradingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateB2C2CInput = {
  active: Scalars['Boolean'];
  address?: Maybe<ProjectAddressInfoDtoInput>;
  b2C2CProjectId?: Maybe<Scalars['String']>;
  b2CProjectId?: Maybe<Scalars['String']>;
  b2CProjectName?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
};

export type UpdateB2C2CProjectResponse = {
  __typename?: 'UpdateB2C2CProjectResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateB2CTransactionContractInput = {
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  birthday?: Maybe<Scalars['String']>;
  commissionCalculationPrice?: Maybe<Scalars['Float']>;
  contactAddress?: Maybe<Scalars['String']>;
  contractCode?: Maybe<Scalars['String']>;
  contractSignDatetime?: Maybe<Scalars['Long']>;
  contractSignFullname?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  gender: Gender;
  idCard?: Maybe<Scalars['String']>;
  idCardDateOfIssue?: Maybe<Scalars['Long']>;
  idCardPlaceOfIssue?: Maybe<Scalars['String']>;
  isTurnBackBookingPayment?: Maybe<Scalars['Boolean']>;
  nationalIdType: NationalIdType;
  note?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  priceVat: Scalars['Float'];
  propertyCode?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  residentAddress?: Maybe<Scalars['String']>;
  returnGenericBasketDatetime?: Maybe<Scalars['Long']>;
  returnGenericBasketReason?: Maybe<Scalars['String']>;
  rowIndex?: Maybe<Scalars['Int']>;
  updatedByUserId?: Maybe<Scalars['String']>;
};

export type UpdateB2CTransactionContractResponse = {
  __typename?: 'UpdateB2CTransactionContractResponse';
  b2CTransactionContractDto?: Maybe<B2CTransactionContractDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateB2CTransactionContractResultInput = {
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  commissionCalculationPrice?: Maybe<Scalars['Float']>;
  contractCode?: Maybe<Scalars['String']>;
  contractDescription?: Maybe<Scalars['String']>;
  contractSignDatetime: Scalars['Long'];
};

export type UpdateB2CTransactionContractResultResponse = {
  __typename?: 'UpdateB2CTransactionContractResultResponse';
  b2CTransactionContractDto?: Maybe<B2CTransactionContractDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateBackOfficeRoleInput = {
  backOfficeRoleId?: Maybe<Scalars['String']>;
  longDescription?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  permissions?: Maybe<Scalars['String']>;
  shortDescription?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Scalars['String']>;
};

export type UpdateBackOfficeRoleResponse = {
  __typename?: 'UpdateBackOfficeRoleResponse';
  backOfficeRoleId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateBlockFloorPlanInput = {
  blockFloorPlanId?: Maybe<Scalars['String']>;
  photo?: Maybe<Scalars['String']>;
};

export type UpdateBlockFloorPlanResponse = {
  __typename?: 'UpdateBlockFloorPlanResponse';
  blockFloorPlanDto?: Maybe<BlockFloorPlanDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateBookingTransactionResponse = {
  __typename?: 'UpdateBookingTransactionResponse';
  bookingTransactionDto?: Maybe<BookingTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CConsultantSupportPropertyPostsInput = {
  propertyPostIds?: Maybe<Scalars['String']>;
  staffUserId?: Maybe<Scalars['String']>;
};

export type UpdateC2CConsultantSupportPropertyPostsResponse = {
  __typename?: 'UpdateC2CConsultantSupportPropertyPostsResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostDto?: Maybe<Array<Maybe<PropertyPostForNotificationDto>>>;
};

export type UpdateC2CContactTradingAcceptedDepositInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  isAgreeTransferConfirmDeposit?: Maybe<Scalars['Boolean']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingAcceptedDepositResponse = {
  __typename?: 'UpdateC2CContactTradingAcceptedDepositResponse';
  contactTradingDepositAcceptedDto?: Maybe<C2CContactTradingDepositAcceptedDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingAcceptedNegotiationInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingAcceptedNegotiationResponse = {
  __typename?: 'UpdateC2CContactTradingAcceptedNegotiationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingConnectedStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingConnectedStatusResponse = {
  __typename?: 'UpdateC2CContactTradingConnectedStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingDepositStatusBoInput = {
  contactTradingId: Scalars['Uuid'];
  contactType: C2CContactTradingType;
  deposit?: Maybe<C2CContactTradingDepositRequestInput>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingDepositStatusBoResponse = {
  __typename?: 'UpdateC2CContactTradingDepositStatusBOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingDepositStatusInput = {
  contactTradingId: Scalars['Uuid'];
  contactType: C2CContactTradingType;
  deposit?: Maybe<C2CContactTradingDepositRequestInput>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingDepositStatusResponse = {
  __typename?: 'UpdateC2CContactTradingDepositStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingNegotiationStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactType: C2CContactTradingType;
  negotiationCommission?: Maybe<Scalars['Float']>;
  negotiationCommissionBuyer?: Maybe<Scalars['Float']>;
  negotiationCommissionSeller?: Maybe<Scalars['Float']>;
  negotiationCommissionUnitId?: Maybe<Scalars['String']>;
  negotiationDate: Scalars['Long'];
  negotiationDescription?: Maybe<Scalars['String']>;
  negotiationPrice: Scalars['Float'];
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingNegotiationStatusResponse = {
  __typename?: 'UpdateC2CContactTradingNegotiationStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingPendingStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  pendingCompensationAmount: Scalars['Float'];
  pendingNote?: Maybe<Scalars['String']>;
  pendingReason?: Maybe<Scalars['String']>;
  pendingStatus: Scalars['Boolean'];
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingPendingStatusResponse = {
  __typename?: 'UpdateC2CContactTradingPendingStatusResponse';
  contactTradingDepositInfo?: Maybe<C2CContactTradingInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingProcessingTimeInput = {
  c2CContactTradingProcessingTime: Scalars['Int'];
};

export type UpdateC2CContactTradingProcessingTimeResponse = {
  __typename?: 'UpdateC2CContactTradingProcessingTimeResponse';
  c2CContactTradingProcessingTime: Scalars['Int'];
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingRejectedDepositInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  depositRejectReason?: Maybe<Scalars['String']>;
  depositRejectReasonId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingRejectedDepositResponse = {
  __typename?: 'UpdateC2CContactTradingRejectedDepositResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingRejectedNegotiationInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  negotiationRejectReason?: Maybe<Scalars['String']>;
  negotiationRejectReasonId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingRejectedNegotiationResponse = {
  __typename?: 'UpdateC2CContactTradingRejectedNegotiationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingRejectedStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingRejectedStatusResponse = {
  __typename?: 'UpdateC2CContactTradingRejectedStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CContactTradingSignedContractDepositInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contractAttachment?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CContactTradingSignedContractDepositResponse = {
  __typename?: 'UpdateC2CContactTradingSignedContractDepositResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CDemandInput = {
  c2CDemandId?: Maybe<Scalars['String']>;
  directionJson?: Maybe<Scalars['String']>;
  forSale: Scalars['Boolean'];
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  placeJson?: Maybe<Scalars['String']>;
  priceRangeJson?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  propertyLocation: PropertyLocation;
  propertyTypeId?: Maybe<Scalars['String']>;
  squareRangeJson?: Maybe<Scalars['String']>;
  title?: Maybe<Scalars['String']>;
};

export type UpdateC2CDemandResponse = {
  __typename?: 'UpdateC2CDemandResponse';
  c2CDemandId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CPanoramaTutorialConfigResponse = {
  __typename?: 'UpdateC2CPanoramaTutorialConfigResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CPropertyPostCommissionConfigInput = {
  c2CPropertyPostCommissionId?: Maybe<Scalars['String']>;
  commissionConfigName?: Maybe<Scalars['String']>;
  endDate?: Maybe<Scalars['Long']>;
  isActive: Scalars['Boolean'];
  platformFeeBasedOnCommission: Scalars['Float'];
  platformFeeMinimumBasedOnSellingPrice: Scalars['Float'];
  shareCommissionConsultant: Scalars['Float'];
  shareCommissionTpl: Scalars['Float'];
  startDate?: Maybe<Scalars['Long']>;
  transactionCommissionTpl: Scalars['Float'];
};

export type UpdateC2CPropertyPostCommissionConfigResponse = {
  __typename?: 'UpdateC2CPropertyPostCommissionConfigResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateC2CPropertyPostInput = {
  addressId?: Maybe<Scalars['String']>;
  agentGroupRanks?: Maybe<Scalars['String']>;
  alleyWidth?: Maybe<Scalars['Float']>;
  approvedBy?: Maybe<Scalars['String']>;
  approvedDatetime?: Maybe<Scalars['Long']>;
  b2C2CProjectId?: Maybe<Scalars['String']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  collateralizedAtBankId?: Maybe<Scalars['String']>;
  commission?: Maybe<Scalars['Float']>;
  commissionBuyer?: Maybe<Scalars['Float']>;
  commissionSeller?: Maybe<Scalars['Float']>;
  commissionTpl?: Maybe<Scalars['Float']>;
  contactEmail?: Maybe<Scalars['String']>;
  createForUserId?: Maybe<Scalars['String']>;
  direction: Direction;
  expiredDate?: Maybe<Scalars['Long']>;
  floor?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  freeTextProject?: Maybe<Scalars['String']>;
  guaranteedPackageId?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  imageSizes?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isCollateralized?: Maybe<Scalars['Boolean']>;
  isFeatureProperty: Scalars['Boolean'];
  isPrivate: Scalars['Boolean'];
  isRepostB2CProperyPost?: Maybe<Scalars['Boolean']>;
  isShowGoogleStreetView?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  legalDocuments?: Maybe<Scalars['String']>;
  legalInfoId?: Maybe<Scalars['String']>;
  length?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  matterportUrl?: Maybe<Scalars['String']>;
  nearFacility?: Maybe<Scalars['String']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  owner?: Maybe<OwnerInfoDtoInput>;
  ownerId?: Maybe<Scalars['String']>;
  ownerIsAuthor: Scalars['Boolean'];
  platformFee?: Maybe<Scalars['Float']>;
  platformFeeBasedOnCommission?: Maybe<Scalars['Float']>;
  platformFeeMinimumBasedOnSellingPrice?: Maybe<Scalars['Float']>;
  postDescription?: Maybe<Scalars['String']>;
  postServiceType: PostServiceType;
  postTitle?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<PropertyAddressInfoInput>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyLocation?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectedDatetime?: Maybe<Scalars['Long']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rentCommission?: Maybe<Scalars['Float']>;
  rentCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPrice?: Maybe<Scalars['Float']>;
  repostByUserId?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  sellerAndBuyerCommission?: Maybe<Scalars['Float']>;
  sendingApprovalFrom?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  staffUserId?: Maybe<Scalars['String']>;
  supportRequestTypeIds?: Maybe<Scalars['String']>;
  tags?: Maybe<Scalars['String']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

export type UpdateC2CPropertyPostPanoramaInput = {
  panoramaImageId?: Maybe<Scalars['String']>;
  panoramaJson?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateC2CPropertyPostPanoramaResponse = {
  __typename?: 'UpdateC2CPropertyPostPanoramaResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateConfigPaymentMethodStatusResponse = {
  __typename?: 'UpdateConfigPaymentMethodStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingAcceptedDepositInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  isAgreeTransferConfirmDeposit?: Maybe<Scalars['Boolean']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingAcceptedDepositResponse = {
  __typename?: 'UpdateContactTradingAcceptedDepositResponse';
  contactTradingDepositAcceptedDto?: Maybe<ContactTradingDepositAcceptedDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingB2CForBoInput = {
  actionType?: Maybe<Scalars['String']>;
  consultantAssigneeId?: Maybe<Scalars['String']>;
  contactTradingB2CId?: Maybe<Scalars['String']>;
  note?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingB2CForBoResponse = {
  __typename?: 'UpdateContactTradingB2CForBOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingConnectedStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingConnectedStatusResponse = {
  __typename?: 'UpdateContactTradingConnectedStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingDepositStatusBoInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  deposit?: Maybe<ContactTradingDepositInput>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingDepositStatusBoResponse = {
  __typename?: 'UpdateContactTradingDepositStatusBOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingDepositStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  deposit?: Maybe<ContactTradingDepositInput>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingDepositStatusResponse = {
  __typename?: 'UpdateContactTradingDepositStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingFoInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingInfo?: Maybe<ContactTradingInfoFoInput>;
  contactTradingServiceBonusIds?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingFoResponse = {
  __typename?: 'UpdateContactTradingFOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactTradingInfo?: Maybe<ContactTradingInfoInput>;
  contactTradingServiceBonusIds?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingNegotiationStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contactType: ContactTradingType;
  negotiationDate?: Maybe<Scalars['Long']>;
  negotiationDescription?: Maybe<Scalars['String']>;
  negotiationPrice?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingNegotiationStatusResponse = {
  __typename?: 'UpdateContactTradingNegotiationStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingPendingStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  pendingCompensationAmount?: Maybe<Scalars['Float']>;
  pendingNote?: Maybe<Scalars['String']>;
  pendingReason?: Maybe<Scalars['String']>;
  pendingStatus?: Maybe<Scalars['Boolean']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingPendingStatusResponse = {
  __typename?: 'UpdateContactTradingPendingStatusResponse';
  contactTradingDepositInfo?: Maybe<ContactTradingInfoDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingProcessingTimeInput = {
  contactTradingProcessingTime: Scalars['Int'];
};

export type UpdateContactTradingProcessingTimeResponse = {
  __typename?: 'UpdateContactTradingProcessingTimeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingRejectedDepositInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  depositRejectReason?: Maybe<Scalars['String']>;
  depositRejectReasonId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingRejectedDepositResponse = {
  __typename?: 'UpdateContactTradingRejectedDepositResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingRejectedStatusInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectReason?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingRejectedStatusResponse = {
  __typename?: 'UpdateContactTradingRejectedStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingResponse = {
  __typename?: 'UpdateContactTradingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateContactTradingSignedContractDepositInput = {
  contactTradingId?: Maybe<Scalars['String']>;
  contractAttachment?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateContactTradingSignedContractDepositResponse = {
  __typename?: 'UpdateContactTradingSignedContractDepositResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateCrawlerProcessRefuseStatusInput = {
  crawlerProcessId?: Maybe<Scalars['String']>;
  crawlerRefuseReason?: Maybe<Scalars['String']>;
  crawlerRefuseReasonId?: Maybe<Scalars['String']>;
};

export type UpdateCrawlerProcessRefuseStatusResponse = {
  __typename?: 'UpdateCrawlerProcessRefuseStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateCustomerInfoForDepositTransactionInput = {
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerGender: Gender;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerNationalIdType: NationalIdType;
  customerPermanentAddress?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  otpCode?: Maybe<Scalars['String']>;
  postProcessorDto?: Maybe<AfterUpdateCustomerInfoForDepositTransactionPostProcessorDtoInput>;
};

export type UpdateCustomerInfoForDepositTransactionResponse = {
  __typename?: 'UpdateCustomerInfoForDepositTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateCustomerRequestInput = {
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerPassport?: Maybe<Scalars['String']>;
  customerPassportExpireDate?: Maybe<Scalars['Long']>;
  customerPassportIssueDate?: Maybe<Scalars['Long']>;
  customerPassportIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  nationalityId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateCustomerResponse = {
  __typename?: 'UpdateCustomerResponse';
  customerDto?: Maybe<CustomerDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateDepositTransactionResponse = {
  __typename?: 'UpdateDepositTransactionResponse';
  depositeTransactionDto?: Maybe<DepositeTransactionDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateDepositTransactionToRefundedRequestInput = {
  depositeTransactionId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateDiscountInfoResponse = {
  __typename?: 'UpdateDiscountInfoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateDocumentAttributeInput = {
  documentAttributeDescription?: Maybe<Scalars['String']>;
  documentAttributeId?: Maybe<Scalars['String']>;
  documentAttributeName?: Maybe<Scalars['String']>;
  documentAttributeTemplate?: Maybe<Scalars['String']>;
  documentAttributeTypeId?: Maybe<Scalars['String']>;
};

export type UpdateDocumentAttributeResponse = {
  __typename?: 'UpdateDocumentAttributeResponse';
  documentAttributeDto?: Maybe<DocumentAttributeDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateDocumentTemplateResponse = {
  __typename?: 'UpdateDocumentTemplateResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateEmailNotificationTemplateInput = {
  emailContent?: Maybe<Scalars['String']>;
  emailSubject?: Maybe<Scalars['String']>;
  notificationTemplateId?: Maybe<Scalars['String']>;
};

export type UpdateEmailNotificationTemplateResponse = {
  __typename?: 'UpdateEmailNotificationTemplateResponse';
  emailNotificationTemplateDto?: Maybe<EmailNotificationTemplateDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateEmailTemplateSettingInput = {
  backgroundImage?: Maybe<Scalars['String']>;
  emailTemplateSettingId?: Maybe<Scalars['String']>;
  finalTemplate?: Maybe<Scalars['String']>;
  footer?: Maybe<Scalars['String']>;
  header?: Maybe<Scalars['String']>;
  recordVersion: Scalars['Int'];
};

export type UpdateEmailTemplateSettingResponse = {
  __typename?: 'UpdateEmailTemplateSettingResponse';
  emailTemplateSettingDto?: Maybe<EmailTemplateSettingDto>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateGuestResponse = {
  __typename?: 'UpdateGuestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  guestDto?: Maybe<GuestDto>;
};

export type UpdateImageSizeInput = {
  height: Scalars['Int'];
  imageSizeId?: Maybe<Scalars['String']>;
  platform?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['String']>;
  width: Scalars['Int'];
};

export type UpdateImageSizeResponse = {
  __typename?: 'UpdateImageSizeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateInvestorInput = {
  activityImages?: Maybe<Scalars['String']>;
  address?: Maybe<InvestorAddressInfoDtoInput>;
  areas?: Maybe<Scalars['String']>;
  charterCapital?: Maybe<Scalars['String']>;
  establishmentDate?: Maybe<Scalars['String']>;
  introduce?: Maybe<Scalars['String']>;
  investorId?: Maybe<Scalars['String']>;
  investorName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  lastModified?: Maybe<Scalars['String']>;
  logo?: Maybe<Scalars['String']>;
  modifiedBy?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
};

export type UpdateLegalInfoResponse = {
  __typename?: 'UpdateLegalInfoResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  legalInfoDto?: Maybe<LegalInfoDto>;
};

export type UpdateLimitPostApprovedInput = {
  numberLimit?: Maybe<Scalars['Int']>;
};

export type UpdateLimitPostApprovedResponse = {
  __typename?: 'UpdateLimitPostApprovedResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  numberLimit?: Maybe<Scalars['Int']>;
};

export type UpdateLimitPostSettingInput = {
  isUnlimited?: Maybe<Scalars['Boolean']>;
  limit?: Maybe<Scalars['Int']>;
  limitPostSettingId?: Maybe<Scalars['String']>;
};

export type UpdateLimitPostSettingResponse = {
  __typename?: 'UpdateLimitPostSettingResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  limitPostSettingDto?: Maybe<LimitPostSettingDto>;
};

export type UpdateMaxFavoritePropertyPostNumberInput = {
  maxFavoritePropertyPostNumber: Scalars['Int'];
};

export type UpdateMaxFavoritePropertyPostNumberResponse = {
  __typename?: 'UpdateMaxFavoritePropertyPostNumberResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateMobileAppVersionInput = {
  mobileAppVersionId: Scalars['Int'];
  mobileOs?: Maybe<Scalars['String']>;
  mobileVersion?: Maybe<Scalars['String']>;
  releaseDatetime: Scalars['Long'];
  releaseNotes?: Maybe<Scalars['String']>;
  releaseUrl?: Maybe<Scalars['String']>;
  updateOption?: Maybe<Scalars['String']>;
};

export type UpdateMobileAppVersionResponse = {
  __typename?: 'UpdateMobileAppVersionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  mobileAppVersion?: Maybe<MobileAppVersionDto>;
};

export type UpdatePolicyInput = {
  attachment?: Maybe<Scalars['String']>;
  endDate: Scalars['Long'];
  policyDescription?: Maybe<Scalars['String']>;
  policyId?: Maybe<Scalars['String']>;
  policyName?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  startDate: Scalars['Long'];
};

export type UpdatePropertyPostApprovalStatusResponse = {
  __typename?: 'UpdatePropertyPostApprovalStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusDto?: Maybe<PropertyPostApprovalStatusDto>;
};

export type UpdatePropertyPostInput = {
  addressId?: Maybe<Scalars['String']>;
  agentGroupIds?: Maybe<Scalars['String']>;
  agentGroupRanks?: Maybe<Scalars['String']>;
  agentRankIds?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<Scalars['String']>;
  approvedDatetime?: Maybe<Scalars['Long']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  collateralizedAtBankId?: Maybe<Scalars['String']>;
  commission?: Maybe<Scalars['Float']>;
  contactEmail?: Maybe<Scalars['String']>;
  direction: Direction;
  expectedPrice?: Maybe<Scalars['String']>;
  expiredDate?: Maybe<Scalars['Long']>;
  fastProductId?: Maybe<Scalars['String']>;
  floor?: Maybe<Scalars['String']>;
  forRent?: Maybe<Scalars['Boolean']>;
  forSale?: Maybe<Scalars['Boolean']>;
  freeTextProject?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isCollateralized?: Maybe<Scalars['Boolean']>;
  isFeatureProperty: Scalars['Boolean'];
  isPrivate: Scalars['Boolean'];
  isSold?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  legalInfoId?: Maybe<Scalars['String']>;
  length?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  minimumPayment?: Maybe<Scalars['Float']>;
  nearFacility?: Maybe<Scalars['String']>;
  negotiable?: Maybe<Scalars['Boolean']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  owner?: Maybe<OwnerInfoDtoInput>;
  ownerId?: Maybe<Scalars['String']>;
  ownerIsAuthor: Scalars['Boolean'];
  postDescription?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyAddress?: Maybe<PropertyAddressInfoInput>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
  rejectedDatetime?: Maybe<Scalars['Long']>;
  rejectedReason?: Maybe<Scalars['String']>;
  rentCommission?: Maybe<Scalars['Float']>;
  rentCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  rentPeriod?: Maybe<Scalars['Int']>;
  rentPrice?: Maybe<Scalars['Float']>;
  saleCommission?: Maybe<Scalars['Float']>;
  saleCommissionCurrencyUnitId?: Maybe<Scalars['String']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleTrackingStatusId?: Maybe<Scalars['String']>;
  sendingApprovalFrom?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  staffGroupIds?: Maybe<Scalars['String']>;
  supportRequestTypeIds?: Maybe<Scalars['String']>;
  tags?: Maybe<Scalars['String']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  width?: Maybe<Scalars['Float']>;
};

export type UpdatePropertyPostStatusResponse = {
  __typename?: 'UpdatePropertyPostStatusResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  propertyPostStatusDto?: Maybe<PropertyPostStatusDto>;
};

export type UpdateRuleResponse = {
  __typename?: 'UpdateRuleResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  ruleDto?: Maybe<RuleDto>;
};

export type UpdateSaleSeasonStatisticInput = {
  saleSeasonId?: Maybe<Scalars['String']>;
  viewingCount: Scalars['Int'];
};

export type UpdateSaleSeasonStatisticResponse = {
  __typename?: 'UpdateSaleSeasonStatisticResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  saleSeasonStatisticDto?: Maybe<SaleSeasonStatisticDto>;
};

export type UpdateStaffGroupInput = {
  contactTradingAssignable: Scalars['Boolean'];
  eligibleForB2C: Scalars['Boolean'];
  parentStaffGroupId?: Maybe<Scalars['String']>;
  staffGroupDescription?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupName?: Maybe<Scalars['String']>;
  subStaffGroupIds?: Maybe<Scalars['String']>;
};

export type UpdateStaffGroupResponse = {
  __typename?: 'UpdateStaffGroupResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateStaffInput = {
  contactAddress?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalStaffInfo?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom: Scalars['Float'];
  preferPropertyPriceTo: Scalars['Float'];
  preferPropertyTypes?: Maybe<Scalars['String']>;
  rating: Scalars['Int'];
  recordVersion?: Maybe<Scalars['Int']>;
  specialityIds?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type UpdateStaffResponse = {
  __typename?: 'UpdateStaffResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  staffDto?: Maybe<StaffDto>;
};

export type UpdateSubscriptionNotificationConfigInput = {
  emailNoti: Scalars['Boolean'];
  expiringDaysLeft: Scalars['Int'];
  pushNoti: Scalars['Boolean'];
  smsNoti: Scalars['Boolean'];
};

export type UpdateSubscriptionNotificationConfigResponse = {
  __typename?: 'UpdateSubscriptionNotificationConfigResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateSubscriptionPackageInput = {
  subscriptionPackageDescription?: Maybe<Scalars['String']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
  subscriptionPackagePrice: Scalars['Float'];
  subscriptionPackageValidDays: Scalars['Int'];
};

export type UpdateSubscriptionPackageResponse = {
  __typename?: 'UpdateSubscriptionPackageResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateSupportRequestResponse = {
  __typename?: 'UpdateSupportRequestResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  supportRequestDto?: Maybe<SupportRequestDto>;
};

export type UpdateSupportServiceConfigurationInput = {
  price: Scalars['Decimal'];
  recordVersion: Scalars['Int'];
  selectableStepIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceId?: Maybe<Scalars['String']>;
};

export type UpdateSupportServiceConfigurationResponse = {
  __typename?: 'UpdateSupportServiceConfigurationResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateTopenerBankAccountFoInput = {
  bankAccountBranch?: Maybe<Scalars['String']>;
  bankAccountHolderName?: Maybe<Scalars['String']>;
  bankAccountNumber?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  isDefault: Scalars['Boolean'];
  recordVersion: Scalars['Int'];
  topenerBankAccountId?: Maybe<Scalars['String']>;
};

export type UpdateTopenerBankAccountResponse = {
  __typename?: 'UpdateTopenerBankAccountResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateTopenerInfoForTransactionInput = {
  contactAddress?: Maybe<Scalars['String']>;
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  nationalIdIssueDate?: Maybe<Scalars['Long']>;
  nationalIdIssuePlace?: Maybe<Scalars['String']>;
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UpdateTopenerInfoForTransactionResponse = {
  __typename?: 'UpdateTopenerInfoForTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateTopenerServiceConfigurationInput = {
  price: Scalars['Decimal'];
  recordVersion: Scalars['Int'];
  selectableStepIds?: Maybe<Array<Maybe<Scalars['String']>>>;
  supportServiceId?: Maybe<Scalars['String']>;
};

export type UpdateTransactionConfigPaymentResponse = {
  __typename?: 'UpdateTransactionConfigPaymentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateTransactionToRefundedInput = {
  buyerId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateTransactionToRefundedResponse = {
  __typename?: 'UpdateTransactionToRefundedResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type UpdateUserBackOfficeInput = {
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  gender: Gender;
  lastName?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  referralCode?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UpdateUserBackOfficeResponse = {
  __typename?: 'UpdateUserBackOfficeResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type UpdateUserBiographyFoInput = {
  recordVersion: Scalars['Int'];
  userBiography?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UpdateUserBiographyFoResponse = {
  __typename?: 'UpdateUserBiographyFOResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateUserInput = {
  dob?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  gender: Gender;
  isCreatedByAdmin?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isMember?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumberConfirmed?: Maybe<Scalars['Boolean']>;
  profilePhoto?: Maybe<Scalars['String']>;
  referralCode?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type UpdateUserNotificationRequestInput = {
  delete: Scalars['Boolean'];
  markRead: Scalars['Boolean'];
  notificationId?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UpdateUserNotificationResponse = {
  __typename?: 'UpdateUserNotificationResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UpdateUserNotificationResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UpdateUserResponse = {
  __typename?: 'UpdateUserResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  userDto?: Maybe<UserDto>;
};

export type UploadDocumentInput = {
  b2CTransactionContractId?: Maybe<Scalars['String']>;
  documentFiles?: Maybe<Scalars['String']>;
  documentImages?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type UploadDocumentResponse = {
  __typename?: 'UploadDocumentResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  recordVersion: Scalars['Int'];
};


export type UserCommonInfoDto = {
  __typename?: 'UserCommonInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UserCommonInfoDto>;
  email?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  userCode?: Maybe<Scalars['String']>;
  userCommonInfoId?: Maybe<Scalars['String']>;
  username?: Maybe<Scalars['String']>;
};

export type UserDto = {
  __typename?: 'UserDto';
  agentCode?: Maybe<Scalars['String']>;
  allowSyncTopenId: Scalars['Boolean'];
  allowUpdateEmail: Scalars['Boolean'];
  biography?: Maybe<Scalars['String']>;
  campaignCode?: Maybe<Scalars['String']>;
  createdByName?: Maybe<Scalars['String']>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  dob?: Maybe<Timestamp>;
  email?: Maybe<Scalars['String']>;
  emailConfirmed?: Maybe<Scalars['Boolean']>;
  firstName?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  isCreatedByAdmin?: Maybe<Scalars['Boolean']>;
  isFirstLogin?: Maybe<Scalars['Boolean']>;
  isLocked?: Maybe<Scalars['Boolean']>;
  isMember?: Maybe<Scalars['Boolean']>;
  isReferralAgent?: Maybe<Scalars['Boolean']>;
  isShowUpgradeAgent?: Maybe<Scalars['Boolean']>;
  isVerifyProfilePhoto: Scalars['Boolean'];
  lastLoginDatetime?: Maybe<Scalars['Long']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumberConfirmed?: Maybe<Scalars['Boolean']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  pushNotificationEnable?: Maybe<Scalars['Boolean']>;
  pushNotificationId?: Maybe<Scalars['String']>;
  referralCode?: Maybe<Scalars['String']>;
  roleDescription?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleName?: Maybe<Scalars['String']>;
  roleNames?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  topenidSyncDatetime?: Maybe<Scalars['Long']>;
  topenidSyncMessageResult?: Maybe<Scalars['String']>;
  topenidSyncResult?: Maybe<Scalars['String']>;
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetimeString?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
  userStatus: UserStatus;
  userStatusDescription?: Maybe<Scalars['String']>;
};

export type UserDtoFilter = {
  AND?: Maybe<Array<UserDtoFilter>>;
  email?: Maybe<Scalars['String']>;
  email_contains?: Maybe<Scalars['String']>;
  email_ends_with?: Maybe<Scalars['String']>;
  email_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not?: Maybe<Scalars['String']>;
  email_not_contains?: Maybe<Scalars['String']>;
  email_not_ends_with?: Maybe<Scalars['String']>;
  email_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  email_not_starts_with?: Maybe<Scalars['String']>;
  email_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<UserDtoFilter>>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  roleId?: Maybe<Scalars['String']>;
  roleId_contains?: Maybe<Scalars['String']>;
  roleId_ends_with?: Maybe<Scalars['String']>;
  roleId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  roleId_not?: Maybe<Scalars['String']>;
  roleId_not_contains?: Maybe<Scalars['String']>;
  roleId_not_ends_with?: Maybe<Scalars['String']>;
  roleId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  roleId_not_starts_with?: Maybe<Scalars['String']>;
  roleId_starts_with?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetime_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_lte?: Maybe<Scalars['Long']>;
  updatedDatetime_not?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_gte?: Maybe<Scalars['Long']>;
  updatedDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  updatedDatetime_not_lt?: Maybe<Scalars['Long']>;
  updatedDatetime_not_lte?: Maybe<Scalars['Long']>;
  userName?: Maybe<Scalars['String']>;
  userName_contains?: Maybe<Scalars['String']>;
  userName_ends_with?: Maybe<Scalars['String']>;
  userName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not?: Maybe<Scalars['String']>;
  userName_not_contains?: Maybe<Scalars['String']>;
  userName_not_ends_with?: Maybe<Scalars['String']>;
  userName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userName_not_starts_with?: Maybe<Scalars['String']>;
  userName_starts_with?: Maybe<Scalars['String']>;
  userStatus?: Maybe<UserStatus>;
  userStatus_gt?: Maybe<UserStatus>;
  userStatus_gte?: Maybe<UserStatus>;
  userStatus_in?: Maybe<Array<UserStatus>>;
  userStatus_lt?: Maybe<UserStatus>;
  userStatus_lte?: Maybe<UserStatus>;
  userStatus_not?: Maybe<UserStatus>;
  userStatus_not_gt?: Maybe<UserStatus>;
  userStatus_not_gte?: Maybe<UserStatus>;
  userStatus_not_in?: Maybe<Array<UserStatus>>;
  userStatus_not_lt?: Maybe<UserStatus>;
  userStatus_not_lte?: Maybe<UserStatus>;
};

export type UserDtoSort = {
  email?: Maybe<SortOperationKind>;
  fullName?: Maybe<SortOperationKind>;
  phoneNumber?: Maybe<SortOperationKind>;
  roleId?: Maybe<SortOperationKind>;
  updatedDatetime?: Maybe<SortOperationKind>;
  userName?: Maybe<SortOperationKind>;
  userStatus?: Maybe<SortOperationKind>;
};

export type UserFollowOnPostDto = {
  __typename?: 'UserFollowOnPostDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UserFollowOnPostDto>;
  isFollowed: Scalars['Boolean'];
  propertyPostId?: Maybe<Scalars['String']>;
};

export type UserFollowOnProjectDto = {
  __typename?: 'UserFollowOnProjectDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UserFollowOnProjectDto>;
  isFollowed: Scalars['Boolean'];
  projectId?: Maybe<Scalars['String']>;
};

export type UserForMessengerDto = {
  __typename?: 'UserForMessengerDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UserForMessengerDto>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UserInfoSimpleDto = {
  __typename?: 'UserInfoSimpleDto';
  agentRankingId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<UserInfoSimpleDto>;
  email?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  gender: Gender;
  isAgent: Scalars['Boolean'];
  permanentAddress?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type UserInterestedC2CDemandInput = {
  c2CDemandId?: Maybe<Scalars['String']>;
  isInterested: Scalars['Boolean'];
};

export type UserInterestedC2CDemandResponse = {
  __typename?: 'UserInterestedC2CDemandResponse';
  c2CDemandId?: Maybe<Scalars['String']>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type UserProfileDto = {
  __typename?: 'UserProfileDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<UserProfileDto>;
  fullName?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userName?: Maybe<Scalars['String']>;
};

export type UserProfilePhotoDto = {
  __typename?: 'UserProfilePhotoDto';
  approvalStatusId?: Maybe<Scalars['Uuid']>;
  approveByUserId?: Maybe<Scalars['Uuid']>;
  approveByUserName?: Maybe<Scalars['String']>;
  approveDatetime?: Maybe<Scalars['Long']>;
  currentPhotoUrl?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  photoUrl?: Maybe<Scalars['String']>;
  rejectReasonDescription?: Maybe<Scalars['String']>;
  rejectReasonId?: Maybe<Scalars['Uuid']>;
  requestDatetime?: Maybe<Scalars['Long']>;
  userId: Scalars['Uuid'];
  userName?: Maybe<Scalars['String']>;
  userProfilePhotoId: Scalars['Uuid'];
};

export type UserProfilePhotoDtoFilter = {
  AND?: Maybe<Array<UserProfilePhotoDtoFilter>>;
  approvalStatusId?: Maybe<Scalars['Uuid']>;
  approvalStatusId_gt?: Maybe<Scalars['Uuid']>;
  approvalStatusId_gte?: Maybe<Scalars['Uuid']>;
  approvalStatusId_in?: Maybe<Array<Maybe<Scalars['Uuid']>>>;
  approvalStatusId_lt?: Maybe<Scalars['Uuid']>;
  approvalStatusId_lte?: Maybe<Scalars['Uuid']>;
  approvalStatusId_not?: Maybe<Scalars['Uuid']>;
  approvalStatusId_not_gt?: Maybe<Scalars['Uuid']>;
  approvalStatusId_not_gte?: Maybe<Scalars['Uuid']>;
  approvalStatusId_not_in?: Maybe<Array<Maybe<Scalars['Uuid']>>>;
  approvalStatusId_not_lt?: Maybe<Scalars['Uuid']>;
  approvalStatusId_not_lte?: Maybe<Scalars['Uuid']>;
  OR?: Maybe<Array<UserProfilePhotoDtoFilter>>;
};

export type UserProfilePhotoDtoSort = {
  approveByUserName?: Maybe<SortOperationKind>;
  approveDatetime?: Maybe<SortOperationKind>;
  fileName?: Maybe<SortOperationKind>;
  rejectReasonDescription?: Maybe<SortOperationKind>;
  requestDatetime?: Maybe<SortOperationKind>;
  userName?: Maybe<SortOperationKind>;
};

export type UserReportSpamDto = {
  __typename?: 'UserReportSpamDto';
  comments?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  propertyPostId?: Maybe<Scalars['String']>;
  reporterId?: Maybe<Scalars['String']>;
  reporterName?: Maybe<Scalars['String']>;
  spamTypeDescription?: Maybe<Scalars['String']>;
  spamTypeId?: Maybe<Scalars['String']>;
  spamTypeName?: Maybe<Scalars['String']>;
  userReportSpamId?: Maybe<Scalars['String']>;
};

export type UserReportSpamDtoFilter = {
  AND?: Maybe<Array<UserReportSpamDtoFilter>>;
  comments?: Maybe<Scalars['String']>;
  comments_contains?: Maybe<Scalars['String']>;
  comments_ends_with?: Maybe<Scalars['String']>;
  comments_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  comments_not?: Maybe<Scalars['String']>;
  comments_not_contains?: Maybe<Scalars['String']>;
  comments_not_ends_with?: Maybe<Scalars['String']>;
  comments_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  comments_not_starts_with?: Maybe<Scalars['String']>;
  comments_starts_with?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<UserReportSpamDtoFilter>>;
  reporterId?: Maybe<Scalars['String']>;
  reporterId_contains?: Maybe<Scalars['String']>;
  reporterId_ends_with?: Maybe<Scalars['String']>;
  reporterId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reporterId_not?: Maybe<Scalars['String']>;
  reporterId_not_contains?: Maybe<Scalars['String']>;
  reporterId_not_ends_with?: Maybe<Scalars['String']>;
  reporterId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reporterId_not_starts_with?: Maybe<Scalars['String']>;
  reporterId_starts_with?: Maybe<Scalars['String']>;
  reporterName?: Maybe<Scalars['String']>;
  reporterName_contains?: Maybe<Scalars['String']>;
  reporterName_ends_with?: Maybe<Scalars['String']>;
  reporterName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reporterName_not?: Maybe<Scalars['String']>;
  reporterName_not_contains?: Maybe<Scalars['String']>;
  reporterName_not_ends_with?: Maybe<Scalars['String']>;
  reporterName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  reporterName_not_starts_with?: Maybe<Scalars['String']>;
  reporterName_starts_with?: Maybe<Scalars['String']>;
  spamTypeId?: Maybe<Scalars['String']>;
  spamTypeId_contains?: Maybe<Scalars['String']>;
  spamTypeId_ends_with?: Maybe<Scalars['String']>;
  spamTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  spamTypeId_not?: Maybe<Scalars['String']>;
  spamTypeId_not_contains?: Maybe<Scalars['String']>;
  spamTypeId_not_ends_with?: Maybe<Scalars['String']>;
  spamTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  spamTypeId_not_starts_with?: Maybe<Scalars['String']>;
  spamTypeId_starts_with?: Maybe<Scalars['String']>;
  spamTypeName?: Maybe<Scalars['String']>;
  spamTypeName_contains?: Maybe<Scalars['String']>;
  spamTypeName_ends_with?: Maybe<Scalars['String']>;
  spamTypeName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  spamTypeName_not?: Maybe<Scalars['String']>;
  spamTypeName_not_contains?: Maybe<Scalars['String']>;
  spamTypeName_not_ends_with?: Maybe<Scalars['String']>;
  spamTypeName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  spamTypeName_not_starts_with?: Maybe<Scalars['String']>;
  spamTypeName_starts_with?: Maybe<Scalars['String']>;
};

export type UserReportSpamDtoInput = {
  comments?: Maybe<Scalars['String']>;
  createdDatetime?: Maybe<Scalars['Long']>;
  propertyPostId?: Maybe<Scalars['String']>;
  reporterId?: Maybe<Scalars['String']>;
  reporterName?: Maybe<Scalars['String']>;
  spamTypeDescription?: Maybe<Scalars['String']>;
  spamTypeId?: Maybe<Scalars['String']>;
  spamTypeName?: Maybe<Scalars['String']>;
  userReportSpamId?: Maybe<Scalars['String']>;
};

export type UserReportSpamDtoSort = {
  comments?: Maybe<SortOperationKind>;
  createdDatetime?: Maybe<SortOperationKind>;
  reporterId?: Maybe<SortOperationKind>;
  reporterName?: Maybe<SortOperationKind>;
  spamTypeId?: Maybe<SortOperationKind>;
  spamTypeName?: Maybe<SortOperationKind>;
};

export enum UserStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type UserTransactionDto = {
  __typename?: 'UserTransactionDto';
  createdDatetime?: Maybe<Scalars['Long']>;
  expectedAmount?: Maybe<Scalars['Float']>;
  fundAccountId?: Maybe<Scalars['String']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentNotes?: Maybe<Scalars['String']>;
  paymentTransferNumber?: Maybe<Scalars['String']>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionPaymentStatus: TransactionPaymentStatus;
  transactionServiceType: TransactionServiceType;
  transactionType: TransactionType;
  updatedDatimetime?: Maybe<Scalars['Long']>;
  userId?: Maybe<Scalars['String']>;
  userTransactionId?: Maybe<Scalars['String']>;
};

export type UserTransactionDtoFilter = {
  AND?: Maybe<Array<UserTransactionDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  OR?: Maybe<Array<UserTransactionDtoFilter>>;
  paymentTransferNumber?: Maybe<Scalars['String']>;
  paymentTransferNumber_contains?: Maybe<Scalars['String']>;
  paymentTransferNumber_ends_with?: Maybe<Scalars['String']>;
  paymentTransferNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentTransferNumber_not?: Maybe<Scalars['String']>;
  paymentTransferNumber_not_contains?: Maybe<Scalars['String']>;
  paymentTransferNumber_not_ends_with?: Maybe<Scalars['String']>;
  paymentTransferNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  paymentTransferNumber_not_starts_with?: Maybe<Scalars['String']>;
  paymentTransferNumber_starts_with?: Maybe<Scalars['String']>;
  paymentUnit?: Maybe<PaymentUnit>;
  paymentUnit_gt?: Maybe<PaymentUnit>;
  paymentUnit_gte?: Maybe<PaymentUnit>;
  paymentUnit_in?: Maybe<Array<PaymentUnit>>;
  paymentUnit_lt?: Maybe<PaymentUnit>;
  paymentUnit_lte?: Maybe<PaymentUnit>;
  paymentUnit_not?: Maybe<PaymentUnit>;
  paymentUnit_not_gt?: Maybe<PaymentUnit>;
  paymentUnit_not_gte?: Maybe<PaymentUnit>;
  paymentUnit_not_in?: Maybe<Array<PaymentUnit>>;
  paymentUnit_not_lt?: Maybe<PaymentUnit>;
  paymentUnit_not_lte?: Maybe<PaymentUnit>;
  transactionPaymentStatus?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_gt?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_gte?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_in?: Maybe<Array<TransactionPaymentStatus>>;
  transactionPaymentStatus_lt?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_lte?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_not?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_not_gt?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_not_gte?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_not_in?: Maybe<Array<TransactionPaymentStatus>>;
  transactionPaymentStatus_not_lt?: Maybe<TransactionPaymentStatus>;
  transactionPaymentStatus_not_lte?: Maybe<TransactionPaymentStatus>;
  transactionServiceType?: Maybe<TransactionServiceType>;
  transactionServiceType_gt?: Maybe<TransactionServiceType>;
  transactionServiceType_gte?: Maybe<TransactionServiceType>;
  transactionServiceType_in?: Maybe<Array<TransactionServiceType>>;
  transactionServiceType_lt?: Maybe<TransactionServiceType>;
  transactionServiceType_lte?: Maybe<TransactionServiceType>;
  transactionServiceType_not?: Maybe<TransactionServiceType>;
  transactionServiceType_not_gt?: Maybe<TransactionServiceType>;
  transactionServiceType_not_gte?: Maybe<TransactionServiceType>;
  transactionServiceType_not_in?: Maybe<Array<TransactionServiceType>>;
  transactionServiceType_not_lt?: Maybe<TransactionServiceType>;
  transactionServiceType_not_lte?: Maybe<TransactionServiceType>;
  transactionType?: Maybe<TransactionType>;
  transactionType_gt?: Maybe<TransactionType>;
  transactionType_gte?: Maybe<TransactionType>;
  transactionType_in?: Maybe<Array<TransactionType>>;
  transactionType_lt?: Maybe<TransactionType>;
  transactionType_lte?: Maybe<TransactionType>;
  transactionType_not?: Maybe<TransactionType>;
  transactionType_not_gt?: Maybe<TransactionType>;
  transactionType_not_gte?: Maybe<TransactionType>;
  transactionType_not_in?: Maybe<Array<TransactionType>>;
  transactionType_not_lt?: Maybe<TransactionType>;
  transactionType_not_lte?: Maybe<TransactionType>;
};

export type UserTransactionDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
  paidDatetime?: Maybe<SortOperationKind>;
};

export type UserViewTypeDto = {
  __typename?: 'UserViewTypeDto';
  createdDatetime: Scalars['Long'];
  userViewTypeCode?: Maybe<Scalars['String']>;
  userViewTypeDescription?: Maybe<Scalars['String']>;
  userViewTypeId?: Maybe<Scalars['String']>;
};

export type UserViewTypeDtoFilter = {
  AND?: Maybe<Array<UserViewTypeDtoFilter>>;
  OR?: Maybe<Array<UserViewTypeDtoFilter>>;
  userViewTypeCode?: Maybe<Scalars['String']>;
  userViewTypeCode_contains?: Maybe<Scalars['String']>;
  userViewTypeCode_ends_with?: Maybe<Scalars['String']>;
  userViewTypeCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userViewTypeCode_not?: Maybe<Scalars['String']>;
  userViewTypeCode_not_contains?: Maybe<Scalars['String']>;
  userViewTypeCode_not_ends_with?: Maybe<Scalars['String']>;
  userViewTypeCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userViewTypeCode_not_starts_with?: Maybe<Scalars['String']>;
  userViewTypeCode_starts_with?: Maybe<Scalars['String']>;
};

export type UserViewTypeDtoSort = {
  createdDatetime?: Maybe<SortOperationKind>;
};


export type ValidateBookingTransactionResponse = {
  __typename?: 'ValidateBookingTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isValid: Scalars['Boolean'];
};

export type ValidateDepositeTransactionResponse = {
  __typename?: 'ValidateDepositeTransactionResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isValid: Scalars['Boolean'];
};

export type ValidateExpireReCaptchaForPropertyPostResponse = {
  __typename?: 'ValidateExpireReCaptchaForPropertyPostResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
};

export type ValidateNumberOfPostByUserIdInput = {
  userId?: Maybe<Scalars['String']>;
};

export type ValidateNumberOfPostByUserIdResponse = {
  __typename?: 'ValidateNumberOfPostByUserIdResponse';
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  isValid: Scalars['Boolean'];
};

export type ValidateReCaptchaForPropertyPostBasketInput = {
  tokenCaptcha?: Maybe<Scalars['String']>;
};

export type ValidateReCaptchaForPropertyPostBasketResponse = {
  __typename?: 'ValidateReCaptchaForPropertyPostBasketResponse';
  calculateSize: Scalars['Int'];
  clone?: Maybe<ValidateReCaptchaForPropertyPostBasketResponse>;
  errorCode: Scalars['Int'];
  errorMessage?: Maybe<Scalars['String']>;
  errorMessageCode?: Maybe<Scalars['String']>;
  recaptchaToken?: Maybe<Scalars['String']>;
  requestId?: Maybe<Scalars['String']>;
};

export type VnpayPaymentTransferInfoDto = {
  __typename?: 'VnpayPaymentTransferInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<VnpayPaymentTransferInfoDto>;
  expectedAmount?: Maybe<Scalars['Float']>;
  paidAmount?: Maybe<Scalars['Float']>;
  paidDatetime?: Maybe<Scalars['Long']>;
  paymentUnit: PaymentUnit;
  productName?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  transactionDatetime?: Maybe<Scalars['Long']>;
  transactionPaymentStatus: TransactionPaymentStatus;
  userTransactionId?: Maybe<Scalars['String']>;
  vnpayAccountNumber?: Maybe<Scalars['String']>;
};

export type WardDto = {
  __typename?: 'WardDto';
  area?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  density?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  isActive: Scalars['Boolean'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  path?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  wardId: Scalars['Int'];
  wardName?: Maybe<Scalars['String']>;
};

export type WardDtoFilter = {
  AND?: Maybe<Array<WardDtoFilter>>;
  area?: Maybe<Scalars['String']>;
  area_contains?: Maybe<Scalars['String']>;
  area_ends_with?: Maybe<Scalars['String']>;
  area_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not?: Maybe<Scalars['String']>;
  area_not_contains?: Maybe<Scalars['String']>;
  area_not_ends_with?: Maybe<Scalars['String']>;
  area_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  area_not_starts_with?: Maybe<Scalars['String']>;
  area_starts_with?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  cityId_gt?: Maybe<Scalars['Int']>;
  cityId_gte?: Maybe<Scalars['Int']>;
  cityId_in?: Maybe<Array<Scalars['Int']>>;
  cityId_lt?: Maybe<Scalars['Int']>;
  cityId_lte?: Maybe<Scalars['Int']>;
  cityId_not?: Maybe<Scalars['Int']>;
  cityId_not_gt?: Maybe<Scalars['Int']>;
  cityId_not_gte?: Maybe<Scalars['Int']>;
  cityId_not_in?: Maybe<Array<Scalars['Int']>>;
  cityId_not_lt?: Maybe<Scalars['Int']>;
  cityId_not_lte?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  districtId_gt?: Maybe<Scalars['Int']>;
  districtId_gte?: Maybe<Scalars['Int']>;
  districtId_in?: Maybe<Array<Scalars['Int']>>;
  districtId_lt?: Maybe<Scalars['Int']>;
  districtId_lte?: Maybe<Scalars['Int']>;
  districtId_not?: Maybe<Scalars['Int']>;
  districtId_not_gt?: Maybe<Scalars['Int']>;
  districtId_not_gte?: Maybe<Scalars['Int']>;
  districtId_not_in?: Maybe<Array<Scalars['Int']>>;
  districtId_not_lt?: Maybe<Scalars['Int']>;
  districtId_not_lte?: Maybe<Scalars['Int']>;
  OR?: Maybe<Array<WardDtoFilter>>;
  wardName?: Maybe<Scalars['String']>;
  wardName_contains?: Maybe<Scalars['String']>;
  wardName_ends_with?: Maybe<Scalars['String']>;
  wardName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  wardName_not?: Maybe<Scalars['String']>;
  wardName_not_contains?: Maybe<Scalars['String']>;
  wardName_not_ends_with?: Maybe<Scalars['String']>;
  wardName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  wardName_not_starts_with?: Maybe<Scalars['String']>;
  wardName_starts_with?: Maybe<Scalars['String']>;
};

export type WardDtoSort = {
  area?: Maybe<SortOperationKind>;
  cityId?: Maybe<SortOperationKind>;
  districtId?: Maybe<SortOperationKind>;
  wardId?: Maybe<SortOperationKind>;
  wardName?: Maybe<SortOperationKind>;
};

export type WardInfoDto = {
  __typename?: 'WardInfoDto';
  area?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  density?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  isActive: Scalars['Boolean'];
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  path?: Maybe<Scalars['String']>;
  population?: Maybe<Scalars['String']>;
  wardId: Scalars['Int'];
  wardName?: Maybe<Scalars['String']>;
};

export type WorkingAreasInfo = {
  __typename?: 'WorkingAreasInfo';
  calculateSize: Scalars['Int'];
  cityId?: Maybe<Scalars['Int']>;
  cityName?: Maybe<Scalars['String']>;
  clone?: Maybe<WorkingAreasInfo>;
  districtId?: Maybe<Scalars['Int']>;
  districtName?: Maybe<Scalars['String']>;
};

export type AgentGroupInput = {
  agentGroupId?: Maybe<Scalars['String']>;
  groupSize: Scalars['Int'];
  needKpi: Scalars['Boolean'];
};

export type AgentPerformanceTrackingInput = {
  agentIds?: Maybe<Scalars['String']>;
  forCurrentPeriod: Scalars['Boolean'];
};

export type ApproveOrRejectProfilePhotoInput = {
  approvalStatusId: Scalars['Uuid'];
  rejectReasonId?: Maybe<Scalars['Uuid']>;
  userId: Scalars['Uuid'];
  userProfilePhotoId: Scalars['Uuid'];
};

export type BookingTransactionValidatePaymentInput = {
  bookingTransactionId?: Maybe<Scalars['String']>;
  paymentReturnUrl?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type C2c_Contact_Trading_DistrictDto = {
  __typename?: 'c2c_contact_trading_DistrictDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<C2c_Contact_Trading_DistrictDto>;
  districtId: Scalars['Int'];
  districtName?: Maybe<Scalars['String']>;
};

export type C2c_Contact_Trading_PaymentProgressDto = {
  __typename?: 'c2c_contact_trading_PaymentProgressDto';
  amount: Scalars['Float'];
  paymentDatetime: Scalars['Long'];
  paymentProgressId?: Maybe<Scalars['String']>;
  paymentTermFrom?: Maybe<Scalars['Long']>;
  paymentTerms?: Maybe<Scalars['String']>;
  paymentTermTo?: Maybe<Scalars['Long']>;
};

export type C2c_Contact_Trading_TotalCountPerStatusDto = {
  __typename?: 'c2c_contact_trading_TotalCountPerStatusDto';
  contactTradingStatusId?: Maybe<Scalars['String']>;
  value: Scalars['Int'];
};

export type Contracts_CustomerDto = {
  __typename?: 'contracts_CustomerDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Contracts_CustomerDto>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerFullName?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerNationalIdType: NationalIdType;
  customerPassport?: Maybe<Scalars['String']>;
  customerPassportExpireDate?: Maybe<Scalars['Long']>;
  customerPassportIssueDate?: Maybe<Scalars['Long']>;
  customerPassportIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  nationalityId?: Maybe<Scalars['String']>;
  permanentAddress?: Maybe<Scalars['String']>;
  recordVersion?: Maybe<Scalars['Int']>;
};

export type Contracts_ProjectInfoDto = {
  __typename?: 'contracts_ProjectInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Contracts_ProjectInfoDto>;
  projectCode?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
};

export type Contracts_SaleSeasonInfoDto = {
  __typename?: 'contracts_SaleSeasonInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Contracts_SaleSeasonInfoDto>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonStatusDescription?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  saleSeasonStatusName?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
};

export type Crawler_CrawlerTrackingStatusDto = {
  __typename?: 'crawler_CrawlerTrackingStatusDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Crawler_CrawlerTrackingStatusDto>;
  count?: Maybe<Scalars['Long']>;
  crawlerTrackingStatusDescription?: Maybe<Scalars['String']>;
  crawlerTrackingStatusId?: Maybe<Scalars['String']>;
};

export type CreateDocumentTemplateInput = {
  documentTypeId?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  fileUrl?: Maybe<Scalars['String']>;
};

export type CreateProfilePhotoInput = {
  photoUrl?: Maybe<Scalars['String']>;
  userId: Scalars['Uuid'];
};

export type CreateRuleInput = {
  ruleDto?: Maybe<RuleDtoInput>;
};

export type DepositeTransactionValidatePaymentInput = {
  depositeTransactionId?: Maybe<Scalars['String']>;
  paymentReturnUrl?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type GetAgentSubscriptionTransactionValidatePaymentInput = {
  paymentReturnUrl?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type Master_Data_AddressDto = {
  __typename?: 'master_data_AddressDto';
  additionalLocationInfo?: Maybe<Scalars['String']>;
  addressId: Scalars['Int'];
  addressTypeId?: Maybe<Scalars['String']>;
  block?: Maybe<Scalars['String']>;
  building?: Maybe<Scalars['String']>;
  cityId: Scalars['Int'];
  countryId: Scalars['Int'];
  directional?: Maybe<Scalars['String']>;
  districtId: Scalars['Int'];
  floor?: Maybe<Scalars['String']>;
  fullAddress?: Maybe<Scalars['String']>;
  googleEmbedCode?: Maybe<Scalars['String']>;
  googleShareLink?: Maybe<Scalars['String']>;
  imageMapUrl?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  landmark?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  propertyPostId?: Maybe<Scalars['String']>;
  room?: Maybe<Scalars['String']>;
  streetId: Scalars['Int'];
  wardId: Scalars['Int'];
};

export type Master_Data_AgentGroupInfoDto = {
  __typename?: 'master_data_AgentGroupInfoDto';
  agentGroupDescription?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupLevel?: Maybe<Scalars['Int']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentGroupStatus?: Maybe<Scalars['String']>;
  numberOfMember?: Maybe<Scalars['Int']>;
};

export type Master_Data_AgentRankingInfoDto = {
  __typename?: 'master_data_AgentRankingInfoDto';
  agentRankingDegreeOrder: Scalars['Int'];
  agentRankingDescription?: Maybe<Scalars['String']>;
  agentRankingId?: Maybe<Scalars['String']>;
  agentRankingName?: Maybe<Scalars['String']>;
  benefit?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDefault: Scalars['Boolean'];
  numberOfApprovedPosts: Scalars['Int'];
  numberOfB2CTransaction: Scalars['Int'];
  numberOfC2CTransaction: Scalars['Int'];
  numberOfReferalAgents: Scalars['Int'];
  reviewCycle: Scalars['Int'];
  rewardPoints: Scalars['Int'];
  validFromDatetime?: Maybe<Scalars['Long']>;
  validToDatetime?: Maybe<Scalars['Long']>;
};

export type Master_Data_AgentRatingDto = {
  __typename?: 'master_data_AgentRatingDto';
  agentId?: Maybe<Scalars['String']>;
  agentRatingId?: Maybe<Scalars['String']>;
  comment?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isDeleted: Scalars['Boolean'];
  rateByUserId?: Maybe<Scalars['String']>;
  stars: Scalars['Int'];
  strengthsWeaknesses?: Maybe<Scalars['String']>;
};

export type PayAgentSubscriptionInput = {
  locale?: Maybe<Scalars['String']>;
  purchaseDate?: Maybe<Scalars['Long']>;
  startDate?: Maybe<Scalars['Long']>;
  subscriptionPackageId?: Maybe<Scalars['String']>;
};

export type PayTransactionInput = {
  amount: Scalars['Float'];
  bankAccountName?: Maybe<Scalars['String']>;
  bankAccountNo?: Maybe<Scalars['String']>;
  bankId?: Maybe<Scalars['String']>;
  branchName?: Maybe<Scalars['String']>;
  cityId?: Maybe<Scalars['Int']>;
  consultantId?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  fastProductId?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  fundAccountId?: Maybe<Scalars['String']>;
  locale?: Maybe<Scalars['String']>;
  paymentCode?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  paymentUnit: PaymentUnit;
  propertyPostId?: Maybe<Scalars['String']>;
  requestNoted?: Maybe<Scalars['String']>;
  supportTypeId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionServiceType: TransactionServiceType;
  transactionType: TransactionType;
  userId?: Maybe<Scalars['String']>;
};

export type PaymentTransactionInput = {
  paymentTransactionId?: Maybe<Scalars['String']>;
  transactionType: TransactionType;
};

export type ProjectsAdditionalForSearchInput = {
  projectIds?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type PropertyPostsAdditionalForSearchInput = {
  propertyPostIds?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type Property_Posts_BackOfficeRoleDto = {
  __typename?: 'property_posts_BackOfficeRoleDto';
  applicationRoleDescription?: Maybe<Scalars['String']>;
  applicationRoleId?: Maybe<Scalars['String']>;
  backofficeRoleCode?: Maybe<Scalars['String']>;
  backofficeRoleId?: Maybe<Scalars['String']>;
  backofficeRoleName?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<Property_Posts_BackOfficeRoleDto>;
  createdByUserId?: Maybe<Scalars['String']>;
  createdDatetime: Scalars['Long'];
  shortDescription?: Maybe<Scalars['String']>;
  staffTypeIds?: Maybe<Scalars['String']>;
  staffTypes?: Maybe<Array<Maybe<BackOfficeStaffTypeDto>>>;
  stringStaffTypeDescriptions?: Maybe<Scalars['String']>;
  totalMember: Scalars['Int'];
  updatedByUserFullname?: Maybe<Scalars['String']>;
  updatedByUserId?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
  updatedDatetimeString?: Maybe<Scalars['String']>;
};

export type Property_Posts_DepositeDurationDto = {
  __typename?: 'property_posts_DepositeDurationDto';
  beginDepositeDatetime?: Maybe<Scalars['Long']>;
  bookingTransactionId?: Maybe<Scalars['String']>;
  calculateSize: Scalars['Int'];
  clone?: Maybe<Property_Posts_DepositeDurationDto>;
  endDepositeDatetime?: Maybe<Scalars['Long']>;
};

export type Property_Posts_PropertyPostApprovalStatusInfoDto = {
  __typename?: 'property_posts_PropertyPostApprovalStatusInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Property_Posts_PropertyPostApprovalStatusInfoDto>;
  isRented?: Maybe<Scalars['Boolean']>;
  propertyPostApprovalStatusDescription?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
};

export type Property_Posts_PropertyPostInfoDto = {
  __typename?: 'property_posts_PropertyPostInfoDto';
  addressId?: Maybe<Scalars['String']>;
  agentGroupRanks?: Maybe<Scalars['String']>;
  approvedBy?: Maybe<Scalars['String']>;
  approvedDatetime?: Maybe<Scalars['Long']>;
  balconyDirection?: Maybe<Scalars['String']>;
  blockCode?: Maybe<Scalars['String']>;
  blockName?: Maybe<Scalars['String']>;
  bookingFee?: Maybe<Scalars['Float']>;
  buildingArea?: Maybe<Scalars['Float']>;
  buildingLine?: Maybe<Scalars['Float']>;
  buyCommission?: Maybe<Scalars['Float']>;
  capetAreas?: Maybe<Scalars['Float']>;
  collateralizedAtBankId?: Maybe<Scalars['String']>;
  commission?: Maybe<Scalars['Float']>;
  contactEmail?: Maybe<Scalars['String']>;
  direction: Direction;
  expiredDate?: Maybe<Scalars['Long']>;
  floor?: Maybe<Scalars['String']>;
  freeTextProject?: Maybe<Scalars['String']>;
  houseDesign?: Maybe<Scalars['String']>;
  images?: Maybe<Scalars['String']>;
  internalFacility?: Maybe<Scalars['String']>;
  isBookedOutSide?: Maybe<Scalars['Boolean']>;
  isCollateralized?: Maybe<Scalars['Boolean']>;
  isFeatureProperty?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isSold?: Maybe<Scalars['Boolean']>;
  keywords?: Maybe<Scalars['String']>;
  languageIso3?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  legalInfoId?: Maybe<Scalars['String']>;
  longitude?: Maybe<Scalars['Float']>;
  nearFacility?: Maybe<Scalars['String']>;
  numberOfBathrooms?: Maybe<Scalars['Int']>;
  numberOfBedrooms?: Maybe<Scalars['Int']>;
  numberOfFloor?: Maybe<Scalars['Int']>;
  numberOfReport?: Maybe<Scalars['String']>;
  ownerId?: Maybe<Scalars['String']>;
  ownerIsAuthor?: Maybe<Scalars['Boolean']>;
  postDescription?: Maybe<Scalars['String']>;
  postTitle?: Maybe<Scalars['String']>;
  postTypeId?: Maybe<Scalars['String']>;
  price?: Maybe<Scalars['Float']>;
  priceNoVat?: Maybe<Scalars['Float']>;
  priceVat?: Maybe<Scalars['Float']>;
  projectId?: Maybe<Scalars['String']>;
  propertyCode?: Maybe<Scalars['String']>;
  propertyName?: Maybe<Scalars['String']>;
  propertyPostApprovalStatusId?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
  propertyPostStatusId?: Maybe<Scalars['String']>;
  propertySubTypeId?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  rejectedDatetime?: Maybe<Scalars['Long']>;
  rejectedReason?: Maybe<Scalars['String']>;
  saleCommission?: Maybe<Scalars['Float']>;
  sendingApprovalFrom?: Maybe<Scalars['String']>;
  seoString?: Maybe<Scalars['String']>;
  sortOrder?: Maybe<Scalars['Int']>;
  tags?: Maybe<Scalars['String']>;
  totalSiteArea?: Maybe<Scalars['Float']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
};

export type Property_Posts_SaleSeasonInfoDto = {
  __typename?: 'property_posts_SaleSeasonInfoDto';
  allTopenersCanViewProducts: Scalars['Boolean'];
  calculateSize: Scalars['Int'];
  clone?: Maybe<Property_Posts_SaleSeasonInfoDto>;
  closeDatetime?: Maybe<Scalars['Long']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  isSkipBooking: Scalars['Boolean'];
  lockBookingDatetime?: Maybe<Scalars['Long']>;
  maxBookingNumber?: Maybe<Scalars['Int']>;
  openDatetime?: Maybe<Scalars['Long']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  seasonStatusDescription?: Maybe<Scalars['String']>;
  seasonStatusName?: Maybe<Scalars['String']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
  totalOfProperties?: Maybe<Scalars['Int']>;
};

export type Property_Posts_StaffDtoFilter = {
  AND?: Maybe<Array<Property_Posts_StaffDtoFilter>>;
  createdDatetime?: Maybe<Scalars['Long']>;
  createdDatetime_gt?: Maybe<Scalars['Long']>;
  createdDatetime_gte?: Maybe<Scalars['Long']>;
  createdDatetime_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_lt?: Maybe<Scalars['Long']>;
  createdDatetime_lte?: Maybe<Scalars['Long']>;
  createdDatetime_not?: Maybe<Scalars['Long']>;
  createdDatetime_not_gt?: Maybe<Scalars['Long']>;
  createdDatetime_not_gte?: Maybe<Scalars['Long']>;
  createdDatetime_not_in?: Maybe<Array<Maybe<Scalars['Long']>>>;
  createdDatetime_not_lt?: Maybe<Scalars['Long']>;
  createdDatetime_not_lte?: Maybe<Scalars['Long']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentId_contains?: Maybe<Scalars['String']>;
  departmentId_ends_with?: Maybe<Scalars['String']>;
  departmentId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentId_not?: Maybe<Scalars['String']>;
  departmentId_not_contains?: Maybe<Scalars['String']>;
  departmentId_not_ends_with?: Maybe<Scalars['String']>;
  departmentId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  departmentId_not_starts_with?: Maybe<Scalars['String']>;
  departmentId_starts_with?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  firstName_contains?: Maybe<Scalars['String']>;
  firstName_ends_with?: Maybe<Scalars['String']>;
  firstName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not?: Maybe<Scalars['String']>;
  firstName_not_contains?: Maybe<Scalars['String']>;
  firstName_not_ends_with?: Maybe<Scalars['String']>;
  firstName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  firstName_not_starts_with?: Maybe<Scalars['String']>;
  firstName_starts_with?: Maybe<Scalars['String']>;
  fullName?: Maybe<Scalars['String']>;
  fullName_contains?: Maybe<Scalars['String']>;
  fullName_ends_with?: Maybe<Scalars['String']>;
  fullName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not?: Maybe<Scalars['String']>;
  fullName_not_contains?: Maybe<Scalars['String']>;
  fullName_not_ends_with?: Maybe<Scalars['String']>;
  fullName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  fullName_not_starts_with?: Maybe<Scalars['String']>;
  fullName_starts_with?: Maybe<Scalars['String']>;
  isGroupLeader?: Maybe<Scalars['Boolean']>;
  isGroupLeader_not?: Maybe<Scalars['Boolean']>;
  lastName?: Maybe<Scalars['String']>;
  lastName_contains?: Maybe<Scalars['String']>;
  lastName_ends_with?: Maybe<Scalars['String']>;
  lastName_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not?: Maybe<Scalars['String']>;
  lastName_not_contains?: Maybe<Scalars['String']>;
  lastName_not_ends_with?: Maybe<Scalars['String']>;
  lastName_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  lastName_not_starts_with?: Maybe<Scalars['String']>;
  lastName_starts_with?: Maybe<Scalars['String']>;
  OR?: Maybe<Array<Property_Posts_StaffDtoFilter>>;
  permanentAddress?: Maybe<Scalars['String']>;
  permanentAddress_contains?: Maybe<Scalars['String']>;
  permanentAddress_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not?: Maybe<Scalars['String']>;
  permanentAddress_not_contains?: Maybe<Scalars['String']>;
  permanentAddress_not_ends_with?: Maybe<Scalars['String']>;
  permanentAddress_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  permanentAddress_not_starts_with?: Maybe<Scalars['String']>;
  permanentAddress_starts_with?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  phoneNumber_contains?: Maybe<Scalars['String']>;
  phoneNumber_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not?: Maybe<Scalars['String']>;
  phoneNumber_not_contains?: Maybe<Scalars['String']>;
  phoneNumber_not_ends_with?: Maybe<Scalars['String']>;
  phoneNumber_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  phoneNumber_not_starts_with?: Maybe<Scalars['String']>;
  phoneNumber_starts_with?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceFrom_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_lte?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceFrom_not_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceFrom_not_lte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceTo_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_lte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_gt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_gte?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_in?: Maybe<Array<Scalars['Float']>>;
  preferPropertyPriceTo_not_lt?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo_not_lte?: Maybe<Scalars['Float']>;
  rating?: Maybe<Scalars['Float']>;
  rating_gt?: Maybe<Scalars['Float']>;
  rating_gte?: Maybe<Scalars['Float']>;
  rating_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  rating_lt?: Maybe<Scalars['Float']>;
  rating_lte?: Maybe<Scalars['Float']>;
  rating_not?: Maybe<Scalars['Float']>;
  rating_not_gt?: Maybe<Scalars['Float']>;
  rating_not_gte?: Maybe<Scalars['Float']>;
  rating_not_in?: Maybe<Array<Maybe<Scalars['Float']>>>;
  rating_not_lt?: Maybe<Scalars['Float']>;
  rating_not_lte?: Maybe<Scalars['Float']>;
  staffCode?: Maybe<Scalars['String']>;
  staffCode_contains?: Maybe<Scalars['String']>;
  staffCode_ends_with?: Maybe<Scalars['String']>;
  staffCode_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not?: Maybe<Scalars['String']>;
  staffCode_not_contains?: Maybe<Scalars['String']>;
  staffCode_not_ends_with?: Maybe<Scalars['String']>;
  staffCode_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffCode_not_starts_with?: Maybe<Scalars['String']>;
  staffCode_starts_with?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffContractTypeId_contains?: Maybe<Scalars['String']>;
  staffContractTypeId_ends_with?: Maybe<Scalars['String']>;
  staffContractTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffContractTypeId_not?: Maybe<Scalars['String']>;
  staffContractTypeId_not_contains?: Maybe<Scalars['String']>;
  staffContractTypeId_not_ends_with?: Maybe<Scalars['String']>;
  staffContractTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffContractTypeId_not_starts_with?: Maybe<Scalars['String']>;
  staffContractTypeId_starts_with?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffGroupId_contains?: Maybe<Scalars['String']>;
  staffGroupId_ends_with?: Maybe<Scalars['String']>;
  staffGroupId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupId_not?: Maybe<Scalars['String']>;
  staffGroupId_not_contains?: Maybe<Scalars['String']>;
  staffGroupId_not_ends_with?: Maybe<Scalars['String']>;
  staffGroupId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffGroupId_not_starts_with?: Maybe<Scalars['String']>;
  staffGroupId_starts_with?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffId_contains?: Maybe<Scalars['String']>;
  staffId_ends_with?: Maybe<Scalars['String']>;
  staffId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffId_not?: Maybe<Scalars['String']>;
  staffId_not_contains?: Maybe<Scalars['String']>;
  staffId_not_ends_with?: Maybe<Scalars['String']>;
  staffId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffId_not_starts_with?: Maybe<Scalars['String']>;
  staffId_starts_with?: Maybe<Scalars['String']>;
  staffPositionId?: Maybe<Scalars['String']>;
  staffPositionId_contains?: Maybe<Scalars['String']>;
  staffPositionId_ends_with?: Maybe<Scalars['String']>;
  staffPositionId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffPositionId_not?: Maybe<Scalars['String']>;
  staffPositionId_not_contains?: Maybe<Scalars['String']>;
  staffPositionId_not_ends_with?: Maybe<Scalars['String']>;
  staffPositionId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffPositionId_not_starts_with?: Maybe<Scalars['String']>;
  staffPositionId_starts_with?: Maybe<Scalars['String']>;
  staffRankingId?: Maybe<Scalars['String']>;
  staffRankingId_contains?: Maybe<Scalars['String']>;
  staffRankingId_ends_with?: Maybe<Scalars['String']>;
  staffRankingId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffRankingId_not?: Maybe<Scalars['String']>;
  staffRankingId_not_contains?: Maybe<Scalars['String']>;
  staffRankingId_not_ends_with?: Maybe<Scalars['String']>;
  staffRankingId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffRankingId_not_starts_with?: Maybe<Scalars['String']>;
  staffRankingId_starts_with?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffStatusId_contains?: Maybe<Scalars['String']>;
  staffStatusId_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not?: Maybe<Scalars['String']>;
  staffStatusId_not_contains?: Maybe<Scalars['String']>;
  staffStatusId_not_ends_with?: Maybe<Scalars['String']>;
  staffStatusId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffStatusId_not_starts_with?: Maybe<Scalars['String']>;
  staffStatusId_starts_with?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeId_contains?: Maybe<Scalars['String']>;
  staffTypeId_ends_with?: Maybe<Scalars['String']>;
  staffTypeId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeId_not?: Maybe<Scalars['String']>;
  staffTypeId_not_contains?: Maybe<Scalars['String']>;
  staffTypeId_not_ends_with?: Maybe<Scalars['String']>;
  staffTypeId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  staffTypeId_not_starts_with?: Maybe<Scalars['String']>;
  staffTypeId_starts_with?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  userId_contains?: Maybe<Scalars['String']>;
  userId_ends_with?: Maybe<Scalars['String']>;
  userId_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userId_not?: Maybe<Scalars['String']>;
  userId_not_contains?: Maybe<Scalars['String']>;
  userId_not_ends_with?: Maybe<Scalars['String']>;
  userId_not_in?: Maybe<Array<Maybe<Scalars['String']>>>;
  userId_not_starts_with?: Maybe<Scalars['String']>;
  userId_starts_with?: Maybe<Scalars['String']>;
};

export type Property_Posts_UnitOfMeasureInfoDto = {
  __typename?: 'property_posts_UnitOfMeasureInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Property_Posts_UnitOfMeasureInfoDto>;
  isRound: Scalars['Boolean'];
  multiplyWithBaseUnit?: Maybe<Scalars['Int']>;
  numberOfDecimal?: Maybe<Scalars['Int']>;
  unitOfMeasureCode?: Maybe<Scalars['String']>;
  unitOfMeasureId?: Maybe<Scalars['String']>;
  unitOfMeasureName?: Maybe<Scalars['String']>;
};

export type RequestPrintContractInput = {
  depositTransactionId?: Maybe<Scalars['String']>;
};

export type RequestUserUpdateProfilePhotoInput = {
  userId: Scalars['Uuid'];
};

export type Sale_PolicyTypeDto = {
  __typename?: 'sale_PolicyTypeDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Sale_PolicyTypeDto>;
  policyTypeDescription?: Maybe<Scalars['String']>;
  policyTypeId?: Maybe<Scalars['String']>;
  policyTypeName?: Maybe<Scalars['String']>;
  sortOrder: Scalars['Int'];
};

export type Sale_ProjectInfoDto = {
  __typename?: 'sale_ProjectInfoDto';
  detailPath?: Maybe<Scalars['String']>;
  fastProjectId?: Maybe<Scalars['String']>;
  featurePhotos?: Maybe<Scalars['String']>;
  investorOwnerName?: Maybe<Scalars['String']>;
  lastedViewTime?: Maybe<Scalars['Long']>;
  projectAddress?: Maybe<ProjectAddressInfoDto>;
  projectCode?: Maybe<Scalars['String']>;
  projectId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
  projectStatusDescription?: Maybe<Scalars['String']>;
  projectStatusId?: Maybe<Scalars['String']>;
  projectStatusName?: Maybe<Scalars['String']>;
  propertyTypeDescription?: Maybe<Scalars['String']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  propertyTypeName?: Maybe<Scalars['String']>;
};

export type Sale_SaleSeasonInfoDto = {
  __typename?: 'sale_SaleSeasonInfoDto';
  allTopenersCanViewProducts: Scalars['Boolean'];
  calculateSize: Scalars['Int'];
  clone?: Maybe<Sale_SaleSeasonInfoDto>;
  closeDatetime?: Maybe<Scalars['Long']>;
  contractSigningPeriod?: Maybe<Scalars['Int']>;
  endBookingDatetime?: Maybe<Scalars['Long']>;
  genericBasketDatetime?: Maybe<Scalars['Long']>;
  isSkipBooking: Scalars['Boolean'];
  lockBookingDatetime?: Maybe<Scalars['Long']>;
  maxBookingNumber?: Maybe<Scalars['Int']>;
  numberOfTimesCanUpdateCustomer: Scalars['Int'];
  openDatetime?: Maybe<Scalars['Long']>;
  saleSeasonId?: Maybe<Scalars['String']>;
  saleSeasonStatusId?: Maybe<Scalars['String']>;
  seasonName?: Maybe<Scalars['String']>;
  seasonStatusDescription?: Maybe<Scalars['String']>;
  seasonStatusName?: Maybe<Scalars['String']>;
  startBookingDatetime?: Maybe<Scalars['Long']>;
  totalOfProperties?: Maybe<Scalars['Int']>;
};

export type SimpleTransactionDetailInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
  transactionType: TransactionType;
};

export type Support_Requests_StaffInfoDto = {
  __typename?: 'support_requests_StaffInfoDto';
  competencyId?: Maybe<Scalars['String']>;
  departmentDescription?: Maybe<Scalars['String']>;
  departmentId?: Maybe<Scalars['String']>;
  departmentName?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  isActive: Scalars['Boolean'];
  isGroupLeader: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  numberOfRequestInProgress?: Maybe<Scalars['Int']>;
  numberOfRequestPending?: Maybe<Scalars['Int']>;
  permanentAddressId?: Maybe<Scalars['String']>;
  positionId?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Int']>;
  staffCode?: Maybe<Scalars['String']>;
  staffContractTypeId?: Maybe<Scalars['String']>;
  staffGroupId?: Maybe<Scalars['String']>;
  staffId?: Maybe<Scalars['String']>;
  staffRankId?: Maybe<Scalars['String']>;
  staffStatusId?: Maybe<Scalars['String']>;
  staffTypeId?: Maybe<Scalars['String']>;
  staffTypeName?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type Support_Service_SupportServiceConfigurationDto = {
  __typename?: 'support_service_SupportServiceConfigurationDto';
  businessCategoryTypeName?: Maybe<Scalars['String']>;
  isTopenerService: Scalars['Boolean'];
  price: Scalars['Decimal'];
  processSourceName?: Maybe<Scalars['String']>;
  selectableStepsDescription?: Maybe<Scalars['String']>;
  serviceSelectableStepConfigDtos?: Maybe<Array<Maybe<ServiceSelectableStepConfigDto>>>;
  supportServiceDescription?: Maybe<Scalars['String']>;
  supportServiceId?: Maybe<Scalars['String']>;
  supportServiceName?: Maybe<Scalars['String']>;
  updatedDatetime?: Maybe<Scalars['Long']>;
};

export type Support_Service_UserCommonInfoDto = {
  __typename?: 'support_service_UserCommonInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Support_Service_UserCommonInfoDto>;
  fullName?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  profilePhoto?: Maybe<Scalars['String']>;
  profilePhotos?: Maybe<Scalars['String']>;
  userId?: Maybe<Scalars['String']>;
};

export type TransactionPaymentValidateInput = {
  paymentReturnUrl?: Maybe<Scalars['String']>;
  transactionId?: Maybe<Scalars['String']>;
};

export type Transaction_AgentDto = {
  __typename?: 'transaction_AgentDto';
  addressId?: Maybe<Scalars['String']>;
  agentCode?: Maybe<Scalars['String']>;
  agentGroupId?: Maybe<Scalars['String']>;
  agentGroupName?: Maybe<Scalars['String']>;
  agentId?: Maybe<Scalars['String']>;
  agentRank?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  firstName?: Maybe<Scalars['String']>;
  homeAddress?: Maybe<Scalars['String']>;
  instruction?: Maybe<Scalars['String']>;
  isAgentLeader: Scalars['Boolean'];
  isInitialAccount: Scalars['Boolean'];
  lastName?: Maybe<Scalars['String']>;
  nationalId?: Maybe<Scalars['String']>;
  phoneNumber?: Maybe<Scalars['String']>;
  preferPropertyPriceFrom?: Maybe<Scalars['Float']>;
  preferPropertyPriceTo?: Maybe<Scalars['Float']>;
  preferPropertyTypes?: Maybe<Scalars['String']>;
  rating?: Maybe<Scalars['Float']>;
  workingAreas?: Maybe<Scalars['String']>;
};

export type Transaction_CustomerInfoDto = {
  __typename?: 'transaction_CustomerInfoDto';
  calculateSize: Scalars['Int'];
  clone?: Maybe<Transaction_CustomerInfoDto>;
  customerContactAddress?: Maybe<Scalars['String']>;
  customerDob?: Maybe<Scalars['String']>;
  customerEmail?: Maybe<Scalars['String']>;
  customerFirstName?: Maybe<Scalars['String']>;
  customerId?: Maybe<Scalars['String']>;
  customerLastName?: Maybe<Scalars['String']>;
  customerNationalId?: Maybe<Scalars['String']>;
  customerNationalIdIssueDate?: Maybe<Scalars['Long']>;
  customerNationalIdIssuePlace?: Maybe<Scalars['String']>;
  customerPhone?: Maybe<Scalars['String']>;
  gender: Gender;
  isActive: Scalars['Boolean'];
  nationalIdType: NationalIdType;
  permanentAddress?: Maybe<Scalars['String']>;
};

export type UpdateConfigPaymentMethodStatusInput = {
  isActive: Scalars['Boolean'];
  notes?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  transactionType: TransactionType;
};

export type UpdateDiscountInfoInput = {
  anotherDiscount?: Maybe<DiscountDetailInfoDtoInput>;
  contractId?: Maybe<Scalars['String']>;
  depositTransactionId?: Maybe<Scalars['String']>;
  firstPayment?: Maybe<Scalars['Float']>;
  overScheduledPayment?: Maybe<DiscountDetailInfoDtoInput>;
  priceAfterDiscount?: Maybe<Scalars['Float']>;
  recordVersion?: Maybe<Scalars['Int']>;
  saleDiscount?: Maybe<DiscountDetailInfoDtoInput>;
};

export type UpdateDocumentTemplateInput = {
  documentTemplateId?: Maybe<Scalars['String']>;
  fileName?: Maybe<Scalars['String']>;
  fileUrl?: Maybe<Scalars['String']>;
};

export type UpdateRuleInput = {
  ruleDto?: Maybe<RuleDtoInput>;
};

export type UpdateTransactionConfigPaymentInput = {
  isActive: Scalars['Boolean'];
  notes?: Maybe<Scalars['String']>;
  paymentMethod: PaymentMethod;
  paymentMethodOrder: Scalars['Int'];
  paymentUnitConfigJson?: Maybe<Scalars['String']>;
  transactionType: TransactionType;
};

export type UserTransactionInput = {
  propertyPostId?: Maybe<Scalars['String']>;
  transactionType: TransactionType;
  userTransactionId?: Maybe<Scalars['String']>;
};

export type CitiesAndDistrictByFilterQueryVariables = Exact<{
  cityFilter?: Maybe<CityDtoFilter>;
  districtFilter?: Maybe<DistrictDtoFilter>;
}>;


export type CitiesAndDistrictByFilterQuery = (
  { __typename?: 'Query' }
  & { cities?: Maybe<(
    { __typename?: 'OffsetPagingOfCityDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'CityDto' }
      & Pick<CityDto, 'cityId' | 'cityName'>
    )>>> }
  )>, districts?: Maybe<(
    { __typename?: 'OffsetPagingOfDistrictDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'DistrictDto' }
      & Pick<DistrictDto, 'districtId' | 'districtName'>
    )>>> }
  )> }
);

export type GetAddressByIdQueryVariables = Exact<{
  wardId?: Maybe<Scalars['Int']>;
  districtId?: Maybe<Scalars['Int']>;
  cityId?: Maybe<Scalars['Int']>;
}>;


export type GetAddressByIdQuery = (
  { __typename?: 'Query' }
  & { wardById?: Maybe<(
    { __typename?: 'WardDto' }
    & Pick<WardDto, 'wardName'>
  )>, districtById?: Maybe<(
    { __typename?: 'DistrictDto' }
    & Pick<DistrictDto, 'districtName'>
  )>, cityById?: Maybe<(
    { __typename?: 'CityDto' }
    & Pick<CityDto, 'cityName'>
  )> }
);

export type GetAllCitiesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAllCitiesQuery = (
  { __typename?: 'Query' }
  & { cities?: Maybe<(
    { __typename?: 'OffsetPagingOfCityDto' }
    & Pick<OffsetPagingOfCityDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'CityDto' }
      & Pick<CityDto, 'cityId' | 'cityName'>
    )>>> }
  )> }
);

export type GetDistrictsByCityIdQueryVariables = Exact<{
  where?: Maybe<DistrictDtoFilter>;
}>;


export type GetDistrictsByCityIdQuery = (
  { __typename?: 'Query' }
  & { districts?: Maybe<(
    { __typename?: 'OffsetPagingOfDistrictDto' }
    & Pick<OffsetPagingOfDistrictDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'DistrictDto' }
      & Pick<DistrictDto, 'districtId' | 'districtName'>
    )>>> }
  )> }
);

export type GetStreetByCityAndDistrictQueryVariables = Exact<{
  where?: Maybe<StreetDtoFilter>;
}>;


export type GetStreetByCityAndDistrictQuery = (
  { __typename?: 'Query' }
  & { streets?: Maybe<(
    { __typename?: 'OffsetPagingOfStreetDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'StreetDto' }
      & Pick<StreetDto, 'streetId' | 'streetName'>
    )>>> }
  )> }
);

export type GetWardByDistrictIdQueryVariables = Exact<{
  where?: Maybe<WardDtoFilter>;
}>;


export type GetWardByDistrictIdQuery = (
  { __typename?: 'Query' }
  & { wards?: Maybe<(
    { __typename?: 'OffsetPagingOfWardDto' }
    & Pick<OffsetPagingOfWardDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'WardDto' }
      & Pick<WardDto, 'wardId' | 'wardName'>
    )>>> }
  )> }
);

export type GetAgentDetailQueryVariables = Exact<{
  agentId: Scalars['Uuid'];
}>;


export type GetAgentDetailQuery = (
  { __typename?: 'Query' }
  & { agentById?: Maybe<(
    { __typename?: 'AgentDto' }
    & Pick<AgentDto, 'agentId' | 'instruction' | 'permanentAddress' | 'nationalId' | 'agentCode' | 'firstName' | 'lastName' | 'email' | 'phoneNumber' | 'agentGroupId' | 'isInitialAccount' | 'rating' | 'isAgentLeader' | 'initialAccountCode' | 'preferPropertyTypes' | 'preferPropertyPriceFrom' | 'preferPropertyPriceTo' | 'workingAreas' | 'profilePhoto' | 'imageSizes' | 'agentRankName' | 'agentRankingDescription' | 'agentGroupName' | 'agentGroupDescription' | 'updatedDatetime' | 'createdDatetime' | 'referralCode' | 'contactAddress' | 'nationalIdType' | 'nationalIdIssuePlace' | 'nationalIdIssueDate' | 'topenerServiceTypes' | 'propertyAllocates' | 'gender' | 'isVerifyProfilePhoto' | 'isCompletedProfile'>
    & { referralUser?: Maybe<(
      { __typename?: 'SimpleUserInfoDto' }
      & Pick<SimpleUserInfoDto, 'fullName' | 'userId'>
    )> }
  )> }
);

export type GetAgentDetailForPublicQueryVariables = Exact<{
  agentId: Scalars['Uuid'];
}>;


export type GetAgentDetailForPublicQuery = (
  { __typename?: 'Query' }
  & { agentByIdForPublic?: Maybe<(
    { __typename?: 'AgentForPublicDto' }
    & Pick<AgentForPublicDto, 'agentId' | 'instruction' | 'nationalId' | 'agentCode' | 'firstName' | 'lastName' | 'permanentAddress' | 'agentGroupId' | 'email' | 'phoneNumber' | 'agentGroupName' | 'isInitialAccount' | 'agentRankName' | 'agentRankingDescription' | 'agentGroupDescription' | 'userStatus' | 'rating' | 'isAgentLeader' | 'preferPropertyTypes' | 'preferPropertyPriceFrom' | 'preferPropertyPriceTo' | 'workingAreas' | 'profilePhoto' | 'topenerServiceTypes'>
    & { referralUser?: Maybe<(
      { __typename?: 'SimpleUserInfoDto' }
      & Pick<SimpleUserInfoDto, 'fullName' | 'userId'>
    )> }
  )> }
);

export type CheckContactTradingRequestIsRatedQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type CheckContactTradingRequestIsRatedQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'checkContactTradingRequestIsRated'>
);

export type CheckCurrentUserIsSaleAgentQueryVariables = Exact<{
  input: CheckCurrentUserIsSaleAgentInput;
}>;


export type CheckCurrentUserIsSaleAgentQuery = (
  { __typename?: 'Query' }
  & { checkCurrentUserIsSaleAgent: (
    { __typename?: 'CheckCurrentUserIsSaleAgentResponse' }
    & Pick<CheckCurrentUserIsSaleAgentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isSaleAgent'>
  ) }
);

export type CreateAgentMutationVariables = Exact<{
  input: CreateAgentInput;
}>;


export type CreateAgentMutation = (
  { __typename?: 'Mutation' }
  & { createNewAgent: (
    { __typename?: 'CreateAgentResponse' }
    & Pick<CreateAgentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetAgentGroupInfoByIdQueryVariables = Exact<{
  input?: Maybe<AgentGroupInput>;
}>;


export type GetAgentGroupInfoByIdQuery = (
  { __typename?: 'Query' }
  & { agentGroupInfoById?: Maybe<(
    { __typename?: 'AgentGroupInfoDto' }
    & Pick<AgentGroupInfoDto, 'numberOfMembersInAllGroups'>
    & { parentAgentGroup?: Maybe<(
      { __typename?: 'AgentGroupAndMembersInfoDto' }
      & Pick<AgentGroupAndMembersInfoDto, 'familyGroupNames' | 'agentGroupId' | 'agentGroupName' | 'agentGroupDescription' | 'numberOfMembers' | 'needViewMore'>
      & { allMembers?: Maybe<Array<Maybe<(
        { __typename?: 'AgentProfileDto' }
        & Pick<AgentProfileDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'profilePhoto' | 'isAgentLeader' | 'agentRankName' | 'agentRankingDescription'>
      )>>> }
    )>, childAgentGroups?: Maybe<Array<Maybe<(
      { __typename?: 'AgentGroupAndMembersInfoDto' }
      & Pick<AgentGroupAndMembersInfoDto, 'familyGroupNames' | 'agentGroupId' | 'agentGroupName' | 'agentGroupDescription' | 'numberOfMembers' | 'needViewMore'>
      & { allMembers?: Maybe<Array<Maybe<(
        { __typename?: 'AgentProfileDto' }
        & Pick<AgentProfileDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'profilePhoto' | 'isAgentLeader' | 'agentRankName' | 'agentRankingDescription'>
      )>>> }
    )>>> }
  )> }
);

export type GetAgentGroupsQueryVariables = Exact<{
  where?: Maybe<AgentGroupDtoFilter>;
}>;


export type GetAgentGroupsQuery = (
  { __typename?: 'Query' }
  & { agentGroups?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentGroupDto' }
    & Pick<OffsetPagingOfAgentGroupDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentGroupDto' }
      & Pick<AgentGroupDto, 'agentGroupId' | 'agentGroupName' | 'agentGroupDescription' | 'agentGroupLevel'>
    )>>> }
  )> }
);

export type GetAgentPerformanceTrackingsByAgentIdQueryVariables = Exact<{
  input: AgentPerformanceTrackingInput;
}>;


export type GetAgentPerformanceTrackingsByAgentIdQuery = (
  { __typename?: 'Query' }
  & { agentPerformanceTrackingsByAgentIds?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentPerformanceTrackingDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentPerformanceTrackingDto' }
      & Pick<AgentPerformanceTrackingDto, 'oldAgentRankingId' | 'oldAgentRankingName' | 'oldAgentRankingDescription' | 'reviewFromDate' | 'reviewToDate' | 'numberApprovedPosts' | 'numberOfReferalAgents' | 'numberOfB2CTransaction' | 'numberOfC2CTransaction' | 'targetAgentRankingId' | 'targetAgentRankingName' | 'targetAgentRankingDescription' | 'targetNumberApprovedPosts' | 'targetNumberOfReferalAgents' | 'targetNumberOfB2CTransaction' | 'targetNumberOfC2CTransaction' | 'meetTargetNumberApprovedPosts' | 'meetTargetNumberOfReferalAgents' | 'meetTargetNumberOfB2CTransaction' | 'meetTargetNumberOfC2CTransaction'>
    )>>> }
  )> }
);

export type GetAgentPerformanceTrackingsByAgentIdCurentQueryVariables = Exact<{
  input: AgentPerformanceTrackingInput;
}>;


export type GetAgentPerformanceTrackingsByAgentIdCurentQuery = (
  { __typename?: 'Query' }
  & { agentPerformanceTrackingsByAgentIds?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentPerformanceTrackingDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentPerformanceTrackingDto' }
      & Pick<AgentPerformanceTrackingDto, 'newAgentRankingId' | 'newAgentRankingName' | 'newAgentRankingDescription' | 'newAgentRankingDegreeOrder' | 'reviewFromDate' | 'reviewToDate' | 'numberApprovedPosts' | 'numberOfReferalAgents' | 'numberOfB2CTransaction' | 'numberOfC2CTransaction' | 'targetAgentRankingId' | 'targetAgentRankingName' | 'targetAgentRankingDescription' | 'targetNumberApprovedPosts' | 'targetNumberOfReferalAgents' | 'targetNumberOfB2CTransaction' | 'targetNumberOfC2CTransaction' | 'meetTargetNumberApprovedPosts' | 'meetTargetNumberOfReferalAgents' | 'meetTargetNumberOfB2CTransaction' | 'meetTargetNumberOfC2CTransaction'>
    )>>> }
  )> }
);

export type GetAgentRankingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAgentRankingsQuery = (
  { __typename?: 'Query' }
  & { agentRankings?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentRankingDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentRankingDto' }
      & Pick<AgentRankingDto, 'agentRankingId' | 'agentRankingName' | 'agentRankingDescription' | 'agentRankingDegreeOrder' | 'numberOfApprovedPosts' | 'numberOfReferalAgents' | 'numberOfB2CTransaction' | 'numberOfC2CTransaction'>
    )>>> }
  )> }
);

export type GetAgentsQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  agentGroupId?: Maybe<Scalars['Uuid']>;
  order_by?: Maybe<AgentDtoSort>;
}>;


export type GetAgentsQuery = (
  { __typename?: 'Query' }
  & { agentGroupMembersByAgentGroupId?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentDto' }
      & Pick<AgentDto, 'agentId' | 'agentGroupId' | 'instruction' | 'permanentAddress' | 'nationalId' | 'isAgentLeader' | 'agentCode' | 'firstName' | 'lastName' | 'email' | 'phoneNumber' | 'agentRankName' | 'agentRankingDescription' | 'profilePhoto'>
    )>>> }
  )> }
);

export type GetBuyerInfoByCurrentUserForTransactionQueryVariables = Exact<{ [key: string]: never; }>;


export type GetBuyerInfoByCurrentUserForTransactionQuery = (
  { __typename?: 'Query' }
  & { getBuyerInfoByCurrentUserForTransaction?: Maybe<(
    { __typename?: 'GetBuyerInfoByCurrentUserForTransactionResponse' }
    & Pick<GetBuyerInfoByCurrentUserForTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { buyerInfoDto?: Maybe<(
      { __typename?: 'BuyerInfoDto' }
      & Pick<BuyerInfoDto, 'firstName' | 'lastName' | 'phoneNumber' | 'email' | 'gender' | 'nationalId' | 'permanentAddress' | 'contactAddress' | 'nationalIdType' | 'nationalIdIssuePlace' | 'nationalIdIssueDate'>
      & { dob?: Maybe<(
        { __typename?: 'Timestamp' }
        & Pick<Timestamp, 'toDateTime'>
      )> }
    )> }
  )> }
);

export type GetConsultantsForC2CTransactionCursorQueryVariables = Exact<{
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
  input: GetConsultantsForC2CTransactionInput;
}>;


export type GetConsultantsForC2CTransactionCursorQuery = (
  { __typename?: 'Query' }
  & { getConsultantsForC2CTransactionCursor?: Maybe<(
    { __typename?: 'StaffDtoConnection' }
    & Pick<StaffDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'StaffDtoEdge' }
      & Pick<StaffDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'StaffDto' }
        & Pick<StaffDto, 'userId' | 'staffId' | 'staffCode' | 'profilePhoto' | 'fullName' | 'phoneNumber' | 'staffGroupId' | 'staffGroupDescription' | 'rating' | 'isGroupLeader'>
      )> }
    )>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ) }
  )> }
);

export type GetConsultantsSuggestionC2CQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  input?: Maybe<GetConsultantsSuggestionC2CRequestInput>;
}>;


export type GetConsultantsSuggestionC2CQuery = (
  { __typename?: 'Query' }
  & { consultantsSuggestionC2C?: Maybe<(
    { __typename?: 'OffsetPagingOfStaffDto' }
    & Pick<OffsetPagingOfStaffDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'StaffDto' }
      & Pick<StaffDto, 'userId' | 'userName' | 'fullName' | 'staffId' | 'staffCode' | 'isGroupLeader' | 'profilePhoto' | 'staffRankingId' | 'rating' | 'staffGroupDescription' | 'staffGroupId'>
    )>>> }
  )> }
);

export type GetContactTradingRatingByIdQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type GetContactTradingRatingByIdQuery = (
  { __typename?: 'Query' }
  & { contactTradingRatingById?: Maybe<(
    { __typename?: 'ContactTradingRatingDto' }
    & Pick<ContactTradingRatingDto, 'postTitle' | 'agentId' | 'agentFirstName' | 'agentLastName' | 'agentImage' | 'agentRating' | 'isShowingBuyer' | 'staffRating'>
  )> }
);

export type GetDefaultAgentGroupQueryVariables = Exact<{ [key: string]: never; }>;


export type GetDefaultAgentGroupQuery = (
  { __typename?: 'Query' }
  & { defaultAgentGroup?: Maybe<(
    { __typename?: 'AgentGroupDto' }
    & Pick<AgentGroupDto, 'agentGroupId' | 'agentGroupName' | 'agentGroupStatus' | 'agentGroupDescription' | 'agentGroupLevel' | 'parentAgentGroupId'>
  )> }
);

export type GetGuildAgentRankingsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGuildAgentRankingsQuery = (
  { __typename?: 'Query' }
  & { agentRankings?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentRankingDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentRankingDto' }
      & Pick<AgentRankingDto, 'agentRankingName' | 'agentRankingDescription' | 'benefit'>
    )>>> }
  )> }
);

export type GetShortAgentByIdQueryVariables = Exact<{
  agentId: Scalars['Uuid'];
}>;


export type GetShortAgentByIdQuery = (
  { __typename?: 'Query' }
  & { agentByIdForPublic?: Maybe<(
    { __typename?: 'AgentForPublicDto' }
    & Pick<AgentForPublicDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'email' | 'phoneNumber' | 'rating' | 'sellingTotal' | 'isAgentLeader' | 'preferPropertyTypes' | 'preferPropertyPriceFrom' | 'preferPropertyPriceTo' | 'workingAreas' | 'profilePhoto' | 'agentRankName' | 'agentRankingDescription' | 'agentGroupName' | 'agentGroupDescription'>
  )> }
);

export type GetSupportedConsultantsC2CQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type GetSupportedConsultantsC2CQuery = (
  { __typename?: 'Query' }
  & { consultantsSupportedC2C?: Maybe<(
    { __typename?: 'OffsetPagingOfStaffDto' }
    & Pick<OffsetPagingOfStaffDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'StaffDto' }
      & Pick<StaffDto, 'userId' | 'userName' | 'fullName' | 'staffId' | 'staffCode' | 'isGroupLeader' | 'profilePhoto' | 'staffRankingId' | 'rating' | 'staffGroupId' | 'staffGroupDescription' | 'supportedDatetime'>
    )>>> }
  )> }
);

export type GetTopenerOfMonthQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<TopenerOfMonthDtoFilter>;
}>;


export type GetTopenerOfMonthQuery = (
  { __typename?: 'Query' }
  & { topenerOfMonth?: Maybe<(
    { __typename: 'OffsetPagingOfTopenerOfMonthDto' }
    & Pick<OffsetPagingOfTopenerOfMonthDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TopenerOfMonthDto' }
      & Pick<TopenerOfMonthDto, 'agentId' | 'fullName' | 'groupName' | 'rankingName' | 'sellingTotal' | 'phoneNumber' | 'email' | 'rating' | 'profilePhoto' | 'profilePhotos' | 'groupNameDescription'>
      & { propertyPostInfoDtos?: Maybe<Array<Maybe<(
        { __typename?: 'SearchPropertyPostInfoDto' }
        & Pick<SearchPropertyPostInfoDto, 'addressId' | 'buildingArea' | 'commission' | 'saleCommissionCurrencyUnitId' | 'createdByUserId' | 'images' | 'isFollowed' | 'numberOfBathrooms' | 'numberOfBedrooms' | 'direction' | 'postDescription' | 'postTitle' | 'postTypeId' | 'price' | 'projectId' | 'propertyCode' | 'propertyName' | 'propertyPostApprovalStatusId' | 'propertyPostId' | 'propertySubTypeId' | 'propertyTypeId' | 'totalFollower' | 'totalShare' | 'unitOfMeasureId'>
        & { propertyAddress?: Maybe<(
          { __typename?: 'PropertyAddressInfo' }
          & Pick<PropertyAddressInfo, 'additionalLocationInfo' | 'block' | 'building' | 'calculateSize' | 'cityId' | 'cityName' | 'countryId' | 'countryName' | 'districtId' | 'districtName' | 'floor' | 'googleEmbedCode' | 'googleShareLink' | 'homeAddress' | 'imageMapUrl' | 'landmark' | 'latitude' | 'longitude' | 'propertyAddressId' | 'room' | 'streetName' | 'wardId' | 'wardName'>
        )> }
      )>>> }
    )>>> }
  )> }
);

export type UpdateAgentMutationVariables = Exact<{
  input: UpdateAgentInput;
}>;


export type UpdateAgentMutation = (
  { __typename?: 'Mutation' }
  & { updateAgent: (
    { __typename?: 'UpdateAgentResponse' }
    & Pick<UpdateAgentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateAgentRatingForSupportRequestMutationVariables = Exact<{
  input: UpdateAgentRatingForSupportRequestInput;
}>;


export type UpdateAgentRatingForSupportRequestMutation = (
  { __typename?: 'Mutation' }
  & { updateAgentRatingForSupportRequest: (
    { __typename?: 'UpdateAgentRatingForSupportRequestResponse' }
    & Pick<UpdateAgentRatingForSupportRequestResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type BidvPayBookingTransactionMutationVariables = Exact<{
  payBookingTransactionInput: PayBookingTransactionInput;
}>;


export type BidvPayBookingTransactionMutation = (
  { __typename?: 'Mutation' }
  & { bidvPayBookingTransaction: (
    { __typename?: 'PayBookingTransactionResponse' }
    & Pick<PayBookingTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'linkPaymentUrl' | 'returnUrl' | 'ipnUrl' | 'disablePayment' | 'transactionId'>
  ) }
);

export type BookingToDepositeConfirmationDataQueryVariables = Exact<{
  transactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
}>;


export type BookingToDepositeConfirmationDataQuery = (
  { __typename?: 'Query' }
  & { bookingTransactionDetail?: Maybe<(
    { __typename?: 'TransactionDetailDto' }
    & Pick<TransactionDetailDto, 'bookingTransactionId' | 'transactionAmount'>
    & { saleAgentInfo?: Maybe<(
      { __typename?: 'AgentInfoDto' }
      & Pick<AgentInfoDto, 'agentId'>
    )>, customerInfo?: Maybe<(
      { __typename?: 'transaction_CustomerInfoDto' }
      & Pick<Transaction_CustomerInfoDto, 'customerId' | 'customerFirstName' | 'customerLastName' | 'customerPhone' | 'customerEmail'>
    )>, propertyPostInfo?: Maybe<(
      { __typename?: 'PropertyPostInfoDto' }
      & Pick<PropertyPostInfoDto, 'blockCode' | 'blockName' | 'numberOfFloor' | 'floor' | 'propertyCode' | 'propertyName' | 'propertyPostId' | 'propertyTypeName' | 'price'>
    )>, consultantInfo?: Maybe<(
      { __typename?: 'ConsultantInfoDto' }
      & Pick<ConsultantInfoDto, 'staffId' | 'staffCode' | 'fullName' | 'profilePhoto' | 'email' | 'rating' | 'phoneNumber'>
    )> }
  )> }
);

export type FastPayBookingTransactionMutationVariables = Exact<{
  payBookingTransactionInput: PayBookingTransactionInput;
}>;


export type FastPayBookingTransactionMutation = (
  { __typename?: 'Mutation' }
  & { fastPayBookingTransaction: (
    { __typename?: 'PayBookingTransactionResponse' }
    & Pick<PayBookingTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'linkPaymentUrl' | 'returnUrl' | 'ipnUrl' | 'disablePayment' | 'transactionId'>
  ) }
);

export type GetAgentForTransactionQueryVariables = Exact<{
  request: GetAgentForTransactionInput;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type GetAgentForTransactionQuery = (
  { __typename?: 'Query' }
  & { agentForTransaction?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentDto' }
    & Pick<OffsetPagingOfAgentDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentDto' }
      & Pick<AgentDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'agentRankName' | 'agentRankingDescription' | 'rating' | 'profilePhoto'>
    )>>> }
  )> }
);

export type GetBookingDetailValidatePaymentQueryVariables = Exact<{
  transactionId?: Maybe<Scalars['String']>;
  paymentReturnUrl?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
}>;


export type GetBookingDetailValidatePaymentQuery = (
  { __typename?: 'Query' }
  & { bookingTransactionValidatePayment: (
    { __typename?: 'GetTransactionValidatePaymentResponse' }
    & Pick<GetTransactionValidatePaymentResponse, 'errorCode' | 'errorMessage' | 'isValid'>
  ) }
);

export type GetDiscountInfoForFoByDepositQueryVariables = Exact<{
  b2CDepositTransactionId: Scalars['Uuid'];
}>;


export type GetDiscountInfoForFoByDepositQuery = (
  { __typename?: 'Query' }
  & { getDiscountInfoForFoByDeposit?: Maybe<(
    { __typename?: 'GetDiscountInfoByDepositResponse' }
    & Pick<GetDiscountInfoByDepositResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { discountDetailDto?: Maybe<(
      { __typename?: 'DiscountDetailDto' }
      & Pick<DiscountDetailDto, 'issuedPrice' | 'priceAfterDiscount'>
    )> }
  )> }
);

export type GetPolicyByPostIdForTransactionQueryVariables = Exact<{
  propertyPostId?: Maybe<Scalars['String']>;
  isBooking: Scalars['Boolean'];
}>;


export type GetPolicyByPostIdForTransactionQuery = (
  { __typename?: 'Query' }
  & { policyByPropertyPostIdForTransaction?: Maybe<(
    { __typename?: 'OffsetPagingOfPolicyDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PolicyDto' }
      & Pick<PolicyDto, 'startDate' | 'endDate' | 'policyTypeId' | 'policyName' | 'attachment'>
    )>>> }
  )> }
);

export type PropertyPostsByBlockNameAdvancedQueryVariables = Exact<{
  input: GetPropertyPostsByBlockNameAdvancedInput;
}>;


export type PropertyPostsByBlockNameAdvancedQuery = (
  { __typename?: 'Query' }
  & { propertyPostsByBlockNameAdvanced?: Maybe<(
    { __typename?: 'PropertyPostsByBlockNameDto' }
    & Pick<PropertyPostsByBlockNameDto, 'blockName' | 'totalOfPropertyPosts' | 'totalOfEmptyPropertyPosts' | 'totalOfSoldPropertyPosts' | 'totalOfBookedPropertyPosts'>
    & { propertyPosts?: Maybe<Array<Maybe<(
      { __typename?: 'FloorInfo' }
      & Pick<FloorInfo, 'floor'>
      & { propertyPosts?: Maybe<Array<Maybe<(
        { __typename?: 'PropertyPostDto' }
        & Pick<PropertyPostDto, 'propertyPostId' | 'propertyCode' | 'price' | 'priceNoVat' | 'priceVat' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'direction' | 'buildingArea' | 'numberOfBookingTransactions' | 'assigned' | 'saleTrackingStatusId' | 'saleTrackingStatusName' | 'saleTrackingStatusDescription'>
        & { unitOfMeasure?: Maybe<(
          { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
          & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
        )> }
      )>>> }
    )>>> }
  )> }
);

export type GetPropertyPostByIdForTransactionQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetPropertyPostByIdForTransactionQuery = (
  { __typename?: 'Query' }
  & { propertyPostByIdForTransaction?: Maybe<(
    { __typename?: 'PropertyPostForTransactionDto' }
    & Pick<PropertyPostForTransactionDto, 'propertyPostId' | 'propertyTypeId' | 'propertyTypeName' | 'propertyTypeDescription' | 'propertyCode' | 'blockName' | 'images' | 'price' | 'length' | 'width' | 'minimumPayment' | 'expectedPrice' | 'priceNoVat' | 'priceVat' | 'commission' | 'buyCommission' | 'saleCommission' | 'numberOfBookingTransactions' | 'postDescription' | 'propertySubTypeName' | 'propertySubTypeDescription' | 'floor' | 'direction' | 'balconyDirection' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea' | 'capetAreas' | 'saleTrackingStatusName' | 'saleTrackingStatusDescription' | 'saleSeasonId' | 'foSaleTrackingStatusDescription' | 'bookingFee' | 'houseDesign' | 'numberOfFloor' | 'totalSiteArea' | 'buildingLine' | 'isBooked' | 'isDeposited' | 'detailPath' | 'staffGroupIds' | 'ableConfirmDeposite'>
    & { projectInfo?: Maybe<(
      { __typename?: 'ProjectByPropertyPostDto' }
      & Pick<ProjectByPropertyPostDto, 'projectName' | 'projectCode' | 'projectId'>
    )>, bookingTransactionInfo?: Maybe<(
      { __typename?: 'property_posts_DepositeDurationDto' }
      & Pick<Property_Posts_DepositeDurationDto, 'bookingTransactionId' | 'beginDepositeDatetime' | 'endDepositeDatetime'>
    )>, saleSeasonInfo?: Maybe<(
      { __typename?: 'property_posts_SaleSeasonInfoDto' }
      & Pick<Property_Posts_SaleSeasonInfoDto, 'openDatetime' | 'closeDatetime' | 'startBookingDatetime'>
    )> }
  )> }
);

export type GetPropertyPostsBasketQueryVariables = Exact<{
  input: GetPropertyPostsBasketInputType;
}>;


export type GetPropertyPostsBasketQuery = (
  { __typename?: 'Query' }
  & { propertyPostsBasket?: Maybe<(
    { __typename?: 'GetPropertyPostBasketResponse' }
    & Pick<GetPropertyPostBasketResponse, 'errorCode' | 'errorMessage'>
    & { propertyPostsByBlockNameDto?: Maybe<(
      { __typename?: 'PropertyPostsByBlockNameDto' }
      & Pick<PropertyPostsByBlockNameDto, 'blockName' | 'totalOfPropertyPosts' | 'totalOfEmptyPropertyPosts' | 'totalOfSoldPropertyPosts' | 'totalOfBookedPropertyPosts'>
      & { propertyPosts?: Maybe<Array<Maybe<(
        { __typename?: 'FloorInfo' }
        & Pick<FloorInfo, 'floor'>
        & { propertyPosts?: Maybe<Array<Maybe<(
          { __typename?: 'PropertyPostDto' }
          & Pick<PropertyPostDto, 'propertyPostId' | 'propertyCode' | 'price' | 'priceNoVat' | 'priceVat' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'direction' | 'buildingArea' | 'numberOfBookingTransactions' | 'assigned' | 'saleTrackingStatusId' | 'saleTrackingStatusName' | 'saleTrackingStatusDescription'>
          & { unitOfMeasure?: Maybe<(
            { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
            & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
          )> }
        )>>> }
      )>>> }
    )> }
  )> }
);

export type PropertyPostsByBlockNameForTransferAdvancedQueryVariables = Exact<{
  input: GetPropertyPostsByBlockNameForTransferAdvancedInput;
}>;


export type PropertyPostsByBlockNameForTransferAdvancedQuery = (
  { __typename?: 'Query' }
  & { propertyPostsByBlockNameForTransferAdvanced?: Maybe<(
    { __typename?: 'PropertyPostsByBlockNameDto' }
    & Pick<PropertyPostsByBlockNameDto, 'blockName' | 'totalOfPropertyPosts' | 'totalOfEmptyPropertyPosts' | 'totalOfSoldPropertyPosts' | 'totalOfBookedPropertyPosts'>
    & { propertyPosts?: Maybe<Array<Maybe<(
      { __typename?: 'FloorInfo' }
      & Pick<FloorInfo, 'floor'>
      & { propertyPosts?: Maybe<Array<Maybe<(
        { __typename?: 'PropertyPostDto' }
        & Pick<PropertyPostDto, 'propertyPostId' | 'propertyCode' | 'price' | 'priceNoVat' | 'priceVat' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'numberOfBookingTransactions' | 'assigned' | 'direction' | 'buildingArea' | 'saleTrackingStatusId' | 'saleTrackingStatusName' | 'saleTrackingStatusDescription'>
        & { unitOfMeasure?: Maybe<(
          { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
          & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
        )> }
      )>>> }
    )>>> }
  )> }
);

export type GetSaleSeasonBlocksAndFloorsQueryVariables = Exact<{
  saleSeasonId?: Maybe<Scalars['Uuid']>;
}>;


export type GetSaleSeasonBlocksAndFloorsQuery = (
  { __typename?: 'Query' }
  & { getSaleSeasonBlocksAndFloors?: Maybe<(
    { __typename?: 'SaleSeasonBlockFloorInfo' }
    & { blocksInfo?: Maybe<Array<Maybe<(
      { __typename?: 'SimpleBlockInfo' }
      & Pick<SimpleBlockInfo, 'blockCode' | 'blockName'>
      & { floorsInfo?: Maybe<Array<Maybe<(
        { __typename?: 'SimpleFloorInfo' }
        & Pick<SimpleFloorInfo, 'floor' | 'photo'>
      )>>> }
    )>>>, projectInfo?: Maybe<(
      { __typename?: 'ProjectInfo' }
      & Pick<ProjectInfo, 'projectId' | 'projectName' | 'projectStatusId' | 'projectStatusName' | 'projectStatusDescription' | 'propertyTypeId' | 'propertyTypeName' | 'propertyTypeDescription' | 'investorOwnerName'>
    )> }
  )> }
);

export type ValidateCaptchaForPropertyPostBasketMutationVariables = Exact<{
  request: ValidateReCaptchaForPropertyPostBasketInput;
}>;


export type ValidateCaptchaForPropertyPostBasketMutation = (
  { __typename?: 'Mutation' }
  & { validateReCaptchaForPropertyPostBasket?: Maybe<(
    { __typename?: 'ValidateReCaptchaForPropertyPostBasketResponse' }
    & Pick<ValidateReCaptchaForPropertyPostBasketResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'requestId' | 'recaptchaToken'>
  )> }
);

export type ValidateExpireCaptchaForPropertyPostQueryVariables = Exact<{
  requestId: Scalars['Uuid'];
}>;


export type ValidateExpireCaptchaForPropertyPostQuery = (
  { __typename?: 'Query' }
  & { validateExpireReCaptchaForPropertyPost?: Maybe<(
    { __typename?: 'ValidateExpireReCaptchaForPropertyPostResponse' }
    & Pick<ValidateExpireReCaptchaForPropertyPostResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  )> }
);

export type VnpayPayBookingTransactionMutationVariables = Exact<{
  payBookingTransactionInput: PayBookingTransactionInput;
}>;


export type VnpayPayBookingTransactionMutation = (
  { __typename?: 'Mutation' }
  & { vnpayPayBookingTransaction: (
    { __typename?: 'PayBookingTransactionResponse' }
    & Pick<PayBookingTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'linkPaymentUrl' | 'returnUrl' | 'ipnUrl' | 'disablePayment' | 'transactionId'>
  ) }
);

export type CheckPropertyPostUpdateC2CContactTradingStatusQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type CheckPropertyPostUpdateC2CContactTradingStatusQuery = (
  { __typename?: 'Query' }
  & { checkPropertyPostUpdateC2CContactTradingStatus?: Maybe<(
    { __typename?: 'CheckPropertyPostUpdateC2CContactTradingStatusResponse' }
    & Pick<CheckPropertyPostUpdateC2CContactTradingStatusResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  )> }
);

export type CompleteC2CContactTradingMutationVariables = Exact<{
  input: CompleteC2CContactTradingInput;
}>;


export type CompleteC2CContactTradingMutation = (
  { __typename?: 'Mutation' }
  & { completeC2CContactTrading: (
    { __typename?: 'CompleteC2CContactTradingResponse' }
    & Pick<CompleteC2CContactTradingResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateC2CContactTradingFoMutationVariables = Exact<{
  input: CreateC2CContactTradingInput;
}>;


export type CreateC2CContactTradingFoMutation = (
  { __typename?: 'Mutation' }
  & { createC2CContactTradingFO: (
    { __typename?: 'CreateC2CContactTradingResponse' }
    & Pick<CreateC2CContactTradingResponse, 'contactTradingCode' | 'contactTradingId' | 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateSupportRequestFromContactTradingDetailMutationVariables = Exact<{
  input: CreateSupportRequestFromContactTradingDetailRequestInput;
}>;


export type CreateSupportRequestFromContactTradingDetailMutation = (
  { __typename?: 'Mutation' }
  & { createSupportRequestFromContactTradingDetail: (
    { __typename?: 'CreateSupportRequestFromContactTradingDetailResponse' }
    & Pick<CreateSupportRequestFromContactTradingDetailResponse, 'errorCode' | 'errorMessageCode' | 'errorMessage' | 'supportRequestId'>
  ) }
);

export type C2CContactTradingByIdQueryVariables = Exact<{
  contactTradingId?: Maybe<Scalars['Uuid']>;
}>;


export type C2CContactTradingByIdQuery = (
  { __typename?: 'Query' }
  & { c2cContactTradingById?: Maybe<(
    { __typename?: 'C2CContactTradingByIdResponse' }
    & Pick<C2CContactTradingByIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { contactTrading?: Maybe<(
      { __typename?: 'C2CContactTradingInfoDto' }
      & Pick<C2CContactTradingInfoDto, 'agentOwnerId' | 'assigneeId' | 'assigneeUserName' | 'assigneeFullName' | 'assigneePhoneNumber' | 'assigneeEmail' | 'assigneeProfilePhoto' | 'contactTradingId' | 'contactTradingCode' | 'contactTradingStatusId' | 'contactType' | 'customerEmail' | 'customerFullName' | 'customerPhoneNumber' | 'isActive' | 'negotiationDescription' | 'negotiationPrice' | 'negotiationDate' | 'negotiationUpdatedNumber' | 'propertyPostId' | 'requesterAddress' | 'requesterEmail' | 'requesterFullName' | 'requesterGender' | 'requesterId' | 'requesterIsAgency' | 'requesterLastContact' | 'requesterPhoneNumber' | 'createdDatetime' | 'createdByUserId' | 'updatedByUserId' | 'updatedDatetime' | 'serviceBonus' | 'pendingReason' | 'pendingNote' | 'pendingCompensationAmount' | 'propertyPostUrl' | 'rejectReasonId' | 'rejectReason' | 'recordVersion'>
      & { contract?: Maybe<(
        { __typename: 'C2CContactTradingContractDto' }
        & Pick<C2CContactTradingContractDto, 'createdByUserId' | 'createdDatetime' | 'isActive' | 'updatedByUserId' | 'updatedDatetime' | 'attachment' | 'buyerCommissionAmount' | 'consultantCommissionAmount' | 'consultantFee' | 'contractNote' | 'contractPrice' | 'moveInDate' | 'organizerCommissionAmount' | 'rentPeriod' | 'rentPeriodUnit' | 'salerCommissionAmount' | 'signedDate' | 'totalCommission' | 'totalCommissionUnit'>
      )>, deposit?: Maybe<(
        { __typename: 'C2CContactTradingDepositDto' }
        & Pick<C2CContactTradingDepositDto, 'attachment' | 'bankName' | 'closingPrice' | 'consultantFee' | 'commission' | 'commissionTpl' | 'commissionUnitId' | 'depositedAmount' | 'depositedDate' | 'depositNote' | 'depositorEmail' | 'depositorIdentityCard' | 'depositorName' | 'depositorPhoneNumber' | 'depositTerm' | 'depositUpdatedNumber' | 'paymentMethodId' | 'recipientEmail' | 'recipientIdentityCard' | 'recipientName' | 'recipientPhoneNumber' | 'moveInDate' | 'rentPeriod' | 'rentPeriodUnit' | 'depositStatus' | 'rejectReason' | 'rejectReasonId' | 'contractAttachment' | 'depositPaymentTermFrom' | 'depositPaymentTermTo' | 'notaryOffice' | 'notarizationDatetime'>
        & { paymentProgressDtos?: Maybe<Array<Maybe<(
          { __typename?: 'c2c_contact_trading_PaymentProgressDto' }
          & Pick<C2c_Contact_Trading_PaymentProgressDto, 'amount' | 'paymentDatetime' | 'paymentProgressId' | 'paymentTerms'>
        )>>> }
      )> }
    )> }
  )> }
);

export type C2CContactTradingCreatedByAgentQueryVariables = Exact<{
  where?: Maybe<C2CContactTradingDtoFilter>;
  page?: Maybe<Scalars['Int']>;
  keywords?: Maybe<Scalars['String']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by?: Maybe<C2CContactTradingDtoSort>;
}>;


export type C2CContactTradingCreatedByAgentQuery = (
  { __typename?: 'Query' }
  & { c2cContactTradingCreatedByAgent?: Maybe<(
    { __typename?: 'OffsetPagingOfC2CContactTradingDto' }
    & Pick<OffsetPagingOfC2CContactTradingDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'C2CContactTradingDto' }
      & Pick<C2CContactTradingDto, 'agentOwnerId' | 'assigneeId' | 'contactTradingCode' | 'contactTradingId' | 'contactTradingStatusId' | 'contactType' | 'createdByUserId' | 'createdDatetime' | 'customerEmail' | 'customerFullName' | 'customerPhoneNumber' | 'isActive' | 'negotiationDescription' | 'negotiationPrice' | 'negotiationDate' | 'propertyPostId' | 'propertyPostUrl' | 'requesterAddress' | 'requesterEmail' | 'requesterFullName' | 'requesterGender' | 'requesterId' | 'requesterIsAgency' | 'requesterLastContact' | 'requesterPhoneNumber' | 'updatedByUserId' | 'updatedDatetime' | 'pendingReason' | 'pendingNote' | 'cityName' | 'districtName' | 'propertyCode' | 'propertyPrice'>
      & { deposit?: Maybe<(
        { __typename?: 'C2CContactTradingDepositDto' }
        & Pick<C2CContactTradingDepositDto, 'depositStatus'>
      )> }
    )>>> }
  )> }
);

export type C2CContactTradingReceivedByAgentQueryVariables = Exact<{
  where?: Maybe<C2CContactTradingDtoFilter>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by?: Maybe<C2CContactTradingDtoSort>;
}>;


export type C2CContactTradingReceivedByAgentQuery = (
  { __typename?: 'Query' }
  & { c2cContactTradingReceivedByAgent?: Maybe<(
    { __typename?: 'OffsetPagingOfC2CContactTradingDto' }
    & Pick<OffsetPagingOfC2CContactTradingDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'C2CContactTradingDto' }
      & Pick<C2CContactTradingDto, 'agentOwnerId' | 'assigneeId' | 'contactTradingCode' | 'contactTradingId' | 'contactTradingStatusId' | 'contactType' | 'createdByUserId' | 'createdDatetime' | 'customerEmail' | 'customerFullName' | 'customerPhoneNumber' | 'isActive' | 'negotiationDescription' | 'negotiationPrice' | 'negotiationDate' | 'propertyPostId' | 'propertyPostUrl' | 'requesterAddress' | 'requesterEmail' | 'requesterFullName' | 'requesterGender' | 'requesterId' | 'requesterIsAgency' | 'requesterLastContact' | 'requesterPhoneNumber' | 'updatedByUserId' | 'updatedDatetime' | 'pendingReason' | 'pendingNote' | 'propertyCode'>
      & { deposit?: Maybe<(
        { __typename?: 'C2CContactTradingDepositDto' }
        & Pick<C2CContactTradingDepositDto, 'depositStatus'>
      )> }
    )>>> }
  )> }
);

export type C2CContactTradingRequesterEmailInfoQueryVariables = Exact<{
  id?: Maybe<Scalars['Uuid']>;
}>;


export type C2CContactTradingRequesterEmailInfoQuery = (
  { __typename?: 'Query' }
  & { c2cContactTradingRequesterEmailInfo?: Maybe<(
    { __typename?: 'C2CContactTradingRequesterEmailInfoDto' }
    & Pick<C2CContactTradingRequesterEmailInfoDto, 'requesterEmail' | 'customerEmail'>
  )> }
);

export type C2CContactTradingRequesterPhoneInfoQueryVariables = Exact<{
  id?: Maybe<Scalars['Uuid']>;
}>;


export type C2CContactTradingRequesterPhoneInfoQuery = (
  { __typename?: 'Query' }
  & { c2cContactTradingRequesterPhoneInfo?: Maybe<(
    { __typename?: 'C2CContactTradingRequesterPhoneInfoDto' }
    & Pick<C2CContactTradingRequesterPhoneInfoDto, 'requesterPhoneNumber' | 'customerPhoneNumber'>
  )> }
);

export type GetSupportRequestsFoByContactTradingIdQueryVariables = Exact<{
  contactTradingId: Scalars['Uuid'];
}>;


export type GetSupportRequestsFoByContactTradingIdQuery = (
  { __typename?: 'Query' }
  & { supportRequestsFOByContactTradingId?: Maybe<(
    { __typename?: 'SupportRequestsFOContactTradingResponse' }
    & Pick<SupportRequestsFoContactTradingResponse, 'errorMessage' | 'errorCode' | 'errorMessageCode'>
    & { supportRequestContactTradingDtos?: Maybe<Array<Maybe<(
      { __typename: 'SupportRequestContactTradingDto' }
      & Pick<SupportRequestContactTradingDto, 'businessCategoryTypeName' | 'assigneeFullName' | 'requestTypeDescription' | 'requestTypeId' | 'supportRequestId' | 'supportRequestCode' | 'supportRequestStatusDescription' | 'supportRequestStatusId' | 'updatedDatetime' | 'createdDatetime'>
    )>>> }
  )> }
);

export type UpdateC2CContactTradingPendingStatusMutationVariables = Exact<{
  input: UpdateC2CContactTradingPendingStatusInput;
}>;


export type UpdateC2CContactTradingPendingStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingPendingStatus: (
    { __typename?: 'UpdateC2CContactTradingPendingStatusResponse' }
    & Pick<UpdateC2CContactTradingPendingStatusResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateC2CContactTradingAcceptedDepositMutationVariables = Exact<{
  input: UpdateC2CContactTradingAcceptedDepositInput;
}>;


export type UpdateC2CContactTradingAcceptedDepositMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingAcceptedDeposit: (
    { __typename?: 'UpdateC2CContactTradingAcceptedDepositResponse' }
    & Pick<UpdateC2CContactTradingAcceptedDepositResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateC2CContactTradingConnectedStatusMutationVariables = Exact<{
  input: UpdateC2CContactTradingConnectedStatusInput;
}>;


export type UpdateC2CContactTradingConnectedStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingConnectedStatus: (
    { __typename?: 'UpdateC2CContactTradingConnectedStatusResponse' }
    & Pick<UpdateC2CContactTradingConnectedStatusResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateC2CContactTradingDepositStatusMutationVariables = Exact<{
  input: UpdateC2CContactTradingDepositStatusInput;
}>;


export type UpdateC2CContactTradingDepositStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingDepositStatus: (
    { __typename?: 'UpdateC2CContactTradingDepositStatusResponse' }
    & Pick<UpdateC2CContactTradingDepositStatusResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateC2CContactTradingNegotiationStatusMutationVariables = Exact<{
  input: UpdateC2CContactTradingNegotiationStatusInput;
}>;


export type UpdateC2CContactTradingNegotiationStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingNegotiationStatus: (
    { __typename?: 'UpdateC2CContactTradingNegotiationStatusResponse' }
    & Pick<UpdateC2CContactTradingNegotiationStatusResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateC2CContactTradingRejectedDepositMutationVariables = Exact<{
  input: UpdateC2CContactTradingRejectedDepositInput;
}>;


export type UpdateC2CContactTradingRejectedDepositMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingRejectedDeposit: (
    { __typename?: 'UpdateC2CContactTradingRejectedDepositResponse' }
    & Pick<UpdateC2CContactTradingRejectedDepositResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateC2CContactTradingRejectedStatusMutationVariables = Exact<{
  input: UpdateC2CContactTradingRejectedStatusInput;
}>;


export type UpdateC2CContactTradingRejectedStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CContactTradingRejectedStatus: (
    { __typename?: 'UpdateC2CContactTradingRejectedStatusResponse' }
    & Pick<UpdateC2CContactTradingRejectedStatusResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type ApproveContactTradingB2CMutationVariables = Exact<{
  input: ApproveContactTradingB2CInput;
}>;


export type ApproveContactTradingB2CMutation = (
  { __typename?: 'Mutation' }
  & { approveContactTradingB2C: (
    { __typename?: 'ApproveContactTradingB2CResponse' }
    & Pick<ApproveContactTradingB2CResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'contactTradingB2CId'>
  ) }
);

export type CheckContactTradingB2CNotificationQueryVariables = Exact<{
  notificationId: Scalars['Uuid'];
}>;


export type CheckContactTradingB2CNotificationQuery = (
  { __typename?: 'Query' }
  & { checkContactTradingB2CNotification: (
    { __typename?: 'CheckContactTradingB2CNotificationResponse' }
    & Pick<CheckContactTradingB2CNotificationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isValid'>
  ) }
);

export type CompleteContactTradingB2CMutationVariables = Exact<{
  input: CompleteContactTradingB2CInput;
}>;


export type CompleteContactTradingB2CMutation = (
  { __typename?: 'Mutation' }
  & { completeContactTradingB2C: (
    { __typename: 'CompleteContactTradingB2CResponse' }
    & Pick<CompleteContactTradingB2CResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type ContactTradingB2CAssigneeByCurrentUserQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['String']>;
  order_by?: Maybe<ContactTradingB2CAssigneeCurrentUserDtoSort>;
  where?: Maybe<ContactTradingB2CAssigneeCurrentUserDtoFilter>;
}>;


export type ContactTradingB2CAssigneeByCurrentUserQuery = (
  { __typename?: 'Query' }
  & { contactTradingB2CAssigneeByCurrentUser?: Maybe<(
    { __typename: 'OffsetPagingOfContactTradingB2CAssigneeCurrentUserDto' }
    & Pick<OffsetPagingOfContactTradingB2CAssigneeCurrentUserDto, 'downloadUrl' | 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingB2CAssigneeCurrentUserDto' }
      & Pick<ContactTradingB2CAssigneeCurrentUserDto, 'contactTradingB2CId' | 'contactTradingB2CCode' | 'contactTradingB2CStatusId' | 'contactTradingB2CStatusName' | 'contactTradingB2CStatusDescription' | 'customerFullName' | 'requestDate'>
      & { projectInfoDto?: Maybe<(
        { __typename?: 'SimpleProjectInfoDto' }
        & Pick<SimpleProjectInfoDto, 'projectId' | 'projectName' | 'propertyPostCode' | 'propertyPostId'>
      )> }
    )>>> }
  )> }
);

export type ContactTradingB2CCreatedByCurrentUserQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  projectId?: Maybe<Scalars['String']>;
  order_by?: Maybe<ContactTradingB2CCreatedByCurrentUserDtoSort>;
  where?: Maybe<ContactTradingB2CCreatedByCurrentUserDtoFilter>;
}>;


export type ContactTradingB2CCreatedByCurrentUserQuery = (
  { __typename?: 'Query' }
  & { contactTradingB2CCreatedByCurrentUser?: Maybe<(
    { __typename: 'OffsetPagingOfContactTradingB2CCreatedByCurrentUserDto' }
    & Pick<OffsetPagingOfContactTradingB2CCreatedByCurrentUserDto, 'downloadUrl' | 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingB2CCreatedByCurrentUserDto' }
      & Pick<ContactTradingB2CCreatedByCurrentUserDto, 'contactTradingB2CId' | 'contactTradingB2CCode' | 'contactTradingB2CStatusId' | 'contactTradingB2CStatusDescription' | 'contactTradingB2CStatusName' | 'customerFullName' | 'requestDate'>
      & { projectInfoDto?: Maybe<(
        { __typename?: 'SimpleProjectInfoDto' }
        & Pick<SimpleProjectInfoDto, 'projectId' | 'projectName' | 'propertyPostCode' | 'propertyPostId' | 'startYear'>
      )> }
    )>>> }
  )> }
);

export type ContactTradingB2CStatusesQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by?: Maybe<ContactTradingB2CStatusDtoSort>;
  filter?: Maybe<ContactTradingB2CStatusDtoFilter>;
}>;


export type ContactTradingB2CStatusesQuery = (
  { __typename?: 'Query' }
  & { contactTradingB2CStatuses?: Maybe<(
    { __typename: 'OffsetPagingOfContactTradingB2CStatusDto' }
    & Pick<OffsetPagingOfContactTradingB2CStatusDto, 'downloadUrl' | 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingB2CStatusDto' }
      & Pick<ContactTradingB2CStatusDto, 'contactTradingB2CStatusDescription' | 'contactTradingB2CStatusId' | 'contactTradingB2CStatusName' | 'contactTradingB2CStatusSortOrder'>
    )>>> }
  )> }
);

export type CreateContactTradingB2CMutationVariables = Exact<{
  input: CreateContactTradingB2CInput;
}>;


export type CreateContactTradingB2CMutation = (
  { __typename?: 'Mutation' }
  & { createContactTradingB2C: (
    { __typename?: 'CreateContactTradingB2CResponse' }
    & Pick<CreateContactTradingB2CResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'contactTradingB2CId'>
  ) }
);

export type DeclineContactTradingB2CMutationVariables = Exact<{
  input: DeclineContactTradingB2CInput;
}>;


export type DeclineContactTradingB2CMutation = (
  { __typename?: 'Mutation' }
  & { declineContactTradingB2C: (
    { __typename?: 'DeclineContactTradingB2CResponse' }
    & Pick<DeclineContactTradingB2CResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetContactTradingB2CDetailByIdQueryVariables = Exact<{
  contactTradingB2CId: Scalars['Uuid'];
}>;


export type GetContactTradingB2CDetailByIdQuery = (
  { __typename?: 'Query' }
  & { getContactTradingB2CDetailById: (
    { __typename?: 'ContactTradingB2CDetailResponse' }
    & Pick<ContactTradingB2CDetailResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { contactTradingB2CDto?: Maybe<(
      { __typename?: 'ContactTradingB2CDetailDto' }
      & Pick<ContactTradingB2CDetailDto, 'agentFullName' | 'agentId' | 'consultantFullName' | 'consultantId' | 'consultantPhoneNumber' | 'contactTradingB2CId' | 'contactTradingB2CCode' | 'contactTradingB2CStatusDescription' | 'contactTradingB2CStatusId' | 'contactTradingB2CStatusName' | 'contactTypeName' | 'customerEmail' | 'floor' | 'propertyBlockName' | 'customerFullName' | 'customerPhoneNumber' | 'projectId' | 'projectName' | 'propertyPostCode' | 'propertyPostId' | 'propertyPostInfo' | 'propertyTypeName' | 'requestDate' | 'requesterFullName' | 'updatedDate'>
    )> }
  ) }
);

export type GetProjectAssigneeForContactTradingB2CQueryVariables = Exact<{
  keyWords?: Maybe<Scalars['String']>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type GetProjectAssigneeForContactTradingB2CQuery = (
  { __typename?: 'Query' }
  & { getProjectAssigneeForContactTradingB2C?: Maybe<(
    { __typename?: 'OffsetPagingOfSimpleProjectInfoDto' }
    & Pick<OffsetPagingOfSimpleProjectInfoDto, 'downloadUrl' | 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SimpleProjectInfoDto' }
      & Pick<SimpleProjectInfoDto, 'projectId' | 'projectName'>
    )>>> }
  )> }
);

export type HaveContactTradingB2CByPropertyPostIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type HaveContactTradingB2CByPropertyPostIdQuery = (
  { __typename?: 'Query' }
  & { haveContactTradingB2CByPropertyPostId: (
    { __typename?: 'HaveContactTradingB2CByPropertyPostIdResponse' }
    & Pick<HaveContactTradingB2CByPropertyPostIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'haveContactTradingB2C'>
  ) }
);

export type TrackContactTradingB2CMutationVariables = Exact<{
  input: TrackContactTradingB2CInput;
}>;


export type TrackContactTradingB2CMutation = (
  { __typename?: 'Mutation' }
  & { trackContactTradingB2C: (
    { __typename?: 'TrackContactTradingB2CResponse' }
    & Pick<TrackContactTradingB2CResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type ApproveCrawlerDataMutationVariables = Exact<{
  input: ApproveCrawlerDataInput;
}>;


export type ApproveCrawlerDataMutation = (
  { __typename?: 'Mutation' }
  & { approveCrawlerData: (
    { __typename?: 'ApproveCrawlerDataResponse' }
    & Pick<ApproveCrawlerDataResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'propertyPostId'>
  ) }
);

export type GetCrawlerProcessesForTopenerQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  keywords?: Maybe<Scalars['String']>;
  filter?: Maybe<CrawlerProcessDtoFilter>;
}>;


export type GetCrawlerProcessesForTopenerQuery = (
  { __typename?: 'Query' }
  & { crawlerProcessesForTopener?: Maybe<(
    { __typename?: 'OffsetPagingOfCrawlerProcessDto' }
    & Pick<OffsetPagingOfCrawlerProcessDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'CrawlerProcessDto' }
      & Pick<CrawlerProcessDto, 'crawlerProcessId' | 'direction' | 'c2CPropertyPostId' | 'c2CPropertyCode' | 'crawlerTrackingStatusId' | 'crawlerTrackingStatusDescription' | 'updatedDatetime' | 'image' | 'postTitle' | 'price' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'streetName' | 'houseAddress' | 'areaTotal' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'postAuthor' | 'phone' | 'propertyTypeId'>
    )>>> }
  )> }
);

export type GetSummaryByCrawlerTrackingStatusQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSummaryByCrawlerTrackingStatusQuery = (
  { __typename?: 'Query' }
  & { summaryByCrawlerTrackingStatus?: Maybe<(
    { __typename?: 'GetSummaryByCrawlerTrackingStatusResponse' }
    & Pick<GetSummaryByCrawlerTrackingStatusResponse, 'totalCount'>
    & { status?: Maybe<Array<Maybe<(
      { __typename?: 'crawler_CrawlerTrackingStatusDto' }
      & Pick<Crawler_CrawlerTrackingStatusDto, 'crawlerTrackingStatusId' | 'crawlerTrackingStatusDescription' | 'count'>
    )>>> }
  )> }
);

export type UpdateCrawlerProcessRefuseStatusMutationVariables = Exact<{
  input: UpdateCrawlerProcessRefuseStatusInput;
}>;


export type UpdateCrawlerProcessRefuseStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateCrawlerProcessRefuseStatus: (
    { __typename?: 'UpdateCrawlerProcessRefuseStatusResponse' }
    & Pick<UpdateCrawlerProcessRefuseStatusResponse, 'errorCode' | 'errorMessageCode' | 'errorMessage'>
  ) }
);

export type BidvPayDepositTransactionMutationVariables = Exact<{
  payDepositTransactionInput: PayDepositTransactionInput;
}>;


export type BidvPayDepositTransactionMutation = (
  { __typename?: 'Mutation' }
  & { bidvPayDepositTransaction: (
    { __typename?: 'PayDepositTransactionResponse' }
    & Pick<PayDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'linkPaymentUrl' | 'returnUrl' | 'ipnUrl' | 'disablePayment' | 'transactionId'>
  ) }
);

export type CheckLockPropertyPostForDepositeQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type CheckLockPropertyPostForDepositeQuery = (
  { __typename?: 'Query' }
  & { checkLockPropertyPostForDeposite?: Maybe<(
    { __typename?: 'CheckLockPropertyPostForDepositResponse' }
    & Pick<CheckLockPropertyPostForDepositResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isLocked'>
  )> }
);

export type CreateDepositeTransactionMutationVariables = Exact<{
  input: CreateDepositeTransactionInput;
}>;


export type CreateDepositeTransactionMutation = (
  { __typename?: 'Mutation' }
  & { createDepositeTransaction: (
    { __typename?: 'CreateDepositTransactionResponse' }
    & Pick<CreateDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { depositeTransactionDto?: Maybe<(
      { __typename?: 'DepositeTransactionDto' }
      & Pick<DepositeTransactionDto, 'depositeTransactionId' | 'depositeStatusId' | 'propertyPostId' | 'isLatest' | 'customerId' | 'bookingTransactionId'>
    )> }
  ) }
);

export type CreateRefundRequestMutationVariables = Exact<{
  input: CreateRefundRequestInput;
}>;


export type CreateRefundRequestMutation = (
  { __typename?: 'Mutation' }
  & { createRefundRequest: (
    { __typename?: 'CreateRefundRequestResponse' }
    & Pick<CreateRefundRequestResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type FastPayDepositTransactionMutationVariables = Exact<{
  payDepositTransactionInput: PayDepositTransactionInput;
}>;


export type FastPayDepositTransactionMutation = (
  { __typename?: 'Mutation' }
  & { fastPayDepositTransaction: (
    { __typename?: 'PayDepositTransactionResponse' }
    & Pick<PayDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'linkPaymentUrl' | 'returnUrl' | 'ipnUrl' | 'disablePayment' | 'transactionId'>
  ) }
);

export type GetDepositeDetailValidatePaymentQueryVariables = Exact<{
  transactionId?: Maybe<Scalars['String']>;
  paymentReturnUrl?: Maybe<Scalars['String']>;
  propertyPostId?: Maybe<Scalars['String']>;
}>;


export type GetDepositeDetailValidatePaymentQuery = (
  { __typename?: 'Query' }
  & { depositeTransactionValidatePayment: (
    { __typename?: 'GetTransactionValidatePaymentResponse' }
    & Pick<GetTransactionValidatePaymentResponse, 'errorCode' | 'errorMessage' | 'isValid'>
  ) }
);

export type GetDepositeDurationByBookingTransactionIdQueryVariables = Exact<{
  transactionId: Scalars['Uuid'];
}>;


export type GetDepositeDurationByBookingTransactionIdQuery = (
  { __typename?: 'Query' }
  & { depositeDurationByBookingTransactionId?: Maybe<(
    { __typename?: 'DepositeDurationDto' }
    & Pick<DepositeDurationDto, 'ableConfirmDeposite' | 'beginDepositeDatetime' | 'endDepositeDatetime' | 'endDepositeTimeInSecond'>
  )> }
);

export type GetValidateDepositeTransactionQueryVariables = Exact<{
  depositeTransactionId: Scalars['Uuid'];
}>;


export type GetValidateDepositeTransactionQuery = (
  { __typename?: 'Query' }
  & { validateDepositeTransaction?: Maybe<(
    { __typename?: 'ValidateDepositeTransactionResponse' }
    & Pick<ValidateDepositeTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isValid'>
  )> }
);

export type MoveDepositeTransactionMutationVariables = Exact<{
  input: MoveDepositeTransactionInput;
}>;


export type MoveDepositeTransactionMutation = (
  { __typename?: 'Mutation' }
  & { moveDepositeTransaction: (
    { __typename?: 'MoveDepositTransactionResponse' }
    & Pick<MoveDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { depositeTransactionDto?: Maybe<(
      { __typename?: 'DepositeTransactionDto' }
      & Pick<DepositeTransactionDto, 'depositeTransactionId' | 'depositeStatusId' | 'numberOfChanging' | 'priorDepositeTransactionId'>
    )> }
  ) }
);

export type UnlockDepositForB2CPropertyPostMutationVariables = Exact<{
  input: UnlockDepositForB2CPropertyPostInput;
}>;


export type UnlockDepositForB2CPropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { unlockDepositForB2CPropertyPost: (
    { __typename?: 'UnlockDepositB2CPropertyPostResponse' }
    & Pick<UnlockDepositB2CPropertyPostResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type VnpayPayDepositTransactionMutationVariables = Exact<{
  payDepositTransactionInput: PayDepositTransactionInput;
}>;


export type VnpayPayDepositTransactionMutation = (
  { __typename?: 'Mutation' }
  & { vnpayPayDepositTransaction: (
    { __typename?: 'PayDepositTransactionResponse' }
    & Pick<PayDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'linkPaymentUrl' | 'returnUrl' | 'ipnUrl' | 'disablePayment' | 'transactionId'>
  ) }
);

export type GetSecuredFileUploadUrlQueryVariables = Exact<{
  payload: GetSecuredFileUploadUrlInput;
}>;


export type GetSecuredFileUploadUrlQuery = (
  { __typename?: 'Query' }
  & { getSecuredFileUploadUrl: (
    { __typename?: 'GetSecuredFileUploadUrlResponse' }
    & Pick<GetSecuredFileUploadUrlResponse, 'fileUrl' | 'fileName' | 'signatureKey' | 'uploadContainer'>
  ) }
);

export type GetSecuredFileUrlQueryVariables = Exact<{
  payload: GetSecuredFileUrlInput;
}>;


export type GetSecuredFileUrlQuery = (
  { __typename?: 'Query' }
  & { getSecuredFileUrl: (
    { __typename?: 'GetSecuredFileUrlResponse' }
    & Pick<GetSecuredFileUrlResponse, 'securedUrl' | 'errorCode' | 'errorMessage'>
  ) }
);

export type GetFoInvestorByCodeQueryVariables = Exact<{
  foInvestorCode: Scalars['String'];
}>;


export type GetFoInvestorByCodeQuery = (
  { __typename?: 'Query' }
  & { getFOInvestorByCode?: Maybe<(
    { __typename?: 'GetFOInvestorResponse' }
    & Pick<GetFoInvestorResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { investorInfoDto?: Maybe<(
      { __typename?: 'InvestorDto' }
      & Pick<InvestorDto, 'investorId' | 'investorCode' | 'investorName' | 'website' | 'logo' | 'phoneNumber' | 'areas' | 'establishmentDate' | 'charterCapital' | 'introduce' | 'activityImages' | 'createdBy' | 'createdByUserFullName' | 'createdDatetime' | 'lastModified' | 'deletedDatetime' | 'deletedBy' | 'isActive' | 'isDeleted' | 'detailPath'>
      & { projectCountByStatuses?: Maybe<Array<Maybe<(
        { __typename?: 'InvestorProjectStatusCountDto' }
        & Pick<InvestorProjectStatusCountDto, 'statusName' | 'count'>
      )>>>, address?: Maybe<(
        { __typename?: 'InvestorAddressInfoDto' }
        & Pick<InvestorAddressInfoDto, 'countryId' | 'cityId' | 'districtId' | 'wardId' | 'streetName' | 'homeAddress'>
      )> }
    )> }
  )> }
);

export type GetFoProjectsOfInvestorByIdQueryVariables = Exact<{
  input: GetFoProjectsOfInvestorInput;
}>;


export type GetFoProjectsOfInvestorByIdQuery = (
  { __typename?: 'Query' }
  & { getFOProjectsOfInvestorById: (
    { __typename?: 'GetFOProjectsOfInvestorResponse' }
    & Pick<GetFoProjectsOfInvestorResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { projectDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchProjectInfoDto' }
      & Pick<SearchProjectInfoDto, 'projectId' | 'projectCode' | 'projectName' | 'propertyTypeId' | 'projectAddressId' | 'projectStatusId' | 'projectPostStatusId' | 'projectProgress' | 'minPrice' | 'projectDescription' | 'featurePhotos' | 'isFeaturesProject' | 'investorOwnerName' | 'investorOwnerInfo' | 'investorOwnerLogo' | 'commissionRates' | 'partnersInfo' | 'bankInfo' | 'overviewDescription' | 'overviewMediaInfo' | 'sizingDescription' | 'sizingMediaInfo' | 'locationDescription' | 'locationMediaInfo' | 'facilitiesDescription' | 'facilitiesMediaInfo' | 'groundPlanDescription' | 'groundPlanMediaInfo' | 'saleProgramDescription' | 'saleProgramMediaInfo' | 'createdDatetime' | 'createdByUserId' | 'longitude' | 'latitude' | 'sortOrder' | 'projectStatusName' | 'totalFollower' | 'totalShare' | 'isFollowed' | 'totalArea' | 'overallDescription' | 'startYear' | 'mediaLibrary' | 'detailPath' | 'investorId' | 'investorDetailPath' | 'totalBlock' | 'totalPropertyPost'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressInfoDto' }
        & Pick<ProjectAddressInfoDto, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
      )> }
    )>>> }
  ) }
);

export type SearchAllFoInvestorsQueryVariables = Exact<{
  input: SearchFoInvestorInput;
}>;


export type SearchAllFoInvestorsQuery = (
  { __typename?: 'Query' }
  & { searchFOInvestors: (
    { __typename?: 'SearchFOInvestorResponse' }
    & Pick<SearchFoInvestorResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { investorInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'InvestorDto' }
      & Pick<InvestorDto, 'investorId' | 'investorCode' | 'logo' | 'investorName' | 'website' | 'phoneNumber' | 'areas' | 'establishmentDate' | 'charterCapital' | 'introduce' | 'activityImages' | 'createdBy' | 'createdByUserFullName' | 'createdDatetime' | 'createdByUserName' | 'lastModified' | 'modifiedByUserName' | 'deletedDatetime' | 'deletedBy' | 'isActive' | 'isDeleted' | 'detailPath'>
      & { address?: Maybe<(
        { __typename?: 'InvestorAddressInfoDto' }
        & Pick<InvestorAddressInfoDto, 'countryId' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'streetName' | 'homeAddress'>
      )> }
    )>>> }
  ) }
);

export type SearchOtherInvestorsQueryVariables = Exact<{
  input: SearchFoInvestorInput;
}>;


export type SearchOtherInvestorsQuery = (
  { __typename?: 'Query' }
  & { searchFOInvestors: (
    { __typename?: 'SearchFOInvestorResponse' }
    & Pick<SearchFoInvestorResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { investorInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'InvestorDto' }
      & Pick<InvestorDto, 'investorId' | 'investorCode' | 'logo' | 'investorName' | 'detailPath' | 'isActive' | 'isDeleted'>
    )>>> }
  ) }
);

export type CreateC2CDemandMutationVariables = Exact<{
  request: CreateC2CDemandInput;
}>;


export type CreateC2CDemandMutation = (
  { __typename?: 'Mutation' }
  & { createC2CDemand: (
    { __typename?: 'CreateC2CDemandResponse' }
    & Pick<CreateC2CDemandResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'c2CDemandId'>
  ) }
);

export type GetC2CContactTradingsByC2CDemandIdQueryVariables = Exact<{
  c2CDemandId: Scalars['Uuid'];
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by: C2CDemandContactTradingDtoSort;
}>;


export type GetC2CContactTradingsByC2CDemandIdQuery = (
  { __typename?: 'Query' }
  & { getC2CContactTradingsByC2CDemandId?: Maybe<(
    { __typename?: 'OffsetPagingOfC2CDemandContactTradingDto' }
    & Pick<OffsetPagingOfC2CDemandContactTradingDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'C2CDemandContactTradingDto' }
      & Pick<C2CDemandContactTradingDto, 'c2CDemandCode' | 'c2CDemandId' | 'createdDatetime' | 'createdByUserId' | 'contactTradingId' | 'contactTradingCode' | 'propertyPostId' | 'propertyCode'>
    )>>> }
  )> }
);

export type GetTopenerReadC2CDemandMutationVariables = Exact<{
  c2CDemandId: Scalars['Uuid'];
}>;


export type GetTopenerReadC2CDemandMutation = (
  { __typename?: 'Mutation' }
  & { topenerReadC2CDemand?: Maybe<(
    { __typename?: 'TopenerReadC2CDemandResponse' }
    & Pick<TopenerReadC2CDemandResponse, 'errorCode' | 'errorMessage'>
    & { c2CDemandDto?: Maybe<(
      { __typename?: 'C2CDemandDto' }
      & Pick<C2CDemandDto, 'c2CDemandCode' | 'c2CDemandId' | 'title' | 'propertyTypeId' | 'propertyTypeName' | 'forSale' | 'propertyLocation' | 'projectId' | 'numberOfBathrooms' | 'numberOfBedrooms' | 'directionJson' | 'isUserReadNotification' | 'isInterested' | 'createdDatetime' | 'requesterIsBuyer' | 'requesterId'>
      & { placeDto?: Maybe<(
        { __typename?: 'PlaceDto' }
        & Pick<PlaceDto, 'cityId' | 'cityName'>
        & { districts?: Maybe<Array<Maybe<(
          { __typename?: 'c2c_contact_trading_DistrictDto' }
          & Pick<C2c_Contact_Trading_DistrictDto, 'districtName' | 'districtId'>
        )>>> }
      )>, priceRangeDto?: Maybe<(
        { __typename?: 'PriceRangeDto' }
        & Pick<PriceRangeDto, 'priceTo' | 'priceFrom'>
      )>, squareRangeDto?: Maybe<(
        { __typename?: 'SquareRangeDto' }
        & Pick<SquareRangeDto, 'squareTo' | 'squareFrom'>
      )> }
    )> }
  )> }
);

export type GetContactTradingsForC2CDemandQueryVariables = Exact<{
  where?: Maybe<ContactTradingForC2CDemandDtoFilter>;
}>;


export type GetContactTradingsForC2CDemandQuery = (
  { __typename?: 'Query' }
  & { getContactTradingsForC2CDemand?: Maybe<(
    { __typename?: 'OffsetPagingOfContactTradingForC2CDemandDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingForC2CDemandDto' }
      & Pick<ContactTradingForC2CDemandDto, 'contactTradingId' | 'contactTradingStatusId' | 'createdDatetime' | 'propertyDetailPath'>
    )>>> }
  )> }
);

export type GetRequesterByIdQueryVariables = Exact<{
  customerId?: Maybe<Scalars['Uuid']>;
}>;


export type GetRequesterByIdQuery = (
  { __typename?: 'Query' }
  & { customerById?: Maybe<(
    { __typename?: 'CustomerDto' }
    & Pick<CustomerDto, 'customerEmail' | 'customerFullName' | 'customerPhone'>
  )> }
);

export type GetUserC2CDemandsQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetUserC2CDemandsInput;
  order_by: C2CDemandDtoSort;
  where: C2CDemandDtoFilter;
}>;


export type GetUserC2CDemandsQuery = (
  { __typename?: 'Query' }
  & { getUserC2CDemands?: Maybe<(
    { __typename?: 'OffsetPagingOfC2CDemandDto' }
    & Pick<OffsetPagingOfC2CDemandDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'C2CDemandDto' }
      & Pick<C2CDemandDto, 'c2CDemandCode' | 'c2CDemandId' | 'title' | 'propertyTypeName' | 'forSale' | 'createdDatetime'>
      & { placeDto?: Maybe<(
        { __typename?: 'PlaceDto' }
        & Pick<PlaceDto, 'cityId' | 'cityName'>
        & { districts?: Maybe<Array<Maybe<(
          { __typename?: 'c2c_contact_trading_DistrictDto' }
          & Pick<C2c_Contact_Trading_DistrictDto, 'districtName' | 'districtId'>
        )>>> }
      )>, priceRangeDto?: Maybe<(
        { __typename?: 'PriceRangeDto' }
        & Pick<PriceRangeDto, 'priceTo' | 'priceFrom'>
      )> }
    )>>> }
  )> }
);

export type SearchPropertyPostsOnC2CDemandForRentQueryVariables = Exact<{
  input: SearchPropertyPostsC2CDemandForRentInput;
}>;


export type SearchPropertyPostsOnC2CDemandForRentQuery = (
  { __typename?: 'Query' }
  & { searchPropertyPostsOnC2CDemandForRent?: Maybe<(
    { __typename?: 'SearchPropertyPostsC2CDemandForRentResponse' }
    & Pick<SearchPropertyPostsC2CDemandForRentResponse, 'errorCode' | 'errorMessage' | 'totalCount'>
    & { propertyPostForC2CDemandDtos?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostForC2CDemandDto' }
      & Pick<PropertyPostForC2CDemandDto, 'propertyPostId' | 'price' | 'postTitle' | 'commission' | 'propertyPostApprovalStatusId' | 'propertyTypeId' | 'propertyCode' | 'propertyTypeName' | 'direction' | 'forRent' | 'forSale' | 'isSold' | 'isRented' | 'saleCommissionCurrencyUnitId' | 'detailPath' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea'>
      & { propertyAddressDto?: Maybe<(
        { __typename?: 'PropertyAddressDto' }
        & Pick<PropertyAddressDto, 'homeAddress' | 'streetName' | 'wardName' | 'districtName' | 'cityName'>
      )> }
    )>>> }
  )> }
);

export type SearchPropertyPostsOnC2CDemandForSaleQueryVariables = Exact<{
  input: SearchPropertyPostsC2CDemandForSaleInput;
}>;


export type SearchPropertyPostsOnC2CDemandForSaleQuery = (
  { __typename?: 'Query' }
  & { searchPropertyPostsOnC2CDemandForSale?: Maybe<(
    { __typename?: 'SearchPropertyPostsC2CDemandForSaleResponse' }
    & Pick<SearchPropertyPostsC2CDemandForSaleResponse, 'errorCode' | 'errorMessage' | 'totalCount'>
    & { propertyPostForC2CDemandDtos?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostForC2CDemandDto' }
      & Pick<PropertyPostForC2CDemandDto, 'propertyPostId' | 'price' | 'postTitle' | 'commission' | 'propertyPostApprovalStatusId' | 'propertyTypeId' | 'propertyCode' | 'propertyTypeName' | 'direction' | 'forRent' | 'forSale' | 'isSold' | 'isRented' | 'saleCommissionCurrencyUnitId' | 'images' | 'detailPath' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea'>
      & { propertyAddressDto?: Maybe<(
        { __typename?: 'PropertyAddressDto' }
        & Pick<PropertyAddressDto, 'homeAddress' | 'streetName' | 'wardName' | 'districtName' | 'cityName'>
      )> }
    )>>> }
  )> }
);

export type SkipPropertyPostC2CDemandMutationVariables = Exact<{
  request: SkipPropertyPostC2CDemandInput;
}>;


export type SkipPropertyPostC2CDemandMutation = (
  { __typename?: 'Mutation' }
  & { skipPropertyPostC2CDemand: (
    { __typename?: 'SkipPropertyPostC2CDemandResponse' }
    & Pick<SkipPropertyPostC2CDemandResponse, 'errorCode' | 'errorMessage' | 'c2CDemandId'>
  ) }
);

export type UpdateC2CDemandMutationVariables = Exact<{
  request: UpdateC2CDemandInput;
}>;


export type UpdateC2CDemandMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CDemand: (
    { __typename?: 'UpdateC2CDemandResponse' }
    & Pick<UpdateC2CDemandResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'c2CDemandId'>
  ) }
);

export type UserInterestedC2CDemandMutationVariables = Exact<{
  request: UserInterestedC2CDemandInput;
}>;


export type UserInterestedC2CDemandMutation = (
  { __typename?: 'Mutation' }
  & { userInterestedC2CDemand: (
    { __typename?: 'UserInterestedC2CDemandResponse' }
    & Pick<UserInterestedC2CDemandResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'c2CDemandId'>
  ) }
);

export type CheckMobileAppVersionStableQueryVariables = Exact<{
  input: CheckMobileAppVersionStableInput;
}>;


export type CheckMobileAppVersionStableQuery = (
  { __typename?: 'Query' }
  & { checkMobileAppVersionStable: (
    { __typename?: 'CheckMobileAppVersionStableResponse' }
    & Pick<CheckMobileAppVersionStableResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { mobileAppVersionStable?: Maybe<(
      { __typename?: 'MobileAppVersionStable' }
      & Pick<MobileAppVersionStable, 'mobileOs' | 'mobileVersion' | 'updateOption' | 'releaseNotes' | 'releaseUrl'>
    )> }
  ) }
);

export type GetBanksQueryVariables = Exact<{
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type GetBanksQuery = (
  { __typename?: 'Query' }
  & { banks?: Maybe<(
    { __typename?: 'OffsetPagingOfBankDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'BankDto' }
      & Pick<BankDto, 'bankId' | 'bankName' | 'bankDescription' | 'bankCode' | 'isActive'>
    )>>> }
  )> }
);

export type GetImageUploadUrlQueryVariables = Exact<{
  payload: GetImageUploadUrlInput;
}>;


export type GetImageUploadUrlQuery = (
  { __typename?: 'Query' }
  & { getImageUploadUrl: (
    { __typename?: 'GetImageUploadUrlResponse' }
    & Pick<GetImageUploadUrlResponse, 'fileUrl' | 'fileName' | 'signatureKey' | 'uploadContainer'>
  ) }
);

export type GetMasterDataQueryVariables = Exact<{ [key: string]: never; }>;


export type GetMasterDataQuery = (
  { __typename?: 'Query' }
  & { contactTradingStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfContactTradingStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingStatusDto' }
      & Pick<ContactTradingStatusDto, 'contactTradingStatusName' | 'contactTradingStatusId' | 'contactTradingStatusDescription'>
    )>>> }
  )>, contactTradingRelevantPropertyStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfContactTradingRelevantPropertyStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingRelevantPropertyStatusDto' }
      & Pick<ContactTradingRelevantPropertyStatusDto, 'contactTradingPropertyConsultationStatusId' | 'contactTradingPropertyConsultationStatusName' | 'contactTradingPropertyConsultationStatusDescription'>
    )>>> }
  )>, projectStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfProjectStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectStatusDto' }
      & Pick<ProjectStatusDto, 'projectStatusName' | 'projectStatusId' | 'projectStatusDescription'>
    )>>> }
  )>, saleSeasonStatuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSaleSeasonStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SaleSeasonStatusDto' }
      & Pick<SaleSeasonStatusDto, 'saleSeasonStatusId' | 'saleSeasonStatusName' | 'saleSeasonStatusDescription'>
    )>>> }
  )>, saleTrackingStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfSaleTrackingStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SaleTrackingStatusDto' }
      & Pick<SaleTrackingStatusDto, 'saleTrackingStatusId' | 'saleTrackingStatusName' | 'saleTrackingStatusDescription'>
    )>>> }
  )>, bookingStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfBookingStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'BookingStatusDto' }
      & Pick<BookingStatusDto, 'bookingStatusId' | 'bookingStatusName' | 'bookingStatusDescription'>
    )>>> }
  )>, projectPostStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfProjectPostStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectPostStatusDto' }
      & Pick<ProjectPostStatusDto, 'projectPostStatusName' | 'projectPostStatusId' | 'projectPostStatusDescription'>
    )>>> }
  )>, agentRankings?: Maybe<(
    { __typename?: 'OffsetPagingOfAgentRankingDto' }
    & Pick<OffsetPagingOfAgentRankingDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'AgentRankingDto' }
      & Pick<AgentRankingDto, 'agentRankingId' | 'agentRankingName' | 'agentRankingDescription'>
    )>>> }
  )>, propertyTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyTypeDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyTypeDto' }
      & Pick<PropertyTypeDto, 'propertyTypeId' | 'propertyTypeName' | 'propertyTypeDescription' | 'isActive'>
    )>>> }
  )>, propertyPostStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyPostStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostStatusDto' }
      & Pick<PropertyPostStatusDto, 'propertyPostStatusId' | 'propertyPostStatusName' | 'propertyPostStatusDescription' | 'isActive'>
    )>>> }
  )>, legalInfoes?: Maybe<(
    { __typename?: 'OffsetPagingOfLegalInfoDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'LegalInfoDto' }
      & Pick<LegalInfoDto, 'legalInfoId' | 'legalInfoName' | 'legalInfoDescription' | 'isActive' | 'isDeleted'>
    )>>> }
  )>, banks?: Maybe<(
    { __typename?: 'OffsetPagingOfBankDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'BankDto' }
      & Pick<BankDto, 'bankId' | 'bankName' | 'bankDescription' | 'bankCode' | 'isActive'>
    )>>> }
  )>, unitOfMeasures?: Maybe<(
    { __typename?: 'OffsetPagingOfUnitOfMeasureDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'UnitOfMeasureDto' }
      & Pick<UnitOfMeasureDto, 'unitOfMeasureId' | 'unitOfMeasureName' | 'unitOfMeasureCode' | 'multiplyWithBaseUnit' | 'isRound'>
    )>>> }
  )>, propertyPostApprovalStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyPostApprovalStatusDto' }
    & Pick<OffsetPagingOfPropertyPostApprovalStatusDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostApprovalStatusDto' }
      & Pick<PropertyPostApprovalStatusDto, 'propertyPostApprovalStatusId' | 'propertyPostApprovalStatusName' | 'propertyPostApprovalStatusDescription'>
    )>>> }
  )>, postTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfPostTypeDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PostTypeDto' }
      & Pick<PostTypeDto, 'postTypeId' | 'postTypeName'>
    )>>> }
  )>, cities?: Maybe<(
    { __typename?: 'OffsetPagingOfCityDto' }
    & Pick<OffsetPagingOfCityDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'CityDto' }
      & Pick<CityDto, 'cityId' | 'cityName'>
    )>>> }
  )>, pendingReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfPendingReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PendingReasonDto' }
      & Pick<PendingReasonDto, 'pendingReasonId' | 'pendingReasonName' | 'pendingReasonDescription'>
    )>>> }
  )>, subscriptionPackageStatus?: Maybe<(
    { __typename?: 'OffsetPagingOfSubscriptionPackageStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SubscriptionPackageStatusDto' }
      & Pick<SubscriptionPackageStatusDto, 'subscriptionPackageStatusId' | 'subscriptionPackageStatusName' | 'subscriptionPackageStatusDescription'>
    )>>> }
  )>, internalFacilities?: Maybe<(
    { __typename?: 'OffsetPagingOfInternalFacilityDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'InternalFacilityDto' }
      & Pick<InternalFacilityDto, 'internalFacilityId' | 'internalFacilityName' | 'internalFacilityCode'>
    )>>> }
  )>, nearFacilities?: Maybe<(
    { __typename?: 'OffsetPagingOfNearFacilityDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'NearFacilityDto' }
      & Pick<NearFacilityDto, 'nearFacilityId' | 'nearFacilityName' | 'nearFacilityCode'>
    )>>> }
  )>, fundAccounts?: Maybe<(
    { __typename?: 'OffsetPagingOfFundAccountDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'FundAccountDto' }
      & Pick<FundAccountDto, 'cityId' | 'fundAccountId' | 'fundAccountCode' | 'branchAddress' | 'branchName' | 'phoneNumber' | 'faxNumber' | 'fundEmail'>
    )>>> }
  )>, paymentUnits?: Maybe<(
    { __typename?: 'OffsetPagingOfPaymentUnitDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PaymentUnitDto' }
      & Pick<PaymentUnitDto, 'paymentUnitId' | 'paymentMethod' | 'paymentUnitCode' | 'paymentUnitName'>
    )>>> }
  )>, feedObjectTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfFeedObjectTypeDto' }
    & Pick<OffsetPagingOfFeedObjectTypeDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'FeedObjectTypeDto' }
      & Pick<FeedObjectTypeDto, 'feedObjectTypeId' | 'feedObjectTypeName' | 'feedObjectTypeDescription' | 'isActive'>
    )>>> }
  )>, getContactTradingRejectReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfContactTradingRejectReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ContactTradingRejectReasonDto' }
      & Pick<ContactTradingRejectReasonDto, 'contactTradingRejectReasonId' | 'rejectReasonName' | 'rejectReasonDescription' | 'sortOrder' | 'isActive'>
    )>>> }
  )>, getC2CDepositRejectReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfC2CDepositRejectReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'C2CDepositRejectReasonDto' }
      & Pick<C2CDepositRejectReasonDto, 'c2CDepositRejectReasonId' | 'rejectReasonName' | 'rejectReasonDescription' | 'isActive' | 'sortOrder'>
    )>>> }
  )>, getSupportServiceTypesForFrontOffice?: Maybe<(
    { __typename?: 'GetSupportServiceTypesResponse' }
    & { requestTypes?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTypeDto' }
      & Pick<SupportServiceTypeDto, 'price' | 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription'>
    )>>> }
  )>, supportServiceTicketStatuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketStatusDto' }
      & Pick<SupportServiceTicketStatusDto, 'supportServiceTicketStatusId' | 'supportServiceTicketStatusName' | 'supportServiceTicketStatusDescription'>
    )>>> }
  )>, supportServiceTicketProcessingStatuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketProcessingStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketProcessingStatusDto' }
      & Pick<SupportServiceTicketProcessingStatusDto, 'supportServiceTicketProcessingStatusId' | 'supportServiceTicketProcessingStatusName' | 'supportServiceTicketProcessingStatusDescription'>
    )>>> }
  )>, supportServiceTicketCancelReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketCancelReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketCancelReasonDto' }
      & Pick<SupportServiceTicketCancelReasonDto, 'supportServiceTicketCancelReasonId' | 'supportServiceTicketCancelReasonName' | 'supportServiceTicketCancelReasonDescription'>
    )>>> }
  )>, supportServiceTicketRejectReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketRejectReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketRejectReasonDto' }
      & Pick<SupportServiceTicketRejectReasonDto, 'supportServiceTicketRejectReasonId' | 'supportServiceTicketRejectReasonName' | 'supportServiceTicketRejectReasonDescription'>
    )>>> }
  )> }
);

export type GetSupportRequestClosingReasonsQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSupportRequestClosingReasonsQuery = (
  { __typename?: 'Query' }
  & { getSupportRequestClosingReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportRequestClosingReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportRequestClosingReasonDto' }
      & Pick<SupportRequestClosingReasonDto, 'id' | 'name' | 'description' | 'type'>
    )>>> }
  )> }
);

export type GetTopenerServiceRequestTypesQueryVariables = Exact<{
  where?: Maybe<RequestTypeDtoFilter>;
  orderBy?: Maybe<RequestTypeDtoSort>;
}>;


export type GetTopenerServiceRequestTypesQuery = (
  { __typename?: 'Query' }
  & { topenerServiceRequestTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfRequestTypeDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'RequestTypeDto' }
      & Pick<RequestTypeDto, 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription'>
    )>>> }
  )> }
);

export type SearchAllArticlesQueryVariables = Exact<{
  input: SearchArticleRequest;
}>;


export type SearchAllArticlesQuery = (
  { __typename?: 'Query' }
  & { searchArticles?: Maybe<(
    { __typename?: 'SearchArticleResponse' }
    & Pick<SearchArticleResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { articleDtos?: Maybe<Array<Maybe<(
      { __typename?: 'ArticleDto' }
      & Pick<ArticleDto, 'id' | 'slug' | 'title' | 'preview' | 'body' | 'articleType' | 'createdDatetime' | 'previewImageUrl'>
    )>>> }
  )> }
);

export type SubscribeEmailForNewsMutationVariables = Exact<{
  input: SubscribeEmailForNewsInput;
}>;


export type SubscribeEmailForNewsMutation = (
  { __typename?: 'Mutation' }
  & { subscribeEmailForNews: (
    { __typename?: 'SubscribeEmailForNewsResponse' }
    & Pick<SubscribeEmailForNewsResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isRequiredToUseCaptcha'>
  ) }
);

export type GetNotificationsByUserIdQueryVariables = Exact<{
  where?: Maybe<NotificationDtoFilter>;
  pageSize?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  order_by?: Maybe<NotificationDtoSort>;
}>;


export type GetNotificationsByUserIdQuery = (
  { __typename?: 'Query' }
  & { notificationsByUserId?: Maybe<(
    { __typename?: 'OffsetPagingOfNotificationDto' }
    & Pick<OffsetPagingOfNotificationDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'NotificationDto' }
      & Pick<NotificationDto, 'id' | 'title' | 'message' | 'notificationType' | 'subTypeCode' | 'isUnread' | 'link' | 'createdDatetime'>
    )>>> }
  )> }
);

export type GetSummaryNotificationByCurrentUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSummaryNotificationByCurrentUserQuery = (
  { __typename?: 'Query' }
  & { getSummaryNotificationByCurrentUser?: Maybe<(
    { __typename?: 'GetSummaryNotificationByCurrentUserResponse' }
    & Pick<GetSummaryNotificationByCurrentUserResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { summaryNotificationDto?: Maybe<(
      { __typename?: 'SummaryNotificationDto' }
      & Pick<SummaryNotificationDto, 'totalNotificationUnread' | 'totalTypeSuggestionUnread' | 'totalTypeSystemUnread' | 'totalTypeTransactionUnread'>
    )> }
  )> }
);

export type GetUnReadNotificationQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUnReadNotificationQuery = (
  { __typename?: 'Query' }
  & { notificationsByUserId?: Maybe<(
    { __typename?: 'OffsetPagingOfNotificationDto' }
    & Pick<OffsetPagingOfNotificationDto, 'totalCount'>
  )> }
);

export type ReadAllNotificationMutationVariables = Exact<{ [key: string]: never; }>;


export type ReadAllNotificationMutation = (
  { __typename?: 'Mutation' }
  & { markReadAllUserNotifications?: Maybe<(
    { __typename?: 'UpdateUserNotificationResponse' }
    & Pick<UpdateUserNotificationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  )> }
);

export type ReadNotificationMutationVariables = Exact<{
  input: UpdateUserNotificationRequestInput;
}>;


export type ReadNotificationMutation = (
  { __typename?: 'Mutation' }
  & { updateUserNotification?: Maybe<(
    { __typename?: 'UpdateUserNotificationResponse' }
    & Pick<UpdateUserNotificationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  )> }
);

export type UpdateNotificationStatusMutationVariables = Exact<{
  input: UpdateUserNotificationRequestInput;
}>;


export type UpdateNotificationStatusMutation = (
  { __typename?: 'Mutation' }
  & { updateUserNotification?: Maybe<(
    { __typename?: 'UpdateUserNotificationResponse' }
    & Pick<UpdateUserNotificationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  )> }
);

export type GetArticlePageQueryVariables = Exact<{
  input: GetArticleRequest;
}>;


export type GetArticlePageQuery = (
  { __typename?: 'Query' }
  & { articlePage?: Maybe<(
    { __typename?: 'ArticlePageDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ArticleDto' }
      & Pick<ArticleDto, 'createdBy' | 'createdDatetime' | 'body' | 'id' | 'preview' | 'previewImageUrl' | 'title' | 'articleType'>
    )>>> }
  )> }
);

export type GetPlusServicesQueryVariables = Exact<{
  where?: Maybe<RequestTypeDtoFilter>;
  orderBy?: Maybe<RequestTypeDtoSort>;
}>;


export type GetPlusServicesQuery = (
  { __typename?: 'Query' }
  & { plusServices?: Maybe<(
    { __typename?: 'OffsetPagingOfRequestTypeDto' }
    & Pick<OffsetPagingOfRequestTypeDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'RequestTypeDto' }
      & Pick<RequestTypeDto, 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription' | 'isDisplayHomepage' | 'sortOrder'>
    )>>> }
  )> }
);

export type GetQnaPageQueryVariables = Exact<{
  input: GetPagesWithPaging;
}>;


export type GetQnaPageQuery = (
  { __typename?: 'Query' }
  & { qnaPage?: Maybe<(
    { __typename?: 'BasicNewsPagesDto' }
    & Pick<BasicNewsPagesDto, 'totalCount' | 'currentPage'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'BasicPageDto' }
      & Pick<BasicPageDto, 'createdBy' | 'createdDatetime' | 'title' | 'body'>
    )>>> }
  )> }
);

export type GetRecruitmentPageQueryVariables = Exact<{
  input: GetPagesWithPaging;
}>;


export type GetRecruitmentPageQuery = (
  { __typename?: 'Query' }
  & { recruitmentPage?: Maybe<(
    { __typename?: 'ArticlePageDto' }
    & Pick<ArticlePageDto, 'totalCount' | 'currentPage'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ArticleDto' }
      & Pick<ArticleDto, 'createdBy' | 'createdDatetime' | 'title' | 'preview' | 'body' | 'id' | 'slug'>
    )>>> }
  )> }
);

export type SearchAllCoursesQueryVariables = Exact<{
  input: SearchArticleRequest;
}>;


export type SearchAllCoursesQuery = (
  { __typename?: 'Query' }
  & { searchArticles?: Maybe<(
    { __typename?: 'SearchArticleResponse' }
    & Pick<SearchArticleResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { articleDtos?: Maybe<Array<Maybe<(
      { __typename?: 'ArticleDto' }
      & Pick<ArticleDto, 'id' | 'slug' | 'title' | 'preview' | 'articleType' | 'articleTypeId' | 'articleSubTypeId' | 'highlightTag' | 'highlightTagId' | 'createdDatetime' | 'previewImageUrl'>
    )>>> }
  )> }
);

export type CreatePanoramaForC2CPropertyPostMutationVariables = Exact<{
  input: CreatePanoramaForC2CPropertyPostInput;
}>;


export type CreatePanoramaForC2CPropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { createPanoramaForC2CPropertyPost: (
    { __typename?: 'CreatePanoramaForC2CPropertyPostResponse' }
    & Pick<CreatePanoramaForC2CPropertyPostResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetPanoramaByCodeQueryVariables = Exact<{
  panoramaImageCode: Scalars['String'];
}>;


export type GetPanoramaByCodeQuery = (
  { __typename?: 'Query' }
  & { getPanoramaByCode: (
    { __typename?: 'GetPanoramaByCodeResponse' }
    & Pick<GetPanoramaByCodeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { panoramaImageDto?: Maybe<(
      { __typename?: 'C2CPanoramaImageDto' }
      & Pick<C2CPanoramaImageDto, 'panoramaImageId' | 'panoramaImageCode' | 'panoramaImageJson' | 'panoramaImageApprovalStatusId' | 'panoramaImageApprovalStatusName' | 'panoramaImageApprovalStatusDescription' | 'panoramaRequestUpdateReasonId' | 'panoramaRequestUpdateReasonName' | 'panoramaRequestUpdateReasonDescription' | 'propertyPostId' | 'recordVersion'>
    )> }
  ) }
);

export type GetPanoramaByPropertyPostIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetPanoramaByPropertyPostIdQuery = (
  { __typename?: 'Query' }
  & { getPanoramaByPropertyPostId: (
    { __typename?: 'GetPanoramaByPropertyPostIdResponse' }
    & Pick<GetPanoramaByPropertyPostIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { panoramaImageDto?: Maybe<(
      { __typename?: 'C2CPanoramaImageDto' }
      & Pick<C2CPanoramaImageDto, 'panoramaImageId' | 'panoramaImageCode' | 'panoramaImageJson' | 'panoramaImageApprovalStatusId' | 'panoramaImageApprovalStatusName' | 'panoramaImageApprovalStatusDescription' | 'panoramaRequestUpdateReasonId' | 'panoramaRequestUpdateReasonName' | 'panoramaRequestUpdateReasonDescription' | 'propertyPostId' | 'recordVersion'>
    )> }
  ) }
);

export type UpdateC2CPropertyPostPanoramaMutationVariables = Exact<{
  input: UpdateC2CPropertyPostPanoramaInput;
}>;


export type UpdateC2CPropertyPostPanoramaMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CPropertyPostPanorama: (
    { __typename?: 'UpdateC2CPropertyPostPanoramaResponse' }
    & Pick<UpdateC2CPropertyPostPanoramaResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetBankTransferDetailsByTransactionIdQueryVariables = Exact<{
  transactionId: Scalars['Uuid'];
}>;


export type GetBankTransferDetailsByTransactionIdQuery = (
  { __typename?: 'Query' }
  & { bankTransferDetailsByTransactionId?: Maybe<(
    { __typename?: 'OffsetPagingOfBankTransferDetailDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'BankTransferDetailDto' }
      & Pick<BankTransferDetailDto, 'amount' | 'paidDatetime' | 'paymentUnit'>
    )>>> }
  )> }
);

export type GetFastPaymentTransferInfoByTransIdQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type GetFastPaymentTransferInfoByTransIdQuery = (
  { __typename?: 'Query' }
  & { fastPaymentTransferInfoByTransId?: Maybe<(
    { __typename?: 'GetFastPaymentTransferInfoByTransIdResponse' }
    & Pick<GetFastPaymentTransferInfoByTransIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { fastPaymentTransferInfoDto?: Maybe<(
      { __typename?: 'FastPaymentTransferInfoDto' }
      & Pick<FastPaymentTransferInfoDto, 'expectedAmount' | 'fundAccountId' | 'paidAmount' | 'paidDatetime' | 'paymentCode' | 'paymentUnit' | 'productName' | 'projectId' | 'transactionDatetime' | 'transactionPaymentStatus' | 'userTransactionId'>
      & { fundAccount?: Maybe<(
        { __typename?: 'FundAccountInfoDto' }
        & Pick<FundAccountInfoDto, 'branchAddress' | 'branchName' | 'cityId' | 'faxNumber' | 'fundAccountId' | 'fundEmail' | 'phoneNumber'>
      )> }
    )> }
  )> }
);

export type GetFundAccountByIdQueryVariables = Exact<{
  fundAccountId: Scalars['Uuid'];
}>;


export type GetFundAccountByIdQuery = (
  { __typename?: 'Query' }
  & { fundAccountById?: Maybe<(
    { __typename?: 'FundAccountDto' }
    & Pick<FundAccountDto, 'fundAccountId' | 'cityId' | 'branchAddress' | 'branchName' | 'fundAccountNo' | 'fundAccountDescription' | 'remark' | 'phoneNumber' | 'faxNumber' | 'fundEmail'>
  )> }
);

export type GetPaymentTransferInfoByTransIdQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type GetPaymentTransferInfoByTransIdQuery = (
  { __typename?: 'Query' }
  & { bankPaymentTransferInfoByTransId?: Maybe<(
    { __typename?: 'GetBankPaymentTransferInfoByTransIdResponse' }
    & Pick<GetBankPaymentTransferInfoByTransIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { bankPaymentTransferInfoDto?: Maybe<(
      { __typename?: 'BankPaymentTransferInfoDto' }
      & Pick<BankPaymentTransferInfoDto, 'bankAccountName' | 'bankAccountNumber' | 'bankTransferContents' | 'expectedAmount' | 'paidAmount' | 'paymentUnit' | 'productName' | 'transactionDatetime' | 'transactionPaymentStatus' | 'projectId' | 'paidDatetime' | 'userTransactionId'>
    )> }
  )> }
);

export type GetRefundPaymentTransferInfoByTransIdQueryVariables = Exact<{
  transactionId: Scalars['Uuid'];
}>;


export type GetRefundPaymentTransferInfoByTransIdQuery = (
  { __typename?: 'Query' }
  & { refundPaymentTransferInfoByTransId?: Maybe<(
    { __typename?: 'GetRefundPaymentTransferInfoByTransIdResponse' }
    & { refundPaymentTransferInfoDto?: Maybe<(
      { __typename?: 'RefundPaymentTransferInfoDto' }
      & Pick<RefundPaymentTransferInfoDto, 'bankAccountName' | 'bankAccountNo' | 'branchName' | 'cityId' | 'notes' | 'paidAmount' | 'paidDatetime' | 'projectId' | 'refundAmount' | 'refundDatetime' | 'refundContents' | 'vnpayAccountNumber' | 'transactionId' | 'transactionType'>
      & { bankInfo?: Maybe<(
        { __typename?: 'SimpleBankInfoDto' }
        & Pick<SimpleBankInfoDto, 'bankAddress' | 'bankCode' | 'bankDescription' | 'bankEmail' | 'bankId' | 'bankName' | 'bankTelephone' | 'bankWebsite'>
      )>, customerInfo?: Maybe<(
        { __typename?: 'transaction_CustomerInfoDto' }
        & Pick<Transaction_CustomerInfoDto, 'customerEmail' | 'customerFirstName' | 'customerLastName' | 'customerPhone'>
      )>, fundAccount?: Maybe<(
        { __typename?: 'FundAccountInfoDto' }
        & Pick<FundAccountInfoDto, 'branchAddress' | 'branchName' | 'cityId' | 'faxNumber' | 'fundAccountDescription' | 'fundAccountId' | 'fundAccountNo' | 'fundEmail' | 'phoneNumber' | 'remark'>
      )>, paidFundAccount?: Maybe<(
        { __typename?: 'FundAccountInfoDto' }
        & Pick<FundAccountInfoDto, 'branchAddress' | 'branchName' | 'cityId' | 'faxNumber' | 'fundAccountDescription' | 'fundAccountId' | 'fundAccountNo' | 'fundEmail' | 'phoneNumber' | 'remark'>
      )> }
    )> }
  )> }
);

export type GetTransactionPaymentMethodConfigsQueryVariables = Exact<{
  where?: Maybe<TransactionPaymentMethodConfigDtoFilter>;
}>;


export type GetTransactionPaymentMethodConfigsQuery = (
  { __typename?: 'Query' }
  & { transactionPaymentMethodConfigs?: Maybe<(
    { __typename?: 'OffsetPagingOfTransactionPaymentMethodConfigDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TransactionPaymentMethodConfigDto' }
      & Pick<TransactionPaymentMethodConfigDto, 'transactionType' | 'paymentMethod' | 'isActive' | 'paymentMethodOrder'>
      & { transactionPaymentUnitDtos?: Maybe<Array<Maybe<(
        { __typename?: 'TransactionPaymentUnitConfigDto' }
        & Pick<TransactionPaymentUnitConfigDto, 'transactionPaymentUnitId' | 'paymentMethod' | 'paymentUnitCode' | 'isActive'>
      )>>> }
    )>>> }
  )> }
);

export type GetUserTransactionDetailQueryVariables = Exact<{
  input: UserTransactionInput;
}>;


export type GetUserTransactionDetailQuery = (
  { __typename?: 'Query' }
  & { userTransactionById?: Maybe<(
    { __typename?: 'GetUserTransactionByIdResponse' }
    & Pick<GetUserTransactionByIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { userTransactionDto?: Maybe<(
      { __typename?: 'UserTransactionDto' }
      & Pick<UserTransactionDto, 'createdDatetime' | 'expectedAmount' | 'fundAccountId' | 'transactionId' | 'paidAmount' | 'paidDatetime' | 'paymentUnit' | 'productName' | 'transactionType' | 'paymentTransferNumber' | 'transactionPaymentStatus' | 'userTransactionId' | 'paymentNotes' | 'transactionServiceType' | 'propertyPostId'>
    )> }
  )> }
);

export type GetUserTransactionsQueryVariables = Exact<{
  where?: Maybe<UserTransactionDtoFilter>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by?: Maybe<UserTransactionDtoSort>;
}>;


export type GetUserTransactionsQuery = (
  { __typename?: 'Query' }
  & { userTransactions?: Maybe<(
    { __typename?: 'OffsetPagingOfUserTransactionDto' }
    & Pick<OffsetPagingOfUserTransactionDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'UserTransactionDto' }
      & Pick<UserTransactionDto, 'createdDatetime' | 'expectedAmount' | 'transactionId' | 'paidAmount' | 'paymentUnit' | 'productName' | 'transactionType' | 'paymentTransferNumber' | 'transactionPaymentStatus' | 'paidDatetime' | 'userTransactionId' | 'transactionServiceType' | 'propertyPostId'>
    )>>> }
  )> }
);

export type GetVnPayPaymentTransferInfoByTransIdQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type GetVnPayPaymentTransferInfoByTransIdQuery = (
  { __typename?: 'Query' }
  & { vnpayPaymentTransferInfoByTransId?: Maybe<(
    { __typename?: 'GetVnpayPaymentTransferInfoByTransIdResponse' }
    & Pick<GetVnpayPaymentTransferInfoByTransIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { vnpayPaymentTransferInfoDto?: Maybe<(
      { __typename?: 'VnpayPaymentTransferInfoDto' }
      & Pick<VnpayPaymentTransferInfoDto, 'expectedAmount' | 'paidAmount' | 'paidDatetime' | 'paymentUnit' | 'productName' | 'projectId' | 'transactionDatetime' | 'transactionPaymentStatus' | 'userTransactionId' | 'vnpayAccountNumber'>
    )> }
  )> }
);

export type CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryVariables = Exact<{
  request: CheckCurrentUserInAgentAssignedBySaleSeasonIdInput;
}>;


export type CheckCurrentUserInAgentAssignedBySaleSeasonIdQuery = (
  { __typename?: 'Query' }
  & { checkCurrentUserInAgentAssignedBySaleSeasonId: (
    { __typename?: 'CheckCurrentUserInAgentAssignedBySaleSeasonIdResponse' }
    & Pick<CheckCurrentUserInAgentAssignedBySaleSeasonIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isExist'>
  ) }
);

export type CheckPropertyPostAvailableForBookingBySeasonIdQueryVariables = Exact<{
  input: CheckPropertyPostAvailableForBookingBySeasonIdInput;
}>;


export type CheckPropertyPostAvailableForBookingBySeasonIdQuery = (
  { __typename?: 'Query' }
  & { checkPropertyPostAvailableForBookingBySeasonId: (
    { __typename?: 'CheckPropertyPostAvailableForBookingBySeasonIdResponse' }
    & Pick<CheckPropertyPostAvailableForBookingBySeasonIdResponse, 'isAvailable' | 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CheckPropertyPostLockedForBookingBySeasonIdQueryVariables = Exact<{
  input: CheckPropertyPostLockedForBookingBySeasonIdInput;
}>;


export type CheckPropertyPostLockedForBookingBySeasonIdQuery = (
  { __typename?: 'Query' }
  & { checkPropertyPostLockedForBookingBySeasonId: (
    { __typename?: 'CheckPropertyPostLockedForBookingBySeasonIdResponse' }
    & Pick<CheckPropertyPostLockedForBookingBySeasonIdResponse, 'isLocked' | 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'openDatetime'>
  ) }
);

export type FollowProjectMutationVariables = Exact<{
  input: FollowProject;
}>;


export type FollowProjectMutation = (
  { __typename?: 'Mutation' }
  & { followProject: (
    { __typename?: 'ProjectMutationResponse' }
    & Pick<ProjectMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { projectDto?: Maybe<(
      { __typename?: 'ProjectDto' }
      & Pick<ProjectDto, 'projectId' | 'projectName' | 'isFollowed' | 'totalFollower' | 'totalShare'>
    )> }
  ) }
);

export type GetB2C2CProjectDetailByIdFoQueryVariables = Exact<{
  b2C2CProjectId: Scalars['Uuid'];
}>;


export type GetB2C2CProjectDetailByIdFoQuery = (
  { __typename?: 'Query' }
  & { getB2C2CProjectDetailByIdFo: (
    { __typename?: 'GetB2C2CProjectDetailByIdFoResponse' }
    & Pick<GetB2C2CProjectDetailByIdFoResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { b2C2CProject?: Maybe<(
      { __typename?: 'B2C2CProjectDto' }
      & Pick<B2C2CProjectDto, 'b2C2CProjectId' | 'b2C2CProjectName' | 'b2CDetailPath' | 'b2CProjectId' | 'investorId' | 'investorName' | 'isActive' | 'propertyTypeId'>
    )> }
  ) }
);

export type GetB2C2CProjectsFoQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyTypeId?: Maybe<Scalars['String']>;
  projectName?: Maybe<Scalars['String']>;
}>;


export type GetB2C2CProjectsFoQuery = (
  { __typename?: 'Query' }
  & { getB2C2CProjectsFo?: Maybe<(
    { __typename?: 'OffsetPagingOfB2C2CProjectDto' }
    & Pick<OffsetPagingOfB2C2CProjectDto, 'downloadUrl' | 'pageSize' | 'totalCount' | 'totalPages'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'B2C2CProjectDto' }
      & Pick<B2C2CProjectDto, 'b2C2CProjectId' | 'b2C2CProjectName' | 'b2CProjectId' | 'investorId' | 'investorName' | 'propertyTypeId'>
    )>>> }
  )> }
);

export type GetFoProjectsHomePageV1QueryVariables = Exact<{
  input: GetFoProjectsHomePageV1Input;
}>;


export type GetFoProjectsHomePageV1Query = (
  { __typename?: 'Query' }
  & { getFoProjectsHomePageV1: (
    { __typename: 'GetFoProjectsHomePageV1Response' }
    & { projectInfoDtos?: Maybe<Array<Maybe<(
      { __typename: 'SearchProjectInfoDto' }
      & Pick<SearchProjectInfoDto, 'projectId' | 'projectName' | 'featurePhotos' | 'overviewMediaInfo' | 'isFollowed' | 'investorOwnerName' | 'investorOwnerLogo' | 'investorOwnerInfo' | 'projectStatusId' | 'projectStatusName' | 'sortOrder' | 'propertyTypeId' | 'totalArea' | 'overallDescription' | 'startYear' | 'minPrice' | 'commissionRates' | 'detailPath'>
      & { projectAddress?: Maybe<(
        { __typename: 'ProjectAddressInfoDto' }
        & Pick<ProjectAddressInfoDto, 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'streetName' | 'homeAddress'>
      )> }
    )>>> }
  ) }
);

export type GetForTransactionCursorQueryVariables = Exact<{
  request: GetConsultantsForTransactionInput;
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
}>;


export type GetForTransactionCursorQuery = (
  { __typename?: 'Query' }
  & { getConsultantsForTransactionCursor?: Maybe<(
    { __typename?: 'StaffDtoConnection' }
    & Pick<StaffDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'StaffDtoEdge' }
      & Pick<StaffDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'StaffDto' }
        & Pick<StaffDto, 'staffId' | 'staffCode' | 'profilePhoto' | 'profilePhotos' | 'fullName' | 'phoneNumber' | 'staffGroupId' | 'staffGroupDescription' | 'rating' | 'isGroupLeader'>
      )> }
    )>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>
    ) }
  )> }
);

export type GetCurProjectsAssignedToAgentForPublicQueryVariables = Exact<{
  agentId: Scalars['Uuid'];
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
  where?: Maybe<ProjectForPublicDtoFilter>;
}>;


export type GetCurProjectsAssignedToAgentForPublicQuery = (
  { __typename?: 'Query' }
  & { curProjectsAssignedToAgentForPublic?: Maybe<(
    { __typename?: 'ProjectForPublicDtoConnection' }
    & Pick<ProjectForPublicDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'ProjectForPublicDtoEdge' }
      & Pick<ProjectForPublicDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'ProjectForPublicDto' }
        & Pick<ProjectForPublicDto, 'isFollowed' | 'totalFollower' | 'projectId' | 'projectName' | 'projectCode' | 'minPrice' | 'commissionRates' | 'projectStatusName' | 'featurePhotos' | 'investorOwnerName' | 'propertyTypeId' | 'projectStatusId' | 'projectTypeName' | 'projectStatusDescription'>
        & { projectAddress?: Maybe<(
          { __typename?: 'ProjectAddressInfoDto' }
          & Pick<ProjectAddressInfoDto, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
        )>, unitOfMeasureProject?: Maybe<(
          { __typename?: 'UnitOfMeasureProject' }
          & Pick<UnitOfMeasureProject, 'calculateSize' | 'multiplyWithBaseUnit' | 'numberOfDecimal' | 'unitOfMeasureCode' | 'unitOfMeasureId' | 'unitOfMeasureName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetFollowedProjectByFollowerIdQueryVariables = Exact<{
  followerId: Scalars['Uuid'];
  pageSize?: Maybe<Scalars['PaginationAmount']>;
  cursor?: Maybe<Scalars['String']>;
  filter?: Maybe<ProjectWithPropertyPostDtoFilter>;
}>;


export type GetFollowedProjectByFollowerIdQuery = (
  { __typename?: 'Query' }
  & { curProjectWithPropertyPostsByFollowerId?: Maybe<(
    { __typename?: 'ProjectWithPropertyPostDtoConnection' }
    & Pick<ProjectWithPropertyPostDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'ProjectWithPropertyPostDtoEdge' }
      & Pick<ProjectWithPropertyPostDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'ProjectWithPropertyPostDto' }
        & Pick<ProjectWithPropertyPostDto, 'isFollowed' | 'totalFollower' | 'projectId' | 'projectName' | 'projectCode' | 'minPrice' | 'commissionRates' | 'projectStatusName' | 'featurePhotos' | 'investorOwnerName' | 'propertyTypeId' | 'projectStatusId' | 'projectTypeName' | 'projectStatusDescription'>
        & { projectAddress?: Maybe<(
          { __typename?: 'ProjectAddressWithPropertyPostInfo' }
          & Pick<ProjectAddressWithPropertyPostInfo, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
        )>, unitOfMeasureProject?: Maybe<(
          { __typename?: 'UnitOfMeasureProject' }
          & Pick<UnitOfMeasureProject, 'calculateSize' | 'multiplyWithBaseUnit' | 'numberOfDecimal' | 'unitOfMeasureCode' | 'unitOfMeasureId' | 'unitOfMeasureName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetProjectByCurrentUserQueryVariables = Exact<{
  pageSize?: Maybe<Scalars['Int']>;
  page?: Maybe<Scalars['Int']>;
  keyword?: Maybe<Scalars['String']>;
  userId: Scalars['Uuid'];
  filter?: Maybe<ProjectWithPropertyPostDtoFilter>;
}>;


export type GetProjectByCurrentUserQuery = (
  { __typename?: 'Query' }
  & { projectWithPropertyPostsByUserId?: Maybe<(
    { __typename?: 'OffsetPagingOfProjectWithPropertyPostDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectWithPropertyPostDto' }
      & Pick<ProjectWithPropertyPostDto, 'totalFollower' | 'projectId' | 'projectName' | 'projectCode' | 'minPrice' | 'commissionRates' | 'projectStatusName' | 'featurePhotos' | 'investorOwnerName' | 'propertyTypeId' | 'projectStatusId' | 'projectTypeName' | 'projectStatusDescription'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressWithPropertyPostInfo' }
        & Pick<ProjectAddressWithPropertyPostInfo, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
      )>, unitOfMeasureProject?: Maybe<(
        { __typename?: 'UnitOfMeasureProject' }
        & Pick<UnitOfMeasureProject, 'calculateSize' | 'multiplyWithBaseUnit' | 'numberOfDecimal' | 'unitOfMeasureCode' | 'unitOfMeasureId' | 'unitOfMeasureName'>
      )> }
    )>>> }
  )> }
);

export type GetUserFollowOnProjectsByProjectIdsQueryVariables = Exact<{
  request: GetUserFollowOnProjectsByProjectIdsInput;
}>;


export type GetUserFollowOnProjectsByProjectIdsQuery = (
  { __typename?: 'Query' }
  & { getUserFollowOnProjectsByProjectIds: (
    { __typename?: 'GetUserFollowOnProjectsByProjectIdsResponse' }
    & { userFollowOnProjectDtos?: Maybe<Array<Maybe<(
      { __typename?: 'UserFollowOnProjectDto' }
      & Pick<UserFollowOnProjectDto, 'projectId' | 'isFollowed'>
    )>>> }
  ) }
);

export type GetProjectByIdQueryVariables = Exact<{
  projectId: Scalars['Uuid'];
}>;


export type GetProjectByIdQuery = (
  { __typename?: 'Query' }
  & { foProjectById?: Maybe<(
    { __typename?: 'FOProjectDto' }
    & Pick<FoProjectDto, 'isFollowed' | 'projectDescription' | 'totalFollower' | 'projectId' | 'projectName' | 'projectCode' | 'minPrice' | 'commissionRates' | 'projectStatusName' | 'featurePhotos' | 'investorOwnerName' | 'overallDescription' | 'propertyTypeId' | 'projectTypeName' | 'projectStatusId' | 'projectPostStatusName' | 'projectProgress' | 'projectStatusDescription' | 'startYear' | 'totalArea'>
    & { projectAddress?: Maybe<(
      { __typename?: 'ProjectAddressInfoDto' }
      & Pick<ProjectAddressInfoDto, 'projectAddressId' | 'cityId' | 'districtId' | 'wardId' | 'streetName' | 'homeAddress' | 'longitude' | 'latitude' | 'cityName' | 'districtName' | 'wardName'>
    )> }
  )> }
);

export type GetProjectDetailQueryVariables = Exact<{
  projectId: Scalars['Uuid'];
}>;


export type GetProjectDetailQuery = (
  { __typename?: 'Query' }
  & { foProjectById?: Maybe<(
    { __typename?: 'FOProjectDto' }
    & Pick<FoProjectDto, 'isFollowed' | 'totalFollower' | 'bankInfo' | 'commissionRates' | 'projectStatusDescription' | 'projectTypeName' | 'projectTypeDescription' | 'facilitiesDescription' | 'facilitiesMediaInfo' | 'startYear' | 'totalArea' | 'overallDescription' | 'featurePhotos' | 'groundPlanDescription' | 'groundPlanMediaInfo' | 'investorOwnerName' | 'investorDetailPath' | 'investorId' | 'investorOwnerLogo' | 'isFeaturesProject' | 'locationDescription' | 'locationMediaInfo' | 'overviewDescription' | 'overviewMediaInfo' | 'partnersInfo' | 'projectAddressId' | 'projectCode' | 'projectDescription' | 'projectId' | 'totalShare' | 'projectName' | 'projectPostStatusId' | 'projectPostStatusName' | 'projectProgress' | 'projectStatusId' | 'propertyTypeId' | 'saleProgramDescription' | 'saleProgramMediaInfo' | 'handoverMaterialDescription' | 'handoverMaterialMediaInfo' | 'legalInformationDescription' | 'legalInformationMediaInfo' | 'sizingDescription' | 'sizingMediaInfo' | 'sortOrder' | 'minPrice' | 'projectStatusName' | 'detailPath'>
    & { projectAddress?: Maybe<(
      { __typename?: 'ProjectAddressInfoDto' }
      & Pick<ProjectAddressInfoDto, 'projectAddressId' | 'cityId' | 'districtId' | 'wardId' | 'streetName' | 'homeAddress' | 'longitude' | 'latitude' | 'cityName' | 'districtName' | 'wardName'>
    )>, projectItems?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectItemDto' }
      & Pick<ProjectItemDto, 'id' | 'title' | 'photo' | 'cost' | 'commission' | 'sortOrder'>
    )>>>, saleSeasonInfo?: Maybe<(
      { __typename?: 'sale_SaleSeasonInfoDto' }
      & Pick<Sale_SaleSeasonInfoDto, 'saleSeasonId' | 'seasonName' | 'saleSeasonStatusId' | 'startBookingDatetime' | 'genericBasketDatetime' | 'endBookingDatetime' | 'openDatetime' | 'closeDatetime' | 'allTopenersCanViewProducts' | 'maxBookingNumber'>
    )> }
  )> }
);

export type GetProjectSuggestionQueryVariables = Exact<{
  pageSize?: Maybe<Scalars['PaginationAmount']>;
  cursor?: Maybe<Scalars['String']>;
  filter?: Maybe<ProjectSuggestionDtoFilter>;
}>;


export type GetProjectSuggestionQuery = (
  { __typename?: 'Query' }
  & { curProjectSuggestions?: Maybe<(
    { __typename?: 'ProjectSuggestionDtoConnection' }
    & Pick<ProjectSuggestionDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'ProjectSuggestionDtoEdge' }
      & Pick<ProjectSuggestionDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'ProjectSuggestionDto' }
        & Pick<ProjectSuggestionDto, 'projectId' | 'projectName' | 'minPrice' | 'projectStatusName' | 'featurePhotos' | 'investorOwnerName' | 'propertyTypeId' | 'projectStatusId' | 'projectStatusDescription' | 'commissionRates' | 'totalFollower' | 'isFollowed'>
        & { projectAddress?: Maybe<(
          { __typename?: 'ProjectAddressInfoDto' }
          & Pick<ProjectAddressInfoDto, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetProjectWithPropertyPostQueryVariables = Exact<{ [key: string]: never; }>;


export type GetProjectWithPropertyPostQuery = (
  { __typename?: 'Query' }
  & { projectWithPropertyPosts?: Maybe<(
    { __typename?: 'OffsetPagingOfProjectWithPropertyPostDto' }
    & Pick<OffsetPagingOfProjectWithPropertyPostDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectWithPropertyPostDto' }
      & Pick<ProjectWithPropertyPostDto, 'isFollowed' | 'totalFollower' | 'projectId' | 'projectName' | 'projectCode' | 'overviewDescription' | 'overviewMediaInfo' | 'projectDescription' | 'minPrice' | 'commissionRates' | 'bankInfo' | 'featurePhotos' | 'propertyTypeId' | 'projectStatusId' | 'projectTypeName'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressWithPropertyPostInfo' }
        & Pick<ProjectAddressWithPropertyPostInfo, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName'>
      )> }
    )>>> }
  )> }
);

export type GetProjectsQueryVariables = Exact<{
  order_by?: Maybe<ProjectDtoSort>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<ProjectDtoFilter>;
  projectName: Scalars['String'];
}>;


export type GetProjectsQuery = (
  { __typename?: 'Query' }
  & { projectsForPublic?: Maybe<(
    { __typename?: 'OffsetPagingOfProjectDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectDto' }
      & Pick<ProjectDto, 'projectId' | 'projectName'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressInfoDto' }
        & Pick<ProjectAddressInfoDto, 'projectAddressId' | 'cityId' | 'districtId' | 'wardId' | 'streetName' | 'homeAddress' | 'longitude' | 'latitude' | 'cityName' | 'districtName' | 'wardName'>
      )> }
    )>>> }
  )> }
);

export type GetSaleSeasonFromProjectByIdQueryVariables = Exact<{
  projectId: Scalars['Uuid'];
}>;


export type GetSaleSeasonFromProjectByIdQuery = (
  { __typename?: 'Query' }
  & { foProjectById?: Maybe<(
    { __typename?: 'FOProjectDto' }
    & Pick<FoProjectDto, 'projectId'>
    & { saleSeasonInfo?: Maybe<(
      { __typename?: 'sale_SaleSeasonInfoDto' }
      & Pick<Sale_SaleSeasonInfoDto, 'saleSeasonId' | 'seasonStatusName' | 'startBookingDatetime' | 'openDatetime'>
    )> }
  )> }
);

export type GetSimilarProjectsForFoQueryVariables = Exact<{
  getSimilarProjectsForFOInput: GetSimilarProjectsForFoInput;
}>;


export type GetSimilarProjectsForFoQuery = (
  { __typename?: 'Query' }
  & { getSimilarProjectsForFO?: Maybe<(
    { __typename?: 'OffsetPagingOfSimilarProjectInfoDto' }
    & Pick<OffsetPagingOfSimilarProjectInfoDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SimilarProjectInfoDto' }
      & Pick<SimilarProjectInfoDto, 'detailPath' | 'fastProjectId' | 'projectCode' | 'projectStatusId' | 'projectStatusName' | 'projectId' | 'projectName' | 'featurePhotos' | 'investorOwnerName' | 'projectStatusDescription' | 'propertyTypeId' | 'minPrice'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressInfoDto' }
        & Pick<ProjectAddressInfoDto, 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'streetName' | 'homeAddress'>
      )> }
    )>>> }
  )> }
);

export type GetStaffGroupsQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<StaffGroupDtoFilter>;
  orderBy?: Maybe<StaffGroupDtoSort>;
}>;


export type GetStaffGroupsQuery = (
  { __typename?: 'Query' }
  & { staffGroups?: Maybe<(
    { __typename?: 'OffsetPagingOfStaffGroupDto' }
    & Pick<OffsetPagingOfStaffGroupDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'StaffGroupDto' }
      & Pick<StaffGroupDto, 'staffGroupId' | 'staffGroupName' | 'staffGroupDescription' | 'staffTypeId'>
    )>>> }
  )> }
);

export type UnfollowProjectMutationVariables = Exact<{
  input: FollowProject;
}>;


export type UnfollowProjectMutation = (
  { __typename?: 'Mutation' }
  & { unfollowProject: (
    { __typename?: 'ProjectMutationResponse' }
    & Pick<ProjectMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { projectDto?: Maybe<(
      { __typename?: 'ProjectDto' }
      & Pick<ProjectDto, 'projectId' | 'projectName' | 'isFollowed' | 'totalFollower' | 'totalShare'>
    )> }
  ) }
);

export type CheckPropertyPostHasC2CContactTradingDepositedQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type CheckPropertyPostHasC2CContactTradingDepositedQuery = (
  { __typename?: 'Query' }
  & { checkPropertyPostHasC2CContactTradingDeposited?: Maybe<(
    { __typename?: 'CheckPropertyPostHasC2CContactTradingDepositedResponse' }
    & Pick<CheckPropertyPostHasC2CContactTradingDepositedResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  )> }
);

export type ClosePropertyPostMutationVariables = Exact<{
  closePropertyPostInput: ClosePropertyPostInput;
}>;


export type ClosePropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { closePropertyPost: (
    { __typename?: 'PropertyPostMutationResponse' }
    & Pick<PropertyPostMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateC2CPropertyPostMutationVariables = Exact<{
  createC2CPropertyPost: CreateC2CPropertyPostInput;
}>;


export type CreateC2CPropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { createC2CPropertyPost: (
    { __typename?: 'PropertyPostMutationResponse' }
    & Pick<PropertyPostMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { propertyPostDto?: Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'propertyPostId' | 'createdByUserId' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'balconyDirection' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'images' | 'internalFacility' | 'nearFacility' | 'propertyPostApprovalStatusId' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'legalInfoId' | 'collateralizedAtBankId' | 'expiredDate' | 'projectId' | 'freeTextProject' | 'addressId' | 'ownerId' | 'ownerIsAuthor' | 'isPrivate' | 'supportRequestTypeIds' | 'staffGroups' | 'staffGroupDescriptions' | 'length' | 'width' | 'isShowGoogleStreetView' | 'postServiceType' | 'guaranteedPackageId' | 'saleCommissionCurrencyUnitId' | 'propertyPostApprovalStatusDescription' | 'detailPath' | 'propertyTypeDescription'>
      & { unitOfMeasure?: Maybe<(
        { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
        & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
      )>, projectInfo?: Maybe<(
        { __typename?: 'ProjectByPropertyPostInfo' }
        & Pick<ProjectByPropertyPostInfo, 'projectDescription' | 'projectImage' | 'projectId' | 'projectName'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, owner?: Maybe<(
        { __typename?: 'OwnerInfoDto' }
        & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
      )> }
    )>, badWordListDto?: Maybe<Array<Maybe<(
      { __typename?: 'CheckBadWordResult' }
      & Pick<CheckBadWordResult, 'originalContent' | 'highlightedContent' | 'badWords'>
    )>>> }
  ) }
);

export type FollowPropertyPostMutationVariables = Exact<{
  followPropertyPostInput: FollowPropertyPostInput;
}>;


export type FollowPropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { followPropertyPost: (
    { __typename?: 'PropertyPostMutationResponse' }
    & Pick<PropertyPostMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { propertyPostDto?: Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'isFollowed' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'isPrivate' | 'propertyPostId' | 'createdByUserId' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'images' | 'internalFacility' | 'nearFacility' | 'propertyPostApprovalStatusId' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'legalInfoId' | 'collateralizedAtBankId' | 'isCollateralized' | 'expiredDate' | 'projectId' | 'freeTextProject' | 'addressId' | 'ownerId' | 'ownerIsAuthor' | 'requestedUpdatingReason'>
      & { unitOfMeasure?: Maybe<(
        { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
        & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, owner?: Maybe<(
        { __typename?: 'OwnerInfoDto' }
        & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
      )>, projectInfo?: Maybe<(
        { __typename?: 'ProjectByPropertyPostInfo' }
        & Pick<ProjectByPropertyPostInfo, 'projectId' | 'projectName' | 'projectImage' | 'projectDescription'>
      )> }
    )> }
  ) }
);

export type GetC2CPropertyPostByIdPublicLastVersionFoQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetC2CPropertyPostByIdPublicLastVersionFoQuery = (
  { __typename?: 'Query' }
  & { getC2CPropertyPostByIdPublicLastVersionFO: (
    { __typename?: 'GetC2CPropertyPostByIdLastPublicVersionResponse' }
    & Pick<GetC2CPropertyPostByIdLastPublicVersionResponse, 'errorCode' | 'errorMessageCode'>
    & { propertyPostDto?: Maybe<(
      { __typename?: 'PropertyPostForLastPublicVersionDto' }
      & Pick<PropertyPostForLastPublicVersionDto, 'propertyPostApprovalStatusId' | 'buildingArea' | 'propertyPostId' | 'propertyCode' | 'postTitle' | 'propertyName' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'price' | 'commission' | 'commissionTpl' | 'createdByUserId' | 'direction' | 'detailPath' | 'images' | 'ownerIsAuthor' | 'saleCommissionCurrencyUnitId' | 'isCreateByAgent'>
      & { owner?: Maybe<(
        { __typename?: 'OwnerInfoDto' }
        & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
      )>, sellerInfo?: Maybe<(
        { __typename?: 'SellerInfo' }
        & Pick<SellerInfo, 'sellerId' | 'fullName' | 'avatar' | 'avatars' | 'email' | 'phoneNumber' | 'isAgent' | 'agentGroupDescription'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryName' | 'cityName' | 'districtName' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, propertyPostForRentDto?: Maybe<(
        { __typename?: 'PropertyPostForRentDto' }
        & Pick<PropertyPostForRentDto, 'isRented' | 'rentPrice' | 'rentCommission' | 'rentCommissionCurrencyUnitId'>
      )> }
    )> }
  ) }
);

export type C2CPropertyPostCommissionTplConfigByDateQueryVariables = Exact<{
  date: Scalars['Long'];
}>;


export type C2CPropertyPostCommissionTplConfigByDateQuery = (
  { __typename?: 'Query' }
  & { c2CPropertyPostCommissionTPLConfigByDate?: Maybe<(
    { __typename?: 'C2CPropertyPostCommissionTPLConfigByDateResponse' }
    & Pick<C2CPropertyPostCommissionTplConfigByDateResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { commissionConfigDto?: Maybe<(
      { __typename?: 'C2CPropertyPostCommissionConfigDto' }
      & Pick<C2CPropertyPostCommissionConfigDto, 'platformFeeBasedOnCommission' | 'platformFeeMinimumBasedOnSellingPrice'>
    )> }
  )> }
);

export type GetFoC2CPropertyPostsHomePageV1QueryVariables = Exact<{
  input: GetFoC2CPropertyPostsHomePageV1Input;
}>;


export type GetFoC2CPropertyPostsHomePageV1Query = (
  { __typename?: 'Query' }
  & { getFoC2CPropertyPostsHomePageV1: (
    { __typename: 'GetFoC2CPropertyPostsHomePageV1Response' }
    & { propertyPostInfoDtos?: Maybe<Array<Maybe<(
      { __typename: 'SearchPropertyPostInfoDto' }
      & Pick<SearchPropertyPostInfoDto, 'propertyPostId' | 'images' | 'price' | 'postTitle' | 'unitOfMeasureId' | 'propertyTypeId' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea' | 'totalSiteArea' | 'capetAreas' | 'commission' | 'isCreatedByAgent' | 'isFollowed' | 'isGuaranteed' | 'direction' | 'forSale' | 'forRent' | 'detailPath' | 'saleCommissionCurrencyUnitId'>
      & { propertyAddress?: Maybe<(
        { __typename: 'PropertyAddressInfo' }
        & Pick<PropertyAddressInfo, 'homeAddress' | 'streetName' | 'wardName' | 'districtName' | 'cityName'>
      )>, sellerInfo?: Maybe<(
        { __typename: 'SellerInfo' }
        & Pick<SellerInfo, 'sellerId' | 'fullName' | 'avatar' | 'avatars' | 'email' | 'phoneNumber' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription'>
      )> }
    )>>> }
  ) }
);

export type GetC2CSimilarPostsQueryVariables = Exact<{
  input: GetC2CSimilarPostsInput;
}>;


export type GetC2CSimilarPostsQuery = (
  { __typename?: 'Query' }
  & { getC2CSimilarPosts: (
    { __typename?: 'GetC2CSimilarPostsResponse' }
    & Pick<GetC2CSimilarPostsResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { propertyPostInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchPropertyPostInfoDto' }
      & Pick<SearchPropertyPostInfoDto, 'isFollowed' | 'createdByUserId' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'propertyPostId' | 'postTitle' | 'postDescription' | 'propertyTypeId' | 'propertyCode' | 'direction' | 'saleCommissionCurrencyUnitId' | 'unitOfMeasureId' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'images' | 'price' | 'latitude' | 'longitude' | 'priceNoVat' | 'priceVat' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'isVip' | 'forRent' | 'forSale' | 'isSold' | 'isRented' | 'isCreatedByAgent' | 'propertyPostApprovalStatusId' | 'commission' | 'isGuaranteed'>
      & { propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfo' }
        & Pick<PropertyAddressInfo, 'countryId' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, sellerInfo?: Maybe<(
        { __typename?: 'SellerInfo' }
        & Pick<SellerInfo, 'sellerId' | 'fullName' | 'phoneNumber' | 'email' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription' | 'avatar' | 'avatars'>
      )> }
    )>>> }
  ) }
);

export type GetCurPropertyPostsByAgentIdForPublicQueryVariables = Exact<{
  agentId: Scalars['Uuid'];
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
  where?: Maybe<PropertyPostForPublicDtoFilter>;
}>;


export type GetCurPropertyPostsByAgentIdForPublicQuery = (
  { __typename?: 'Query' }
  & { curPropertyPostsByAgentIdForPublic?: Maybe<(
    { __typename?: 'PropertyPostForPublicDtoConnection' }
    & Pick<PropertyPostForPublicDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'PropertyPostForPublicDtoEdge' }
      & Pick<PropertyPostForPublicDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'PropertyPostForPublicDto' }
        & Pick<PropertyPostForPublicDto, 'isFollowed' | 'totalFollower' | 'totalShare' | 'direction' | 'propertyPostId' | 'createdByUserId' | 'propertyTypeId' | 'propertyName' | 'postTitle' | 'price' | 'images' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea' | 'commission' | 'saleCommissionCurrencyUnitId' | 'propertyPostApprovalStatusId' | 'forSale' | 'forRent' | 'propertyCode'>
        & { unitOfMeasure?: Maybe<(
          { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
          & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
        )>, propertyAddress?: Maybe<(
          { __typename?: 'PropertyAddressInfoDto' }
          & Pick<PropertyAddressInfoDto, 'homeAddress' | 'streetName' | 'wardName' | 'cityName' | 'districtName'>
        )>, propertyPostForRentDto?: Maybe<(
          { __typename?: 'PropertyPostForRentDto' }
          & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice' | 'isRented'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetFoC2CPropertyPostRequestUpdateReasonQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetFoC2CPropertyPostRequestUpdateReasonQuery = (
  { __typename?: 'Query' }
  & { getFoC2CPropertyPostRequestUpdateReason: (
    { __typename?: 'GetFoC2CPropertyPostRequestUpdateReasonResponse' }
    & Pick<GetFoC2CPropertyPostRequestUpdateReasonResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'requestedUpdatingReason'>
  ) }
);

export type GetGuaranteedPackagesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetGuaranteedPackagesQuery = (
  { __typename?: 'Query' }
  & { guaranteedPackages?: Maybe<(
    { __typename?: 'OffsetPagingOfGuaranteedPackageDto' }
    & Pick<OffsetPagingOfGuaranteedPackageDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'GuaranteedPackageDto' }
      & Pick<GuaranteedPackageDto, 'guaranteedPackageId' | 'guaranteedPackageName' | 'guaranteedPackageCode' | 'guaranteedPackageDescription' | 'guaranteedPackagePrepaymentRate' | 'guaranteedPackageValidMonths'>
    )>>> }
  )> }
);

export type GetPropertyByUserIdQueryVariables = Exact<{
  pageSize: Scalars['PaginationAmount'];
  cursor: Scalars['String'];
  filter: PropertyPostDtoFilter;
}>;


export type GetPropertyByUserIdQuery = (
  { __typename?: 'Query' }
  & { curPropertyPosts?: Maybe<(
    { __typename?: 'PropertyPostDtoConnection' }
    & Pick<PropertyPostDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'PropertyPostDtoEdge' }
      & Pick<PropertyPostDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'PropertyPostDto' }
        & Pick<PropertyPostDto, 'isFollowed' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'direction' | 'isPrivate' | 'propertyPostId' | 'createdByUserId' | 'propertyTypeId' | 'propertyName' | 'postTitle' | 'price' | 'images' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea' | 'capetAreas' | 'commission' | 'saleCommissionCurrencyUnitId' | 'propertyPostApprovalStatusId' | 'unitOfMeasureId'>
        & { unitOfMeasure?: Maybe<(
          { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
          & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
        )>, propertyAddress?: Maybe<(
          { __typename?: 'PropertyAddressInfoDto' }
          & Pick<PropertyAddressInfoDto, 'homeAddress' | 'streetName' | 'wardName' | 'cityName' | 'districtName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetPropertyPostByCurrentUserQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<PropertyPostDtoFilter>;
  sort?: Maybe<PropertyPostDtoSort>;
  keywords?: Maybe<Scalars['String']>;
}>;


export type GetPropertyPostByCurrentUserQuery = (
  { __typename?: 'Query' }
  & { propertyPostsByCurrentUser?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyPostDto' }
    & Pick<OffsetPagingOfPropertyPostDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'guaranteedPackageEndTime' | 'postServiceType' | 'contractStatus' | 'propertyPostId' | 'propertyCode' | 'postTitle' | 'price' | 'buildingArea' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'images' | 'propertyPostApprovalStatusId' | 'direction' | 'commission' | 'saleCommissionCurrencyUnitId' | 'forSale' | 'forRent' | 'isSold' | 'createdDatetime'>
      & { propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryName' | 'cityName' | 'districtName' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, propertyPostForRentDto?: Maybe<(
        { __typename?: 'PropertyPostForRentDto' }
        & Pick<PropertyPostForRentDto, 'rentPrice' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'isRented'>
      )> }
    )>>> }
  )> }
);

export type GetPropertyPostByIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetPropertyPostByIdQuery = (
  { __typename?: 'Query' }
  & { propertyPostById?: Maybe<(
    { __typename?: 'PropertyPostDto' }
    & Pick<PropertyPostDto, 'isPrivate' | 'isSold' | 'isRented' | 'propertyPostId' | 'panoramaImageCode' | 'propertyPostApprovalStatusId' | 'negotiable' | 'isFollowed' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'width' | 'length' | 'images' | 'recordVersion' | 'createdByUserId' | 'expiredDate' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectReasonId' | 'rejectedDatetime' | 'rejectedReason' | 'requestedUpdatingReason' | 'updatedDatetime' | 'createdDatetime' | 'lastModified' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'saleCommissionCurrencyUnitId' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'balconyDirection' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'internalFacility' | 'nearFacility' | 'legalInfoId' | 'collateralizedAtBankId' | 'isCollateralized' | 'addressId' | 'forRent' | 'forSale' | 'ownerId' | 'ownerIsAuthor' | 'isShowGoogleStreetView' | 'contractStatus' | 'guaranteedPackageEndTime' | 'projectId' | 'b2C2CProjectId' | 'freeTextProject' | 'supportRequestTypeIds' | 'staffUserId' | 'postServiceType' | 'legalDocuments' | 'guaranteedPackageId' | 'propertyLocation' | 'alleyWidth' | 'commissionTpl' | 'commissionBuyer' | 'commissionSeller' | 'matterportUrl' | 'detailPath' | 'rating'>
    & { unitOfMeasure?: Maybe<(
      { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
      & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
    )>, propertyPostForRentDto?: Maybe<(
      { __typename?: 'PropertyPostForRentDto' }
      & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice' | 'isRented'>
    )>, propertyAddress?: Maybe<(
      { __typename?: 'PropertyAddressInfoDto' }
      & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
    )>, owner?: Maybe<(
      { __typename?: 'OwnerInfoDto' }
      & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
    )>, sellerInfo?: Maybe<(
      { __typename?: 'SellerInfo' }
      & Pick<SellerInfo, 'sellerId' | 'fullName' | 'avatar' | 'avatars' | 'email' | 'phoneNumber' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription'>
    )>, guaranteedPackage?: Maybe<(
      { __typename?: 'C2CPropertyPostGuaranteedPackageDto' }
      & Pick<C2CPropertyPostGuaranteedPackageDto, 'guaranteedPackageId' | 'contractDocument' | 'contractPrepaymentAmount' | 'contractRefuseNote' | 'contractStatus' | 'guaranteedPackageStartTime' | 'guaranteedPackageEndTime' | 'guaranteedPackageValidMonths' | 'paymentStatusId'>
    )>, projectInfo?: Maybe<(
      { __typename?: 'ProjectByPropertyPostInfo' }
      & Pick<ProjectByPropertyPostInfo, 'projectId' | 'projectName' | 'projectImage' | 'projectDescription'>
    )> }
  )> }
);

export type GetPropertyPostByIdPublicQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetPropertyPostByIdPublicQuery = (
  { __typename?: 'Query' }
  & { propertyPostDetail?: Maybe<(
    { __typename?: 'PropertyPostDto' }
    & Pick<PropertyPostDto, 'isPrivate' | 'propertyPostId' | 'panoramaImageCode' | 'propertyPostApprovalStatusId' | 'negotiable' | 'isFollowed' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'width' | 'length' | 'images' | 'recordVersion' | 'createdByUserId' | 'expiredDate' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'requestedUpdatingReason' | 'updatedDatetime' | 'createdDatetime' | 'lastModified' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'saleCommissionCurrencyUnitId' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'internalFacility' | 'nearFacility' | 'legalInfoId' | 'collateralizedAtBankId' | 'isCollateralized' | 'addressId' | 'isSold' | 'isRented' | 'forRent' | 'forSale' | 'ownerId' | 'ownerIsAuthor' | 'projectId' | 'freeTextProject' | 'supportRequestTypeIds' | 'isShowGoogleStreetView' | 'contractStatus' | 'guaranteedPackageEndTime' | 'staffUserId' | 'postServiceType' | 'propertyLocation' | 'alleyWidth' | 'commissionTpl' | 'commissionBuyer' | 'commissionSeller' | 'matterportUrl' | 'detailPath' | 'rating'>
    & { unitOfMeasure?: Maybe<(
      { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
      & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
    )>, propertyPostForRentDto?: Maybe<(
      { __typename?: 'PropertyPostForRentDto' }
      & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice' | 'isRented'>
    )>, propertyAddress?: Maybe<(
      { __typename?: 'PropertyAddressInfoDto' }
      & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
    )>, owner?: Maybe<(
      { __typename?: 'OwnerInfoDto' }
      & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
    )>, sellerInfo?: Maybe<(
      { __typename?: 'SellerInfo' }
      & Pick<SellerInfo, 'sellerId' | 'fullName' | 'avatar' | 'avatars' | 'email' | 'phoneNumber' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription'>
    )>, projectInfo?: Maybe<(
      { __typename?: 'ProjectByPropertyPostInfo' }
      & Pick<ProjectByPropertyPostInfo, 'projectId' | 'projectName' | 'projectImage' | 'projectDescription'>
    )>, guaranteedPackage?: Maybe<(
      { __typename?: 'C2CPropertyPostGuaranteedPackageDto' }
      & Pick<C2CPropertyPostGuaranteedPackageDto, 'contractDocument' | 'contractPrepaymentAmount' | 'contractRefuseNote' | 'contractStatus' | 'guaranteedPackageEndTime'>
    )> }
  )> }
);

export type GetPropertyPostSuggestionQueryVariables = Exact<{
  pageSize: Scalars['PaginationAmount'];
  cursor: Scalars['String'];
  filter?: Maybe<PropertyPostSuggestionDtoFilter>;
}>;


export type GetPropertyPostSuggestionQuery = (
  { __typename?: 'Query' }
  & { curPropertyPostSuggestions?: Maybe<(
    { __typename?: 'PropertyPostSuggestionDtoConnection' }
    & Pick<PropertyPostSuggestionDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'PropertyPostSuggestionDtoEdge' }
      & Pick<PropertyPostSuggestionDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'PropertyPostSuggestionDto' }
        & Pick<PropertyPostSuggestionDto, 'propertyTypeId' | 'propertyPostId' | 'propertyName' | 'postTitle' | 'price' | 'images' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea' | 'capetAreas' | 'propertyPostApprovalStatusId' | 'commission' | 'isFollowed' | 'totalFollower' | 'direction' | 'postServiceType' | 'contractStatus' | 'guaranteedPackageEndTime'>
        & { unitOfMeasure?: Maybe<(
          { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
          & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
        )>, propertyAddress?: Maybe<(
          { __typename?: 'PropertyAddressInfoDto' }
          & Pick<PropertyAddressInfoDto, 'streetName' | 'wardName' | 'cityName' | 'districtName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetPropertyPostsQueryVariables = Exact<{
  where?: Maybe<PropertyPostDtoFilter>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by?: Maybe<PropertyPostDtoSort>;
}>;


export type GetPropertyPostsQuery = (
  { __typename?: 'Query' }
  & { propertyPosts?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyPostDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'isPrivate' | 'propertyPostId' | 'propertyPostApprovalStatusId' | 'isFollowed' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'images' | 'createdByUserId' | 'expiredDate' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'requestedUpdatingReason' | 'updatedDatetime' | 'createdDatetime' | 'lastModified' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'saleCommissionCurrencyUnitId' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'projectId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'internalFacility' | 'nearFacility' | 'legalInfoId' | 'collateralizedAtBankId' | 'isCollateralized' | 'addressId' | 'forRent' | 'forSale' | 'freeTextProject' | 'ownerId'>
      & { unitOfMeasure?: Maybe<(
        { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
        & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
      )>, projectInfo?: Maybe<(
        { __typename?: 'ProjectByPropertyPostInfo' }
        & Pick<ProjectByPropertyPostInfo, 'calculateSize' | 'projectDescription' | 'projectId' | 'projectName' | 'projectImage'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, sellerInfo?: Maybe<(
        { __typename?: 'SellerInfo' }
        & Pick<SellerInfo, 'sellerId' | 'fullName' | 'avatar' | 'email' | 'phoneNumber' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription'>
      )>, propertyPostForRentDto?: Maybe<(
        { __typename?: 'PropertyPostForRentDto' }
        & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice' | 'isRented'>
      )> }
    )>>> }
  )> }
);

export type GetPropertyPostsByFollowerIdQueryVariables = Exact<{
  followerId: Scalars['Uuid'];
  pageSize: Scalars['PaginationAmount'];
  cursor: Scalars['String'];
  filter?: Maybe<PropertyPostDtoFilter>;
}>;


export type GetPropertyPostsByFollowerIdQuery = (
  { __typename?: 'Query' }
  & { curPropertyPostsByFollowerId?: Maybe<(
    { __typename?: 'PropertyPostDtoConnection' }
    & Pick<PropertyPostDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'PropertyPostDtoEdge' }
      & Pick<PropertyPostDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'PropertyPostDto' }
        & Pick<PropertyPostDto, 'isFollowed' | 'totalFollower' | 'createdByUserId' | 'propertyPostId' | 'propertyTypeId' | 'propertyName' | 'postTitle' | 'price' | 'images' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'buildingArea' | 'direction' | 'capetAreas' | 'commission' | 'propertyPostApprovalStatusId' | 'saleCommissionCurrencyUnitId' | 'unitOfMeasureId' | 'forSale' | 'forRent' | 'postServiceType' | 'contractStatus' | 'guaranteedPackageEndTime'>
        & { unitOfMeasure?: Maybe<(
          { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
          & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
        )>, propertyAddress?: Maybe<(
          { __typename?: 'PropertyAddressInfoDto' }
          & Pick<PropertyAddressInfoDto, 'streetName' | 'wardName' | 'cityName' | 'districtName'>
        )>, propertyPostForRentDto?: Maybe<(
          { __typename?: 'PropertyPostForRentDto' }
          & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice' | 'isRented'>
        )>, guaranteedPackage?: Maybe<(
          { __typename?: 'C2CPropertyPostGuaranteedPackageDto' }
          & Pick<C2CPropertyPostGuaranteedPackageDto, 'contractStatus' | 'guaranteedPackageEndTime'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetShortPropertyPostByIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetShortPropertyPostByIdQuery = (
  { __typename?: 'Query' }
  & { propertyPostById?: Maybe<(
    { __typename?: 'PropertyPostDto' }
    & Pick<PropertyPostDto, 'propertyPostId' | 'postTitle' | 'postDescription' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertyTypeName' | 'isCreateByAgent' | 'addressId' | 'unitOfMeasureId' | 'forRent' | 'forSale' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'images' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'saleCommissionCurrencyUnitId' | 'buildingArea' | 'direction' | 'capetAreas' | 'totalSiteArea' | 'latitude' | 'longitude' | 'propertyPostApprovalStatusId' | 'propertyPostApprovalStatusName' | 'isFollowed' | 'ownerId' | 'contractStatus' | 'guaranteedPackageEndTime' | 'postServiceType' | 'rating'>
    & { propertyAddress?: Maybe<(
      { __typename?: 'PropertyAddressInfoDto' }
      & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
    )>, unitOfMeasure?: Maybe<(
      { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
      & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
    )>, sellerInfo?: Maybe<(
      { __typename?: 'SellerInfo' }
      & Pick<SellerInfo, 'sellerId' | 'fullName' | 'phoneNumber' | 'email' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription' | 'avatar' | 'avatars'>
    )>, propertyPostForRentDto?: Maybe<(
      { __typename?: 'PropertyPostForRentDto' }
      & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice'>
    )>, guaranteedPackage?: Maybe<(
      { __typename?: 'C2CPropertyPostGuaranteedPackageDto' }
      & Pick<C2CPropertyPostGuaranteedPackageDto, 'contractStatus' | 'guaranteedPackageEndTime'>
    )> }
  )> }
);

export type GetShortPropertyPostByIdForPublicQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetShortPropertyPostByIdForPublicQuery = (
  { __typename?: 'Query' }
  & { propertyPostDetail?: Maybe<(
    { __typename?: 'PropertyPostDto' }
    & Pick<PropertyPostDto, 'propertyPostId' | 'postTitle' | 'postDescription' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertyTypeName' | 'isCreateByAgent' | 'addressId' | 'unitOfMeasureId' | 'isSold' | 'isRented' | 'forRent' | 'forSale' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'images' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'saleCommissionCurrencyUnitId' | 'buildingArea' | 'direction' | 'capetAreas' | 'totalSiteArea' | 'latitude' | 'longitude' | 'propertyPostApprovalStatusId' | 'isFollowed' | 'contractStatus' | 'guaranteedPackageEndTime' | 'postServiceType' | 'rating'>
    & { propertyAddress?: Maybe<(
      { __typename?: 'PropertyAddressInfoDto' }
      & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
    )>, unitOfMeasure?: Maybe<(
      { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
      & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
    )>, sellerInfo?: Maybe<(
      { __typename?: 'SellerInfo' }
      & Pick<SellerInfo, 'sellerId' | 'fullName' | 'phoneNumber' | 'email' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription' | 'avatar' | 'avatars'>
    )>, propertyPostForRentDto?: Maybe<(
      { __typename?: 'PropertyPostForRentDto' }
      & Pick<PropertyPostForRentDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice'>
    )>, guaranteedPackage?: Maybe<(
      { __typename?: 'C2CPropertyPostGuaranteedPackageDto' }
      & Pick<C2CPropertyPostGuaranteedPackageDto, 'contractStatus' | 'guaranteedPackageEndTime'>
    )> }
  )> }
);

export type GetSummaryPropertyPostQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSummaryPropertyPostQuery = (
  { __typename?: 'Query' }
  & { summaryPropertyPosts?: Maybe<(
    { __typename?: 'GetSummaryPropertyPostResponse' }
    & Pick<GetSummaryPropertyPostResponse, 'propertyPostInfoByApproveStatus' | 'propertyPostInfoByPostStatus'>
  )>, summaryByCrawlerTrackingStatus?: Maybe<(
    { __typename?: 'GetSummaryByCrawlerTrackingStatusResponse' }
    & Pick<GetSummaryByCrawlerTrackingStatusResponse, 'totalCount'>
  )> }
);

export type UnfollowPropertyPostMutationVariables = Exact<{
  unfollowPropertyPostInput: UnfollowPropertyPostInput;
}>;


export type UnfollowPropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { unfollowPropertyPost: (
    { __typename?: 'PropertyPostMutationResponse' }
    & Pick<PropertyPostMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { propertyPostDto?: Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'isFollowed' | 'isPrivate' | 'propertyPostId' | 'createdByUserId' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'images' | 'internalFacility' | 'nearFacility' | 'propertyPostApprovalStatusId' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'legalInfoId' | 'collateralizedAtBankId' | 'isCollateralized' | 'expiredDate' | 'projectId' | 'freeTextProject' | 'addressId' | 'ownerId' | 'ownerIsAuthor' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'requestedUpdatingReason'>
      & { unitOfMeasure?: Maybe<(
        { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
        & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, owner?: Maybe<(
        { __typename?: 'OwnerInfoDto' }
        & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
      )>, projectInfo?: Maybe<(
        { __typename?: 'ProjectByPropertyPostInfo' }
        & Pick<ProjectByPropertyPostInfo, 'projectId' | 'projectName' | 'projectImage' | 'projectDescription'>
      )> }
    )> }
  ) }
);

export type UpdateC2CPropertyPostMutationVariables = Exact<{
  updateC2CPropertyPostInput: UpdateC2CPropertyPostInput;
}>;


export type UpdateC2CPropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { updateC2CPropertyPost: (
    { __typename?: 'C2CPropertyPostMutationResponse' }
    & Pick<C2CPropertyPostMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { propertyPostDto?: Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'isFollowed' | 'propertyPostId' | 'createdByUserId' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'balconyDirection' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'images' | 'internalFacility' | 'nearFacility' | 'propertyPostApprovalStatusId' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'legalInfoId' | 'collateralizedAtBankId' | 'expiredDate' | 'projectId' | 'freeTextProject' | 'addressId' | 'supportRequestTypeIds' | 'ownerId' | 'ownerIsAuthor'>
      & { unitOfMeasure?: Maybe<(
        { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
        & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, owner?: Maybe<(
        { __typename?: 'OwnerInfoDto' }
        & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
      )> }
    )>, badWordListDto?: Maybe<Array<Maybe<(
      { __typename?: 'CheckBadWordResult' }
      & Pick<CheckBadWordResult, 'originalContent' | 'highlightedContent' | 'badWords'>
    )>>> }
  ) }
);

export type UpdatePropertyPostMutationVariables = Exact<{
  updatePropertyPostInput: UpdatePropertyPostInput;
}>;


export type UpdatePropertyPostMutation = (
  { __typename?: 'Mutation' }
  & { updatePropertyPost: (
    { __typename?: 'PropertyPostMutationResponse' }
    & Pick<PropertyPostMutationResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { propertyPostDto?: Maybe<(
      { __typename?: 'PropertyPostDto' }
      & Pick<PropertyPostDto, 'isFollowed' | 'propertyPostId' | 'createdByUserId' | 'propertyCode' | 'propertyName' | 'postTitle' | 'postDescription' | 'blockCode' | 'blockName' | 'postTypeId' | 'propertyPostStatusId' | 'propertyTypeId' | 'propertySubTypeId' | 'propertySubTypeName' | 'bookingFee' | 'price' | 'priceNoVat' | 'priceVat' | 'commission' | 'buyCommission' | 'saleCommission' | 'unitOfMeasureId' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'buildingLine' | 'direction' | 'latitude' | 'longitude' | 'floor' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'houseDesign' | 'images' | 'internalFacility' | 'nearFacility' | 'propertyPostApprovalStatusId' | 'approvedBy' | 'approvedDatetime' | 'sendingApprovalFrom' | 'rejectedDatetime' | 'rejectedReason' | 'legalInfoId' | 'collateralizedAtBankId' | 'expiredDate' | 'projectId' | 'freeTextProject' | 'addressId' | 'ownerId' | 'ownerIsAuthor'>
      & { unitOfMeasure?: Maybe<(
        { __typename?: 'property_posts_UnitOfMeasureInfoDto' }
        & Pick<Property_Posts_UnitOfMeasureInfoDto, 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName' | 'numberOfDecimal' | 'multiplyWithBaseUnit' | 'isRound'>
      )>, propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'countryName' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, owner?: Maybe<(
        { __typename?: 'OwnerInfoDto' }
        & Pick<OwnerInfoDto, 'userId' | 'customerFullName' | 'customerPhone' | 'customerEmail'>
      )> }
    )>, badWordListDto?: Maybe<Array<Maybe<(
      { __typename?: 'CheckBadWordResult' }
      & Pick<CheckBadWordResult, 'originalContent' | 'highlightedContent' | 'badWords'>
    )>>> }
  ) }
);

export type ValidateNumberOfPostByUserIdQueryVariables = Exact<{
  validateNumberOfPostByUserIdInput: ValidateNumberOfPostByUserIdInput;
}>;


export type ValidateNumberOfPostByUserIdQuery = (
  { __typename?: 'Query' }
  & { validateNumberPostByUserId: (
    { __typename?: 'ValidateNumberOfPostByUserIdResponse' }
    & Pick<ValidateNumberOfPostByUserIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isValid'>
  ) }
);

export type ValidateReCaptchaForPropertyPostBasketMutationVariables = Exact<{
  request: ValidateReCaptchaForPropertyPostBasketInput;
}>;


export type ValidateReCaptchaForPropertyPostBasketMutation = (
  { __typename?: 'Mutation' }
  & { validateReCaptchaForPropertyPostBasket?: Maybe<(
    { __typename?: 'ValidateReCaptchaForPropertyPostBasketResponse' }
    & Pick<ValidateReCaptchaForPropertyPostBasketResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'requestId'>
  )> }
);

export type GetPropertyTypesQueryVariables = Exact<{
  where?: Maybe<PropertyTypeDtoFilter>;
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  order_by?: Maybe<PropertyTypeDtoSort>;
}>;


export type GetPropertyTypesQuery = (
  { __typename?: 'Query' }
  & { propertyTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyTypeDto' }
    & Pick<OffsetPagingOfPropertyTypeDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyTypeDto' }
      & Pick<PropertyTypeDto, 'isActive' | 'path' | 'propertyTypeId' | 'propertyTypeName' | 'propertyTypeDescription' | 'postUsageFields' | 'projectUsageFields'>
    )>>> }
  )> }
);

export type GetPropertyTypeByIdQueryVariables = Exact<{
  input?: Maybe<Scalars['Uuid']>;
}>;


export type GetPropertyTypeByIdQuery = (
  { __typename?: 'Query' }
  & { propertyTypeById?: Maybe<(
    { __typename?: 'PropertyTypeDto' }
    & Pick<PropertyTypeDto, 'isActive' | 'path' | 'propertyTypeId' | 'propertyTypeName' | 'propertyTypeDescription' | 'postUsageFields' | 'projectUsageFields'>
  )> }
);

export type ChangePushNotificationModeMutationVariables = Exact<{
  input: ChangePushNotificationModeInput;
}>;


export type ChangePushNotificationModeMutation = (
  { __typename?: 'Mutation' }
  & { changePushNotificationMode: (
    { __typename?: 'ChangePushNotificationModeResponse' }
    & Pick<ChangePushNotificationModeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CountPropertiesByCityQueryVariables = Exact<{
  input: SearchPropertyPostInput;
}>;


export type CountPropertiesByCityQuery = (
  { __typename?: 'Query' }
  & { searchPropertyPosts?: Maybe<(
    { __typename?: 'SearchPropertyPostResponse' }
    & Pick<SearchPropertyPostResponse, 'totalCount'>
  )> }
);

export type CreateSearchTermMutationVariables = Exact<{
  input: CreateSearchTermInput;
}>;


export type CreateSearchTermMutation = (
  { __typename?: 'Mutation' }
  & { createSearchTerm: (
    { __typename?: 'CreateSearchTermResponse' }
    & Pick<CreateSearchTermResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetProjectAdditionalDataQueryVariables = Exact<{
  input: ProjectsAdditionalForSearchInput;
}>;


export type GetProjectAdditionalDataQuery = (
  { __typename?: 'Query' }
  & { getProjectsAdditionalForSearch?: Maybe<(
    { __typename?: 'OffsetPagingOfProjectsForSearchDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ProjectsForSearchDto' }
      & Pick<ProjectsForSearchDto, 'projectId' | 'isFollowed' | 'totalFollower' | 'totalShare'>
    )>>> }
  )> }
);

export type GetPropertyAdditionalDataQueryVariables = Exact<{
  input: PropertyPostsAdditionalForSearchInput;
}>;


export type GetPropertyAdditionalDataQuery = (
  { __typename?: 'Query' }
  & { getPropertyPostsAdditionalForSearch?: Maybe<(
    { __typename?: 'OffsetPagingOfPropertyPostsForSearchDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'PropertyPostsForSearchDto' }
      & Pick<PropertyPostsForSearchDto, 'propertyPostId' | 'isFollowed' | 'totalFollower' | 'totalShare' | 'totalSpam'>
    )>>> }
  )> }
);

export type GetSearchTermsQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  where?: Maybe<SearchTermDtoFilter>;
  order_by?: Maybe<SearchTermDtoSort>;
}>;


export type GetSearchTermsQuery = (
  { __typename?: 'Query' }
  & { getSearchTerms?: Maybe<(
    { __typename?: 'OffsetPagingOfSearchTermDto' }
    & Pick<OffsetPagingOfSearchTermDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SearchTermDto' }
      & Pick<SearchTermDto, 'keyWord'>
    )>>> }
  )> }
);

export type SearchSuggestQueryVariables = Exact<{
  project: SearchProjectInput;
  agent: SearchAgentInput;
  property: SearchPropertyPostInput;
}>;


export type SearchSuggestQuery = (
  { __typename?: 'Query' }
  & { searchProjects: (
    { __typename?: 'SearchProjectResponse' }
    & { projectInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchProjectInfoDto' }
      & Pick<SearchProjectInfoDto, 'projectId' | 'projectName'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressInfoDto' }
        & Pick<ProjectAddressInfoDto, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
      )> }
    )>>> }
  ), searchAgents: (
    { __typename?: 'SearchAgentResponse' }
    & { agentInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchAgentInfoDto' }
      & Pick<SearchAgentInfoDto, 'agentId' | 'profilePhoto' | 'firstName' | 'lastName' | 'agentGroupDescription'>
    )>>> }
  ), searchPropertyPosts?: Maybe<(
    { __typename?: 'SearchPropertyPostResponse' }
    & { propertyPostInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchPropertyPostInfoDto' }
      & Pick<SearchPropertyPostInfoDto, 'propertyPostId' | 'postTitle'>
      & { propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfo' }
        & Pick<PropertyAddressInfo, 'countryId' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )> }
    )>>> }
  )> }
);

export type SearchAgentsQueryVariables = Exact<{
  input: SearchAgentInput;
}>;


export type SearchAgentsQuery = (
  { __typename?: 'Query' }
  & { searchAgents: (
    { __typename?: 'SearchAgentResponse' }
    & Pick<SearchAgentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { agentInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchAgentInfoDto' }
      & Pick<SearchAgentInfoDto, 'sellingTotal' | 'agentId' | 'latitude' | 'longitude' | 'profilePhoto' | 'userName' | 'agentGroupDescription' | 'instruction' | 'permanentAddress' | 'nationalId' | 'agentCode' | 'firstName' | 'lastName' | 'email' | 'phoneNumber' | 'agentGroupId' | 'isInitialAccount' | 'rating' | 'isAgentLeader' | 'preferPropertyTypes' | 'preferPropertyPriceFrom' | 'preferPropertyPriceTo' | 'workingAreas' | 'agentRankingName' | 'agentRankingLevel' | 'agentGroupName' | 'updatedDatetime' | 'createdDatetime' | 'agentRankingDescription'>
    )>>> }
  ) }
);

export type SearchAgentsCoordinatesQueryVariables = Exact<{
  input: SearchAgentInput;
}>;


export type SearchAgentsCoordinatesQuery = (
  { __typename?: 'Query' }
  & { searchAgents: (
    { __typename?: 'SearchAgentResponse' }
    & Pick<SearchAgentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { agentInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchAgentInfoDto' }
      & Pick<SearchAgentInfoDto, 'agentId' | 'profilePhoto' | 'latitude' | 'longitude'>
    )>>> }
  ) }
);

export type SearchProjectsQueryVariables = Exact<{
  input: SearchProjectInput;
}>;


export type SearchProjectsQuery = (
  { __typename?: 'Query' }
  & { searchProjects: (
    { __typename?: 'SearchProjectResponse' }
    & Pick<SearchProjectResponse, 'totalCount'>
    & { projectInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchProjectInfoDto' }
      & Pick<SearchProjectInfoDto, 'projectId' | 'isFollowed' | 'totalFollower' | 'totalShare' | 'projectName' | 'projectCode' | 'latitude' | 'longitude' | 'minPrice' | 'startYear' | 'totalArea' | 'overallDescription' | 'commissionRates' | 'projectStatusName' | 'featurePhotos' | 'investorOwnerName' | 'investorOwnerLogo' | 'propertyTypeId' | 'projectStatusId' | 'projectTypeName' | 'isFeaturesProject'>
      & { projectAddress?: Maybe<(
        { __typename?: 'ProjectAddressInfoDto' }
        & Pick<ProjectAddressInfoDto, 'cityId' | 'countryId' | 'districtId' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'districtName' | 'wardName'>
      )> }
    )>>> }
  ) }
);

export type SearchProjectsCoordinatesQueryVariables = Exact<{
  input: SearchProjectInput;
}>;


export type SearchProjectsCoordinatesQuery = (
  { __typename?: 'Query' }
  & { searchProjects: (
    { __typename?: 'SearchProjectResponse' }
    & Pick<SearchProjectResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { projectInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchProjectInfoDto' }
      & Pick<SearchProjectInfoDto, 'projectId' | 'latitude' | 'longitude' | 'minPrice'>
    )>>> }
  ) }
);

export type SearchPropertyPostsQueryVariables = Exact<{
  input: SearchPropertyPostInput;
}>;


export type SearchPropertyPostsQuery = (
  { __typename?: 'Query' }
  & { searchPropertyPosts?: Maybe<(
    { __typename?: 'SearchPropertyPostResponse' }
    & Pick<SearchPropertyPostResponse, 'totalCount'>
    & { propertyPostInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchPropertyPostInfoDto' }
      & Pick<SearchPropertyPostInfoDto, 'isFollowed' | 'createdByUserId' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'propertyPostId' | 'postTitle' | 'postDescription' | 'propertyTypeId' | 'propertyCode' | 'direction' | 'balconyDirection' | 'saleCommissionCurrencyUnitId' | 'unitOfMeasureId' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'images' | 'price' | 'latitude' | 'longitude' | 'priceNoVat' | 'priceVat' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'isVip' | 'forRent' | 'forSale' | 'isSold' | 'isRented' | 'isCreatedByAgent' | 'propertyPostApprovalStatusId' | 'commission' | 'isGuaranteed'>
      & { propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfo' }
        & Pick<PropertyAddressInfo, 'countryId' | 'cityId' | 'cityName' | 'districtId' | 'districtName' | 'wardId' | 'wardName' | 'homeAddress' | 'streetName'>
      )>, sellerInfo?: Maybe<(
        { __typename?: 'SellerInfo' }
        & Pick<SellerInfo, 'sellerId' | 'fullName' | 'phoneNumber' | 'email' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription' | 'avatar' | 'avatars'>
      )> }
    )>>> }
  )> }
);

export type SearchPropertyPostsCoordinatesQueryVariables = Exact<{
  input: SearchPropertyPostInput;
}>;


export type SearchPropertyPostsCoordinatesQuery = (
  { __typename?: 'Query' }
  & { searchPropertyPosts?: Maybe<(
    { __typename?: 'SearchPropertyPostResponse' }
    & Pick<SearchPropertyPostResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { propertyPostInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchPropertyPostInfoDto' }
      & Pick<SearchPropertyPostInfoDto, 'propertyPostId' | 'createdByUserId' | 'price' | 'longitude' | 'latitude'>
    )>>> }
  )> }
);

export type SearchPropertyPostsForRentQueryVariables = Exact<{
  input: SearchPropertyPostForRentInput;
}>;


export type SearchPropertyPostsForRentQuery = (
  { __typename?: 'Query' }
  & { searchPropertyPostsForRent?: Maybe<(
    { __typename?: 'SearchPropertyPostForRentResponse' }
    & Pick<SearchPropertyPostForRentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'totalCount'>
    & { propertyPostForRentInfoDtos?: Maybe<Array<Maybe<(
      { __typename?: 'SearchPropertyPostForRentInfoDto' }
      & Pick<SearchPropertyPostForRentInfoDto, 'propertyPostForRentId' | 'rentCommission' | 'rentCommissionCurrencyUnitId' | 'rentPeriod' | 'rentPrice'>
      & { searchPropertyPostInfoDto?: Maybe<(
        { __typename?: 'SearchPropertyPostInfoDto' }
        & Pick<SearchPropertyPostInfoDto, 'isFollowed' | 'createdByUserId' | 'totalFollower' | 'totalShare' | 'totalSpam' | 'propertyPostId' | 'postTitle' | 'postDescription' | 'propertyTypeId' | 'propertyCode' | 'direction' | 'forRent' | 'forSale' | 'saleCommissionCurrencyUnitId' | 'unitOfMeasureId' | 'numberOfFloor' | 'numberOfBedrooms' | 'numberOfBathrooms' | 'images' | 'price' | 'priceNoVat' | 'priceVat' | 'buildingArea' | 'capetAreas' | 'totalSiteArea' | 'isSold' | 'isRented' | 'isVip' | 'isCreatedByAgent' | 'longitude' | 'latitude' | 'propertyPostApprovalStatusId' | 'commission'>
        & { propertyAddress?: Maybe<(
          { __typename?: 'PropertyAddressInfo' }
          & Pick<PropertyAddressInfo, 'countryId' | 'cityId' | 'districtId' | 'districtName' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'wardName'>
        )>, sellerInfo?: Maybe<(
          { __typename?: 'SellerInfo' }
          & Pick<SellerInfo, 'sellerId' | 'fullName' | 'phoneNumber' | 'email' | 'isAgent' | 'agentRating' | 'agentRankingName' | 'agentGroupDescription' | 'avatar' | 'avatars'>
        )> }
      )> }
    )>>> }
  )> }
);

export type CreateCommentMutationVariables = Exact<{
  input: CreateCommentInput;
}>;


export type CreateCommentMutation = (
  { __typename?: 'Mutation' }
  & { createCommentForFrontOffice: (
    { __typename?: 'CreateCommentForFrontOfficeResponse' }
    & Pick<CreateCommentForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'recaptchaEnable'>
  ) }
);

export type CreateReplyMutationVariables = Exact<{
  input: CreateCommentInput;
}>;


export type CreateReplyMutation = (
  { __typename?: 'Mutation' }
  & { createCommentForFrontOffice: (
    { __typename?: 'CreateCommentForFrontOfficeResponse' }
    & Pick<CreateCommentForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'recaptchaEnable'>
  ) }
);

export type DeleteFollowerOfCurrentUserForFrontOfficeMutationVariables = Exact<{
  input: DeleteFollowerOfCurrentUserInput;
}>;


export type DeleteFollowerOfCurrentUserForFrontOfficeMutation = (
  { __typename?: 'Mutation' }
  & { deleteFollowerOfCurrentUserForFrontOffice: (
    { __typename?: 'DeleteFollowerOfCurrentUserForFrontOfficeResponse' }
    & Pick<DeleteFollowerOfCurrentUserForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type FollowFeedItemMutationVariables = Exact<{
  input: FollowFeedItemInput;
}>;


export type FollowFeedItemMutation = (
  { __typename?: 'Mutation' }
  & { followFeedItemForFrontOffice: (
    { __typename?: 'FollowFeedItemForFrontOfficeResponse' }
    & Pick<FollowFeedItemForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isFollowFeedItem'>
  ) }
);

export type GetCommentsQueryVariables = Exact<{
  input: GetCommentsByObjectIdCursorInput;
  first?: Maybe<Scalars['PaginationAmount']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
}>;


export type GetCommentsQuery = (
  { __typename?: 'Query' }
  & { curCommentsByObjectIdForFrontOffice?: Maybe<(
    { __typename?: 'CommentForFrontOfficeDtoConnection' }
    & { edges?: Maybe<Array<(
      { __typename?: 'CommentForFrontOfficeDtoEdge' }
      & { node?: Maybe<(
        { __typename?: 'CommentForFrontOfficeDto' }
        & Pick<CommentForFrontOfficeDto, 'commentId' | 'feedObjectTypeId' | 'feedObjectId' | 'feedItemId' | 'feedObjectTitle' | 'totalLike' | 'currentUserLikeComment' | 'createdDatetime' | 'content' | 'totalReply'>
        & { userInfo?: Maybe<(
          { __typename?: 'UserProfileDto' }
          & Pick<UserProfileDto, 'userId' | 'fullName' | 'profilePhoto' | 'profilePhotos'>
        )>, replies?: Maybe<Array<Maybe<(
          { __typename?: 'ReplyForFrontOfficeDto' }
          & Pick<ReplyForFrontOfficeDto, 'commentId' | 'feedObjectTypeId' | 'feedObjectId' | 'feedObjectTitle' | 'feedItemId' | 'totalLike' | 'createdDatetime' | 'currentUserLikeComment' | 'content'>
          & { userInfo?: Maybe<(
            { __typename?: 'UserProfileDto' }
            & Pick<UserProfileDto, 'userId' | 'fullName' | 'profilePhoto' | 'profilePhotos'>
          )> }
        )>>> }
      )> }
    )>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor' | 'startCursor' | 'hasPreviousPage'>
    ) }
  )> }
);

export type InviteUserActiveQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  userId: Scalars['Uuid'];
  where?: Maybe<SimpleUserInfoDtoFilter>;
}>;


export type InviteUserActiveQuery = (
  { __typename?: 'Query' }
  & { inviteUserActive?: Maybe<(
    { __typename: 'OffsetPagingOfSimpleUserInfoDto' }
    & Pick<OffsetPagingOfSimpleUserInfoDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SimpleUserInfoDto' }
      & Pick<SimpleUserInfoDto, 'userName' | 'fullName' | 'profilePhoto' | 'profilePhotos'>
    )>>> }
  )> }
);

export type InviteUserInfoQueryVariables = Exact<{
  userId: Scalars['Uuid'];
}>;


export type InviteUserInfoQuery = (
  { __typename?: 'Query' }
  & { inviteInfo?: Maybe<(
    { __typename: 'GenerateInviteResponse' }
    & Pick<GenerateInviteResponse, 'inviteCode' | 'inviteLink' | 'totalInviteActive'>
  )> }
);

export type GetTopenersByCurrentUserForFrontOfficeQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  input?: Maybe<GetTopenersByCurrentUserInput>;
  orderBy?: Maybe<GetTopenersByCurrentUserDtoSort>;
}>;


export type GetTopenersByCurrentUserForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getTopenersByCurrentUserForFrontOffice?: Maybe<(
    { __typename?: 'OffsetPagingOfGetTopenersByCurrentUserDto' }
    & Pick<OffsetPagingOfGetTopenersByCurrentUserDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'GetTopenersByCurrentUserDto' }
      & Pick<GetTopenersByCurrentUserDto, 'userId' | 'fullName' | 'phoneNumber' | 'profilePhoto' | 'isFollow' | 'profilePhotos' | 'agentRating' | 'agentGroupId' | 'agentGroupName' | 'agentRankingId' | 'agentRankingName'>
    )>>> }
  )> }
);

export type GetRepliesByCommentIdForFrontOfficeQueryVariables = Exact<{
  commentId: Scalars['Uuid'];
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
}>;


export type GetRepliesByCommentIdForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { curRepliesByCommentIdForFrontOffice?: Maybe<(
    { __typename?: 'ReplyForFrontOfficeDtoConnection' }
    & { edges?: Maybe<Array<(
      { __typename?: 'ReplyForFrontOfficeDtoEdge' }
      & { node?: Maybe<(
        { __typename?: 'ReplyForFrontOfficeDto' }
        & Pick<ReplyForFrontOfficeDto, 'commentId' | 'feedObjectId' | 'feedObjectTitle' | 'feedObjectTypeId' | 'totalLike' | 'feedItemId' | 'createdDatetime' | 'currentUserLikeComment' | 'content'>
        & { userInfo?: Maybe<(
          { __typename?: 'UserProfileDto' }
          & Pick<UserProfileDto, 'fullName' | 'profilePhoto'>
        )> }
      )> }
    )>>, pageInfo: (
      { __typename?: 'PageInfo' }
      & Pick<PageInfo, 'hasNextPage' | 'endCursor' | 'startCursor' | 'hasPreviousPage'>
    ) }
  )> }
);

export type GetTotalFollowerByFeedObjectIdForFrontOfficeQueryVariables = Exact<{
  feedObjectId: Scalars['String'];
}>;


export type GetTotalFollowerByFeedObjectIdForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getTotalFollowerByFeedObjectIdForFrontOffice?: Maybe<(
    { __typename?: 'GetTotalFollowerByFeedObjectIdForFrontOfficeResponse' }
    & Pick<GetTotalFollowerByFeedObjectIdForFrontOfficeResponse, 'errorMessage' | 'errorCode' | 'currentUserFollowFeedItem' | 'totalFollower' | 'totalFollowing'>
  )> }
);

export type LikeCommentMutationVariables = Exact<{
  input: LikeCommentInput;
}>;


export type LikeCommentMutation = (
  { __typename?: 'Mutation' }
  & { likeCommentForFrontOffice: (
    { __typename?: 'LikeCommentForFrontOfficeResponse' }
    & Pick<LikeCommentForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'isLikeComment'>
  ) }
);

export type ShareProjectByIdMutationVariables = Exact<{
  input: ShareProjectByIdInput;
}>;


export type ShareProjectByIdMutation = (
  { __typename?: 'Mutation' }
  & { shareProjectById: (
    { __typename?: 'ShareProjectByIdResponse' }
    & Pick<ShareProjectByIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type SharePropertyPostByIdMutationVariables = Exact<{
  input: SharePropertyPostInput;
}>;


export type SharePropertyPostByIdMutation = (
  { __typename?: 'Mutation' }
  & { sharePropertyPost: (
    { __typename?: 'SharePropertyPostResponse' }
    & Pick<SharePropertyPostResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetStaffByIdQueryVariables = Exact<{
  input?: Maybe<Scalars['Uuid']>;
}>;


export type GetStaffByIdQuery = (
  { __typename?: 'Query' }
  & { staffById?: Maybe<(
    { __typename?: 'StaffDto' }
    & Pick<StaffDto, 'createdDatetime' | 'departmentId' | 'departmentName' | 'dob' | 'email' | 'firstName' | 'fullName' | 'gender' | 'isActive' | 'isConsultant' | 'isCreatedByAdmin' | 'isGroupLeader' | 'isLocked' | 'isMember' | 'lastName' | 'nationalId' | 'permanentAddress' | 'phoneNumber' | 'preferPropertyPriceFrom' | 'preferPropertyPriceTo' | 'preferPropertyTypes' | 'profilePhoto' | 'rating' | 'recordVersion' | 'specialityIds' | 'staffCode' | 'staffContractTypeId' | 'staffGroupId' | 'staffGroupName' | 'staffId' | 'staffPositionId' | 'staffPositionName' | 'staffRankingId' | 'staffStatusId' | 'staffTypeId' | 'staffTypeName' | 'userId' | 'userName' | 'userStatus' | 'workingAreas'>
  )> }
);

export type GetStaffByPostIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type GetStaffByPostIdQuery = (
  { __typename?: 'Query' }
  & { getConsultantSupportForC2CPostFO: (
    { __typename?: 'GetConsultantSupportForC2CPostFOResponse' }
    & Pick<GetConsultantSupportForC2CPostFoResponse, 'errorCode' | 'errorMessageCode' | 'errorMessage'>
    & { consultantDto?: Maybe<(
      { __typename: 'ConsultantDto' }
      & Pick<ConsultantDto, 'staffId' | 'staffCode' | 'fullName' | 'phoneNumber' | 'rating' | 'staffGroupDescription' | 'profilePhoto' | 'profilePhotos'>
    )> }
  ) }
);

export type GetStaffByUserIdQueryVariables = Exact<{
  userId?: Maybe<Scalars['Uuid']>;
}>;


export type GetStaffByUserIdQuery = (
  { __typename?: 'Query' }
  & { staffByUserId?: Maybe<(
    { __typename?: 'StaffDto' }
    & Pick<StaffDto, 'email' | 'fullName' | 'phoneNumber' | 'profilePhoto' | 'rating' | 'userId' | 'staffId' | 'staffGroupName'>
  )> }
);

export type GenerateStringeeAuthTokenMutationVariables = Exact<{
  payload: GenerateStringeeAuthTokenInput;
}>;


export type GenerateStringeeAuthTokenMutation = (
  { __typename?: 'Mutation' }
  & { generateStringeeAuthToken: (
    { __typename?: 'GenerateStringeeAuthTokenResponse' }
    & Pick<GenerateStringeeAuthTokenResponse, 'authToken' | 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetCurrentSubscriptionPackageQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCurrentSubscriptionPackageQuery = (
  { __typename?: 'Query' }
  & { getActiveAgentSubscriptionPackageByCurrentUser?: Maybe<(
    { __typename?: 'GetActiveAgentSubscriptionPackageByCurrentUserResponse' }
    & Pick<GetActiveAgentSubscriptionPackageByCurrentUserResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { agentSubscriptionPackageDto?: Maybe<(
      { __typename?: 'AgentSubscriptionPackageDto' }
      & Pick<AgentSubscriptionPackageDto, 'isActive' | 'packageBoughtTime' | 'subscriptionInvoiceId' | 'subscriptionPackageEndTime' | 'subscriptionPackageId' | 'subscriptionPackageStartTime' | 'agentSubscriptionPackageId' | 'agentSubscriptionPackageStatus'>
    )> }
  )> }
);

export type GetAgentLastSubscriptionPackageQueryVariables = Exact<{ [key: string]: never; }>;


export type GetAgentLastSubscriptionPackageQuery = (
  { __typename?: 'Query' }
  & { getAgentLastSubscriptionPackageByCurrentUser?: Maybe<(
    { __typename?: 'GetAgentLastSubscriptionPackageResponse' }
    & Pick<GetAgentLastSubscriptionPackageResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { agentSubscriptionPackageDto?: Maybe<(
      { __typename?: 'AgentSubscriptionPackageDto' }
      & Pick<AgentSubscriptionPackageDto, 'isActive' | 'packageBoughtTime' | 'subscriptionInvoiceId' | 'subscriptionPackageEndTime' | 'subscriptionPackageId' | 'subscriptionPackageStartTime' | 'agentSubscriptionPackageId' | 'hasBoughtNewPackage'>
    )> }
  )> }
);

export type GetAgentSubscriptionTransactionValidatePaymentQueryVariables = Exact<{
  input: GetAgentSubscriptionTransactionValidatePaymentInput;
}>;


export type GetAgentSubscriptionTransactionValidatePaymentQuery = (
  { __typename?: 'Query' }
  & { getAgentSubscriptionTransactionValidatePayment: (
    { __typename?: 'GetAgentSubscriptionTransactionValidatePaymentResponse' }
    & Pick<GetAgentSubscriptionTransactionValidatePaymentResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { agentSubscriptionTransactionDto?: Maybe<(
      { __typename?: 'AgentSubscriptionTransactionDto' }
      & Pick<AgentSubscriptionTransactionDto, 'transactionId' | 'transactionStatusId' | 'purchaseDate' | 'startDate' | 'subscriptionPackageName' | 'subscriptionPackageValidDays'>
    )> }
  ) }
);

export type GetSubscriptionByIdQueryVariables = Exact<{
  packageId?: Maybe<Scalars['Uuid']>;
}>;


export type GetSubscriptionByIdQuery = (
  { __typename?: 'Query' }
  & { getSubscriptionPackageById?: Maybe<(
    { __typename?: 'GetSubscriptionPackageByIdResponse' }
    & Pick<GetSubscriptionPackageByIdResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { subscriptionPackageDto?: Maybe<(
      { __typename?: 'SubscriptionPackageDto' }
      & Pick<SubscriptionPackageDto, 'subscriptionPackageId' | 'subscriptionPackageName' | 'subscriptionPackagePrice' | 'subscriptionPackageValidDays'>
    )> }
  )> }
);

export type PayAgentSubscriptionTransctionMutationVariables = Exact<{
  input: PayAgentSubscriptionInput;
}>;


export type PayAgentSubscriptionTransctionMutation = (
  { __typename?: 'Mutation' }
  & { payAgentSubscriptionTransction: (
    { __typename?: 'PayAgentSubscriptionTransactionResponse' }
    & Pick<PayAgentSubscriptionTransactionResponse, 'disablePayment' | 'errorCode' | 'errorMessageCode' | 'errorMessage' | 'ipnUrl' | 'linkPaymentUrl' | 'returnUrl' | 'transactionId'>
  ) }
);

export type ChangeExecutorServiceTicketForFrontOfficeMutationVariables = Exact<{
  input: ChangeExecutorServiceTicketInput;
}>;


export type ChangeExecutorServiceTicketForFrontOfficeMutation = (
  { __typename?: 'Mutation' }
  & { changeExecutorServiceTicketForFrontOffice: (
    { __typename?: 'ChangeExecutorServiceTicketForFrontOfficeResponse' }
    & Pick<ChangeExecutorServiceTicketForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type ChangeStateOfServiceTicketForFrontOfficeMutationVariables = Exact<{
  input: ChangeStateOfServiceTicketInput;
}>;


export type ChangeStateOfServiceTicketForFrontOfficeMutation = (
  { __typename?: 'Mutation' }
  & { changeStateOfServiceTicketForFrontOffice: (
    { __typename?: 'ChangeStateOfServiceTicketForFrontOfficeResponse' }
    & Pick<ChangeStateOfServiceTicketForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateServiceTicketMutationVariables = Exact<{
  input: CreateServiceTicketInput;
}>;


export type CreateServiceTicketMutation = (
  { __typename?: 'Mutation' }
  & { createServiceTicketForFrontOffice: (
    { __typename?: 'CreateServiceTicketForFrontOfficeResponse' }
    & Pick<CreateServiceTicketForFrontOfficeResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'supportServiceTicketId'>
  ) }
);

export type ExecutorSubmitServiceTicketResultMutationVariables = Exact<{
  input: ExecutorSubmitServiceTicketResultInput;
}>;


export type ExecutorSubmitServiceTicketResultMutation = (
  { __typename?: 'Mutation' }
  & { executorSubmitServiceTicketResult: (
    { __typename?: 'ExecutorSubmitServiceTicketResultResponse' }
    & Pick<ExecutorSubmitServiceTicketResultResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<ReceivedServiceTicketForFrontOfficeDtoSort>;
  where?: Maybe<ReceivedServiceTicketForFrontOfficeDtoFilter>;
}>;


export type GetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getReceivedServiceTicketsByCurrentUserForFrontOffice?: Maybe<(
    { __typename?: 'OffsetPagingOfReceivedServiceTicketForFrontOfficeDto' }
    & Pick<OffsetPagingOfReceivedServiceTicketForFrontOfficeDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'ReceivedServiceTicketForFrontOfficeDto' }
      & Pick<ReceivedServiceTicketForFrontOfficeDto, 'ticketCode' | 'ticketStatusName' | 'ticketStatusId' | 'propertyPostId' | 'propertyPostCode' | 'supportServiceId' | 'supportServiceTicketId' | 'requesterId' | 'supportServiceName' | 'requesterFullName' | 'propertyPostDetailPath' | 'appointmentDatetime' | 'ticketProcessingStatusId' | 'createdDatetime'>
    )>>> }
  )> }
);

export type GetSentServiceTicketsByCurrentUserForFrontOfficeQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<SentServiceTicketForFrontOfficeDtoSort>;
  where?: Maybe<SentServiceTicketForFrontOfficeDtoFilter>;
}>;


export type GetSentServiceTicketsByCurrentUserForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getSentServiceTicketsByCurrentUserForFrontOffice?: Maybe<(
    { __typename?: 'OffsetPagingOfSentServiceTicketForFrontOfficeDto' }
    & Pick<OffsetPagingOfSentServiceTicketForFrontOfficeDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SentServiceTicketForFrontOfficeDto' }
      & Pick<SentServiceTicketForFrontOfficeDto, 'ticketCode' | 'ticketStatusId' | 'propertyPostId' | 'ticketStatusName' | 'supportServiceName' | 'propertyPostCode' | 'supportServiceId' | 'supportServiceTicketId' | 'currentExecutorName' | 'currentExecutorId' | 'propertyPostDetailPath' | 'appointmentDatetime' | 'createdDatetime'>
    )>>> }
  )> }
);

export type GetServiceTicketByIdForFrontOfficeQueryVariables = Exact<{
  SupportServiceTicketId: Scalars['Uuid'];
}>;


export type GetServiceTicketByIdForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getServiceTicketByIdForFrontOffice?: Maybe<(
    { __typename?: 'GetServiceTicketByIdForFrontOfficeResponse' }
    & Pick<GetServiceTicketByIdForFrontOfficeResponse, 'errorCode'>
    & { supportServiceTicket?: Maybe<(
      { __typename?: 'SupportServiceTicketForFrontOfficeDto' }
      & Pick<SupportServiceTicketForFrontOfficeDto, 'supportServiceTicketId' | 'supportServiceId' | 'supportServiceName' | 'ticketPaymentStatusId' | 'propertyPostId' | 'ticketCode' | 'appointmentDatetime' | 'requesterId' | 'requesterFullName' | 'ticketStatusId' | 'ticketStatusName' | 'currentExecutorId' | 'currentExecutorName' | 'updatedDatetime' | 'consultantStaffId' | 'consultantStaffName' | 'ticketNote' | 'nextStates' | 'currentAllStates'>
      & { requester?: Maybe<(
        { __typename?: 'support_service_UserCommonInfoDto' }
        & Pick<Support_Service_UserCommonInfoDto, 'fullName' | 'phoneNumber' | 'profilePhotos' | 'profilePhoto' | 'userId'>
      )>, currentExecutor?: Maybe<(
        { __typename?: 'support_service_UserCommonInfoDto' }
        & Pick<Support_Service_UserCommonInfoDto, 'fullName' | 'phoneNumber' | 'profilePhotos' | 'profilePhoto'>
      )>, supportServiceTicketProcessings?: Maybe<Array<Maybe<(
        { __typename?: 'SupportServiceTicketProcessingForFrontOfficeDto' }
        & Pick<SupportServiceTicketProcessingForFrontOfficeDto, 'reasonId' | 'reasonNote' | 'ticketProcessingStatusId' | 'ticketProcessingStatusName' | 'supportServiceTicketProcessingId' | 'updatedDatetime'>
      )>>>, supportServiceTicketResult?: Maybe<(
        { __typename?: 'SupportServiceTicketResultForFrontOfficeDto' }
        & Pick<SupportServiceTicketResultForFrontOfficeDto, 'autoAcceptTicketInMinutes' | 'supportServiceTicketResultId' | 'ticketResultStatusId' | 'note' | 'rejectReasonId' | 'rejectReasonNote' | 'resultDescriptions' | 'resultDocuments' | 'resultImages'>
      )> }
    )> }
  )> }
);

export type GetSupportServiceTicketDetailQueryVariables = Exact<{
  supportServiceTicketId: Scalars['Uuid'];
}>;


export type GetSupportServiceTicketDetailQuery = (
  { __typename?: 'Query' }
  & { getSupportServiceTicketDetail?: Maybe<(
    { __typename?: 'GetSupportServiceTicketDetailResponse' }
    & Pick<GetSupportServiceTicketDetailResponse, 'errorCode'>
    & { supportServiceTicketDto?: Maybe<(
      { __typename?: 'SupportServiceTicketDto' }
      & Pick<SupportServiceTicketDto, 'supportServiceId' | 'supportServiceName' | 'supportServiceTicketId' | 'ticketStatusId' | 'ticketStatusName' | 'ticketCode' | 'ticketNote' | 'appointmentDatetime' | 'propertyPostCode' | 'propertyPostId' | 'currentExecutorId' | 'currentExecutorName' | 'requesterId' | 'requesterFullName' | 'createdDatetime' | 'consultantStaffId' | 'consultantStaffName' | 'price'>
      & { currentExecutor?: Maybe<(
        { __typename?: 'support_service_UserCommonInfoDto' }
        & Pick<Support_Service_UserCommonInfoDto, 'userId' | 'fullName' | 'phoneNumber' | 'profilePhoto' | 'profilePhotos'>
      )>, requester?: Maybe<(
        { __typename?: 'support_service_UserCommonInfoDto' }
        & Pick<Support_Service_UserCommonInfoDto, 'userId' | 'fullName' | 'phoneNumber' | 'profilePhoto' | 'profilePhotos'>
      )> }
    )>, supportServiceTicketResultDto?: Maybe<(
      { __typename?: 'SupportServiceTicketResultDto' }
      & Pick<SupportServiceTicketResultDto, 'supportServiceTicketResultId' | 'resultDescriptions' | 'resultDocuments' | 'resultImages'>
    )> }
  )> }
);

export type GetSupportServiceTicketProcessingHistoriesQueryVariables = Exact<{
  supportServiceTicketId: Scalars['Uuid'];
}>;


export type GetSupportServiceTicketProcessingHistoriesQuery = (
  { __typename?: 'Query' }
  & { getSupportServiceTicketProcessingHistories?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketProcessingDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketProcessingDto' }
      & Pick<SupportServiceTicketProcessingDto, 'updatedDatetime' | 'logEvent' | 'executorId' | 'executorName' | 'reasonNote'>
    )>>> }
  )> }
);

export type GetsupportServiceTicketProcessingStatusesQueryVariables = Exact<{
  orderBy?: Maybe<SupportServiceTicketProcessingStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
}>;


export type GetsupportServiceTicketProcessingStatusesQuery = (
  { __typename?: 'Query' }
  & { supportServiceTicketProcessingStatuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketProcessingStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketProcessingStatusDto' }
      & Pick<SupportServiceTicketProcessingStatusDto, 'supportServiceTicketProcessingStatusId' | 'supportServiceTicketProcessingStatusName' | 'supportServiceTicketProcessingStatusDescription'>
    )>>> }
  )> }
);

export type GetServiceTicketResultByIdForFrontOfficeQueryVariables = Exact<{
  SupportServiceTicketResultId: Scalars['Uuid'];
}>;


export type GetServiceTicketResultByIdForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getServiceTicketResultByIdForFrontOffice?: Maybe<(
    { __typename?: 'GetServiceTicketResultByIdForFrontOfficeResponse' }
    & Pick<GetServiceTicketResultByIdForFrontOfficeResponse, 'errorCode'>
    & { supportServiceTicketResult?: Maybe<(
      { __typename?: 'SupportServiceTicketResultForFrontOfficeDto' }
      & Pick<SupportServiceTicketResultForFrontOfficeDto, 'autoAcceptTicketInMinutes' | 'resultImages' | 'resultDocuments' | 'resultDescriptions' | 'supportServiceTicketResultId' | 'note'>
    )> }
  )> }
);

export type GetSupportServiceTicketsByPropertyPostIdQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  propertyPostId: Scalars['Uuid'];
}>;


export type GetSupportServiceTicketsByPropertyPostIdQuery = (
  { __typename?: 'Query' }
  & { getSupportServiceTicketsByPropertyPostId?: Maybe<(
    { __typename: 'OffsetPagingOfSupportServiceTicketDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketDto' }
      & Pick<SupportServiceTicketDto, 'supportServiceId' | 'supportServiceName' | 'supportServiceTicketId' | 'ticketStatusId' | 'ticketStatusName' | 'ticketCode' | 'ticketNote' | 'appointmentDatetime' | 'propertyPostCode' | 'propertyPostId' | 'currentExecutorId' | 'currentExecutorName' | 'requesterId' | 'requesterFullName' | 'createdDatetime' | 'consultantStaffId' | 'consultantStaffName'>
    )>>> }
  )> }
);

export type GetSupportServiceTypesForFrontOfficeQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSupportServiceTypesForFrontOfficeQuery = (
  { __typename?: 'Query' }
  & { getSupportServiceTypesForFrontOffice?: Maybe<(
    { __typename?: 'GetSupportServiceTypesResponse' }
    & Pick<GetSupportServiceTypesResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { requestTypes?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTypeDto' }
      & Pick<SupportServiceTypeDto, 'price' | 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription'>
    )>>> }
  )> }
);

export type GetTopenersAvailableQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTopenersAvailableInput;
}>;


export type GetTopenersAvailableQuery = (
  { __typename?: 'Query' }
  & { getTopenersAvailable?: Maybe<(
    { __typename?: 'OffsetPagingOfTopenerDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TopenerDto' }
      & Pick<TopenerDto, 'topenerId' | 'fullName' | 'agentGroupDescription' | 'agentGroupId' | 'agentGroupName' | 'agentRankingDescription' | 'agentRankingId' | 'agentRankingName' | 'agentRating' | 'avatar' | 'email' | 'imageSizes' | 'isAgent' | 'phoneNumber'>
    )>>> }
  )> }
);

export type GetTopenersRecentlySupportTicketQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTopenersRecentlySupportTicketInput;
}>;


export type GetTopenersRecentlySupportTicketQuery = (
  { __typename?: 'Query' }
  & { getTopenersRecentlySupportTicket?: Maybe<(
    { __typename?: 'OffsetPagingOfTopenerDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TopenerDto' }
      & Pick<TopenerDto, 'topenerId' | 'fullName' | 'agentGroupDescription' | 'agentGroupId' | 'agentGroupName' | 'agentRankingDescription' | 'agentRankingId' | 'agentRankingName' | 'agentRating' | 'avatar' | 'email' | 'imageSizes' | 'isAgent' | 'phoneNumber'>
    )>>> }
  )> }
);

export type GetTopenersSuggestionQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  request: GetTopenersSuggestionInput;
}>;


export type GetTopenersSuggestionQuery = (
  { __typename?: 'Query' }
  & { getTopenersSuggestion?: Maybe<(
    { __typename?: 'OffsetPagingOfTopenerDto' }
    & Pick<OffsetPagingOfTopenerDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TopenerDto' }
      & Pick<TopenerDto, 'avatar' | 'fullName' | 'topenerId' | 'phoneNumber' | 'agentRating'>
    )>>> }
  )> }
);

export type GetsupportServiceTicketCancelReasonsQueryVariables = Exact<{
  orderBy?: Maybe<SupportServiceTicketCancelReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
}>;


export type GetsupportServiceTicketCancelReasonsQuery = (
  { __typename?: 'Query' }
  & { supportServiceTicketCancelReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketCancelReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketCancelReasonDto' }
      & Pick<SupportServiceTicketCancelReasonDto, 'supportServiceTicketCancelReasonId' | 'supportServiceTicketCancelReasonName' | 'supportServiceTicketCancelReasonDescription'>
    )>>> }
  )> }
);

export type GetsupportServiceTicketRejectReasonsQueryVariables = Exact<{
  orderBy?: Maybe<SupportServiceTicketRejectReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
}>;


export type GetsupportServiceTicketRejectReasonsQuery = (
  { __typename?: 'Query' }
  & { supportServiceTicketRejectReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketRejectReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketRejectReasonDto' }
      & Pick<SupportServiceTicketRejectReasonDto, 'supportServiceTicketRejectReasonId' | 'supportServiceTicketRejectReasonName' | 'supportServiceTicketRejectReasonDescription'>
    )>>> }
  )> }
);

export type GetsupportServiceTicketStatusesQueryVariables = Exact<{
  orderBy?: Maybe<SupportServiceTicketStatusDtoSort>;
  page?: Maybe<Scalars['Int']>;
}>;


export type GetsupportServiceTicketStatusesQuery = (
  { __typename?: 'Query' }
  & { supportServiceTicketStatuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketStatusDto' }
      & Pick<SupportServiceTicketStatusDto, 'supportServiceTicketStatusId' | 'supportServiceTicketStatusName' | 'supportServiceTicketStatusDescription'>
    )>>> }
  )> }
);

export type PayTransactionMutationVariables = Exact<{
  input: PayTransactionInput;
}>;


export type PayTransactionMutation = (
  { __typename?: 'Mutation' }
  & { payTransaction: (
    { __typename?: 'PayTransactionResponse' }
    & Pick<PayTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode' | 'disablePayment' | 'ipnUrl' | 'linkPaymentUrl' | 'returnUrl' | 'transactionId' | 'paymentCode'>
  ) }
);

export type RequesterAcceptServiceTicketResultMutationVariables = Exact<{
  input: RequesterAcceptServiceTicketResultInput;
}>;


export type RequesterAcceptServiceTicketResultMutation = (
  { __typename?: 'Mutation' }
  & { requesterAcceptServiceTicketResult: (
    { __typename?: 'RequesterAcceptServiceTicketResultResponse' }
    & Pick<RequesterAcceptServiceTicketResultResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type RequesterRejectServiceTicketResultMutationVariables = Exact<{
  input: RequesterRejectServiceTicketResultInput;
}>;


export type RequesterRejectServiceTicketResultMutation = (
  { __typename?: 'Mutation' }
  & { requesterRejectServiceTicketResult: (
    { __typename?: 'RequesterRejectServiceTicketResultResponse' }
    & Pick<RequesterRejectServiceTicketResultResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetsupportServiceTicketResultUpdateReasonsQueryVariables = Exact<{
  orderBy?: Maybe<SupportServiceTicketResultUpdateReasonDtoSort>;
  page?: Maybe<Scalars['Int']>;
}>;


export type GetsupportServiceTicketResultUpdateReasonsQuery = (
  { __typename?: 'Query' }
  & { supportServiceTicketResultUpdateReasons?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportServiceTicketResultUpdateReasonDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportServiceTicketResultUpdateReasonDto' }
      & Pick<SupportServiceTicketResultUpdateReasonDto, 'supportServiceTicketResultUpdateReasonId' | 'supportServiceTicketResultUpdateReasonName' | 'supportServiceTicketResultUpdateReasonDescription'>
    )>>> }
  )> }
);

export type GetRequestServiceTypesQueryVariables = Exact<{
  where?: Maybe<RequestTypeDtoFilter>;
  orderBy?: Maybe<RequestTypeDtoSort>;
}>;


export type GetRequestServiceTypesQuery = (
  { __typename?: 'Query' }
  & { requestTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfRequestTypeDto' }
    & Pick<OffsetPagingOfRequestTypeDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'RequestTypeDto' }
      & Pick<RequestTypeDto, 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription' | 'isDisplayHomepage' | 'sortOrder'>
    )>>> }
  )> }
);

export type CheckContactTradingByIdQueryVariables = Exact<{
  input: CheckContactTradingByIdInput;
}>;


export type CheckContactTradingByIdQuery = (
  { __typename?: 'Query' }
  & { checkContactTradingById?: Maybe<(
    { __typename?: 'CheckContactTradingByIdResponse' }
    & Pick<CheckContactTradingByIdResponse, 'errorMessage' | 'errorCode' | 'errorMessageCode' | 'buy' | 'rent'>
  )> }
);

export type CheckExistingReportByPostIdQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type CheckExistingReportByPostIdQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'checkExistingReportByPostId'>
);

export type CloseSupportRequestFoMutationVariables = Exact<{
  input: CloseSupportRequestFoInput;
}>;


export type CloseSupportRequestFoMutation = (
  { __typename?: 'Mutation' }
  & { closeSupportRequestFO: (
    { __typename?: 'CloseSupportRequestFOResponse' }
    & Pick<CloseSupportRequestFoResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateContactTradingRequestMutationVariables = Exact<{
  input: CreateContactTradingRequestInput;
}>;


export type CreateContactTradingRequestMutation = (
  { __typename?: 'Mutation' }
  & { createContactTradingRequest: (
    { __typename?: 'CreateContactTradingRequestResponse' }
    & Pick<CreateContactTradingRequestResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateSupportRequestMutationVariables = Exact<{
  input: CreateSupportRequestInput;
}>;


export type CreateSupportRequestMutation = (
  { __typename?: 'Mutation' }
  & { createSupportRequest: (
    { __typename?: 'CreateSupportRequestResponse' }
    & Pick<CreateSupportRequestResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateUserReportSpamMutationVariables = Exact<{
  input: CreateUserReportSpamInput;
}>;


export type CreateUserReportSpamMutation = (
  { __typename?: 'Mutation' }
  & { createUserReportSpam: (
    { __typename?: 'CreateUserReportSpamResponse' }
    & Pick<CreateUserReportSpamResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetRequestTypesQueryVariables = Exact<{
  where?: Maybe<RequestTypeDtoFilter>;
  orderBy?: Maybe<RequestTypeDtoSort>;
}>;


export type GetRequestTypesQuery = (
  { __typename?: 'Query' }
  & { requestTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfRequestTypeDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'RequestTypeDto' }
      & Pick<RequestTypeDto, 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription'>
    )>>> }
  )> }
);

export type GetSpamTypesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSpamTypesQuery = (
  { __typename?: 'Query' }
  & { spamTypes?: Maybe<(
    { __typename?: 'OffsetPagingOfSpamTypeDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SpamTypeDto' }
      & Pick<SpamTypeDto, 'spamTypeId' | 'spamTypeName' | 'spamTypeDescription' | 'sortOrder' | 'isActive'>
    )>>> }
  )> }
);

export type GetSupportRequestExactByIdQueryVariables = Exact<{
  input: Scalars['Uuid'];
}>;


export type GetSupportRequestExactByIdQuery = (
  { __typename?: 'Query' }
  & { supportRequestExactById?: Maybe<(
    { __typename?: 'SupportRequestInfoDto' }
    & Pick<SupportRequestInfoDto, 'supportRequestId' | 'supportRequestTitle' | 'supportRequestCode' | 'supportRequestStatusName' | 'supportRequestStatusDescription' | 'sourceTypeName' | 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription' | 'requestDescription' | 'requestData' | 'createdDatetime' | 'assignedDatetime' | 'processingDatetime' | 'closeDatetime' | 'completeDatetime' | 'cancelledDatetime' | 'assigneeFirstName' | 'assigneeLastName' | 'assigneePhoneNumber' | 'assigneeEmail' | 'assigneeProfilePhoto' | 'assigneeProfilePhotos' | 'assigneeStaffGroupDescription' | 'assigneeStaffRating' | 'paymentMethod' | 'paymentDatetime' | 'productId' | 'productType' | 'productName' | 'propertyPostId' | 'propertyPostCreatedUserEmail' | 'propertyPostCreatedUserFullName' | 'propertyPostCreatedUserPhoneNumber'>
  )> }
);

export type GetSupportRequestServiceBonusesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSupportRequestServiceBonusesQuery = (
  { __typename?: 'Query' }
  & { supportRequestServiceBonuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportRequestServiceBonusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportRequestServiceBonusDto' }
      & Pick<SupportRequestServiceBonusDto, 'supportRequestServiceBonusId' | 'supportRequestServiceBonusName' | 'supportRequestServiceBonusDescription' | 'price' | 'unitOfMeasureId' | 'unitOfMeasureCode' | 'unitOfMeasureName'>
    )>>> }
  )> }
);

export type GetSupportRequestStatusesQueryVariables = Exact<{ [key: string]: never; }>;


export type GetSupportRequestStatusesQuery = (
  { __typename?: 'Query' }
  & { supportRequestStatuses?: Maybe<(
    { __typename?: 'OffsetPagingOfSupportRequestStatusDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'SupportRequestStatusDto' }
      & Pick<SupportRequestStatusDto, 'supportRequestStatusId' | 'supportRequestStatusName' | 'supportRequestStatusDescription' | 'isActive'>
    )>>> }
  )> }
);

export type GetSupportRequestsQueryVariables = Exact<{
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
  orderBy?: Maybe<SupportRequestInfoDtoSort>;
  where?: Maybe<SupportRequestInfoDtoFilter>;
}>;


export type GetSupportRequestsQuery = (
  { __typename?: 'Query' }
  & { supportRequestsExactByCurrentUserMobile?: Maybe<(
    { __typename?: 'SupportRequestInfoDtoConnection' }
    & { edges?: Maybe<Array<(
      { __typename?: 'SupportRequestInfoDtoEdge' }
      & Pick<SupportRequestInfoDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'SupportRequestInfoDto' }
        & Pick<SupportRequestInfoDto, 'supportRequestId' | 'supportRequestTitle' | 'supportRequestCode' | 'supportRequestStatusName' | 'supportRequestStatusDescription' | 'requestTypeId' | 'requestTypeName' | 'requestTypeDescription' | 'productId' | 'productName' | 'productDetailPath' | 'productType' | 'createdDatetime'>
      )> }
    )>> }
  )> }
);

export type GenerateTopenMapTplAccessTokenMutationVariables = Exact<{
  payload: GenerateTopenMapTplAccessTokenInput;
}>;


export type GenerateTopenMapTplAccessTokenMutation = (
  { __typename?: 'Mutation' }
  & { generateTopenMapTPLAccessToken: (
    { __typename?: 'GenerateTopenMapTPLAccessTokenResponse' }
    & Pick<GenerateTopenMapTplAccessTokenResponse, 'authToken' | 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type BookingTransactionsByPropertyPostIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type BookingTransactionsByPropertyPostIdQuery = (
  { __typename?: 'Query' }
  & { bookingTransactionsByPropertyPostId?: Maybe<(
    { __typename?: 'OffsetPagingOfTransactionDetailDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TransactionDetailDto' }
      & Pick<TransactionDetailDto, 'transactionStatus' | 'transactionStatusName' | 'bookingCode' | 'transactionType' | 'bookingTransactionId' | 'ableConfirmRefund'>
      & { customerInfo?: Maybe<(
        { __typename?: 'transaction_CustomerInfoDto' }
        & Pick<Transaction_CustomerInfoDto, 'customerEmail' | 'customerContactAddress' | 'customerFirstName' | 'customerId' | 'customerLastName' | 'customerNationalId' | 'customerNationalIdIssueDate' | 'customerNationalIdIssuePlace' | 'customerPhone'>
      )>, saleAgentInfo?: Maybe<(
        { __typename?: 'AgentInfoDto' }
        & Pick<AgentInfoDto, 'agentCode' | 'agentId' | 'firstName' | 'lastName' | 'profilePhoto' | 'rating'>
      )> }
    )>>> }
  )> }
);

export type CheckBookingTransactionIsRatedQueryVariables = Exact<{
  input: Scalars['String'];
}>;


export type CheckBookingTransactionIsRatedQuery = (
  { __typename?: 'Query' }
  & Pick<Query, 'checkBookingTransactionIsRated'>
);

export type DepositeTransactionsByPropertyPostIdQueryVariables = Exact<{
  propertyPostId: Scalars['Uuid'];
}>;


export type DepositeTransactionsByPropertyPostIdQuery = (
  { __typename?: 'Query' }
  & { depositeTransactionsByPropertyPostId?: Maybe<(
    { __typename?: 'OffsetPagingOfTransactionDetailDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TransactionDetailDto' }
      & Pick<TransactionDetailDto, 'transactionStatus' | 'transactionStatusName' | 'bookingCode' | 'transactionType' | 'bookingTransactionId' | 'ableConfirmRefund'>
      & { customerInfo?: Maybe<(
        { __typename?: 'transaction_CustomerInfoDto' }
        & Pick<Transaction_CustomerInfoDto, 'customerEmail' | 'customerContactAddress' | 'customerFirstName' | 'customerId' | 'customerLastName' | 'customerNationalId' | 'customerNationalIdIssueDate' | 'customerNationalIdIssuePlace' | 'customerPhone'>
      )>, saleAgentInfo?: Maybe<(
        { __typename?: 'AgentInfoDto' }
        & Pick<AgentInfoDto, 'agentCode' | 'agentId' | 'firstName' | 'lastName' | 'profilePhoto' | 'rating'>
      )> }
    )>>> }
  )> }
);

export type GetBookingHistoriesByBuyerIdCursorQueryVariables = Exact<{
  input: GetTransactionsByBuyerIdAdvancedInput;
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
  orderBy?: Maybe<TransactionsByBuyerIdDtoSort>;
  where?: Maybe<TransactionsByBuyerIdDtoFilter>;
}>;


export type GetBookingHistoriesByBuyerIdCursorQuery = (
  { __typename?: 'Query' }
  & { bookingHistoriesByBuyerIdCursor?: Maybe<(
    { __typename?: 'TransactionsByBuyerIdDtoConnection' }
    & Pick<TransactionsByBuyerIdDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'TransactionsByBuyerIdDtoEdge' }
      & Pick<TransactionsByBuyerIdDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'TransactionsByBuyerIdDto' }
        & Pick<TransactionsByBuyerIdDto, 'buyerId' | 'propertyPostInfo' | 'transactionAmount' | 'bookingCode' | 'propertyCode' | 'projectName' | 'paymentDatetime' | 'transactionDatetime' | 'depositeCode' | 'propertyPostId' | 'transactionStatusDescription' | 'endDepositeTimeInSecond' | 'transactionStatusName' | 'bookingTransactionId' | 'depositeTransactionId' | 'transactionType'>
        & { saleAgentInfo?: Maybe<(
          { __typename?: 'AgentInfoDto' }
          & Pick<AgentInfoDto, 'firstName' | 'lastName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetBookingTransactionDetailQueryVariables = Exact<{
  transactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
}>;


export type GetBookingTransactionDetailQuery = (
  { __typename?: 'Query' }
  & { bookingTransactionDetail?: Maybe<(
    { __typename?: 'TransactionDetailDto' }
    & Pick<TransactionDetailDto, 'bookingTransactionId' | 'bookingCode' | 'depositeCode' | 'depositeTransactionId' | 'documentName' | 'buyCommission' | 'documentUrl' | 'confirmedBookingDatetime' | 'confirmedDepositeDatetime' | 'transactionAmount' | 'transactionIndex' | 'transactionType' | 'endDepositeTimeInSecond' | 'transactionStatus' | 'transactionStatusName' | 'beginDepositeDatetime' | 'endDepositeDatetime' | 'isBuyer' | 'isCancelled' | 'paidAmount' | 'paymentUnit' | 'ableConfirmDeposite' | 'endDepositeDatetimeByPropertyPostId' | 'cancelReason' | 'contractDueDate' | 'refundReady'>
    & { changeToTransaction?: Maybe<(
      { __typename?: 'RelatedTransactionDto' }
      & Pick<RelatedTransactionDto, 'bookingCode' | 'changeAnotherPropertyDatetime' | 'depositeCode' | 'changeToPropertyPostId' | 'depositeTransactionId'>
    )>, consultantInfo?: Maybe<(
      { __typename?: 'ConsultantInfoDto' }
      & Pick<ConsultantInfoDto, 'staffId' | 'staffCode' | 'fullName' | 'profilePhoto' | 'email' | 'rating' | 'phoneNumber'>
    )>, customerInfo?: Maybe<(
      { __typename?: 'transaction_CustomerInfoDto' }
      & Pick<Transaction_CustomerInfoDto, 'customerId'>
    )>, propertyPostInfo?: Maybe<(
      { __typename?: 'PropertyPostInfoDto' }
      & Pick<PropertyPostInfoDto, 'blockCode' | 'blockName' | 'numberOfFloor' | 'floor' | 'price' | 'priceVat' | 'priceNoVat' | 'propertyCode' | 'propertyName' | 'propertyPostId' | 'propertyTypeName' | 'propertyTypeId'>
      & { projectInfo?: Maybe<(
        { __typename?: 'ProjectInfoDto' }
        & Pick<ProjectInfoDto, 'projectId' | 'projectCode' | 'projectName'>
      )>, saleSeasonInfo?: Maybe<(
        { __typename?: 'SaleSeasonInfoDto' }
        & Pick<SaleSeasonInfoDto, 'saleSeasonId' | 'seasonName' | 'isSkipBooking' | 'startBookingDatetime' | 'endBookingDatetime' | 'openDatetime' | 'closeDatetime'>
      )> }
    )> }
  )> }
);

export type GetBookingTransactionDetailForRatingQueryVariables = Exact<{
  bookingTransactionId: Scalars['Uuid'];
}>;


export type GetBookingTransactionDetailForRatingQuery = (
  { __typename?: 'Query' }
  & { bookingTransactionDetailForRating?: Maybe<(
    { __typename?: 'TransactionDetailDto' }
    & Pick<TransactionDetailDto, 'bookingCode' | 'depositeCode' | 'propertyCode' | 'projectName'>
    & { buyAgentInfo?: Maybe<(
      { __typename?: 'AgentInfoDto' }
      & Pick<AgentInfoDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'profilePhoto'>
    )>, saleAgentInfo?: Maybe<(
      { __typename?: 'AgentInfoDto' }
      & Pick<AgentInfoDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'profilePhoto'>
    )> }
  )> }
);

export type GetCustomerByIdQueryVariables = Exact<{
  customerId?: Maybe<Scalars['Uuid']>;
}>;


export type GetCustomerByIdQuery = (
  { __typename?: 'Query' }
  & { customerById?: Maybe<(
    { __typename?: 'CustomerDto' }
    & Pick<CustomerDto, 'customerId' | 'customerContactAddress' | 'customerEmail' | 'customerFirstName' | 'customerLastName' | 'customerNationalId' | 'customerNationalIdIssueDate' | 'customerNationalIdIssuePlace' | 'customerPhone' | 'permanentAddress' | 'nationalIdType' | 'customerDob' | 'gender'>
  )> }
);

export type GetCustomerInfoChangeHistoriesForFoQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
  orderBy?: Maybe<CustomerInfoChangeHistoryDtoSort>;
  depositTransactionId: Scalars['Uuid'];
}>;


export type GetCustomerInfoChangeHistoriesForFoQuery = (
  { __typename?: 'Query' }
  & { getCustomerInfoChangeHistoriesForFO?: Maybe<(
    { __typename?: 'OffsetPagingOfCustomerInfoChangeHistoryDto' }
    & Pick<OffsetPagingOfCustomerInfoChangeHistoryDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'CustomerInfoChangeHistoryDto' }
      & Pick<CustomerInfoChangeHistoryDto, 'index' | 'customerInfoChangeHistoryId' | 'depositTransactionId' | 'customerId' | 'customerFullNameNew' | 'customerFullNameOld' | 'createdDatetime' | 'createdByUserId'>
    )>>> }
  )> }
);

export type GetCustomerInfoChangeHistoryByIdForFoQueryVariables = Exact<{
  id: Scalars['Uuid'];
}>;


export type GetCustomerInfoChangeHistoryByIdForFoQuery = (
  { __typename?: 'Query' }
  & { getCustomerInfoChangeHistoryByIdForFO?: Maybe<(
    { __typename?: 'GetCustomerInfoChangeHistoryByIdResponse' }
    & { customerInfoChangeHistoryDto?: Maybe<(
      { __typename?: 'CustomerInfoChangeHistoryDto' }
      & Pick<CustomerInfoChangeHistoryDto, 'index' | 'customerInfoChangeHistoryId' | 'depositTransactionId' | 'customerId' | 'newData' | 'oldData' | 'createdDatetime' | 'createdByUserId'>
    )> }
  )> }
);

export type GetDepositHistoriesByBuyerIdCursorQueryVariables = Exact<{
  input: GetTransactionsByBuyerIdAdvancedInput;
  first?: Maybe<Scalars['PaginationAmount']>;
  after: Scalars['String'];
  orderBy?: Maybe<TransactionsByBuyerIdDtoSort>;
  where?: Maybe<TransactionsByBuyerIdDtoFilter>;
}>;


export type GetDepositHistoriesByBuyerIdCursorQuery = (
  { __typename?: 'Query' }
  & { depositHistoriesByBuyerIdCursor?: Maybe<(
    { __typename?: 'TransactionsByBuyerIdDtoConnection' }
    & Pick<TransactionsByBuyerIdDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'TransactionsByBuyerIdDtoEdge' }
      & Pick<TransactionsByBuyerIdDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'TransactionsByBuyerIdDto' }
        & Pick<TransactionsByBuyerIdDto, 'propertyPostId' | 'buyerId' | 'propertyPostInfo' | 'transactionAmount' | 'bookingCode' | 'propertyCode' | 'projectName' | 'paymentDatetime' | 'transactionDatetime' | 'depositeCode' | 'transactionStatusDescription' | 'transactionStatusName' | 'bookingTransactionId' | 'depositeTransactionId' | 'transactionType'>
        & { saleAgentInfo?: Maybe<(
          { __typename?: 'AgentInfoDto' }
          & Pick<AgentInfoDto, 'firstName' | 'lastName'>
        )> }
      )> }
    )>> }
  )> }
);

export type GetDepositTransactionDetailQueryVariables = Exact<{
  transactionId: Scalars['Uuid'];
  propertyPostId: Scalars['Uuid'];
}>;


export type GetDepositTransactionDetailQuery = (
  { __typename?: 'Query' }
  & { depositTransactionDetail?: Maybe<(
    { __typename?: 'TransactionDetailDto' }
    & Pick<TransactionDetailDto, 'bookingTransactionId' | 'bookingCode' | 'depositeCode' | 'depositeTransactionId' | 'documentName' | 'documentUrl' | 'hasCustomerInfoChangeHistory' | 'allowUpdateCustomer' | 'confirmedBookingDatetime' | 'confirmedDepositeDatetime' | 'transactionAmount' | 'transactionIndex' | 'transactionType' | 'transactionStatus' | 'contractDueDate' | 'transactionStatusName' | 'isBuyer' | 'isCancelled' | 'buyCommission' | 'paidAmount' | 'paymentUnit' | 'cancelReason' | 'priorBookingTransactionId' | 'refundReady'>
    & { changeToTransaction?: Maybe<(
      { __typename?: 'RelatedTransactionDto' }
      & Pick<RelatedTransactionDto, 'bookingCode' | 'bookingTransactionId' | 'changeAnotherPropertyDatetime' | 'depositeCode' | 'depositeTransactionId' | 'paymentUnit' | 'priorPropertyPostId'>
    )>, consultantInfo?: Maybe<(
      { __typename?: 'ConsultantInfoDto' }
      & Pick<ConsultantInfoDto, 'staffId' | 'staffCode' | 'fullName' | 'profilePhoto' | 'email' | 'rating' | 'phoneNumber'>
    )>, customerInfo?: Maybe<(
      { __typename?: 'transaction_CustomerInfoDto' }
      & Pick<Transaction_CustomerInfoDto, 'customerId'>
    )>, propertyPostInfo?: Maybe<(
      { __typename?: 'PropertyPostInfoDto' }
      & Pick<PropertyPostInfoDto, 'blockCode' | 'blockName' | 'numberOfFloor' | 'floor' | 'price' | 'priceVat' | 'priceNoVat' | 'propertyCode' | 'propertyName' | 'propertyPostId' | 'propertyTypeName' | 'propertyTypeId'>
      & { projectInfo?: Maybe<(
        { __typename?: 'ProjectInfoDto' }
        & Pick<ProjectInfoDto, 'projectId' | 'projectCode' | 'projectName'>
      )>, saleSeasonInfo?: Maybe<(
        { __typename?: 'SaleSeasonInfoDto' }
        & Pick<SaleSeasonInfoDto, 'saleSeasonId' | 'seasonName' | 'isSkipBooking' | 'startBookingDatetime' | 'endBookingDatetime' | 'openDatetime' | 'closeDatetime'>
      )> }
    )>, priorTransaction?: Maybe<(
      { __typename?: 'RelatedTransactionDto' }
      & Pick<RelatedTransactionDto, 'priorBookingTransactionId' | 'priorPropertyPostId'>
    )> }
  )> }
);

export type GetDepositTransactionDetailForRatingQueryVariables = Exact<{
  depositeTransactionId: Scalars['Uuid'];
}>;


export type GetDepositTransactionDetailForRatingQuery = (
  { __typename?: 'Query' }
  & { depositeTransactionDetailForRating?: Maybe<(
    { __typename?: 'TransactionDetailDto' }
    & Pick<TransactionDetailDto, 'bookingCode' | 'depositeCode' | 'propertyCode' | 'projectName'>
    & { buyAgentInfo?: Maybe<(
      { __typename?: 'AgentInfoDto' }
      & Pick<AgentInfoDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'profilePhoto'>
    )>, saleAgentInfo?: Maybe<(
      { __typename?: 'AgentInfoDto' }
      & Pick<AgentInfoDto, 'agentId' | 'agentCode' | 'firstName' | 'lastName' | 'profilePhoto'>
    )> }
  )> }
);

export type GetSimpleTransactionDetailQueryVariables = Exact<{
  input: SimpleTransactionDetailInput;
}>;


export type GetSimpleTransactionDetailQuery = (
  { __typename?: 'Query' }
  & { simpleTransactionDetail: (
    { __typename?: 'GetSimpleTransactionDetailResponse' }
    & Pick<GetSimpleTransactionDetailResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { transactionDetailDto?: Maybe<(
      { __typename?: 'SimpleTransactionDetailDto' }
      & Pick<SimpleTransactionDetailDto, 'transactionId' | 'transactionCode' | 'transactionAmount' | 'projectId' | 'transactionIndex' | 'transactionType'>
      & { propertyPostInfo?: Maybe<(
        { __typename?: 'PropertyPostInfoDto' }
        & Pick<PropertyPostInfoDto, 'blockName' | 'floor' | 'propertyCode' | 'propertyTypeName' | 'propertyPostId'>
        & { projectInfo?: Maybe<(
          { __typename?: 'ProjectInfoDto' }
          & Pick<ProjectInfoDto, 'projectName'>
        )> }
      )> }
    )> }
  ) }
);

export type SendOtpToUpdateCustomerForDepositTransactionMutationVariables = Exact<{
  request: SendOtpToUpdateCustomerForDepositTransactionInput;
}>;


export type SendOtpToUpdateCustomerForDepositTransactionMutation = (
  { __typename?: 'Mutation' }
  & { sendOtpToUpdateCustomerForDepositTransaction: (
    { __typename: 'SendOtpToUpdateCustomerForDepositTransactionResponse' }
    & Pick<SendOtpToUpdateCustomerForDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type SendPhoneVerificationTokenForTransactionMutationVariables = Exact<{
  input: SendPhoneVerificationTokenForTransactionInput;
}>;


export type SendPhoneVerificationTokenForTransactionMutation = (
  { __typename?: 'Mutation' }
  & { sendPhoneVerificationTokenForTransaction: (
    { __typename: 'SendPhoneVerificationTokenForTransactionResponse' }
    & Pick<SendPhoneVerificationTokenForTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type TransactionsByBuyerIdAdvancedQueryVariables = Exact<{
  input: GetTransactionsByBuyerIdAdvancedInput;
  pageSize?: Maybe<Scalars['PaginationAmount']>;
  cursor?: Maybe<Scalars['String']>;
  orderBy?: Maybe<TransactionsByBuyerIdDtoSort>;
}>;


export type TransactionsByBuyerIdAdvancedQuery = (
  { __typename?: 'Query' }
  & { curTransactionsByBuyerIdAdvanced?: Maybe<(
    { __typename?: 'TransactionsByBuyerIdDtoConnection' }
    & Pick<TransactionsByBuyerIdDtoConnection, 'totalCount'>
    & { edges?: Maybe<Array<(
      { __typename?: 'TransactionsByBuyerIdDtoEdge' }
      & Pick<TransactionsByBuyerIdDtoEdge, 'cursor'>
      & { node?: Maybe<(
        { __typename?: 'TransactionsByBuyerIdDto' }
        & Pick<TransactionsByBuyerIdDto, 'buyerId' | 'propertyPostInfo' | 'transactionAmount' | 'bookingCode' | 'propertyCode' | 'projectName' | 'transactionDatetime' | 'depositeCode' | 'transactionStatusDescription' | 'transactionStatusName' | 'bookingTransactionId' | 'depositeTransactionId' | 'transactionType'>
        & { saleAgentInfo?: Maybe<(
          { __typename?: 'AgentInfoDto' }
          & Pick<AgentInfoDto, 'firstName' | 'lastName'>
        )> }
      )> }
    )>> }
  )> }
);

export type UpdateAgentRatingMutationVariables = Exact<{
  input: UpdateAgentRatingInput;
}>;


export type UpdateAgentRatingMutation = (
  { __typename?: 'Mutation' }
  & { updateAgentRating: (
    { __typename?: 'UpdateAgentForRatingResponse' }
    & Pick<UpdateAgentForRatingResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateCustomerInfoForDepositTransactionMutationVariables = Exact<{
  request: UpdateCustomerInfoForDepositTransactionInput;
}>;


export type UpdateCustomerInfoForDepositTransactionMutation = (
  { __typename?: 'Mutation' }
  & { updateCustomerInfoForDepositTransaction: (
    { __typename: 'UpdateCustomerInfoForDepositTransactionResponse' }
    & Pick<UpdateCustomerInfoForDepositTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateTopenerInfoForTransactionMutationVariables = Exact<{
  input: UpdateTopenerInfoForTransactionInput;
}>;


export type UpdateTopenerInfoForTransactionMutation = (
  { __typename?: 'Mutation' }
  & { updateTopenerInfoForTransaction: (
    { __typename?: 'UpdateTopenerInfoForTransactionResponse' }
    & Pick<UpdateTopenerInfoForTransactionResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateProfilePhotoMutationVariables = Exact<{
  input: CreateProfilePhotoInput;
}>;


export type CreateProfilePhotoMutation = (
  { __typename?: 'Mutation' }
  & { createProfilePhoto: (
    { __typename?: 'CreateProfilePhotoResponse' }
    & Pick<CreateProfilePhotoResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type CreateTopenerBankAccountFoMutationVariables = Exact<{
  input: CreateTopenerBankAccountFoInput;
}>;


export type CreateTopenerBankAccountFoMutation = (
  { __typename?: 'Mutation' }
  & { createTopenerBankAccountFO: (
    { __typename?: 'CreateTopenerBankAccountResponse' }
    & Pick<CreateTopenerBankAccountResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type DeleteTopenerBankAccountFoMutationVariables = Exact<{
  input: DeleteTopenerBankAccountFoInput;
}>;


export type DeleteTopenerBankAccountFoMutation = (
  { __typename?: 'Mutation' }
  & { deleteTopenerBankAccountFO: (
    { __typename?: 'DeleteTopenerBankAccountResponse' }
    & Pick<DeleteTopenerBankAccountResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type GetC2CPropertyPostsViewedByCurrentUserFoQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type GetC2CPropertyPostsViewedByCurrentUserFoQuery = (
  { __typename?: 'Query' }
  & { getC2CPropertyPostsViewedByCurrentUserFO?: Maybe<(
    { __typename?: 'OffsetPagingOfC2CPropertyPostViewedDto' }
    & Pick<OffsetPagingOfC2CPropertyPostViewedDto, 'totalCount'>
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'C2CPropertyPostViewedDto' }
      & Pick<C2CPropertyPostViewedDto, 'propertyPostId' | 'images' | 'price' | 'postTitle' | 'propertyTypeId' | 'buildingArea' | 'direction'>
      & { propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'cityId' | 'districtId' | 'districtName' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'wardName'>
      )> }
    )>>> }
  )> }
);

export type GetC2CPropertyPostViewedByIdsForFoQueryVariables = Exact<{
  getC2CPropertyPostViewedByIdsForFOInput: GetC2CPropertyPostViewedByIdsForFoInput;
}>;


export type GetC2CPropertyPostViewedByIdsForFoQuery = (
  { __typename?: 'Query' }
  & { getC2CPropertyPostViewedByIdsForFO: (
    { __typename?: 'GetC2CPropertyPostViewedByIdsForFOResponse' }
    & { c2CPropertyPostViewedDtos?: Maybe<Array<Maybe<(
      { __typename?: 'C2CPropertyPostViewedDto' }
      & Pick<C2CPropertyPostViewedDto, 'propertyPostId' | 'images' | 'price' | 'postTitle' | 'propertyTypeId' | 'buildingArea' | 'direction' | 'detailPathForSale' | 'detailPathForRent' | 'forRent' | 'forSale'>
      & { propertyAddress?: Maybe<(
        { __typename?: 'PropertyAddressInfoDto' }
        & Pick<PropertyAddressInfoDto, 'countryId' | 'cityId' | 'districtId' | 'districtName' | 'wardId' | 'homeAddress' | 'streetName' | 'cityName' | 'wardName'>
      )> }
    )>>> }
  ) }
);

export type GetCurrentTopenerQueryVariables = Exact<{ [key: string]: never; }>;


export type GetCurrentTopenerQuery = (
  { __typename?: 'Query' }
  & { getCurrentTopener?: Maybe<(
    { __typename?: 'GetCurrentTopenerResponse' }
    & Pick<GetCurrentTopenerResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { topenerInfo?: Maybe<(
      { __typename?: 'TopenerInfoDto' }
      & Pick<TopenerInfoDto, 'contactAddress' | 'dob' | 'email' | 'firstName' | 'fullName' | 'gender' | 'isCompletedProfile' | 'lastName' | 'nationalId' | 'nationalIdIssueDate' | 'nationalIdIssuePlace' | 'nationalIdType' | 'permanentAddress' | 'phoneNumber' | 'userId'>
    )> }
  )> }
);

export type GetTopenerBankAccountsByCurrentUserFoQueryVariables = Exact<{
  page?: Maybe<Scalars['Int']>;
  pageSize?: Maybe<Scalars['Int']>;
}>;


export type GetTopenerBankAccountsByCurrentUserFoQuery = (
  { __typename?: 'Query' }
  & { getTopenerBankAccountsByCurrentUserFO?: Maybe<(
    { __typename?: 'OffsetPagingOfTopenerBankAccountDto' }
    & { edges?: Maybe<Array<Maybe<(
      { __typename?: 'TopenerBankAccountDto' }
      & Pick<TopenerBankAccountDto, 'topenerBankAccountId' | 'topenerId' | 'bankId' | 'bankAccountNumber' | 'bankAccountBranch' | 'bankAccountHolderName' | 'isDefault' | 'recordVersion'>
    )>>> }
  )> }
);

export type GetUserByIdQueryVariables = Exact<{
  userId?: Maybe<Scalars['Uuid']>;
}>;


export type GetUserByIdQuery = (
  { __typename?: 'Query' }
  & { userById?: Maybe<(
    { __typename?: 'GetUserResponse' }
    & Pick<GetUserResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { userDto?: Maybe<(
      { __typename?: 'UserDto' }
      & Pick<UserDto, 'firstName' | 'lastName' | 'userName' | 'phoneNumber' | 'email' | 'emailConfirmed' | 'referralCode' | 'gender' | 'userId' | 'roleId' | 'roleName' | 'profilePhoto' | 'profilePhotos' | 'updatedDatetime' | 'createdDatetime' | 'pushNotificationId' | 'isVerifyProfilePhoto'>
      & { dob?: Maybe<(
        { __typename?: 'Timestamp' }
        & Pick<Timestamp, 'toDateTime'>
      )> }
    )> }
  )> }
);

export type GetUserFollowOnPostsByPropertyPostIdsQueryVariables = Exact<{
  input: GetUserFollowOnPostsByPropertyPostIdsInput;
}>;


export type GetUserFollowOnPostsByPropertyPostIdsQuery = (
  { __typename?: 'Query' }
  & { getUserFollowOnPostsByPropertyPostIds: (
    { __typename?: 'GetUserFollowOnPostsByPropertyPostIdsResponse' }
    & { userFollowOnPostDtos?: Maybe<Array<Maybe<(
      { __typename?: 'UserFollowOnPostDto' }
      & Pick<UserFollowOnPostDto, 'isFollowed' | 'propertyPostId'>
    )>>> }
  ) }
);

export type GetUserPushNotificationQueryVariables = Exact<{
  userId?: Maybe<Scalars['Uuid']>;
}>;


export type GetUserPushNotificationQuery = (
  { __typename?: 'Query' }
  & { userById?: Maybe<(
    { __typename?: 'GetUserResponse' }
    & Pick<GetUserResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { userDto?: Maybe<(
      { __typename?: 'UserDto' }
      & Pick<UserDto, 'pushNotificationId'>
    )> }
  )> }
);

export type GetUsersForMessengerQueryVariables = Exact<{
  request: GetUsersForMessengerInput;
}>;


export type GetUsersForMessengerQuery = (
  { __typename?: 'Query' }
  & { getUsersForMessenger: (
    { __typename?: 'GetUsersForMessengerResponse' }
    & { users?: Maybe<Array<Maybe<(
      { __typename?: 'UserDto' }
      & Pick<UserDto, 'userId' | 'firstName' | 'lastName' | 'fullName' | 'profilePhoto' | 'email' | 'phoneNumber' | 'roleNames'>
    )>>> }
  ) }
);

export type SendLinkVerifyEmailMutationVariables = Exact<{
  input: SendLinkVerifyEmailFoInput;
}>;


export type SendLinkVerifyEmailMutation = (
  { __typename?: 'Mutation' }
  & { sendLinkVerifyEmailFO: (
    { __typename?: 'SendLinkVerifyEmailResponse' }
    & Pick<SendLinkVerifyEmailResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateTopenerBankAccountFoMutationVariables = Exact<{
  input: UpdateTopenerBankAccountFoInput;
}>;


export type UpdateTopenerBankAccountFoMutation = (
  { __typename?: 'Mutation' }
  & { updateTopenerBankAccountFO: (
    { __typename?: 'UpdateTopenerBankAccountResponse' }
    & Pick<UpdateTopenerBankAccountResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
  ) }
);

export type UpdateUserMutationVariables = Exact<{
  updateUserInput: UpdateUserInput;
}>;


export type UpdateUserMutation = (
  { __typename?: 'Mutation' }
  & { updateUser: (
    { __typename?: 'UpdateUserResponse' }
    & Pick<UpdateUserResponse, 'errorCode' | 'errorMessage' | 'errorMessageCode'>
    & { userDto?: Maybe<(
      { __typename?: 'UserDto' }
      & Pick<UserDto, 'firstName' | 'lastName' | 'userName' | 'phoneNumber' | 'email' | 'emailConfirmed' | 'gender' | 'userId' | 'roleId' | 'roleName' | 'profilePhoto' | 'updatedDatetime' | 'createdDatetime' | 'pushNotificationId'>
      & { dob?: Maybe<(
        { __typename?: 'Timestamp' }
        & Pick<Timestamp, 'toDateTime'>
      )> }
    )> }
  ) }
);

export type GetAvatarQueryVariables = Exact<{
  userId?: Maybe<Scalars['Uuid']>;
}>;


export type GetAvatarQuery = (
  { __typename?: 'Query' }
  & { userById?: Maybe<(
    { __typename?: 'GetUserResponse' }
    & { userDto?: Maybe<(
      { __typename?: 'UserDto' }
      & Pick<UserDto, 'profilePhoto' | 'profilePhotos'>
    )> }
  )> }
);

export type GetUserDetailQueryVariables = Exact<{
  userId?: Maybe<Scalars['Uuid']>;
}>;


export type GetUserDetailQuery = (
  { __typename?: 'Query' }
  & { userById?: Maybe<(
    { __typename?: 'GetUserResponse' }
    & { userDto?: Maybe<(
      { __typename?: 'UserDto' }
      & Pick<UserDto, 'userId' | 'firstName' | 'lastName' | 'profilePhoto' | 'profilePhotos' | 'roleName' | 'updatedDatetime' | 'createdDatetime' | 'phoneNumber' | 'email' | 'isVerifyProfilePhoto' | 'gender'>
    )> }
  )> }
);


export const CitiesAndDistrictByFilterDocument = gql`
    query CitiesAndDistrictByFilter($cityFilter: CityDtoFilter, $districtFilter: DistrictDtoFilter) {
  cities(where: $cityFilter) {
    edges {
      cityId
      cityName
    }
  }
  districts(where: $districtFilter) {
    edges {
      districtId
      districtName
    }
  }
}
    `;

/**
 * __useCitiesAndDistrictByFilterQuery__
 *
 * To run a query within a React component, call `useCitiesAndDistrictByFilterQuery` and pass it any options that fit your needs.
 * When your component renders, `useCitiesAndDistrictByFilterQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCitiesAndDistrictByFilterQuery({
 *   variables: {
 *      cityFilter: // value for 'cityFilter'
 *      districtFilter: // value for 'districtFilter'
 *   },
 * });
 */
export function useCitiesAndDistrictByFilterQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CitiesAndDistrictByFilterQuery, CitiesAndDistrictByFilterQueryVariables>) {
        return ApolloReactHooks.useQuery<CitiesAndDistrictByFilterQuery, CitiesAndDistrictByFilterQueryVariables>(CitiesAndDistrictByFilterDocument, baseOptions);
      }
export function useCitiesAndDistrictByFilterLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CitiesAndDistrictByFilterQuery, CitiesAndDistrictByFilterQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CitiesAndDistrictByFilterQuery, CitiesAndDistrictByFilterQueryVariables>(CitiesAndDistrictByFilterDocument, baseOptions);
        }
export type CitiesAndDistrictByFilterQueryHookResult = ReturnType<typeof useCitiesAndDistrictByFilterQuery>;
export type CitiesAndDistrictByFilterLazyQueryHookResult = ReturnType<typeof useCitiesAndDistrictByFilterLazyQuery>;
export type CitiesAndDistrictByFilterQueryResult = ApolloReactCommon.QueryResult<CitiesAndDistrictByFilterQuery, CitiesAndDistrictByFilterQueryVariables>;
export const GetAddressByIdDocument = gql`
    query GetAddressById($wardId: Int, $districtId: Int, $cityId: Int) {
  wardById(wardId: $wardId) {
    wardName
  }
  districtById(districtId: $districtId) {
    districtName
  }
  cityById(cityId: $cityId) {
    cityName
  }
}
    `;

/**
 * __useGetAddressByIdQuery__
 *
 * To run a query within a React component, call `useGetAddressByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAddressByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAddressByIdQuery({
 *   variables: {
 *      wardId: // value for 'wardId'
 *      districtId: // value for 'districtId'
 *      cityId: // value for 'cityId'
 *   },
 * });
 */
export function useGetAddressByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAddressByIdQuery, GetAddressByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAddressByIdQuery, GetAddressByIdQueryVariables>(GetAddressByIdDocument, baseOptions);
      }
export function useGetAddressByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAddressByIdQuery, GetAddressByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAddressByIdQuery, GetAddressByIdQueryVariables>(GetAddressByIdDocument, baseOptions);
        }
export type GetAddressByIdQueryHookResult = ReturnType<typeof useGetAddressByIdQuery>;
export type GetAddressByIdLazyQueryHookResult = ReturnType<typeof useGetAddressByIdLazyQuery>;
export type GetAddressByIdQueryResult = ApolloReactCommon.QueryResult<GetAddressByIdQuery, GetAddressByIdQueryVariables>;
export const GetAllCitiesDocument = gql`
    query GetAllCities {
  cities(pageSize: 99) {
    edges {
      cityId
      cityName
    }
    totalCount
  }
}
    `;

/**
 * __useGetAllCitiesQuery__
 *
 * To run a query within a React component, call `useGetAllCitiesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAllCitiesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAllCitiesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAllCitiesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAllCitiesQuery, GetAllCitiesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAllCitiesQuery, GetAllCitiesQueryVariables>(GetAllCitiesDocument, baseOptions);
      }
export function useGetAllCitiesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAllCitiesQuery, GetAllCitiesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAllCitiesQuery, GetAllCitiesQueryVariables>(GetAllCitiesDocument, baseOptions);
        }
export type GetAllCitiesQueryHookResult = ReturnType<typeof useGetAllCitiesQuery>;
export type GetAllCitiesLazyQueryHookResult = ReturnType<typeof useGetAllCitiesLazyQuery>;
export type GetAllCitiesQueryResult = ApolloReactCommon.QueryResult<GetAllCitiesQuery, GetAllCitiesQueryVariables>;
export const GetDistrictsByCityIdDocument = gql`
    query GetDistrictsByCityId($where: DistrictDtoFilter) {
  districts(pageSize: 100, where: $where) {
    edges {
      districtId
      districtName
    }
    totalCount
  }
}
    `;

/**
 * __useGetDistrictsByCityIdQuery__
 *
 * To run a query within a React component, call `useGetDistrictsByCityIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDistrictsByCityIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDistrictsByCityIdQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetDistrictsByCityIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDistrictsByCityIdQuery, GetDistrictsByCityIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDistrictsByCityIdQuery, GetDistrictsByCityIdQueryVariables>(GetDistrictsByCityIdDocument, baseOptions);
      }
export function useGetDistrictsByCityIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDistrictsByCityIdQuery, GetDistrictsByCityIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDistrictsByCityIdQuery, GetDistrictsByCityIdQueryVariables>(GetDistrictsByCityIdDocument, baseOptions);
        }
export type GetDistrictsByCityIdQueryHookResult = ReturnType<typeof useGetDistrictsByCityIdQuery>;
export type GetDistrictsByCityIdLazyQueryHookResult = ReturnType<typeof useGetDistrictsByCityIdLazyQuery>;
export type GetDistrictsByCityIdQueryResult = ApolloReactCommon.QueryResult<GetDistrictsByCityIdQuery, GetDistrictsByCityIdQueryVariables>;
export const GetStreetByCityAndDistrictDocument = gql`
    query GetStreetByCityAndDistrict($where: StreetDtoFilter) {
  streets(pageSize: 999, where: $where) {
    edges {
      streetId
      streetName
    }
  }
}
    `;

/**
 * __useGetStreetByCityAndDistrictQuery__
 *
 * To run a query within a React component, call `useGetStreetByCityAndDistrictQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStreetByCityAndDistrictQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStreetByCityAndDistrictQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetStreetByCityAndDistrictQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetStreetByCityAndDistrictQuery, GetStreetByCityAndDistrictQueryVariables>) {
        return ApolloReactHooks.useQuery<GetStreetByCityAndDistrictQuery, GetStreetByCityAndDistrictQueryVariables>(GetStreetByCityAndDistrictDocument, baseOptions);
      }
export function useGetStreetByCityAndDistrictLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStreetByCityAndDistrictQuery, GetStreetByCityAndDistrictQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetStreetByCityAndDistrictQuery, GetStreetByCityAndDistrictQueryVariables>(GetStreetByCityAndDistrictDocument, baseOptions);
        }
export type GetStreetByCityAndDistrictQueryHookResult = ReturnType<typeof useGetStreetByCityAndDistrictQuery>;
export type GetStreetByCityAndDistrictLazyQueryHookResult = ReturnType<typeof useGetStreetByCityAndDistrictLazyQuery>;
export type GetStreetByCityAndDistrictQueryResult = ApolloReactCommon.QueryResult<GetStreetByCityAndDistrictQuery, GetStreetByCityAndDistrictQueryVariables>;
export const GetWardByDistrictIdDocument = gql`
    query GetWardByDistrictId($where: WardDtoFilter) {
  wards(pageSize: 100, where: $where) {
    edges {
      wardId
      wardName
    }
    totalCount
  }
}
    `;

/**
 * __useGetWardByDistrictIdQuery__
 *
 * To run a query within a React component, call `useGetWardByDistrictIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWardByDistrictIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWardByDistrictIdQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetWardByDistrictIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetWardByDistrictIdQuery, GetWardByDistrictIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetWardByDistrictIdQuery, GetWardByDistrictIdQueryVariables>(GetWardByDistrictIdDocument, baseOptions);
      }
export function useGetWardByDistrictIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetWardByDistrictIdQuery, GetWardByDistrictIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetWardByDistrictIdQuery, GetWardByDistrictIdQueryVariables>(GetWardByDistrictIdDocument, baseOptions);
        }
export type GetWardByDistrictIdQueryHookResult = ReturnType<typeof useGetWardByDistrictIdQuery>;
export type GetWardByDistrictIdLazyQueryHookResult = ReturnType<typeof useGetWardByDistrictIdLazyQuery>;
export type GetWardByDistrictIdQueryResult = ApolloReactCommon.QueryResult<GetWardByDistrictIdQuery, GetWardByDistrictIdQueryVariables>;
export const GetAgentDetailDocument = gql`
    query GetAgentDetail($agentId: Uuid!) {
  agentById(agentId: $agentId) {
    agentId
    instruction
    permanentAddress
    nationalId
    agentCode
    firstName
    lastName
    referralUser {
      fullName
      userId
    }
    email
    phoneNumber
    agentGroupId
    isInitialAccount
    rating
    isAgentLeader
    initialAccountCode
    preferPropertyTypes
    preferPropertyPriceFrom
    preferPropertyPriceTo
    workingAreas
    profilePhoto
    imageSizes
    agentRankName
    agentRankingDescription
    agentGroupName
    agentGroupDescription
    updatedDatetime
    createdDatetime
    referralCode
    contactAddress
    nationalIdType
    nationalIdIssuePlace
    nationalIdIssueDate
    topenerServiceTypes
    propertyAllocates
    gender
    isVerifyProfilePhoto
    isCompletedProfile
  }
}
    `;

/**
 * __useGetAgentDetailQuery__
 *
 * To run a query within a React component, call `useGetAgentDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentDetailQuery({
 *   variables: {
 *      agentId: // value for 'agentId'
 *   },
 * });
 */
export function useGetAgentDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentDetailQuery, GetAgentDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentDetailQuery, GetAgentDetailQueryVariables>(GetAgentDetailDocument, baseOptions);
      }
export function useGetAgentDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentDetailQuery, GetAgentDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentDetailQuery, GetAgentDetailQueryVariables>(GetAgentDetailDocument, baseOptions);
        }
export type GetAgentDetailQueryHookResult = ReturnType<typeof useGetAgentDetailQuery>;
export type GetAgentDetailLazyQueryHookResult = ReturnType<typeof useGetAgentDetailLazyQuery>;
export type GetAgentDetailQueryResult = ApolloReactCommon.QueryResult<GetAgentDetailQuery, GetAgentDetailQueryVariables>;
export const GetAgentDetailForPublicDocument = gql`
    query GetAgentDetailForPublic($agentId: Uuid!) {
  agentByIdForPublic(agentId: $agentId) {
    agentId
    instruction
    nationalId
    agentCode
    firstName
    lastName
    permanentAddress
    agentGroupId
    email
    phoneNumber
    agentGroupName
    isInitialAccount
    agentRankName
    agentRankingDescription
    agentGroupDescription
    userStatus
    rating
    isAgentLeader
    preferPropertyTypes
    preferPropertyPriceFrom
    preferPropertyPriceTo
    workingAreas
    profilePhoto
    referralUser {
      fullName
      userId
    }
    topenerServiceTypes
  }
}
    `;

/**
 * __useGetAgentDetailForPublicQuery__
 *
 * To run a query within a React component, call `useGetAgentDetailForPublicQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentDetailForPublicQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentDetailForPublicQuery({
 *   variables: {
 *      agentId: // value for 'agentId'
 *   },
 * });
 */
export function useGetAgentDetailForPublicQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentDetailForPublicQuery, GetAgentDetailForPublicQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentDetailForPublicQuery, GetAgentDetailForPublicQueryVariables>(GetAgentDetailForPublicDocument, baseOptions);
      }
export function useGetAgentDetailForPublicLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentDetailForPublicQuery, GetAgentDetailForPublicQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentDetailForPublicQuery, GetAgentDetailForPublicQueryVariables>(GetAgentDetailForPublicDocument, baseOptions);
        }
export type GetAgentDetailForPublicQueryHookResult = ReturnType<typeof useGetAgentDetailForPublicQuery>;
export type GetAgentDetailForPublicLazyQueryHookResult = ReturnType<typeof useGetAgentDetailForPublicLazyQuery>;
export type GetAgentDetailForPublicQueryResult = ApolloReactCommon.QueryResult<GetAgentDetailForPublicQuery, GetAgentDetailForPublicQueryVariables>;
export const CheckContactTradingRequestIsRatedDocument = gql`
    query CheckContactTradingRequestIsRated($input: Uuid!) {
  checkContactTradingRequestIsRated(supportRequestId: $input)
}
    `;

/**
 * __useCheckContactTradingRequestIsRatedQuery__
 *
 * To run a query within a React component, call `useCheckContactTradingRequestIsRatedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckContactTradingRequestIsRatedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckContactTradingRequestIsRatedQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckContactTradingRequestIsRatedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckContactTradingRequestIsRatedQuery, CheckContactTradingRequestIsRatedQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckContactTradingRequestIsRatedQuery, CheckContactTradingRequestIsRatedQueryVariables>(CheckContactTradingRequestIsRatedDocument, baseOptions);
      }
export function useCheckContactTradingRequestIsRatedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckContactTradingRequestIsRatedQuery, CheckContactTradingRequestIsRatedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckContactTradingRequestIsRatedQuery, CheckContactTradingRequestIsRatedQueryVariables>(CheckContactTradingRequestIsRatedDocument, baseOptions);
        }
export type CheckContactTradingRequestIsRatedQueryHookResult = ReturnType<typeof useCheckContactTradingRequestIsRatedQuery>;
export type CheckContactTradingRequestIsRatedLazyQueryHookResult = ReturnType<typeof useCheckContactTradingRequestIsRatedLazyQuery>;
export type CheckContactTradingRequestIsRatedQueryResult = ApolloReactCommon.QueryResult<CheckContactTradingRequestIsRatedQuery, CheckContactTradingRequestIsRatedQueryVariables>;
export const CheckCurrentUserIsSaleAgentDocument = gql`
    query CheckCurrentUserIsSaleAgent($input: CheckCurrentUserIsSaleAgentInput!) {
  checkCurrentUserIsSaleAgent(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
    isSaleAgent
  }
}
    `;

/**
 * __useCheckCurrentUserIsSaleAgentQuery__
 *
 * To run a query within a React component, call `useCheckCurrentUserIsSaleAgentQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckCurrentUserIsSaleAgentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckCurrentUserIsSaleAgentQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckCurrentUserIsSaleAgentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckCurrentUserIsSaleAgentQuery, CheckCurrentUserIsSaleAgentQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckCurrentUserIsSaleAgentQuery, CheckCurrentUserIsSaleAgentQueryVariables>(CheckCurrentUserIsSaleAgentDocument, baseOptions);
      }
export function useCheckCurrentUserIsSaleAgentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckCurrentUserIsSaleAgentQuery, CheckCurrentUserIsSaleAgentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckCurrentUserIsSaleAgentQuery, CheckCurrentUserIsSaleAgentQueryVariables>(CheckCurrentUserIsSaleAgentDocument, baseOptions);
        }
export type CheckCurrentUserIsSaleAgentQueryHookResult = ReturnType<typeof useCheckCurrentUserIsSaleAgentQuery>;
export type CheckCurrentUserIsSaleAgentLazyQueryHookResult = ReturnType<typeof useCheckCurrentUserIsSaleAgentLazyQuery>;
export type CheckCurrentUserIsSaleAgentQueryResult = ApolloReactCommon.QueryResult<CheckCurrentUserIsSaleAgentQuery, CheckCurrentUserIsSaleAgentQueryVariables>;
export const CreateAgentDocument = gql`
    mutation createAgent($input: CreateAgentInput!) {
  createNewAgent(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateAgentMutationFn = ApolloReactCommon.MutationFunction<CreateAgentMutation, CreateAgentMutationVariables>;

/**
 * __useCreateAgentMutation__
 *
 * To run a mutation, you first call `useCreateAgentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAgentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAgentMutation, { data, loading, error }] = useCreateAgentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAgentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateAgentMutation, CreateAgentMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateAgentMutation, CreateAgentMutationVariables>(CreateAgentDocument, baseOptions);
      }
export type CreateAgentMutationHookResult = ReturnType<typeof useCreateAgentMutation>;
export type CreateAgentMutationResult = ApolloReactCommon.MutationResult<CreateAgentMutation>;
export type CreateAgentMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateAgentMutation, CreateAgentMutationVariables>;
export const GetAgentGroupInfoByIdDocument = gql`
    query GetAgentGroupInfoById($input: agentGroupInput) {
  agentGroupInfoById(getAgentGroupInfoByIdInput: $input) {
    numberOfMembersInAllGroups
    parentAgentGroup {
      familyGroupNames
      agentGroupId
      agentGroupName
      agentGroupDescription
      numberOfMembers
      needViewMore
      allMembers {
        agentId
        agentCode
        firstName
        lastName
        profilePhoto
        isAgentLeader
        agentRankName
        agentRankingDescription
      }
    }
    childAgentGroups {
      familyGroupNames
      agentGroupId
      agentGroupName
      agentGroupDescription
      numberOfMembers
      needViewMore
      allMembers {
        agentId
        agentCode
        firstName
        lastName
        profilePhoto
        isAgentLeader
        agentRankName
        agentRankingDescription
      }
    }
  }
}
    `;

/**
 * __useGetAgentGroupInfoByIdQuery__
 *
 * To run a query within a React component, call `useGetAgentGroupInfoByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentGroupInfoByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentGroupInfoByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetAgentGroupInfoByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentGroupInfoByIdQuery, GetAgentGroupInfoByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentGroupInfoByIdQuery, GetAgentGroupInfoByIdQueryVariables>(GetAgentGroupInfoByIdDocument, baseOptions);
      }
export function useGetAgentGroupInfoByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentGroupInfoByIdQuery, GetAgentGroupInfoByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentGroupInfoByIdQuery, GetAgentGroupInfoByIdQueryVariables>(GetAgentGroupInfoByIdDocument, baseOptions);
        }
export type GetAgentGroupInfoByIdQueryHookResult = ReturnType<typeof useGetAgentGroupInfoByIdQuery>;
export type GetAgentGroupInfoByIdLazyQueryHookResult = ReturnType<typeof useGetAgentGroupInfoByIdLazyQuery>;
export type GetAgentGroupInfoByIdQueryResult = ApolloReactCommon.QueryResult<GetAgentGroupInfoByIdQuery, GetAgentGroupInfoByIdQueryVariables>;
export const GetAgentGroupsDocument = gql`
    query GetAgentGroups($where: AgentGroupDtoFilter) {
  agentGroups(where: $where, pageSize: 999999, order_by: {agentGroupName: ASC}) {
    totalCount
    edges {
      agentGroupId
      agentGroupName
      agentGroupDescription
      agentGroupLevel
    }
  }
}
    `;

/**
 * __useGetAgentGroupsQuery__
 *
 * To run a query within a React component, call `useGetAgentGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentGroupsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetAgentGroupsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentGroupsQuery, GetAgentGroupsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentGroupsQuery, GetAgentGroupsQueryVariables>(GetAgentGroupsDocument, baseOptions);
      }
export function useGetAgentGroupsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentGroupsQuery, GetAgentGroupsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentGroupsQuery, GetAgentGroupsQueryVariables>(GetAgentGroupsDocument, baseOptions);
        }
export type GetAgentGroupsQueryHookResult = ReturnType<typeof useGetAgentGroupsQuery>;
export type GetAgentGroupsLazyQueryHookResult = ReturnType<typeof useGetAgentGroupsLazyQuery>;
export type GetAgentGroupsQueryResult = ApolloReactCommon.QueryResult<GetAgentGroupsQuery, GetAgentGroupsQueryVariables>;
export const GetAgentPerformanceTrackingsByAgentIdDocument = gql`
    query GetAgentPerformanceTrackingsByAgentId($input: agentPerformanceTrackingInput!) {
  agentPerformanceTrackingsByAgentIds(request: $input) {
    edges {
      oldAgentRankingId
      oldAgentRankingName
      oldAgentRankingDescription
      reviewFromDate
      reviewToDate
      numberApprovedPosts
      numberOfReferalAgents
      numberOfB2CTransaction
      numberOfC2CTransaction
      targetAgentRankingId
      targetAgentRankingName
      targetAgentRankingDescription
      targetNumberApprovedPosts
      targetNumberOfReferalAgents
      targetNumberOfB2CTransaction
      targetNumberOfC2CTransaction
      meetTargetNumberApprovedPosts
      meetTargetNumberOfReferalAgents
      meetTargetNumberOfB2CTransaction
      meetTargetNumberOfC2CTransaction
    }
  }
}
    `;

/**
 * __useGetAgentPerformanceTrackingsByAgentIdQuery__
 *
 * To run a query within a React component, call `useGetAgentPerformanceTrackingsByAgentIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentPerformanceTrackingsByAgentIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentPerformanceTrackingsByAgentIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetAgentPerformanceTrackingsByAgentIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentPerformanceTrackingsByAgentIdQuery, GetAgentPerformanceTrackingsByAgentIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentPerformanceTrackingsByAgentIdQuery, GetAgentPerformanceTrackingsByAgentIdQueryVariables>(GetAgentPerformanceTrackingsByAgentIdDocument, baseOptions);
      }
export function useGetAgentPerformanceTrackingsByAgentIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentPerformanceTrackingsByAgentIdQuery, GetAgentPerformanceTrackingsByAgentIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentPerformanceTrackingsByAgentIdQuery, GetAgentPerformanceTrackingsByAgentIdQueryVariables>(GetAgentPerformanceTrackingsByAgentIdDocument, baseOptions);
        }
export type GetAgentPerformanceTrackingsByAgentIdQueryHookResult = ReturnType<typeof useGetAgentPerformanceTrackingsByAgentIdQuery>;
export type GetAgentPerformanceTrackingsByAgentIdLazyQueryHookResult = ReturnType<typeof useGetAgentPerformanceTrackingsByAgentIdLazyQuery>;
export type GetAgentPerformanceTrackingsByAgentIdQueryResult = ApolloReactCommon.QueryResult<GetAgentPerformanceTrackingsByAgentIdQuery, GetAgentPerformanceTrackingsByAgentIdQueryVariables>;
export const GetAgentPerformanceTrackingsByAgentIdCurentDocument = gql`
    query GetAgentPerformanceTrackingsByAgentIdCurent($input: agentPerformanceTrackingInput!) {
  agentPerformanceTrackingsByAgentIds(request: $input) {
    edges {
      newAgentRankingId
      newAgentRankingName
      newAgentRankingDescription
      newAgentRankingDegreeOrder
      reviewFromDate
      reviewToDate
      numberApprovedPosts
      numberOfReferalAgents
      numberOfB2CTransaction
      numberOfC2CTransaction
      targetAgentRankingId
      targetAgentRankingName
      targetAgentRankingDescription
      targetNumberApprovedPosts
      targetNumberOfReferalAgents
      targetNumberOfB2CTransaction
      targetNumberOfC2CTransaction
      meetTargetNumberApprovedPosts
      meetTargetNumberOfReferalAgents
      meetTargetNumberOfB2CTransaction
      meetTargetNumberOfC2CTransaction
    }
  }
}
    `;

/**
 * __useGetAgentPerformanceTrackingsByAgentIdCurentQuery__
 *
 * To run a query within a React component, call `useGetAgentPerformanceTrackingsByAgentIdCurentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentPerformanceTrackingsByAgentIdCurentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentPerformanceTrackingsByAgentIdCurentQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetAgentPerformanceTrackingsByAgentIdCurentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentPerformanceTrackingsByAgentIdCurentQuery, GetAgentPerformanceTrackingsByAgentIdCurentQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentPerformanceTrackingsByAgentIdCurentQuery, GetAgentPerformanceTrackingsByAgentIdCurentQueryVariables>(GetAgentPerformanceTrackingsByAgentIdCurentDocument, baseOptions);
      }
export function useGetAgentPerformanceTrackingsByAgentIdCurentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentPerformanceTrackingsByAgentIdCurentQuery, GetAgentPerformanceTrackingsByAgentIdCurentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentPerformanceTrackingsByAgentIdCurentQuery, GetAgentPerformanceTrackingsByAgentIdCurentQueryVariables>(GetAgentPerformanceTrackingsByAgentIdCurentDocument, baseOptions);
        }
export type GetAgentPerformanceTrackingsByAgentIdCurentQueryHookResult = ReturnType<typeof useGetAgentPerformanceTrackingsByAgentIdCurentQuery>;
export type GetAgentPerformanceTrackingsByAgentIdCurentLazyQueryHookResult = ReturnType<typeof useGetAgentPerformanceTrackingsByAgentIdCurentLazyQuery>;
export type GetAgentPerformanceTrackingsByAgentIdCurentQueryResult = ApolloReactCommon.QueryResult<GetAgentPerformanceTrackingsByAgentIdCurentQuery, GetAgentPerformanceTrackingsByAgentIdCurentQueryVariables>;
export const GetAgentRankingsDocument = gql`
    query GetAgentRankings {
  agentRankings {
    edges {
      agentRankingId
      agentRankingName
      agentRankingDescription
      agentRankingDegreeOrder
      numberOfApprovedPosts
      numberOfReferalAgents
      numberOfB2CTransaction
      numberOfC2CTransaction
    }
  }
}
    `;

/**
 * __useGetAgentRankingsQuery__
 *
 * To run a query within a React component, call `useGetAgentRankingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentRankingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentRankingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAgentRankingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentRankingsQuery, GetAgentRankingsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentRankingsQuery, GetAgentRankingsQueryVariables>(GetAgentRankingsDocument, baseOptions);
      }
export function useGetAgentRankingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentRankingsQuery, GetAgentRankingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentRankingsQuery, GetAgentRankingsQueryVariables>(GetAgentRankingsDocument, baseOptions);
        }
export type GetAgentRankingsQueryHookResult = ReturnType<typeof useGetAgentRankingsQuery>;
export type GetAgentRankingsLazyQueryHookResult = ReturnType<typeof useGetAgentRankingsLazyQuery>;
export type GetAgentRankingsQueryResult = ApolloReactCommon.QueryResult<GetAgentRankingsQuery, GetAgentRankingsQueryVariables>;
export const GetAgentsDocument = gql`
    query GetAgents($page: Int, $pageSize: Int, $agentGroupId: Uuid, $order_by: AgentDtoSort) {
  agentGroupMembersByAgentGroupId(
    page: $page
    pageSize: $pageSize
    agentGroupId: $agentGroupId
    order_by: $order_by
  ) {
    edges {
      agentId
      agentGroupId
      instruction
      permanentAddress
      nationalId
      isAgentLeader
      agentCode
      firstName
      lastName
      email
      phoneNumber
      agentCode
      agentRankName
      agentRankingDescription
      profilePhoto
    }
  }
}
    `;

/**
 * __useGetAgentsQuery__
 *
 * To run a query within a React component, call `useGetAgentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentsQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      agentGroupId: // value for 'agentGroupId'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetAgentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentsQuery, GetAgentsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentsQuery, GetAgentsQueryVariables>(GetAgentsDocument, baseOptions);
      }
export function useGetAgentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentsQuery, GetAgentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentsQuery, GetAgentsQueryVariables>(GetAgentsDocument, baseOptions);
        }
export type GetAgentsQueryHookResult = ReturnType<typeof useGetAgentsQuery>;
export type GetAgentsLazyQueryHookResult = ReturnType<typeof useGetAgentsLazyQuery>;
export type GetAgentsQueryResult = ApolloReactCommon.QueryResult<GetAgentsQuery, GetAgentsQueryVariables>;
export const GetBuyerInfoByCurrentUserForTransactionDocument = gql`
    query GetBuyerInfoByCurrentUserForTransaction {
  getBuyerInfoByCurrentUserForTransaction {
    buyerInfoDto {
      firstName
      lastName
      phoneNumber
      email
      gender
      dob {
        toDateTime
      }
      nationalId
      permanentAddress
      contactAddress
      nationalIdType
      nationalIdIssuePlace
      nationalIdIssueDate
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetBuyerInfoByCurrentUserForTransactionQuery__
 *
 * To run a query within a React component, call `useGetBuyerInfoByCurrentUserForTransactionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBuyerInfoByCurrentUserForTransactionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBuyerInfoByCurrentUserForTransactionQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetBuyerInfoByCurrentUserForTransactionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBuyerInfoByCurrentUserForTransactionQuery, GetBuyerInfoByCurrentUserForTransactionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBuyerInfoByCurrentUserForTransactionQuery, GetBuyerInfoByCurrentUserForTransactionQueryVariables>(GetBuyerInfoByCurrentUserForTransactionDocument, baseOptions);
      }
export function useGetBuyerInfoByCurrentUserForTransactionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBuyerInfoByCurrentUserForTransactionQuery, GetBuyerInfoByCurrentUserForTransactionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBuyerInfoByCurrentUserForTransactionQuery, GetBuyerInfoByCurrentUserForTransactionQueryVariables>(GetBuyerInfoByCurrentUserForTransactionDocument, baseOptions);
        }
export type GetBuyerInfoByCurrentUserForTransactionQueryHookResult = ReturnType<typeof useGetBuyerInfoByCurrentUserForTransactionQuery>;
export type GetBuyerInfoByCurrentUserForTransactionLazyQueryHookResult = ReturnType<typeof useGetBuyerInfoByCurrentUserForTransactionLazyQuery>;
export type GetBuyerInfoByCurrentUserForTransactionQueryResult = ApolloReactCommon.QueryResult<GetBuyerInfoByCurrentUserForTransactionQuery, GetBuyerInfoByCurrentUserForTransactionQueryVariables>;
export const GetConsultantsForC2CTransactionCursorDocument = gql`
    query GetConsultantsForC2CTransactionCursor($first: PaginationAmount, $after: String!, $input: GetConsultantsForC2CTransactionInput!) {
  getConsultantsForC2CTransactionCursor(
    first: $first
    after: $after
    getConsultantsForC2CTransactionInput: $input
  ) {
    totalCount
    edges {
      node {
        userId
        staffId
        staffCode
        profilePhoto
        fullName
        phoneNumber
        staffGroupId
        staffGroupDescription
        rating
        isGroupLeader
      }
      cursor
    }
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}
    `;

/**
 * __useGetConsultantsForC2CTransactionCursorQuery__
 *
 * To run a query within a React component, call `useGetConsultantsForC2CTransactionCursorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConsultantsForC2CTransactionCursorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConsultantsForC2CTransactionCursorQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetConsultantsForC2CTransactionCursorQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetConsultantsForC2CTransactionCursorQuery, GetConsultantsForC2CTransactionCursorQueryVariables>) {
        return ApolloReactHooks.useQuery<GetConsultantsForC2CTransactionCursorQuery, GetConsultantsForC2CTransactionCursorQueryVariables>(GetConsultantsForC2CTransactionCursorDocument, baseOptions);
      }
export function useGetConsultantsForC2CTransactionCursorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetConsultantsForC2CTransactionCursorQuery, GetConsultantsForC2CTransactionCursorQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetConsultantsForC2CTransactionCursorQuery, GetConsultantsForC2CTransactionCursorQueryVariables>(GetConsultantsForC2CTransactionCursorDocument, baseOptions);
        }
export type GetConsultantsForC2CTransactionCursorQueryHookResult = ReturnType<typeof useGetConsultantsForC2CTransactionCursorQuery>;
export type GetConsultantsForC2CTransactionCursorLazyQueryHookResult = ReturnType<typeof useGetConsultantsForC2CTransactionCursorLazyQuery>;
export type GetConsultantsForC2CTransactionCursorQueryResult = ApolloReactCommon.QueryResult<GetConsultantsForC2CTransactionCursorQuery, GetConsultantsForC2CTransactionCursorQueryVariables>;
export const GetConsultantsSuggestionC2CDocument = gql`
    query GetConsultantsSuggestionC2C($page: Int, $pageSize: Int, $input: GetConsultantsSuggestionC2CRequestInput) {
  consultantsSuggestionC2C(page: $page, pageSize: $pageSize, request: $input) {
    totalCount
    edges {
      userId
      userName
      fullName
      staffId
      staffCode
      isGroupLeader
      profilePhoto
      staffRankingId
      rating
      staffGroupDescription
      staffGroupId
    }
  }
}
    `;

/**
 * __useGetConsultantsSuggestionC2CQuery__
 *
 * To run a query within a React component, call `useGetConsultantsSuggestionC2CQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetConsultantsSuggestionC2CQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetConsultantsSuggestionC2CQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetConsultantsSuggestionC2CQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetConsultantsSuggestionC2CQuery, GetConsultantsSuggestionC2CQueryVariables>) {
        return ApolloReactHooks.useQuery<GetConsultantsSuggestionC2CQuery, GetConsultantsSuggestionC2CQueryVariables>(GetConsultantsSuggestionC2CDocument, baseOptions);
      }
export function useGetConsultantsSuggestionC2CLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetConsultantsSuggestionC2CQuery, GetConsultantsSuggestionC2CQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetConsultantsSuggestionC2CQuery, GetConsultantsSuggestionC2CQueryVariables>(GetConsultantsSuggestionC2CDocument, baseOptions);
        }
export type GetConsultantsSuggestionC2CQueryHookResult = ReturnType<typeof useGetConsultantsSuggestionC2CQuery>;
export type GetConsultantsSuggestionC2CLazyQueryHookResult = ReturnType<typeof useGetConsultantsSuggestionC2CLazyQuery>;
export type GetConsultantsSuggestionC2CQueryResult = ApolloReactCommon.QueryResult<GetConsultantsSuggestionC2CQuery, GetConsultantsSuggestionC2CQueryVariables>;
export const GetContactTradingRatingByIdDocument = gql`
    query GetContactTradingRatingById($input: Uuid!) {
  contactTradingRatingById(supportRequestId: $input) {
    postTitle
    agentId
    agentFirstName
    agentLastName
    agentImage
    agentRating
    isShowingBuyer
    staffRating
  }
}
    `;

/**
 * __useGetContactTradingRatingByIdQuery__
 *
 * To run a query within a React component, call `useGetContactTradingRatingByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactTradingRatingByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactTradingRatingByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetContactTradingRatingByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetContactTradingRatingByIdQuery, GetContactTradingRatingByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetContactTradingRatingByIdQuery, GetContactTradingRatingByIdQueryVariables>(GetContactTradingRatingByIdDocument, baseOptions);
      }
export function useGetContactTradingRatingByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetContactTradingRatingByIdQuery, GetContactTradingRatingByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetContactTradingRatingByIdQuery, GetContactTradingRatingByIdQueryVariables>(GetContactTradingRatingByIdDocument, baseOptions);
        }
export type GetContactTradingRatingByIdQueryHookResult = ReturnType<typeof useGetContactTradingRatingByIdQuery>;
export type GetContactTradingRatingByIdLazyQueryHookResult = ReturnType<typeof useGetContactTradingRatingByIdLazyQuery>;
export type GetContactTradingRatingByIdQueryResult = ApolloReactCommon.QueryResult<GetContactTradingRatingByIdQuery, GetContactTradingRatingByIdQueryVariables>;
export const GetDefaultAgentGroupDocument = gql`
    query GetDefaultAgentGroup {
  defaultAgentGroup {
    agentGroupId
    agentGroupName
    agentGroupStatus
    agentGroupDescription
    agentGroupLevel
    parentAgentGroupId
  }
}
    `;

/**
 * __useGetDefaultAgentGroupQuery__
 *
 * To run a query within a React component, call `useGetDefaultAgentGroupQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDefaultAgentGroupQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDefaultAgentGroupQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetDefaultAgentGroupQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDefaultAgentGroupQuery, GetDefaultAgentGroupQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDefaultAgentGroupQuery, GetDefaultAgentGroupQueryVariables>(GetDefaultAgentGroupDocument, baseOptions);
      }
export function useGetDefaultAgentGroupLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDefaultAgentGroupQuery, GetDefaultAgentGroupQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDefaultAgentGroupQuery, GetDefaultAgentGroupQueryVariables>(GetDefaultAgentGroupDocument, baseOptions);
        }
export type GetDefaultAgentGroupQueryHookResult = ReturnType<typeof useGetDefaultAgentGroupQuery>;
export type GetDefaultAgentGroupLazyQueryHookResult = ReturnType<typeof useGetDefaultAgentGroupLazyQuery>;
export type GetDefaultAgentGroupQueryResult = ApolloReactCommon.QueryResult<GetDefaultAgentGroupQuery, GetDefaultAgentGroupQueryVariables>;
export const GetGuildAgentRankingsDocument = gql`
    query GetGuildAgentRankings {
  agentRankings {
    edges {
      agentRankingName
      agentRankingDescription
      benefit
    }
  }
}
    `;

/**
 * __useGetGuildAgentRankingsQuery__
 *
 * To run a query within a React component, call `useGetGuildAgentRankingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGuildAgentRankingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGuildAgentRankingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetGuildAgentRankingsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGuildAgentRankingsQuery, GetGuildAgentRankingsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGuildAgentRankingsQuery, GetGuildAgentRankingsQueryVariables>(GetGuildAgentRankingsDocument, baseOptions);
      }
export function useGetGuildAgentRankingsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGuildAgentRankingsQuery, GetGuildAgentRankingsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGuildAgentRankingsQuery, GetGuildAgentRankingsQueryVariables>(GetGuildAgentRankingsDocument, baseOptions);
        }
export type GetGuildAgentRankingsQueryHookResult = ReturnType<typeof useGetGuildAgentRankingsQuery>;
export type GetGuildAgentRankingsLazyQueryHookResult = ReturnType<typeof useGetGuildAgentRankingsLazyQuery>;
export type GetGuildAgentRankingsQueryResult = ApolloReactCommon.QueryResult<GetGuildAgentRankingsQuery, GetGuildAgentRankingsQueryVariables>;
export const GetShortAgentByIdDocument = gql`
    query GetShortAgentById($agentId: Uuid!) {
  agentByIdForPublic(agentId: $agentId) {
    agentId
    agentCode
    firstName
    lastName
    email
    phoneNumber
    rating
    sellingTotal
    isAgentLeader
    preferPropertyTypes
    preferPropertyPriceFrom
    preferPropertyPriceTo
    workingAreas
    profilePhoto
    agentRankName
    agentRankingDescription
    agentGroupName
    agentGroupDescription
  }
}
    `;

/**
 * __useGetShortAgentByIdQuery__
 *
 * To run a query within a React component, call `useGetShortAgentByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetShortAgentByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetShortAgentByIdQuery({
 *   variables: {
 *      agentId: // value for 'agentId'
 *   },
 * });
 */
export function useGetShortAgentByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetShortAgentByIdQuery, GetShortAgentByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetShortAgentByIdQuery, GetShortAgentByIdQueryVariables>(GetShortAgentByIdDocument, baseOptions);
      }
export function useGetShortAgentByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetShortAgentByIdQuery, GetShortAgentByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetShortAgentByIdQuery, GetShortAgentByIdQueryVariables>(GetShortAgentByIdDocument, baseOptions);
        }
export type GetShortAgentByIdQueryHookResult = ReturnType<typeof useGetShortAgentByIdQuery>;
export type GetShortAgentByIdLazyQueryHookResult = ReturnType<typeof useGetShortAgentByIdLazyQuery>;
export type GetShortAgentByIdQueryResult = ApolloReactCommon.QueryResult<GetShortAgentByIdQuery, GetShortAgentByIdQueryVariables>;
export const GetSupportedConsultantsC2CDocument = gql`
    query GetSupportedConsultantsC2C($page: Int, $pageSize: Int) {
  consultantsSupportedC2C(
    page: $page
    pageSize: $pageSize
    order_by: {supportedDatetime: DESC}
  ) {
    totalCount
    edges {
      userId
      userName
      fullName
      staffId
      staffCode
      isGroupLeader
      profilePhoto
      staffRankingId
      rating
      staffGroupId
      staffGroupDescription
      supportedDatetime
    }
  }
}
    `;

/**
 * __useGetSupportedConsultantsC2CQuery__
 *
 * To run a query within a React component, call `useGetSupportedConsultantsC2CQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportedConsultantsC2CQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportedConsultantsC2CQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetSupportedConsultantsC2CQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportedConsultantsC2CQuery, GetSupportedConsultantsC2CQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportedConsultantsC2CQuery, GetSupportedConsultantsC2CQueryVariables>(GetSupportedConsultantsC2CDocument, baseOptions);
      }
export function useGetSupportedConsultantsC2CLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportedConsultantsC2CQuery, GetSupportedConsultantsC2CQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportedConsultantsC2CQuery, GetSupportedConsultantsC2CQueryVariables>(GetSupportedConsultantsC2CDocument, baseOptions);
        }
export type GetSupportedConsultantsC2CQueryHookResult = ReturnType<typeof useGetSupportedConsultantsC2CQuery>;
export type GetSupportedConsultantsC2CLazyQueryHookResult = ReturnType<typeof useGetSupportedConsultantsC2CLazyQuery>;
export type GetSupportedConsultantsC2CQueryResult = ApolloReactCommon.QueryResult<GetSupportedConsultantsC2CQuery, GetSupportedConsultantsC2CQueryVariables>;
export const GetTopenerOfMonthDocument = gql`
    query GetTopenerOfMonth($page: Int, $pageSize: Int, $where: TopenerOfMonthDtoFilter) {
  topenerOfMonth(page: $page, pageSize: $pageSize, where: $where) {
    edges {
      agentId
      fullName
      groupName
      rankingName
      sellingTotal
      phoneNumber
      email
      rating
      profilePhoto
      profilePhotos
      groupNameDescription
      propertyPostInfoDtos {
        addressId
        buildingArea
        commission
        saleCommissionCurrencyUnitId
        createdByUserId
        images
        isFollowed
        numberOfBathrooms
        numberOfBedrooms
        direction
        postDescription
        postTitle
        postTypeId
        price
        projectId
        propertyCode
        propertyName
        propertyPostApprovalStatusId
        propertyPostId
        propertySubTypeId
        propertyTypeId
        totalFollower
        totalShare
        unitOfMeasureId
        propertyAddress {
          additionalLocationInfo
          block
          building
          calculateSize
          cityId
          cityName
          countryId
          countryName
          districtId
          districtName
          floor
          googleEmbedCode
          googleShareLink
          homeAddress
          imageMapUrl
          landmark
          latitude
          longitude
          propertyAddressId
          room
          streetName
          wardId
          wardName
        }
      }
    }
    totalCount
    __typename
  }
}
    `;

/**
 * __useGetTopenerOfMonthQuery__
 *
 * To run a query within a React component, call `useGetTopenerOfMonthQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenerOfMonthQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenerOfMonthQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTopenerOfMonthQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenerOfMonthQuery, GetTopenerOfMonthQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenerOfMonthQuery, GetTopenerOfMonthQueryVariables>(GetTopenerOfMonthDocument, baseOptions);
      }
export function useGetTopenerOfMonthLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenerOfMonthQuery, GetTopenerOfMonthQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenerOfMonthQuery, GetTopenerOfMonthQueryVariables>(GetTopenerOfMonthDocument, baseOptions);
        }
export type GetTopenerOfMonthQueryHookResult = ReturnType<typeof useGetTopenerOfMonthQuery>;
export type GetTopenerOfMonthLazyQueryHookResult = ReturnType<typeof useGetTopenerOfMonthLazyQuery>;
export type GetTopenerOfMonthQueryResult = ApolloReactCommon.QueryResult<GetTopenerOfMonthQuery, GetTopenerOfMonthQueryVariables>;
export const UpdateAgentDocument = gql`
    mutation updateAgent($input: UpdateAgentInput!) {
  updateAgent(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateAgentMutationFn = ApolloReactCommon.MutationFunction<UpdateAgentMutation, UpdateAgentMutationVariables>;

/**
 * __useUpdateAgentMutation__
 *
 * To run a mutation, you first call `useUpdateAgentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgentMutation, { data, loading, error }] = useUpdateAgentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateAgentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAgentMutation, UpdateAgentMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateAgentMutation, UpdateAgentMutationVariables>(UpdateAgentDocument, baseOptions);
      }
export type UpdateAgentMutationHookResult = ReturnType<typeof useUpdateAgentMutation>;
export type UpdateAgentMutationResult = ApolloReactCommon.MutationResult<UpdateAgentMutation>;
export type UpdateAgentMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAgentMutation, UpdateAgentMutationVariables>;
export const UpdateAgentRatingForSupportRequestDocument = gql`
    mutation UpdateAgentRatingForSupportRequest($input: UpdateAgentRatingForSupportRequestInput!) {
  updateAgentRatingForSupportRequest(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateAgentRatingForSupportRequestMutationFn = ApolloReactCommon.MutationFunction<UpdateAgentRatingForSupportRequestMutation, UpdateAgentRatingForSupportRequestMutationVariables>;

/**
 * __useUpdateAgentRatingForSupportRequestMutation__
 *
 * To run a mutation, you first call `useUpdateAgentRatingForSupportRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgentRatingForSupportRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgentRatingForSupportRequestMutation, { data, loading, error }] = useUpdateAgentRatingForSupportRequestMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateAgentRatingForSupportRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAgentRatingForSupportRequestMutation, UpdateAgentRatingForSupportRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateAgentRatingForSupportRequestMutation, UpdateAgentRatingForSupportRequestMutationVariables>(UpdateAgentRatingForSupportRequestDocument, baseOptions);
      }
export type UpdateAgentRatingForSupportRequestMutationHookResult = ReturnType<typeof useUpdateAgentRatingForSupportRequestMutation>;
export type UpdateAgentRatingForSupportRequestMutationResult = ApolloReactCommon.MutationResult<UpdateAgentRatingForSupportRequestMutation>;
export type UpdateAgentRatingForSupportRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAgentRatingForSupportRequestMutation, UpdateAgentRatingForSupportRequestMutationVariables>;
export const BidvPayBookingTransactionDocument = gql`
    mutation BidvPayBookingTransaction($payBookingTransactionInput: PayBookingTransactionInput!) {
  bidvPayBookingTransaction(
    payBookingTransactionInput: $payBookingTransactionInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    linkPaymentUrl
    returnUrl
    ipnUrl
    disablePayment
    transactionId
  }
}
    `;
export type BidvPayBookingTransactionMutationFn = ApolloReactCommon.MutationFunction<BidvPayBookingTransactionMutation, BidvPayBookingTransactionMutationVariables>;

/**
 * __useBidvPayBookingTransactionMutation__
 *
 * To run a mutation, you first call `useBidvPayBookingTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBidvPayBookingTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [bidvPayBookingTransactionMutation, { data, loading, error }] = useBidvPayBookingTransactionMutation({
 *   variables: {
 *      payBookingTransactionInput: // value for 'payBookingTransactionInput'
 *   },
 * });
 */
export function useBidvPayBookingTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<BidvPayBookingTransactionMutation, BidvPayBookingTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<BidvPayBookingTransactionMutation, BidvPayBookingTransactionMutationVariables>(BidvPayBookingTransactionDocument, baseOptions);
      }
export type BidvPayBookingTransactionMutationHookResult = ReturnType<typeof useBidvPayBookingTransactionMutation>;
export type BidvPayBookingTransactionMutationResult = ApolloReactCommon.MutationResult<BidvPayBookingTransactionMutation>;
export type BidvPayBookingTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<BidvPayBookingTransactionMutation, BidvPayBookingTransactionMutationVariables>;
export const BookingToDepositeConfirmationDataDocument = gql`
    query BookingToDepositeConfirmationData($transactionId: Uuid!, $propertyPostId: Uuid!) {
  bookingTransactionDetail(
    bookingTransactionId: $transactionId
    propertyPostId: $propertyPostId
  ) {
    bookingTransactionId
    transactionAmount
    saleAgentInfo {
      agentId
    }
    customerInfo {
      customerId
      customerFirstName
      customerLastName
      customerPhone
      customerEmail
    }
    propertyPostInfo {
      blockCode
      blockName
      numberOfFloor
      floor
      propertyCode
      propertyName
      propertyPostId
      propertyTypeName
      price
    }
    consultantInfo {
      staffId
      staffCode
      fullName
      profilePhoto
      email
      rating
      phoneNumber
    }
  }
}
    `;

/**
 * __useBookingToDepositeConfirmationDataQuery__
 *
 * To run a query within a React component, call `useBookingToDepositeConfirmationDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useBookingToDepositeConfirmationDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBookingToDepositeConfirmationDataQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useBookingToDepositeConfirmationDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BookingToDepositeConfirmationDataQuery, BookingToDepositeConfirmationDataQueryVariables>) {
        return ApolloReactHooks.useQuery<BookingToDepositeConfirmationDataQuery, BookingToDepositeConfirmationDataQueryVariables>(BookingToDepositeConfirmationDataDocument, baseOptions);
      }
export function useBookingToDepositeConfirmationDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BookingToDepositeConfirmationDataQuery, BookingToDepositeConfirmationDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<BookingToDepositeConfirmationDataQuery, BookingToDepositeConfirmationDataQueryVariables>(BookingToDepositeConfirmationDataDocument, baseOptions);
        }
export type BookingToDepositeConfirmationDataQueryHookResult = ReturnType<typeof useBookingToDepositeConfirmationDataQuery>;
export type BookingToDepositeConfirmationDataLazyQueryHookResult = ReturnType<typeof useBookingToDepositeConfirmationDataLazyQuery>;
export type BookingToDepositeConfirmationDataQueryResult = ApolloReactCommon.QueryResult<BookingToDepositeConfirmationDataQuery, BookingToDepositeConfirmationDataQueryVariables>;
export const FastPayBookingTransactionDocument = gql`
    mutation FastPayBookingTransaction($payBookingTransactionInput: PayBookingTransactionInput!) {
  fastPayBookingTransaction(
    payBookingTransactionInput: $payBookingTransactionInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    linkPaymentUrl
    returnUrl
    ipnUrl
    disablePayment
    transactionId
  }
}
    `;
export type FastPayBookingTransactionMutationFn = ApolloReactCommon.MutationFunction<FastPayBookingTransactionMutation, FastPayBookingTransactionMutationVariables>;

/**
 * __useFastPayBookingTransactionMutation__
 *
 * To run a mutation, you first call `useFastPayBookingTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFastPayBookingTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [fastPayBookingTransactionMutation, { data, loading, error }] = useFastPayBookingTransactionMutation({
 *   variables: {
 *      payBookingTransactionInput: // value for 'payBookingTransactionInput'
 *   },
 * });
 */
export function useFastPayBookingTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FastPayBookingTransactionMutation, FastPayBookingTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<FastPayBookingTransactionMutation, FastPayBookingTransactionMutationVariables>(FastPayBookingTransactionDocument, baseOptions);
      }
export type FastPayBookingTransactionMutationHookResult = ReturnType<typeof useFastPayBookingTransactionMutation>;
export type FastPayBookingTransactionMutationResult = ApolloReactCommon.MutationResult<FastPayBookingTransactionMutation>;
export type FastPayBookingTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<FastPayBookingTransactionMutation, FastPayBookingTransactionMutationVariables>;
export const GetAgentForTransactionDocument = gql`
    query GetAgentForTransaction($request: GetAgentForTransactionInput!, $page: Int, $pageSize: Int) {
  agentForTransaction(request: $request, page: $page, pageSize: $pageSize) {
    edges {
      agentId
      agentCode
      firstName
      lastName
      agentRankName
      agentRankingDescription
      rating
      profilePhoto
    }
    totalCount
  }
}
    `;

/**
 * __useGetAgentForTransactionQuery__
 *
 * To run a query within a React component, call `useGetAgentForTransactionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentForTransactionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentForTransactionQuery({
 *   variables: {
 *      request: // value for 'request'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetAgentForTransactionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentForTransactionQuery, GetAgentForTransactionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentForTransactionQuery, GetAgentForTransactionQueryVariables>(GetAgentForTransactionDocument, baseOptions);
      }
export function useGetAgentForTransactionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentForTransactionQuery, GetAgentForTransactionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentForTransactionQuery, GetAgentForTransactionQueryVariables>(GetAgentForTransactionDocument, baseOptions);
        }
export type GetAgentForTransactionQueryHookResult = ReturnType<typeof useGetAgentForTransactionQuery>;
export type GetAgentForTransactionLazyQueryHookResult = ReturnType<typeof useGetAgentForTransactionLazyQuery>;
export type GetAgentForTransactionQueryResult = ApolloReactCommon.QueryResult<GetAgentForTransactionQuery, GetAgentForTransactionQueryVariables>;
export const GetBookingDetailValidatePaymentDocument = gql`
    query GetBookingDetailValidatePayment($transactionId: String, $paymentReturnUrl: String, $propertyPostId: String) {
  bookingTransactionValidatePayment(
    bookingTransactionValidatePaymentInput: {bookingTransactionId: $transactionId, paymentReturnUrl: $paymentReturnUrl, propertyPostId: $propertyPostId}
  ) {
    errorCode
    errorMessage
    isValid
  }
}
    `;

/**
 * __useGetBookingDetailValidatePaymentQuery__
 *
 * To run a query within a React component, call `useGetBookingDetailValidatePaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookingDetailValidatePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookingDetailValidatePaymentQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *      paymentReturnUrl: // value for 'paymentReturnUrl'
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetBookingDetailValidatePaymentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBookingDetailValidatePaymentQuery, GetBookingDetailValidatePaymentQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBookingDetailValidatePaymentQuery, GetBookingDetailValidatePaymentQueryVariables>(GetBookingDetailValidatePaymentDocument, baseOptions);
      }
export function useGetBookingDetailValidatePaymentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBookingDetailValidatePaymentQuery, GetBookingDetailValidatePaymentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBookingDetailValidatePaymentQuery, GetBookingDetailValidatePaymentQueryVariables>(GetBookingDetailValidatePaymentDocument, baseOptions);
        }
export type GetBookingDetailValidatePaymentQueryHookResult = ReturnType<typeof useGetBookingDetailValidatePaymentQuery>;
export type GetBookingDetailValidatePaymentLazyQueryHookResult = ReturnType<typeof useGetBookingDetailValidatePaymentLazyQuery>;
export type GetBookingDetailValidatePaymentQueryResult = ApolloReactCommon.QueryResult<GetBookingDetailValidatePaymentQuery, GetBookingDetailValidatePaymentQueryVariables>;
export const GetDiscountInfoForFoByDepositDocument = gql`
    query getDiscountInfoForFoByDeposit($b2CDepositTransactionId: Uuid!) {
  getDiscountInfoForFoByDeposit(b2CDepositTransactionId: $b2CDepositTransactionId) {
    errorCode
    errorMessage
    errorMessageCode
    discountDetailDto {
      issuedPrice
      priceAfterDiscount
    }
  }
}
    `;

/**
 * __useGetDiscountInfoForFoByDepositQuery__
 *
 * To run a query within a React component, call `useGetDiscountInfoForFoByDepositQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDiscountInfoForFoByDepositQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDiscountInfoForFoByDepositQuery({
 *   variables: {
 *      b2CDepositTransactionId: // value for 'b2CDepositTransactionId'
 *   },
 * });
 */
export function useGetDiscountInfoForFoByDepositQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDiscountInfoForFoByDepositQuery, GetDiscountInfoForFoByDepositQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDiscountInfoForFoByDepositQuery, GetDiscountInfoForFoByDepositQueryVariables>(GetDiscountInfoForFoByDepositDocument, baseOptions);
      }
export function useGetDiscountInfoForFoByDepositLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDiscountInfoForFoByDepositQuery, GetDiscountInfoForFoByDepositQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDiscountInfoForFoByDepositQuery, GetDiscountInfoForFoByDepositQueryVariables>(GetDiscountInfoForFoByDepositDocument, baseOptions);
        }
export type GetDiscountInfoForFoByDepositQueryHookResult = ReturnType<typeof useGetDiscountInfoForFoByDepositQuery>;
export type GetDiscountInfoForFoByDepositLazyQueryHookResult = ReturnType<typeof useGetDiscountInfoForFoByDepositLazyQuery>;
export type GetDiscountInfoForFoByDepositQueryResult = ApolloReactCommon.QueryResult<GetDiscountInfoForFoByDepositQuery, GetDiscountInfoForFoByDepositQueryVariables>;
export const GetPolicyByPostIdForTransactionDocument = gql`
    query GetPolicyByPostIdForTransaction($propertyPostId: String, $isBooking: Boolean!) {
  policyByPropertyPostIdForTransaction(
    request: {propertyPostId: $propertyPostId, isBooking: $isBooking}
  ) {
    edges {
      startDate
      endDate
      policyTypeId
      policyName
      attachment
    }
  }
}
    `;

/**
 * __useGetPolicyByPostIdForTransactionQuery__
 *
 * To run a query within a React component, call `useGetPolicyByPostIdForTransactionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPolicyByPostIdForTransactionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPolicyByPostIdForTransactionQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *      isBooking: // value for 'isBooking'
 *   },
 * });
 */
export function useGetPolicyByPostIdForTransactionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPolicyByPostIdForTransactionQuery, GetPolicyByPostIdForTransactionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPolicyByPostIdForTransactionQuery, GetPolicyByPostIdForTransactionQueryVariables>(GetPolicyByPostIdForTransactionDocument, baseOptions);
      }
export function useGetPolicyByPostIdForTransactionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPolicyByPostIdForTransactionQuery, GetPolicyByPostIdForTransactionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPolicyByPostIdForTransactionQuery, GetPolicyByPostIdForTransactionQueryVariables>(GetPolicyByPostIdForTransactionDocument, baseOptions);
        }
export type GetPolicyByPostIdForTransactionQueryHookResult = ReturnType<typeof useGetPolicyByPostIdForTransactionQuery>;
export type GetPolicyByPostIdForTransactionLazyQueryHookResult = ReturnType<typeof useGetPolicyByPostIdForTransactionLazyQuery>;
export type GetPolicyByPostIdForTransactionQueryResult = ApolloReactCommon.QueryResult<GetPolicyByPostIdForTransactionQuery, GetPolicyByPostIdForTransactionQueryVariables>;
export const PropertyPostsByBlockNameAdvancedDocument = gql`
    query propertyPostsByBlockNameAdvanced($input: GetPropertyPostsByBlockNameAdvancedInput!) {
  propertyPostsByBlockNameAdvanced(request: $input) {
    blockName
    totalOfPropertyPosts
    totalOfEmptyPropertyPosts
    totalOfSoldPropertyPosts
    totalOfBookedPropertyPosts
    propertyPosts {
      floor
      propertyPosts {
        propertyPostId
        propertyCode
        price
        priceNoVat
        priceVat
        numberOfBedrooms
        numberOfBathrooms
        direction
        buildingArea
        numberOfBookingTransactions
        assigned
        unitOfMeasure {
          unitOfMeasureId
          unitOfMeasureCode
          unitOfMeasureName
          numberOfDecimal
          multiplyWithBaseUnit
          isRound
        }
        saleTrackingStatusId
        saleTrackingStatusName
        saleTrackingStatusDescription
      }
    }
  }
}
    `;

/**
 * __usePropertyPostsByBlockNameAdvancedQuery__
 *
 * To run a query within a React component, call `usePropertyPostsByBlockNameAdvancedQuery` and pass it any options that fit your needs.
 * When your component renders, `usePropertyPostsByBlockNameAdvancedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePropertyPostsByBlockNameAdvancedQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePropertyPostsByBlockNameAdvancedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PropertyPostsByBlockNameAdvancedQuery, PropertyPostsByBlockNameAdvancedQueryVariables>) {
        return ApolloReactHooks.useQuery<PropertyPostsByBlockNameAdvancedQuery, PropertyPostsByBlockNameAdvancedQueryVariables>(PropertyPostsByBlockNameAdvancedDocument, baseOptions);
      }
export function usePropertyPostsByBlockNameAdvancedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PropertyPostsByBlockNameAdvancedQuery, PropertyPostsByBlockNameAdvancedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PropertyPostsByBlockNameAdvancedQuery, PropertyPostsByBlockNameAdvancedQueryVariables>(PropertyPostsByBlockNameAdvancedDocument, baseOptions);
        }
export type PropertyPostsByBlockNameAdvancedQueryHookResult = ReturnType<typeof usePropertyPostsByBlockNameAdvancedQuery>;
export type PropertyPostsByBlockNameAdvancedLazyQueryHookResult = ReturnType<typeof usePropertyPostsByBlockNameAdvancedLazyQuery>;
export type PropertyPostsByBlockNameAdvancedQueryResult = ApolloReactCommon.QueryResult<PropertyPostsByBlockNameAdvancedQuery, PropertyPostsByBlockNameAdvancedQueryVariables>;
export const GetPropertyPostByIdForTransactionDocument = gql`
    query GetPropertyPostByIdForTransaction($propertyPostId: Uuid!) {
  propertyPostByIdForTransaction(propertyPostId: $propertyPostId) {
    propertyPostId
    propertyTypeId
    propertyTypeName
    propertyTypeDescription
    propertyCode
    projectInfo {
      projectName
      projectCode
      projectId
    }
    blockName
    images
    price
    length
    width
    minimumPayment
    expectedPrice
    priceNoVat
    priceVat
    commission
    buyCommission
    saleCommission
    numberOfBookingTransactions
    postDescription
    propertySubTypeName
    propertySubTypeDescription
    floor
    direction
    balconyDirection
    numberOfBedrooms
    numberOfBathrooms
    buildingArea
    capetAreas
    saleTrackingStatusName
    saleTrackingStatusDescription
    saleSeasonId
    foSaleTrackingStatusDescription
    bookingFee
    houseDesign
    numberOfFloor
    totalSiteArea
    buildingLine
    isBooked
    isDeposited
    detailPath
    staffGroupIds
    ableConfirmDeposite
    bookingTransactionInfo {
      bookingTransactionId
      beginDepositeDatetime
      endDepositeDatetime
    }
    saleSeasonInfo {
      openDatetime
      closeDatetime
      startBookingDatetime
    }
  }
}
    `;

/**
 * __useGetPropertyPostByIdForTransactionQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostByIdForTransactionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostByIdForTransactionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostByIdForTransactionQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetPropertyPostByIdForTransactionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostByIdForTransactionQuery, GetPropertyPostByIdForTransactionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostByIdForTransactionQuery, GetPropertyPostByIdForTransactionQueryVariables>(GetPropertyPostByIdForTransactionDocument, baseOptions);
      }
export function useGetPropertyPostByIdForTransactionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostByIdForTransactionQuery, GetPropertyPostByIdForTransactionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostByIdForTransactionQuery, GetPropertyPostByIdForTransactionQueryVariables>(GetPropertyPostByIdForTransactionDocument, baseOptions);
        }
export type GetPropertyPostByIdForTransactionQueryHookResult = ReturnType<typeof useGetPropertyPostByIdForTransactionQuery>;
export type GetPropertyPostByIdForTransactionLazyQueryHookResult = ReturnType<typeof useGetPropertyPostByIdForTransactionLazyQuery>;
export type GetPropertyPostByIdForTransactionQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostByIdForTransactionQuery, GetPropertyPostByIdForTransactionQueryVariables>;
export const GetPropertyPostsBasketDocument = gql`
    query GetPropertyPostsBasket($input: GetPropertyPostsBasketInputType!) {
  propertyPostsBasket(request: $input) {
    errorCode
    errorMessage
    propertyPostsByBlockNameDto {
      blockName
      totalOfPropertyPosts
      totalOfEmptyPropertyPosts
      totalOfSoldPropertyPosts
      totalOfBookedPropertyPosts
      propertyPosts {
        floor
        propertyPosts {
          propertyPostId
          propertyCode
          price
          priceNoVat
          priceVat
          numberOfBedrooms
          numberOfBathrooms
          direction
          buildingArea
          numberOfBookingTransactions
          assigned
          unitOfMeasure {
            unitOfMeasureId
            unitOfMeasureCode
            unitOfMeasureName
            numberOfDecimal
            multiplyWithBaseUnit
            isRound
          }
          saleTrackingStatusId
          saleTrackingStatusName
          saleTrackingStatusDescription
        }
      }
    }
  }
}
    `;

/**
 * __useGetPropertyPostsBasketQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostsBasketQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostsBasketQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostsBasketQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetPropertyPostsBasketQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostsBasketQuery, GetPropertyPostsBasketQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostsBasketQuery, GetPropertyPostsBasketQueryVariables>(GetPropertyPostsBasketDocument, baseOptions);
      }
export function useGetPropertyPostsBasketLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostsBasketQuery, GetPropertyPostsBasketQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostsBasketQuery, GetPropertyPostsBasketQueryVariables>(GetPropertyPostsBasketDocument, baseOptions);
        }
export type GetPropertyPostsBasketQueryHookResult = ReturnType<typeof useGetPropertyPostsBasketQuery>;
export type GetPropertyPostsBasketLazyQueryHookResult = ReturnType<typeof useGetPropertyPostsBasketLazyQuery>;
export type GetPropertyPostsBasketQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostsBasketQuery, GetPropertyPostsBasketQueryVariables>;
export const PropertyPostsByBlockNameForTransferAdvancedDocument = gql`
    query propertyPostsByBlockNameForTransferAdvanced($input: GetPropertyPostsByBlockNameForTransferAdvancedInput!) {
  propertyPostsByBlockNameForTransferAdvanced(request: $input) {
    blockName
    totalOfPropertyPosts
    totalOfEmptyPropertyPosts
    totalOfSoldPropertyPosts
    totalOfBookedPropertyPosts
    propertyPosts {
      floor
      propertyPosts {
        propertyPostId
        propertyCode
        price
        priceNoVat
        priceVat
        numberOfBedrooms
        numberOfBathrooms
        numberOfBookingTransactions
        assigned
        direction
        buildingArea
        unitOfMeasure {
          unitOfMeasureId
          unitOfMeasureCode
          unitOfMeasureName
          numberOfDecimal
          multiplyWithBaseUnit
          isRound
        }
        saleTrackingStatusId
        saleTrackingStatusName
        saleTrackingStatusDescription
      }
    }
  }
}
    `;

/**
 * __usePropertyPostsByBlockNameForTransferAdvancedQuery__
 *
 * To run a query within a React component, call `usePropertyPostsByBlockNameForTransferAdvancedQuery` and pass it any options that fit your needs.
 * When your component renders, `usePropertyPostsByBlockNameForTransferAdvancedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = usePropertyPostsByBlockNameForTransferAdvancedQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePropertyPostsByBlockNameForTransferAdvancedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<PropertyPostsByBlockNameForTransferAdvancedQuery, PropertyPostsByBlockNameForTransferAdvancedQueryVariables>) {
        return ApolloReactHooks.useQuery<PropertyPostsByBlockNameForTransferAdvancedQuery, PropertyPostsByBlockNameForTransferAdvancedQueryVariables>(PropertyPostsByBlockNameForTransferAdvancedDocument, baseOptions);
      }
export function usePropertyPostsByBlockNameForTransferAdvancedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<PropertyPostsByBlockNameForTransferAdvancedQuery, PropertyPostsByBlockNameForTransferAdvancedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<PropertyPostsByBlockNameForTransferAdvancedQuery, PropertyPostsByBlockNameForTransferAdvancedQueryVariables>(PropertyPostsByBlockNameForTransferAdvancedDocument, baseOptions);
        }
export type PropertyPostsByBlockNameForTransferAdvancedQueryHookResult = ReturnType<typeof usePropertyPostsByBlockNameForTransferAdvancedQuery>;
export type PropertyPostsByBlockNameForTransferAdvancedLazyQueryHookResult = ReturnType<typeof usePropertyPostsByBlockNameForTransferAdvancedLazyQuery>;
export type PropertyPostsByBlockNameForTransferAdvancedQueryResult = ApolloReactCommon.QueryResult<PropertyPostsByBlockNameForTransferAdvancedQuery, PropertyPostsByBlockNameForTransferAdvancedQueryVariables>;
export const GetSaleSeasonBlocksAndFloorsDocument = gql`
    query GetSaleSeasonBlocksAndFloors($saleSeasonId: Uuid) {
  getSaleSeasonBlocksAndFloors(saleSeasonId: $saleSeasonId) {
    blocksInfo {
      blockCode
      blockName
      floorsInfo {
        floor
        photo
      }
    }
    projectInfo {
      projectId
      projectName
      projectStatusId
      projectStatusName
      projectStatusDescription
      propertyTypeId
      propertyTypeName
      propertyTypeDescription
      investorOwnerName
    }
  }
}
    `;

/**
 * __useGetSaleSeasonBlocksAndFloorsQuery__
 *
 * To run a query within a React component, call `useGetSaleSeasonBlocksAndFloorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSaleSeasonBlocksAndFloorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSaleSeasonBlocksAndFloorsQuery({
 *   variables: {
 *      saleSeasonId: // value for 'saleSeasonId'
 *   },
 * });
 */
export function useGetSaleSeasonBlocksAndFloorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSaleSeasonBlocksAndFloorsQuery, GetSaleSeasonBlocksAndFloorsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSaleSeasonBlocksAndFloorsQuery, GetSaleSeasonBlocksAndFloorsQueryVariables>(GetSaleSeasonBlocksAndFloorsDocument, baseOptions);
      }
export function useGetSaleSeasonBlocksAndFloorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSaleSeasonBlocksAndFloorsQuery, GetSaleSeasonBlocksAndFloorsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSaleSeasonBlocksAndFloorsQuery, GetSaleSeasonBlocksAndFloorsQueryVariables>(GetSaleSeasonBlocksAndFloorsDocument, baseOptions);
        }
export type GetSaleSeasonBlocksAndFloorsQueryHookResult = ReturnType<typeof useGetSaleSeasonBlocksAndFloorsQuery>;
export type GetSaleSeasonBlocksAndFloorsLazyQueryHookResult = ReturnType<typeof useGetSaleSeasonBlocksAndFloorsLazyQuery>;
export type GetSaleSeasonBlocksAndFloorsQueryResult = ApolloReactCommon.QueryResult<GetSaleSeasonBlocksAndFloorsQuery, GetSaleSeasonBlocksAndFloorsQueryVariables>;
export const ValidateCaptchaForPropertyPostBasketDocument = gql`
    mutation ValidateCaptchaForPropertyPostBasket($request: ValidateReCaptchaForPropertyPostBasketInput!) {
  validateReCaptchaForPropertyPostBasket(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    requestId
    recaptchaToken
  }
}
    `;
export type ValidateCaptchaForPropertyPostBasketMutationFn = ApolloReactCommon.MutationFunction<ValidateCaptchaForPropertyPostBasketMutation, ValidateCaptchaForPropertyPostBasketMutationVariables>;

/**
 * __useValidateCaptchaForPropertyPostBasketMutation__
 *
 * To run a mutation, you first call `useValidateCaptchaForPropertyPostBasketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useValidateCaptchaForPropertyPostBasketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [validateCaptchaForPropertyPostBasketMutation, { data, loading, error }] = useValidateCaptchaForPropertyPostBasketMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useValidateCaptchaForPropertyPostBasketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ValidateCaptchaForPropertyPostBasketMutation, ValidateCaptchaForPropertyPostBasketMutationVariables>) {
        return ApolloReactHooks.useMutation<ValidateCaptchaForPropertyPostBasketMutation, ValidateCaptchaForPropertyPostBasketMutationVariables>(ValidateCaptchaForPropertyPostBasketDocument, baseOptions);
      }
export type ValidateCaptchaForPropertyPostBasketMutationHookResult = ReturnType<typeof useValidateCaptchaForPropertyPostBasketMutation>;
export type ValidateCaptchaForPropertyPostBasketMutationResult = ApolloReactCommon.MutationResult<ValidateCaptchaForPropertyPostBasketMutation>;
export type ValidateCaptchaForPropertyPostBasketMutationOptions = ApolloReactCommon.BaseMutationOptions<ValidateCaptchaForPropertyPostBasketMutation, ValidateCaptchaForPropertyPostBasketMutationVariables>;
export const ValidateExpireCaptchaForPropertyPostDocument = gql`
    query ValidateExpireCaptchaForPropertyPost($requestId: Uuid!) {
  validateExpireReCaptchaForPropertyPost(requestId: $requestId) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useValidateExpireCaptchaForPropertyPostQuery__
 *
 * To run a query within a React component, call `useValidateExpireCaptchaForPropertyPostQuery` and pass it any options that fit your needs.
 * When your component renders, `useValidateExpireCaptchaForPropertyPostQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useValidateExpireCaptchaForPropertyPostQuery({
 *   variables: {
 *      requestId: // value for 'requestId'
 *   },
 * });
 */
export function useValidateExpireCaptchaForPropertyPostQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ValidateExpireCaptchaForPropertyPostQuery, ValidateExpireCaptchaForPropertyPostQueryVariables>) {
        return ApolloReactHooks.useQuery<ValidateExpireCaptchaForPropertyPostQuery, ValidateExpireCaptchaForPropertyPostQueryVariables>(ValidateExpireCaptchaForPropertyPostDocument, baseOptions);
      }
export function useValidateExpireCaptchaForPropertyPostLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ValidateExpireCaptchaForPropertyPostQuery, ValidateExpireCaptchaForPropertyPostQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ValidateExpireCaptchaForPropertyPostQuery, ValidateExpireCaptchaForPropertyPostQueryVariables>(ValidateExpireCaptchaForPropertyPostDocument, baseOptions);
        }
export type ValidateExpireCaptchaForPropertyPostQueryHookResult = ReturnType<typeof useValidateExpireCaptchaForPropertyPostQuery>;
export type ValidateExpireCaptchaForPropertyPostLazyQueryHookResult = ReturnType<typeof useValidateExpireCaptchaForPropertyPostLazyQuery>;
export type ValidateExpireCaptchaForPropertyPostQueryResult = ApolloReactCommon.QueryResult<ValidateExpireCaptchaForPropertyPostQuery, ValidateExpireCaptchaForPropertyPostQueryVariables>;
export const VnpayPayBookingTransactionDocument = gql`
    mutation VnpayPayBookingTransaction($payBookingTransactionInput: PayBookingTransactionInput!) {
  vnpayPayBookingTransaction(
    payBookingTransactionInput: $payBookingTransactionInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    linkPaymentUrl
    returnUrl
    ipnUrl
    disablePayment
    transactionId
  }
}
    `;
export type VnpayPayBookingTransactionMutationFn = ApolloReactCommon.MutationFunction<VnpayPayBookingTransactionMutation, VnpayPayBookingTransactionMutationVariables>;

/**
 * __useVnpayPayBookingTransactionMutation__
 *
 * To run a mutation, you first call `useVnpayPayBookingTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVnpayPayBookingTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [vnpayPayBookingTransactionMutation, { data, loading, error }] = useVnpayPayBookingTransactionMutation({
 *   variables: {
 *      payBookingTransactionInput: // value for 'payBookingTransactionInput'
 *   },
 * });
 */
export function useVnpayPayBookingTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<VnpayPayBookingTransactionMutation, VnpayPayBookingTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<VnpayPayBookingTransactionMutation, VnpayPayBookingTransactionMutationVariables>(VnpayPayBookingTransactionDocument, baseOptions);
      }
export type VnpayPayBookingTransactionMutationHookResult = ReturnType<typeof useVnpayPayBookingTransactionMutation>;
export type VnpayPayBookingTransactionMutationResult = ApolloReactCommon.MutationResult<VnpayPayBookingTransactionMutation>;
export type VnpayPayBookingTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<VnpayPayBookingTransactionMutation, VnpayPayBookingTransactionMutationVariables>;
export const CheckPropertyPostUpdateC2CContactTradingStatusDocument = gql`
    query CheckPropertyPostUpdateC2CContactTradingStatus($propertyPostId: Uuid!) {
  checkPropertyPostUpdateC2CContactTradingStatus(propertyPostId: $propertyPostId) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useCheckPropertyPostUpdateC2CContactTradingStatusQuery__
 *
 * To run a query within a React component, call `useCheckPropertyPostUpdateC2CContactTradingStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPropertyPostUpdateC2CContactTradingStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPropertyPostUpdateC2CContactTradingStatusQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useCheckPropertyPostUpdateC2CContactTradingStatusQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckPropertyPostUpdateC2CContactTradingStatusQuery, CheckPropertyPostUpdateC2CContactTradingStatusQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckPropertyPostUpdateC2CContactTradingStatusQuery, CheckPropertyPostUpdateC2CContactTradingStatusQueryVariables>(CheckPropertyPostUpdateC2CContactTradingStatusDocument, baseOptions);
      }
export function useCheckPropertyPostUpdateC2CContactTradingStatusLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckPropertyPostUpdateC2CContactTradingStatusQuery, CheckPropertyPostUpdateC2CContactTradingStatusQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckPropertyPostUpdateC2CContactTradingStatusQuery, CheckPropertyPostUpdateC2CContactTradingStatusQueryVariables>(CheckPropertyPostUpdateC2CContactTradingStatusDocument, baseOptions);
        }
export type CheckPropertyPostUpdateC2CContactTradingStatusQueryHookResult = ReturnType<typeof useCheckPropertyPostUpdateC2CContactTradingStatusQuery>;
export type CheckPropertyPostUpdateC2CContactTradingStatusLazyQueryHookResult = ReturnType<typeof useCheckPropertyPostUpdateC2CContactTradingStatusLazyQuery>;
export type CheckPropertyPostUpdateC2CContactTradingStatusQueryResult = ApolloReactCommon.QueryResult<CheckPropertyPostUpdateC2CContactTradingStatusQuery, CheckPropertyPostUpdateC2CContactTradingStatusQueryVariables>;
export const CompleteC2CContactTradingDocument = gql`
    mutation CompleteC2CContactTrading($input: CompleteC2CContactTradingInput!) {
  completeC2CContactTrading(completeC2CContactTradingInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CompleteC2CContactTradingMutationFn = ApolloReactCommon.MutationFunction<CompleteC2CContactTradingMutation, CompleteC2CContactTradingMutationVariables>;

/**
 * __useCompleteC2CContactTradingMutation__
 *
 * To run a mutation, you first call `useCompleteC2CContactTradingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCompleteC2CContactTradingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [completeC2CContactTradingMutation, { data, loading, error }] = useCompleteC2CContactTradingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCompleteC2CContactTradingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CompleteC2CContactTradingMutation, CompleteC2CContactTradingMutationVariables>) {
        return ApolloReactHooks.useMutation<CompleteC2CContactTradingMutation, CompleteC2CContactTradingMutationVariables>(CompleteC2CContactTradingDocument, baseOptions);
      }
export type CompleteC2CContactTradingMutationHookResult = ReturnType<typeof useCompleteC2CContactTradingMutation>;
export type CompleteC2CContactTradingMutationResult = ApolloReactCommon.MutationResult<CompleteC2CContactTradingMutation>;
export type CompleteC2CContactTradingMutationOptions = ApolloReactCommon.BaseMutationOptions<CompleteC2CContactTradingMutation, CompleteC2CContactTradingMutationVariables>;
export const CreateC2CContactTradingFoDocument = gql`
    mutation CreateC2CContactTradingFO($input: CreateC2CContactTradingInput!) {
  createC2CContactTradingFO(createC2CContactTradingInput: $input) {
    contactTradingCode
    contactTradingId
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateC2CContactTradingFoMutationFn = ApolloReactCommon.MutationFunction<CreateC2CContactTradingFoMutation, CreateC2CContactTradingFoMutationVariables>;

/**
 * __useCreateC2CContactTradingFoMutation__
 *
 * To run a mutation, you first call `useCreateC2CContactTradingFoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateC2CContactTradingFoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createC2CContactTradingFoMutation, { data, loading, error }] = useCreateC2CContactTradingFoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateC2CContactTradingFoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateC2CContactTradingFoMutation, CreateC2CContactTradingFoMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateC2CContactTradingFoMutation, CreateC2CContactTradingFoMutationVariables>(CreateC2CContactTradingFoDocument, baseOptions);
      }
export type CreateC2CContactTradingFoMutationHookResult = ReturnType<typeof useCreateC2CContactTradingFoMutation>;
export type CreateC2CContactTradingFoMutationResult = ApolloReactCommon.MutationResult<CreateC2CContactTradingFoMutation>;
export type CreateC2CContactTradingFoMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateC2CContactTradingFoMutation, CreateC2CContactTradingFoMutationVariables>;
export const CreateSupportRequestFromContactTradingDetailDocument = gql`
    mutation CreateSupportRequestFromContactTradingDetail($input: CreateSupportRequestFromContactTradingDetailRequestInput!) {
  createSupportRequestFromContactTradingDetail(request: $input) {
    errorCode
    errorMessageCode
    errorMessage
    supportRequestId
  }
}
    `;
export type CreateSupportRequestFromContactTradingDetailMutationFn = ApolloReactCommon.MutationFunction<CreateSupportRequestFromContactTradingDetailMutation, CreateSupportRequestFromContactTradingDetailMutationVariables>;

/**
 * __useCreateSupportRequestFromContactTradingDetailMutation__
 *
 * To run a mutation, you first call `useCreateSupportRequestFromContactTradingDetailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSupportRequestFromContactTradingDetailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSupportRequestFromContactTradingDetailMutation, { data, loading, error }] = useCreateSupportRequestFromContactTradingDetailMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSupportRequestFromContactTradingDetailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSupportRequestFromContactTradingDetailMutation, CreateSupportRequestFromContactTradingDetailMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateSupportRequestFromContactTradingDetailMutation, CreateSupportRequestFromContactTradingDetailMutationVariables>(CreateSupportRequestFromContactTradingDetailDocument, baseOptions);
      }
export type CreateSupportRequestFromContactTradingDetailMutationHookResult = ReturnType<typeof useCreateSupportRequestFromContactTradingDetailMutation>;
export type CreateSupportRequestFromContactTradingDetailMutationResult = ApolloReactCommon.MutationResult<CreateSupportRequestFromContactTradingDetailMutation>;
export type CreateSupportRequestFromContactTradingDetailMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSupportRequestFromContactTradingDetailMutation, CreateSupportRequestFromContactTradingDetailMutationVariables>;
export const C2CContactTradingByIdDocument = gql`
    query C2CContactTradingById($contactTradingId: Uuid) {
  c2cContactTradingById(c2cContactTradingId: $contactTradingId) {
    errorCode
    errorMessage
    errorMessageCode
    contactTrading {
      agentOwnerId
      assigneeId
      assigneeUserName
      assigneeFullName
      assigneePhoneNumber
      assigneeEmail
      assigneeProfilePhoto
      contactTradingId
      contactTradingCode
      contactTradingStatusId
      contactType
      contract {
        __typename @include(if: false)
        createdByUserId
        createdDatetime
        isActive
        updatedByUserId
        updatedDatetime
        attachment
        buyerCommissionAmount
        consultantCommissionAmount
        consultantFee
        contractNote
        contractPrice
        moveInDate
        organizerCommissionAmount
        rentPeriod
        rentPeriodUnit
        salerCommissionAmount
        signedDate
        totalCommission
        totalCommissionUnit
      }
      customerEmail
      customerFullName
      customerPhoneNumber
      isActive
      negotiationDescription
      negotiationPrice
      negotiationDate
      negotiationUpdatedNumber
      propertyPostId
      requesterAddress
      requesterEmail
      requesterFullName
      requesterGender
      requesterId
      requesterIsAgency
      requesterLastContact
      requesterPhoneNumber
      createdDatetime
      createdByUserId
      updatedByUserId
      updatedDatetime
      serviceBonus
      pendingReason
      pendingNote
      pendingCompensationAmount
      propertyPostUrl
      rejectReasonId
      rejectReason
      deposit {
        __typename @include(if: false)
        attachment
        bankName
        closingPrice
        consultantFee
        commission
        commissionTpl
        commissionUnitId
        depositedAmount
        depositedDate
        depositNote
        depositorEmail
        depositorIdentityCard
        depositorName
        depositorPhoneNumber
        depositTerm
        depositUpdatedNumber
        paymentMethodId
        recipientEmail
        recipientIdentityCard
        recipientName
        recipientPhoneNumber
        moveInDate
        rentPeriod
        rentPeriodUnit
        depositStatus
        rejectReason
        rejectReasonId
        contractAttachment
        depositPaymentTermFrom
        depositPaymentTermTo
        notaryOffice
        notarizationDatetime
        paymentProgressDtos {
          amount
          paymentDatetime
          paymentProgressId
          paymentTerms
        }
      }
      recordVersion
    }
  }
}
    `;

/**
 * __useC2CContactTradingByIdQuery__
 *
 * To run a query within a React component, call `useC2CContactTradingByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useC2CContactTradingByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useC2CContactTradingByIdQuery({
 *   variables: {
 *      contactTradingId: // value for 'contactTradingId'
 *   },
 * });
 */
export function useC2CContactTradingByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<C2CContactTradingByIdQuery, C2CContactTradingByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<C2CContactTradingByIdQuery, C2CContactTradingByIdQueryVariables>(C2CContactTradingByIdDocument, baseOptions);
      }
export function useC2CContactTradingByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<C2CContactTradingByIdQuery, C2CContactTradingByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<C2CContactTradingByIdQuery, C2CContactTradingByIdQueryVariables>(C2CContactTradingByIdDocument, baseOptions);
        }
export type C2CContactTradingByIdQueryHookResult = ReturnType<typeof useC2CContactTradingByIdQuery>;
export type C2CContactTradingByIdLazyQueryHookResult = ReturnType<typeof useC2CContactTradingByIdLazyQuery>;
export type C2CContactTradingByIdQueryResult = ApolloReactCommon.QueryResult<C2CContactTradingByIdQuery, C2CContactTradingByIdQueryVariables>;
export const C2CContactTradingCreatedByAgentDocument = gql`
    query C2CContactTradingCreatedByAgent($where: C2CContactTradingDtoFilter, $page: Int, $keywords: String, $pageSize: Int, $order_by: C2CContactTradingDtoSort) {
  c2cContactTradingCreatedByAgent(
    where: $where
    page: $page
    keywords: $keywords
    pageSize: $pageSize
    order_by: $order_by
  ) {
    totalCount
    edges {
      agentOwnerId
      assigneeId
      contactTradingCode
      contactTradingId
      contactTradingStatusId
      contactType
      createdByUserId
      createdDatetime
      customerEmail
      customerFullName
      customerPhoneNumber
      isActive
      deposit {
        depositStatus
      }
      negotiationDescription
      negotiationPrice
      negotiationDate
      propertyPostId
      propertyPostUrl
      requesterAddress
      requesterEmail
      requesterFullName
      requesterGender
      requesterId
      requesterIsAgency
      requesterLastContact
      requesterPhoneNumber
      updatedByUserId
      updatedDatetime
      pendingReason
      pendingNote
      cityName
      districtName
      propertyCode
      propertyPrice
    }
  }
}
    `;

/**
 * __useC2CContactTradingCreatedByAgentQuery__
 *
 * To run a query within a React component, call `useC2CContactTradingCreatedByAgentQuery` and pass it any options that fit your needs.
 * When your component renders, `useC2CContactTradingCreatedByAgentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useC2CContactTradingCreatedByAgentQuery({
 *   variables: {
 *      where: // value for 'where'
 *      page: // value for 'page'
 *      keywords: // value for 'keywords'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useC2CContactTradingCreatedByAgentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<C2CContactTradingCreatedByAgentQuery, C2CContactTradingCreatedByAgentQueryVariables>) {
        return ApolloReactHooks.useQuery<C2CContactTradingCreatedByAgentQuery, C2CContactTradingCreatedByAgentQueryVariables>(C2CContactTradingCreatedByAgentDocument, baseOptions);
      }
export function useC2CContactTradingCreatedByAgentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<C2CContactTradingCreatedByAgentQuery, C2CContactTradingCreatedByAgentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<C2CContactTradingCreatedByAgentQuery, C2CContactTradingCreatedByAgentQueryVariables>(C2CContactTradingCreatedByAgentDocument, baseOptions);
        }
export type C2CContactTradingCreatedByAgentQueryHookResult = ReturnType<typeof useC2CContactTradingCreatedByAgentQuery>;
export type C2CContactTradingCreatedByAgentLazyQueryHookResult = ReturnType<typeof useC2CContactTradingCreatedByAgentLazyQuery>;
export type C2CContactTradingCreatedByAgentQueryResult = ApolloReactCommon.QueryResult<C2CContactTradingCreatedByAgentQuery, C2CContactTradingCreatedByAgentQueryVariables>;
export const C2CContactTradingReceivedByAgentDocument = gql`
    query C2CContactTradingReceivedByAgent($where: C2CContactTradingDtoFilter, $page: Int, $pageSize: Int, $order_by: C2CContactTradingDtoSort) {
  c2cContactTradingReceivedByAgent(
    where: $where
    page: $page
    pageSize: $pageSize
    order_by: $order_by
  ) {
    totalCount
    edges {
      agentOwnerId
      assigneeId
      contactTradingCode
      contactTradingId
      contactTradingStatusId
      contactType
      createdByUserId
      createdDatetime
      customerEmail
      customerFullName
      customerPhoneNumber
      isActive
      deposit {
        depositStatus
      }
      negotiationDescription
      negotiationPrice
      negotiationDate
      propertyPostId
      propertyPostUrl
      requesterAddress
      requesterEmail
      requesterFullName
      requesterGender
      requesterId
      requesterIsAgency
      requesterLastContact
      requesterPhoneNumber
      updatedByUserId
      updatedDatetime
      pendingReason
      pendingNote
      propertyCode
    }
  }
}
    `;

/**
 * __useC2CContactTradingReceivedByAgentQuery__
 *
 * To run a query within a React component, call `useC2CContactTradingReceivedByAgentQuery` and pass it any options that fit your needs.
 * When your component renders, `useC2CContactTradingReceivedByAgentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useC2CContactTradingReceivedByAgentQuery({
 *   variables: {
 *      where: // value for 'where'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useC2CContactTradingReceivedByAgentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<C2CContactTradingReceivedByAgentQuery, C2CContactTradingReceivedByAgentQueryVariables>) {
        return ApolloReactHooks.useQuery<C2CContactTradingReceivedByAgentQuery, C2CContactTradingReceivedByAgentQueryVariables>(C2CContactTradingReceivedByAgentDocument, baseOptions);
      }
export function useC2CContactTradingReceivedByAgentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<C2CContactTradingReceivedByAgentQuery, C2CContactTradingReceivedByAgentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<C2CContactTradingReceivedByAgentQuery, C2CContactTradingReceivedByAgentQueryVariables>(C2CContactTradingReceivedByAgentDocument, baseOptions);
        }
export type C2CContactTradingReceivedByAgentQueryHookResult = ReturnType<typeof useC2CContactTradingReceivedByAgentQuery>;
export type C2CContactTradingReceivedByAgentLazyQueryHookResult = ReturnType<typeof useC2CContactTradingReceivedByAgentLazyQuery>;
export type C2CContactTradingReceivedByAgentQueryResult = ApolloReactCommon.QueryResult<C2CContactTradingReceivedByAgentQuery, C2CContactTradingReceivedByAgentQueryVariables>;
export const C2CContactTradingRequesterEmailInfoDocument = gql`
    query C2CContactTradingRequesterEmailInfo($id: Uuid) {
  c2cContactTradingRequesterEmailInfo(c2cContactTradingId: $id) {
    requesterEmail
    customerEmail
  }
}
    `;

/**
 * __useC2CContactTradingRequesterEmailInfoQuery__
 *
 * To run a query within a React component, call `useC2CContactTradingRequesterEmailInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useC2CContactTradingRequesterEmailInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useC2CContactTradingRequesterEmailInfoQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useC2CContactTradingRequesterEmailInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<C2CContactTradingRequesterEmailInfoQuery, C2CContactTradingRequesterEmailInfoQueryVariables>) {
        return ApolloReactHooks.useQuery<C2CContactTradingRequesterEmailInfoQuery, C2CContactTradingRequesterEmailInfoQueryVariables>(C2CContactTradingRequesterEmailInfoDocument, baseOptions);
      }
export function useC2CContactTradingRequesterEmailInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<C2CContactTradingRequesterEmailInfoQuery, C2CContactTradingRequesterEmailInfoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<C2CContactTradingRequesterEmailInfoQuery, C2CContactTradingRequesterEmailInfoQueryVariables>(C2CContactTradingRequesterEmailInfoDocument, baseOptions);
        }
export type C2CContactTradingRequesterEmailInfoQueryHookResult = ReturnType<typeof useC2CContactTradingRequesterEmailInfoQuery>;
export type C2CContactTradingRequesterEmailInfoLazyQueryHookResult = ReturnType<typeof useC2CContactTradingRequesterEmailInfoLazyQuery>;
export type C2CContactTradingRequesterEmailInfoQueryResult = ApolloReactCommon.QueryResult<C2CContactTradingRequesterEmailInfoQuery, C2CContactTradingRequesterEmailInfoQueryVariables>;
export const C2CContactTradingRequesterPhoneInfoDocument = gql`
    query C2CContactTradingRequesterPhoneInfo($id: Uuid) {
  c2cContactTradingRequesterPhoneInfo(c2cContactTradingId: $id) {
    requesterPhoneNumber
    customerPhoneNumber
  }
}
    `;

/**
 * __useC2CContactTradingRequesterPhoneInfoQuery__
 *
 * To run a query within a React component, call `useC2CContactTradingRequesterPhoneInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useC2CContactTradingRequesterPhoneInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useC2CContactTradingRequesterPhoneInfoQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useC2CContactTradingRequesterPhoneInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<C2CContactTradingRequesterPhoneInfoQuery, C2CContactTradingRequesterPhoneInfoQueryVariables>) {
        return ApolloReactHooks.useQuery<C2CContactTradingRequesterPhoneInfoQuery, C2CContactTradingRequesterPhoneInfoQueryVariables>(C2CContactTradingRequesterPhoneInfoDocument, baseOptions);
      }
export function useC2CContactTradingRequesterPhoneInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<C2CContactTradingRequesterPhoneInfoQuery, C2CContactTradingRequesterPhoneInfoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<C2CContactTradingRequesterPhoneInfoQuery, C2CContactTradingRequesterPhoneInfoQueryVariables>(C2CContactTradingRequesterPhoneInfoDocument, baseOptions);
        }
export type C2CContactTradingRequesterPhoneInfoQueryHookResult = ReturnType<typeof useC2CContactTradingRequesterPhoneInfoQuery>;
export type C2CContactTradingRequesterPhoneInfoLazyQueryHookResult = ReturnType<typeof useC2CContactTradingRequesterPhoneInfoLazyQuery>;
export type C2CContactTradingRequesterPhoneInfoQueryResult = ApolloReactCommon.QueryResult<C2CContactTradingRequesterPhoneInfoQuery, C2CContactTradingRequesterPhoneInfoQueryVariables>;
export const GetSupportRequestsFoByContactTradingIdDocument = gql`
    query GetSupportRequestsFOByContactTradingId($contactTradingId: Uuid!) {
  supportRequestsFOByContactTradingId(contactTradingId: $contactTradingId) {
    errorMessage
    errorCode
    errorMessageCode
    supportRequestContactTradingDtos {
      __typename @include(if: false)
      businessCategoryTypeName
      assigneeFullName
      requestTypeDescription
      requestTypeId
      supportRequestId
      supportRequestCode
      supportRequestStatusDescription
      supportRequestStatusId
      updatedDatetime
      createdDatetime
    }
  }
}
    `;

/**
 * __useGetSupportRequestsFoByContactTradingIdQuery__
 *
 * To run a query within a React component, call `useGetSupportRequestsFoByContactTradingIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportRequestsFoByContactTradingIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportRequestsFoByContactTradingIdQuery({
 *   variables: {
 *      contactTradingId: // value for 'contactTradingId'
 *   },
 * });
 */
export function useGetSupportRequestsFoByContactTradingIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportRequestsFoByContactTradingIdQuery, GetSupportRequestsFoByContactTradingIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportRequestsFoByContactTradingIdQuery, GetSupportRequestsFoByContactTradingIdQueryVariables>(GetSupportRequestsFoByContactTradingIdDocument, baseOptions);
      }
export function useGetSupportRequestsFoByContactTradingIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportRequestsFoByContactTradingIdQuery, GetSupportRequestsFoByContactTradingIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportRequestsFoByContactTradingIdQuery, GetSupportRequestsFoByContactTradingIdQueryVariables>(GetSupportRequestsFoByContactTradingIdDocument, baseOptions);
        }
export type GetSupportRequestsFoByContactTradingIdQueryHookResult = ReturnType<typeof useGetSupportRequestsFoByContactTradingIdQuery>;
export type GetSupportRequestsFoByContactTradingIdLazyQueryHookResult = ReturnType<typeof useGetSupportRequestsFoByContactTradingIdLazyQuery>;
export type GetSupportRequestsFoByContactTradingIdQueryResult = ApolloReactCommon.QueryResult<GetSupportRequestsFoByContactTradingIdQuery, GetSupportRequestsFoByContactTradingIdQueryVariables>;
export const UpdateC2CContactTradingPendingStatusDocument = gql`
    mutation UpdateC2CContactTradingPendingStatus($input: UpdateC2CContactTradingPendingStatusInput!) {
  updateC2CContactTradingPendingStatus(
    updateC2CContactTradingPendingStatusInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingPendingStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingPendingStatusMutation, UpdateC2CContactTradingPendingStatusMutationVariables>;

/**
 * __useUpdateC2CContactTradingPendingStatusMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingPendingStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingPendingStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingPendingStatusMutation, { data, loading, error }] = useUpdateC2CContactTradingPendingStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingPendingStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingPendingStatusMutation, UpdateC2CContactTradingPendingStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingPendingStatusMutation, UpdateC2CContactTradingPendingStatusMutationVariables>(UpdateC2CContactTradingPendingStatusDocument, baseOptions);
      }
export type UpdateC2CContactTradingPendingStatusMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingPendingStatusMutation>;
export type UpdateC2CContactTradingPendingStatusMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingPendingStatusMutation>;
export type UpdateC2CContactTradingPendingStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingPendingStatusMutation, UpdateC2CContactTradingPendingStatusMutationVariables>;
export const UpdateC2CContactTradingAcceptedDepositDocument = gql`
    mutation UpdateC2CContactTradingAcceptedDeposit($input: UpdateC2CContactTradingAcceptedDepositInput!) {
  updateC2CContactTradingAcceptedDeposit(
    updateC2CContactTradingAcceptedDepositInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingAcceptedDepositMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingAcceptedDepositMutation, UpdateC2CContactTradingAcceptedDepositMutationVariables>;

/**
 * __useUpdateC2CContactTradingAcceptedDepositMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingAcceptedDepositMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingAcceptedDepositMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingAcceptedDepositMutation, { data, loading, error }] = useUpdateC2CContactTradingAcceptedDepositMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingAcceptedDepositMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingAcceptedDepositMutation, UpdateC2CContactTradingAcceptedDepositMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingAcceptedDepositMutation, UpdateC2CContactTradingAcceptedDepositMutationVariables>(UpdateC2CContactTradingAcceptedDepositDocument, baseOptions);
      }
export type UpdateC2CContactTradingAcceptedDepositMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingAcceptedDepositMutation>;
export type UpdateC2CContactTradingAcceptedDepositMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingAcceptedDepositMutation>;
export type UpdateC2CContactTradingAcceptedDepositMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingAcceptedDepositMutation, UpdateC2CContactTradingAcceptedDepositMutationVariables>;
export const UpdateC2CContactTradingConnectedStatusDocument = gql`
    mutation UpdateC2CContactTradingConnectedStatus($input: UpdateC2CContactTradingConnectedStatusInput!) {
  updateC2CContactTradingConnectedStatus(
    updateC2CContactTradingConnectedStatusInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingConnectedStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingConnectedStatusMutation, UpdateC2CContactTradingConnectedStatusMutationVariables>;

/**
 * __useUpdateC2CContactTradingConnectedStatusMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingConnectedStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingConnectedStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingConnectedStatusMutation, { data, loading, error }] = useUpdateC2CContactTradingConnectedStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingConnectedStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingConnectedStatusMutation, UpdateC2CContactTradingConnectedStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingConnectedStatusMutation, UpdateC2CContactTradingConnectedStatusMutationVariables>(UpdateC2CContactTradingConnectedStatusDocument, baseOptions);
      }
export type UpdateC2CContactTradingConnectedStatusMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingConnectedStatusMutation>;
export type UpdateC2CContactTradingConnectedStatusMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingConnectedStatusMutation>;
export type UpdateC2CContactTradingConnectedStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingConnectedStatusMutation, UpdateC2CContactTradingConnectedStatusMutationVariables>;
export const UpdateC2CContactTradingDepositStatusDocument = gql`
    mutation UpdateC2CContactTradingDepositStatus($input: UpdateC2CContactTradingDepositStatusInput!) {
  updateC2CContactTradingDepositStatus(
    updateC2CContactTradingDepositStatusInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingDepositStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingDepositStatusMutation, UpdateC2CContactTradingDepositStatusMutationVariables>;

/**
 * __useUpdateC2CContactTradingDepositStatusMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingDepositStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingDepositStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingDepositStatusMutation, { data, loading, error }] = useUpdateC2CContactTradingDepositStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingDepositStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingDepositStatusMutation, UpdateC2CContactTradingDepositStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingDepositStatusMutation, UpdateC2CContactTradingDepositStatusMutationVariables>(UpdateC2CContactTradingDepositStatusDocument, baseOptions);
      }
export type UpdateC2CContactTradingDepositStatusMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingDepositStatusMutation>;
export type UpdateC2CContactTradingDepositStatusMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingDepositStatusMutation>;
export type UpdateC2CContactTradingDepositStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingDepositStatusMutation, UpdateC2CContactTradingDepositStatusMutationVariables>;
export const UpdateC2CContactTradingNegotiationStatusDocument = gql`
    mutation UpdateC2CContactTradingNegotiationStatus($input: UpdateC2CContactTradingNegotiationStatusInput!) {
  updateC2CContactTradingNegotiationStatus(
    updateC2CContactTradingNegotiationStatusInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingNegotiationStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingNegotiationStatusMutation, UpdateC2CContactTradingNegotiationStatusMutationVariables>;

/**
 * __useUpdateC2CContactTradingNegotiationStatusMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingNegotiationStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingNegotiationStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingNegotiationStatusMutation, { data, loading, error }] = useUpdateC2CContactTradingNegotiationStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingNegotiationStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingNegotiationStatusMutation, UpdateC2CContactTradingNegotiationStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingNegotiationStatusMutation, UpdateC2CContactTradingNegotiationStatusMutationVariables>(UpdateC2CContactTradingNegotiationStatusDocument, baseOptions);
      }
export type UpdateC2CContactTradingNegotiationStatusMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingNegotiationStatusMutation>;
export type UpdateC2CContactTradingNegotiationStatusMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingNegotiationStatusMutation>;
export type UpdateC2CContactTradingNegotiationStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingNegotiationStatusMutation, UpdateC2CContactTradingNegotiationStatusMutationVariables>;
export const UpdateC2CContactTradingRejectedDepositDocument = gql`
    mutation UpdateC2CContactTradingRejectedDeposit($input: UpdateC2CContactTradingRejectedDepositInput!) {
  updateC2CContactTradingRejectedDeposit(
    updateC2CContactTradingRejectedDepositInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingRejectedDepositMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingRejectedDepositMutation, UpdateC2CContactTradingRejectedDepositMutationVariables>;

/**
 * __useUpdateC2CContactTradingRejectedDepositMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingRejectedDepositMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingRejectedDepositMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingRejectedDepositMutation, { data, loading, error }] = useUpdateC2CContactTradingRejectedDepositMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingRejectedDepositMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingRejectedDepositMutation, UpdateC2CContactTradingRejectedDepositMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingRejectedDepositMutation, UpdateC2CContactTradingRejectedDepositMutationVariables>(UpdateC2CContactTradingRejectedDepositDocument, baseOptions);
      }
export type UpdateC2CContactTradingRejectedDepositMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingRejectedDepositMutation>;
export type UpdateC2CContactTradingRejectedDepositMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingRejectedDepositMutation>;
export type UpdateC2CContactTradingRejectedDepositMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingRejectedDepositMutation, UpdateC2CContactTradingRejectedDepositMutationVariables>;
export const UpdateC2CContactTradingRejectedStatusDocument = gql`
    mutation UpdateC2CContactTradingRejectedStatus($input: UpdateC2CContactTradingRejectedStatusInput!) {
  updateC2CContactTradingRejectedStatus(
    updateC2CContactTradingRejectedStatusInput: $input
  ) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CContactTradingRejectedStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CContactTradingRejectedStatusMutation, UpdateC2CContactTradingRejectedStatusMutationVariables>;

/**
 * __useUpdateC2CContactTradingRejectedStatusMutation__
 *
 * To run a mutation, you first call `useUpdateC2CContactTradingRejectedStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CContactTradingRejectedStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CContactTradingRejectedStatusMutation, { data, loading, error }] = useUpdateC2CContactTradingRejectedStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CContactTradingRejectedStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CContactTradingRejectedStatusMutation, UpdateC2CContactTradingRejectedStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CContactTradingRejectedStatusMutation, UpdateC2CContactTradingRejectedStatusMutationVariables>(UpdateC2CContactTradingRejectedStatusDocument, baseOptions);
      }
export type UpdateC2CContactTradingRejectedStatusMutationHookResult = ReturnType<typeof useUpdateC2CContactTradingRejectedStatusMutation>;
export type UpdateC2CContactTradingRejectedStatusMutationResult = ApolloReactCommon.MutationResult<UpdateC2CContactTradingRejectedStatusMutation>;
export type UpdateC2CContactTradingRejectedStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CContactTradingRejectedStatusMutation, UpdateC2CContactTradingRejectedStatusMutationVariables>;
export const ApproveContactTradingB2CDocument = gql`
    mutation ApproveContactTradingB2C($input: ApproveContactTradingB2CInput!) {
  approveContactTradingB2C(approveContactTradingB2CInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    contactTradingB2CId
  }
}
    `;
export type ApproveContactTradingB2CMutationFn = ApolloReactCommon.MutationFunction<ApproveContactTradingB2CMutation, ApproveContactTradingB2CMutationVariables>;

/**
 * __useApproveContactTradingB2CMutation__
 *
 * To run a mutation, you first call `useApproveContactTradingB2CMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveContactTradingB2CMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveContactTradingB2CMutation, { data, loading, error }] = useApproveContactTradingB2CMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useApproveContactTradingB2CMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveContactTradingB2CMutation, ApproveContactTradingB2CMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveContactTradingB2CMutation, ApproveContactTradingB2CMutationVariables>(ApproveContactTradingB2CDocument, baseOptions);
      }
export type ApproveContactTradingB2CMutationHookResult = ReturnType<typeof useApproveContactTradingB2CMutation>;
export type ApproveContactTradingB2CMutationResult = ApolloReactCommon.MutationResult<ApproveContactTradingB2CMutation>;
export type ApproveContactTradingB2CMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveContactTradingB2CMutation, ApproveContactTradingB2CMutationVariables>;
export const CheckContactTradingB2CNotificationDocument = gql`
    query CheckContactTradingB2CNotification($notificationId: Uuid!) {
  checkContactTradingB2CNotification(notificationId: $notificationId) {
    errorCode
    errorMessage
    errorMessageCode
    isValid
  }
}
    `;

/**
 * __useCheckContactTradingB2CNotificationQuery__
 *
 * To run a query within a React component, call `useCheckContactTradingB2CNotificationQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckContactTradingB2CNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckContactTradingB2CNotificationQuery({
 *   variables: {
 *      notificationId: // value for 'notificationId'
 *   },
 * });
 */
export function useCheckContactTradingB2CNotificationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckContactTradingB2CNotificationQuery, CheckContactTradingB2CNotificationQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckContactTradingB2CNotificationQuery, CheckContactTradingB2CNotificationQueryVariables>(CheckContactTradingB2CNotificationDocument, baseOptions);
      }
export function useCheckContactTradingB2CNotificationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckContactTradingB2CNotificationQuery, CheckContactTradingB2CNotificationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckContactTradingB2CNotificationQuery, CheckContactTradingB2CNotificationQueryVariables>(CheckContactTradingB2CNotificationDocument, baseOptions);
        }
export type CheckContactTradingB2CNotificationQueryHookResult = ReturnType<typeof useCheckContactTradingB2CNotificationQuery>;
export type CheckContactTradingB2CNotificationLazyQueryHookResult = ReturnType<typeof useCheckContactTradingB2CNotificationLazyQuery>;
export type CheckContactTradingB2CNotificationQueryResult = ApolloReactCommon.QueryResult<CheckContactTradingB2CNotificationQuery, CheckContactTradingB2CNotificationQueryVariables>;
export const CompleteContactTradingB2CDocument = gql`
    mutation completeContactTradingB2C($input: CompleteContactTradingB2CInput!) {
  completeContactTradingB2C(completeContactTradingB2CInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    __typename
  }
}
    `;
export type CompleteContactTradingB2CMutationFn = ApolloReactCommon.MutationFunction<CompleteContactTradingB2CMutation, CompleteContactTradingB2CMutationVariables>;

/**
 * __useCompleteContactTradingB2CMutation__
 *
 * To run a mutation, you first call `useCompleteContactTradingB2CMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCompleteContactTradingB2CMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [completeContactTradingB2CMutation, { data, loading, error }] = useCompleteContactTradingB2CMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCompleteContactTradingB2CMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CompleteContactTradingB2CMutation, CompleteContactTradingB2CMutationVariables>) {
        return ApolloReactHooks.useMutation<CompleteContactTradingB2CMutation, CompleteContactTradingB2CMutationVariables>(CompleteContactTradingB2CDocument, baseOptions);
      }
export type CompleteContactTradingB2CMutationHookResult = ReturnType<typeof useCompleteContactTradingB2CMutation>;
export type CompleteContactTradingB2CMutationResult = ApolloReactCommon.MutationResult<CompleteContactTradingB2CMutation>;
export type CompleteContactTradingB2CMutationOptions = ApolloReactCommon.BaseMutationOptions<CompleteContactTradingB2CMutation, CompleteContactTradingB2CMutationVariables>;
export const ContactTradingB2CAssigneeByCurrentUserDocument = gql`
    query contactTradingB2CAssigneeByCurrentUser($page: Int, $pageSize: Int, $projectId: String, $order_by: ContactTradingB2CAssigneeCurrentUserDtoSort, $where: ContactTradingB2CAssigneeCurrentUserDtoFilter) {
  contactTradingB2CAssigneeByCurrentUser(
    order_by: $order_by
    projectId: $projectId
    page: $page
    pageSize: $pageSize
    where: $where
  ) {
    downloadUrl
    edges {
      contactTradingB2CId
      contactTradingB2CCode
      contactTradingB2CStatusId
      contactTradingB2CStatusName
      contactTradingB2CStatusDescription
      customerFullName
      projectInfoDto {
        projectId
        projectName
        propertyPostCode
        propertyPostId
      }
      requestDate
    }
    totalCount
    __typename
  }
}
    `;

/**
 * __useContactTradingB2CAssigneeByCurrentUserQuery__
 *
 * To run a query within a React component, call `useContactTradingB2CAssigneeByCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useContactTradingB2CAssigneeByCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useContactTradingB2CAssigneeByCurrentUserQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      projectId: // value for 'projectId'
 *      order_by: // value for 'order_by'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useContactTradingB2CAssigneeByCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ContactTradingB2CAssigneeByCurrentUserQuery, ContactTradingB2CAssigneeByCurrentUserQueryVariables>) {
        return ApolloReactHooks.useQuery<ContactTradingB2CAssigneeByCurrentUserQuery, ContactTradingB2CAssigneeByCurrentUserQueryVariables>(ContactTradingB2CAssigneeByCurrentUserDocument, baseOptions);
      }
export function useContactTradingB2CAssigneeByCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ContactTradingB2CAssigneeByCurrentUserQuery, ContactTradingB2CAssigneeByCurrentUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ContactTradingB2CAssigneeByCurrentUserQuery, ContactTradingB2CAssigneeByCurrentUserQueryVariables>(ContactTradingB2CAssigneeByCurrentUserDocument, baseOptions);
        }
export type ContactTradingB2CAssigneeByCurrentUserQueryHookResult = ReturnType<typeof useContactTradingB2CAssigneeByCurrentUserQuery>;
export type ContactTradingB2CAssigneeByCurrentUserLazyQueryHookResult = ReturnType<typeof useContactTradingB2CAssigneeByCurrentUserLazyQuery>;
export type ContactTradingB2CAssigneeByCurrentUserQueryResult = ApolloReactCommon.QueryResult<ContactTradingB2CAssigneeByCurrentUserQuery, ContactTradingB2CAssigneeByCurrentUserQueryVariables>;
export const ContactTradingB2CCreatedByCurrentUserDocument = gql`
    query contactTradingB2CCreatedByCurrentUser($page: Int, $pageSize: Int, $projectId: String, $order_by: ContactTradingB2CCreatedByCurrentUserDtoSort, $where: ContactTradingB2CCreatedByCurrentUserDtoFilter) {
  contactTradingB2CCreatedByCurrentUser(
    order_by: $order_by
    projectId: $projectId
    page: $page
    pageSize: $pageSize
    where: $where
  ) {
    downloadUrl
    edges {
      contactTradingB2CId
      contactTradingB2CCode
      contactTradingB2CStatusId
      contactTradingB2CStatusDescription
      contactTradingB2CStatusName
      customerFullName
      projectInfoDto {
        projectId
        projectName
        propertyPostCode
        propertyPostId
        startYear
      }
      requestDate
    }
    totalCount
    __typename
  }
}
    `;

/**
 * __useContactTradingB2CCreatedByCurrentUserQuery__
 *
 * To run a query within a React component, call `useContactTradingB2CCreatedByCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useContactTradingB2CCreatedByCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useContactTradingB2CCreatedByCurrentUserQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      projectId: // value for 'projectId'
 *      order_by: // value for 'order_by'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useContactTradingB2CCreatedByCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ContactTradingB2CCreatedByCurrentUserQuery, ContactTradingB2CCreatedByCurrentUserQueryVariables>) {
        return ApolloReactHooks.useQuery<ContactTradingB2CCreatedByCurrentUserQuery, ContactTradingB2CCreatedByCurrentUserQueryVariables>(ContactTradingB2CCreatedByCurrentUserDocument, baseOptions);
      }
export function useContactTradingB2CCreatedByCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ContactTradingB2CCreatedByCurrentUserQuery, ContactTradingB2CCreatedByCurrentUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ContactTradingB2CCreatedByCurrentUserQuery, ContactTradingB2CCreatedByCurrentUserQueryVariables>(ContactTradingB2CCreatedByCurrentUserDocument, baseOptions);
        }
export type ContactTradingB2CCreatedByCurrentUserQueryHookResult = ReturnType<typeof useContactTradingB2CCreatedByCurrentUserQuery>;
export type ContactTradingB2CCreatedByCurrentUserLazyQueryHookResult = ReturnType<typeof useContactTradingB2CCreatedByCurrentUserLazyQuery>;
export type ContactTradingB2CCreatedByCurrentUserQueryResult = ApolloReactCommon.QueryResult<ContactTradingB2CCreatedByCurrentUserQuery, ContactTradingB2CCreatedByCurrentUserQueryVariables>;
export const ContactTradingB2CStatusesDocument = gql`
    query contactTradingB2CStatuses($page: Int, $pageSize: Int, $order_by: ContactTradingB2CStatusDtoSort, $filter: ContactTradingB2CStatusDtoFilter) {
  contactTradingB2CStatuses(
    order_by: $order_by
    page: $page
    pageSize: $pageSize
    where: $filter
  ) {
    downloadUrl
    edges {
      contactTradingB2CStatusDescription
      contactTradingB2CStatusId
      contactTradingB2CStatusName
      contactTradingB2CStatusSortOrder
    }
    totalCount
    __typename
  }
}
    `;

/**
 * __useContactTradingB2CStatusesQuery__
 *
 * To run a query within a React component, call `useContactTradingB2CStatusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useContactTradingB2CStatusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useContactTradingB2CStatusesQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useContactTradingB2CStatusesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ContactTradingB2CStatusesQuery, ContactTradingB2CStatusesQueryVariables>) {
        return ApolloReactHooks.useQuery<ContactTradingB2CStatusesQuery, ContactTradingB2CStatusesQueryVariables>(ContactTradingB2CStatusesDocument, baseOptions);
      }
export function useContactTradingB2CStatusesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ContactTradingB2CStatusesQuery, ContactTradingB2CStatusesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ContactTradingB2CStatusesQuery, ContactTradingB2CStatusesQueryVariables>(ContactTradingB2CStatusesDocument, baseOptions);
        }
export type ContactTradingB2CStatusesQueryHookResult = ReturnType<typeof useContactTradingB2CStatusesQuery>;
export type ContactTradingB2CStatusesLazyQueryHookResult = ReturnType<typeof useContactTradingB2CStatusesLazyQuery>;
export type ContactTradingB2CStatusesQueryResult = ApolloReactCommon.QueryResult<ContactTradingB2CStatusesQuery, ContactTradingB2CStatusesQueryVariables>;
export const CreateContactTradingB2CDocument = gql`
    mutation CreateContactTradingB2C($input: CreateContactTradingB2CInput!) {
  createContactTradingB2C(createContactTradingB2CInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    contactTradingB2CId
  }
}
    `;
export type CreateContactTradingB2CMutationFn = ApolloReactCommon.MutationFunction<CreateContactTradingB2CMutation, CreateContactTradingB2CMutationVariables>;

/**
 * __useCreateContactTradingB2CMutation__
 *
 * To run a mutation, you first call `useCreateContactTradingB2CMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContactTradingB2CMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContactTradingB2CMutation, { data, loading, error }] = useCreateContactTradingB2CMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateContactTradingB2CMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateContactTradingB2CMutation, CreateContactTradingB2CMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateContactTradingB2CMutation, CreateContactTradingB2CMutationVariables>(CreateContactTradingB2CDocument, baseOptions);
      }
export type CreateContactTradingB2CMutationHookResult = ReturnType<typeof useCreateContactTradingB2CMutation>;
export type CreateContactTradingB2CMutationResult = ApolloReactCommon.MutationResult<CreateContactTradingB2CMutation>;
export type CreateContactTradingB2CMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateContactTradingB2CMutation, CreateContactTradingB2CMutationVariables>;
export const DeclineContactTradingB2CDocument = gql`
    mutation DeclineContactTradingB2C($input: DeclineContactTradingB2CInput!) {
  declineContactTradingB2C(declineContactTradingB2CInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type DeclineContactTradingB2CMutationFn = ApolloReactCommon.MutationFunction<DeclineContactTradingB2CMutation, DeclineContactTradingB2CMutationVariables>;

/**
 * __useDeclineContactTradingB2CMutation__
 *
 * To run a mutation, you first call `useDeclineContactTradingB2CMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeclineContactTradingB2CMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [declineContactTradingB2CMutation, { data, loading, error }] = useDeclineContactTradingB2CMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeclineContactTradingB2CMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeclineContactTradingB2CMutation, DeclineContactTradingB2CMutationVariables>) {
        return ApolloReactHooks.useMutation<DeclineContactTradingB2CMutation, DeclineContactTradingB2CMutationVariables>(DeclineContactTradingB2CDocument, baseOptions);
      }
export type DeclineContactTradingB2CMutationHookResult = ReturnType<typeof useDeclineContactTradingB2CMutation>;
export type DeclineContactTradingB2CMutationResult = ApolloReactCommon.MutationResult<DeclineContactTradingB2CMutation>;
export type DeclineContactTradingB2CMutationOptions = ApolloReactCommon.BaseMutationOptions<DeclineContactTradingB2CMutation, DeclineContactTradingB2CMutationVariables>;
export const GetContactTradingB2CDetailByIdDocument = gql`
    query GetContactTradingB2CDetailById($contactTradingB2CId: Uuid!) {
  getContactTradingB2CDetailById(contactTradingB2CId: $contactTradingB2CId) {
    errorCode
    errorMessage
    errorMessageCode
    contactTradingB2CDto {
      agentFullName
      agentId
      consultantFullName
      consultantId
      consultantPhoneNumber
      contactTradingB2CId
      contactTradingB2CCode
      contactTradingB2CStatusDescription
      contactTradingB2CStatusId
      contactTradingB2CStatusName
      contactTypeName
      customerEmail
      floor
      propertyBlockName
      customerFullName
      customerPhoneNumber
      projectId
      projectName
      propertyPostCode
      propertyPostId
      propertyPostInfo
      propertyTypeName
      requestDate
      requesterFullName
      updatedDate
    }
  }
}
    `;

/**
 * __useGetContactTradingB2CDetailByIdQuery__
 *
 * To run a query within a React component, call `useGetContactTradingB2CDetailByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactTradingB2CDetailByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactTradingB2CDetailByIdQuery({
 *   variables: {
 *      contactTradingB2CId: // value for 'contactTradingB2CId'
 *   },
 * });
 */
export function useGetContactTradingB2CDetailByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetContactTradingB2CDetailByIdQuery, GetContactTradingB2CDetailByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetContactTradingB2CDetailByIdQuery, GetContactTradingB2CDetailByIdQueryVariables>(GetContactTradingB2CDetailByIdDocument, baseOptions);
      }
export function useGetContactTradingB2CDetailByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetContactTradingB2CDetailByIdQuery, GetContactTradingB2CDetailByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetContactTradingB2CDetailByIdQuery, GetContactTradingB2CDetailByIdQueryVariables>(GetContactTradingB2CDetailByIdDocument, baseOptions);
        }
export type GetContactTradingB2CDetailByIdQueryHookResult = ReturnType<typeof useGetContactTradingB2CDetailByIdQuery>;
export type GetContactTradingB2CDetailByIdLazyQueryHookResult = ReturnType<typeof useGetContactTradingB2CDetailByIdLazyQuery>;
export type GetContactTradingB2CDetailByIdQueryResult = ApolloReactCommon.QueryResult<GetContactTradingB2CDetailByIdQuery, GetContactTradingB2CDetailByIdQueryVariables>;
export const GetProjectAssigneeForContactTradingB2CDocument = gql`
    query GetProjectAssigneeForContactTradingB2C($keyWords: String, $page: Int, $pageSize: Int) {
  getProjectAssigneeForContactTradingB2C(
    keyWords: $keyWords
    page: $page
    pageSize: $pageSize
  ) {
    downloadUrl
    edges {
      projectId
      projectName
    }
    totalCount
  }
}
    `;

/**
 * __useGetProjectAssigneeForContactTradingB2CQuery__
 *
 * To run a query within a React component, call `useGetProjectAssigneeForContactTradingB2CQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectAssigneeForContactTradingB2CQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectAssigneeForContactTradingB2CQuery({
 *   variables: {
 *      keyWords: // value for 'keyWords'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetProjectAssigneeForContactTradingB2CQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectAssigneeForContactTradingB2CQuery, GetProjectAssigneeForContactTradingB2CQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectAssigneeForContactTradingB2CQuery, GetProjectAssigneeForContactTradingB2CQueryVariables>(GetProjectAssigneeForContactTradingB2CDocument, baseOptions);
      }
export function useGetProjectAssigneeForContactTradingB2CLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectAssigneeForContactTradingB2CQuery, GetProjectAssigneeForContactTradingB2CQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectAssigneeForContactTradingB2CQuery, GetProjectAssigneeForContactTradingB2CQueryVariables>(GetProjectAssigneeForContactTradingB2CDocument, baseOptions);
        }
export type GetProjectAssigneeForContactTradingB2CQueryHookResult = ReturnType<typeof useGetProjectAssigneeForContactTradingB2CQuery>;
export type GetProjectAssigneeForContactTradingB2CLazyQueryHookResult = ReturnType<typeof useGetProjectAssigneeForContactTradingB2CLazyQuery>;
export type GetProjectAssigneeForContactTradingB2CQueryResult = ApolloReactCommon.QueryResult<GetProjectAssigneeForContactTradingB2CQuery, GetProjectAssigneeForContactTradingB2CQueryVariables>;
export const HaveContactTradingB2CByPropertyPostIdDocument = gql`
    query HaveContactTradingB2CByPropertyPostId($propertyPostId: Uuid!) {
  haveContactTradingB2CByPropertyPostId(propertyPostId: $propertyPostId) {
    errorCode
    errorMessage
    errorMessageCode
    haveContactTradingB2C
  }
}
    `;

/**
 * __useHaveContactTradingB2CByPropertyPostIdQuery__
 *
 * To run a query within a React component, call `useHaveContactTradingB2CByPropertyPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useHaveContactTradingB2CByPropertyPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useHaveContactTradingB2CByPropertyPostIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useHaveContactTradingB2CByPropertyPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HaveContactTradingB2CByPropertyPostIdQuery, HaveContactTradingB2CByPropertyPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<HaveContactTradingB2CByPropertyPostIdQuery, HaveContactTradingB2CByPropertyPostIdQueryVariables>(HaveContactTradingB2CByPropertyPostIdDocument, baseOptions);
      }
export function useHaveContactTradingB2CByPropertyPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HaveContactTradingB2CByPropertyPostIdQuery, HaveContactTradingB2CByPropertyPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<HaveContactTradingB2CByPropertyPostIdQuery, HaveContactTradingB2CByPropertyPostIdQueryVariables>(HaveContactTradingB2CByPropertyPostIdDocument, baseOptions);
        }
export type HaveContactTradingB2CByPropertyPostIdQueryHookResult = ReturnType<typeof useHaveContactTradingB2CByPropertyPostIdQuery>;
export type HaveContactTradingB2CByPropertyPostIdLazyQueryHookResult = ReturnType<typeof useHaveContactTradingB2CByPropertyPostIdLazyQuery>;
export type HaveContactTradingB2CByPropertyPostIdQueryResult = ApolloReactCommon.QueryResult<HaveContactTradingB2CByPropertyPostIdQuery, HaveContactTradingB2CByPropertyPostIdQueryVariables>;
export const TrackContactTradingB2CDocument = gql`
    mutation TrackContactTradingB2C($input: TrackContactTradingB2CInput!) {
  trackContactTradingB2C(trackContactTradingB2CInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type TrackContactTradingB2CMutationFn = ApolloReactCommon.MutationFunction<TrackContactTradingB2CMutation, TrackContactTradingB2CMutationVariables>;

/**
 * __useTrackContactTradingB2CMutation__
 *
 * To run a mutation, you first call `useTrackContactTradingB2CMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTrackContactTradingB2CMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [trackContactTradingB2CMutation, { data, loading, error }] = useTrackContactTradingB2CMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useTrackContactTradingB2CMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<TrackContactTradingB2CMutation, TrackContactTradingB2CMutationVariables>) {
        return ApolloReactHooks.useMutation<TrackContactTradingB2CMutation, TrackContactTradingB2CMutationVariables>(TrackContactTradingB2CDocument, baseOptions);
      }
export type TrackContactTradingB2CMutationHookResult = ReturnType<typeof useTrackContactTradingB2CMutation>;
export type TrackContactTradingB2CMutationResult = ApolloReactCommon.MutationResult<TrackContactTradingB2CMutation>;
export type TrackContactTradingB2CMutationOptions = ApolloReactCommon.BaseMutationOptions<TrackContactTradingB2CMutation, TrackContactTradingB2CMutationVariables>;
export const ApproveCrawlerDataDocument = gql`
    mutation ApproveCrawlerData($input: ApproveCrawlerDataInput!) {
  approveCrawlerData(approveCrawlerDataInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostId
  }
}
    `;
export type ApproveCrawlerDataMutationFn = ApolloReactCommon.MutationFunction<ApproveCrawlerDataMutation, ApproveCrawlerDataMutationVariables>;

/**
 * __useApproveCrawlerDataMutation__
 *
 * To run a mutation, you first call `useApproveCrawlerDataMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useApproveCrawlerDataMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [approveCrawlerDataMutation, { data, loading, error }] = useApproveCrawlerDataMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useApproveCrawlerDataMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ApproveCrawlerDataMutation, ApproveCrawlerDataMutationVariables>) {
        return ApolloReactHooks.useMutation<ApproveCrawlerDataMutation, ApproveCrawlerDataMutationVariables>(ApproveCrawlerDataDocument, baseOptions);
      }
export type ApproveCrawlerDataMutationHookResult = ReturnType<typeof useApproveCrawlerDataMutation>;
export type ApproveCrawlerDataMutationResult = ApolloReactCommon.MutationResult<ApproveCrawlerDataMutation>;
export type ApproveCrawlerDataMutationOptions = ApolloReactCommon.BaseMutationOptions<ApproveCrawlerDataMutation, ApproveCrawlerDataMutationVariables>;
export const GetCrawlerProcessesForTopenerDocument = gql`
    query GetCrawlerProcessesForTopener($page: Int, $pageSize: Int, $keywords: String, $filter: CrawlerProcessDtoFilter) {
  crawlerProcessesForTopener(
    order_by: {updatedDatetime: DESC}
    page: $page
    pageSize: $pageSize
    keywords: $keywords
    where: $filter
  ) {
    totalCount
    edges {
      crawlerProcessId
      direction
      c2CPropertyPostId
      c2CPropertyCode
      crawlerTrackingStatusId
      crawlerTrackingStatusDescription
      updatedDatetime
      image
      postTitle
      price
      cityId
      cityName
      districtId
      districtName
      wardId
      wardName
      streetName
      houseAddress
      areaTotal
      direction
      numberOfBedrooms
      numberOfBathrooms
      postAuthor
      phone
      propertyTypeId
    }
  }
}
    `;

/**
 * __useGetCrawlerProcessesForTopenerQuery__
 *
 * To run a query within a React component, call `useGetCrawlerProcessesForTopenerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCrawlerProcessesForTopenerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCrawlerProcessesForTopenerQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      keywords: // value for 'keywords'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetCrawlerProcessesForTopenerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCrawlerProcessesForTopenerQuery, GetCrawlerProcessesForTopenerQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCrawlerProcessesForTopenerQuery, GetCrawlerProcessesForTopenerQueryVariables>(GetCrawlerProcessesForTopenerDocument, baseOptions);
      }
export function useGetCrawlerProcessesForTopenerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCrawlerProcessesForTopenerQuery, GetCrawlerProcessesForTopenerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCrawlerProcessesForTopenerQuery, GetCrawlerProcessesForTopenerQueryVariables>(GetCrawlerProcessesForTopenerDocument, baseOptions);
        }
export type GetCrawlerProcessesForTopenerQueryHookResult = ReturnType<typeof useGetCrawlerProcessesForTopenerQuery>;
export type GetCrawlerProcessesForTopenerLazyQueryHookResult = ReturnType<typeof useGetCrawlerProcessesForTopenerLazyQuery>;
export type GetCrawlerProcessesForTopenerQueryResult = ApolloReactCommon.QueryResult<GetCrawlerProcessesForTopenerQuery, GetCrawlerProcessesForTopenerQueryVariables>;
export const GetSummaryByCrawlerTrackingStatusDocument = gql`
    query GetSummaryByCrawlerTrackingStatus {
  summaryByCrawlerTrackingStatus {
    totalCount
    status {
      crawlerTrackingStatusId
      crawlerTrackingStatusDescription
      count
    }
  }
}
    `;

/**
 * __useGetSummaryByCrawlerTrackingStatusQuery__
 *
 * To run a query within a React component, call `useGetSummaryByCrawlerTrackingStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSummaryByCrawlerTrackingStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSummaryByCrawlerTrackingStatusQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSummaryByCrawlerTrackingStatusQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSummaryByCrawlerTrackingStatusQuery, GetSummaryByCrawlerTrackingStatusQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSummaryByCrawlerTrackingStatusQuery, GetSummaryByCrawlerTrackingStatusQueryVariables>(GetSummaryByCrawlerTrackingStatusDocument, baseOptions);
      }
export function useGetSummaryByCrawlerTrackingStatusLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSummaryByCrawlerTrackingStatusQuery, GetSummaryByCrawlerTrackingStatusQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSummaryByCrawlerTrackingStatusQuery, GetSummaryByCrawlerTrackingStatusQueryVariables>(GetSummaryByCrawlerTrackingStatusDocument, baseOptions);
        }
export type GetSummaryByCrawlerTrackingStatusQueryHookResult = ReturnType<typeof useGetSummaryByCrawlerTrackingStatusQuery>;
export type GetSummaryByCrawlerTrackingStatusLazyQueryHookResult = ReturnType<typeof useGetSummaryByCrawlerTrackingStatusLazyQuery>;
export type GetSummaryByCrawlerTrackingStatusQueryResult = ApolloReactCommon.QueryResult<GetSummaryByCrawlerTrackingStatusQuery, GetSummaryByCrawlerTrackingStatusQueryVariables>;
export const UpdateCrawlerProcessRefuseStatusDocument = gql`
    mutation UpdateCrawlerProcessRefuseStatus($input: UpdateCrawlerProcessRefuseStatusInput!) {
  updateCrawlerProcessRefuseStatus(updateCrawlerProcessRefuseStatusInput: $input) {
    errorCode
    errorMessageCode
    errorMessage
  }
}
    `;
export type UpdateCrawlerProcessRefuseStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateCrawlerProcessRefuseStatusMutation, UpdateCrawlerProcessRefuseStatusMutationVariables>;

/**
 * __useUpdateCrawlerProcessRefuseStatusMutation__
 *
 * To run a mutation, you first call `useUpdateCrawlerProcessRefuseStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCrawlerProcessRefuseStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCrawlerProcessRefuseStatusMutation, { data, loading, error }] = useUpdateCrawlerProcessRefuseStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateCrawlerProcessRefuseStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCrawlerProcessRefuseStatusMutation, UpdateCrawlerProcessRefuseStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateCrawlerProcessRefuseStatusMutation, UpdateCrawlerProcessRefuseStatusMutationVariables>(UpdateCrawlerProcessRefuseStatusDocument, baseOptions);
      }
export type UpdateCrawlerProcessRefuseStatusMutationHookResult = ReturnType<typeof useUpdateCrawlerProcessRefuseStatusMutation>;
export type UpdateCrawlerProcessRefuseStatusMutationResult = ApolloReactCommon.MutationResult<UpdateCrawlerProcessRefuseStatusMutation>;
export type UpdateCrawlerProcessRefuseStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCrawlerProcessRefuseStatusMutation, UpdateCrawlerProcessRefuseStatusMutationVariables>;
export const BidvPayDepositTransactionDocument = gql`
    mutation BidvPayDepositTransaction($payDepositTransactionInput: PayDepositTransactionInput!) {
  bidvPayDepositTransaction(
    payDepositTransactionInput: $payDepositTransactionInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    linkPaymentUrl
    returnUrl
    ipnUrl
    disablePayment
    transactionId
  }
}
    `;
export type BidvPayDepositTransactionMutationFn = ApolloReactCommon.MutationFunction<BidvPayDepositTransactionMutation, BidvPayDepositTransactionMutationVariables>;

/**
 * __useBidvPayDepositTransactionMutation__
 *
 * To run a mutation, you first call `useBidvPayDepositTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useBidvPayDepositTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [bidvPayDepositTransactionMutation, { data, loading, error }] = useBidvPayDepositTransactionMutation({
 *   variables: {
 *      payDepositTransactionInput: // value for 'payDepositTransactionInput'
 *   },
 * });
 */
export function useBidvPayDepositTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<BidvPayDepositTransactionMutation, BidvPayDepositTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<BidvPayDepositTransactionMutation, BidvPayDepositTransactionMutationVariables>(BidvPayDepositTransactionDocument, baseOptions);
      }
export type BidvPayDepositTransactionMutationHookResult = ReturnType<typeof useBidvPayDepositTransactionMutation>;
export type BidvPayDepositTransactionMutationResult = ApolloReactCommon.MutationResult<BidvPayDepositTransactionMutation>;
export type BidvPayDepositTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<BidvPayDepositTransactionMutation, BidvPayDepositTransactionMutationVariables>;
export const CheckLockPropertyPostForDepositeDocument = gql`
    query CheckLockPropertyPostForDeposite($propertyPostId: Uuid!) {
  checkLockPropertyPostForDeposite(propertyPostId: $propertyPostId) {
    errorCode
    errorMessage
    errorMessageCode
    isLocked
  }
}
    `;

/**
 * __useCheckLockPropertyPostForDepositeQuery__
 *
 * To run a query within a React component, call `useCheckLockPropertyPostForDepositeQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckLockPropertyPostForDepositeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckLockPropertyPostForDepositeQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useCheckLockPropertyPostForDepositeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckLockPropertyPostForDepositeQuery, CheckLockPropertyPostForDepositeQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckLockPropertyPostForDepositeQuery, CheckLockPropertyPostForDepositeQueryVariables>(CheckLockPropertyPostForDepositeDocument, baseOptions);
      }
export function useCheckLockPropertyPostForDepositeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckLockPropertyPostForDepositeQuery, CheckLockPropertyPostForDepositeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckLockPropertyPostForDepositeQuery, CheckLockPropertyPostForDepositeQueryVariables>(CheckLockPropertyPostForDepositeDocument, baseOptions);
        }
export type CheckLockPropertyPostForDepositeQueryHookResult = ReturnType<typeof useCheckLockPropertyPostForDepositeQuery>;
export type CheckLockPropertyPostForDepositeLazyQueryHookResult = ReturnType<typeof useCheckLockPropertyPostForDepositeLazyQuery>;
export type CheckLockPropertyPostForDepositeQueryResult = ApolloReactCommon.QueryResult<CheckLockPropertyPostForDepositeQuery, CheckLockPropertyPostForDepositeQueryVariables>;
export const CreateDepositeTransactionDocument = gql`
    mutation CreateDepositeTransaction($input: CreateDepositeTransactionInput!) {
  createDepositeTransaction(createDepositeTransactionInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    depositeTransactionDto {
      depositeTransactionId
      depositeStatusId
      propertyPostId
      isLatest
      customerId
      bookingTransactionId
    }
  }
}
    `;
export type CreateDepositeTransactionMutationFn = ApolloReactCommon.MutationFunction<CreateDepositeTransactionMutation, CreateDepositeTransactionMutationVariables>;

/**
 * __useCreateDepositeTransactionMutation__
 *
 * To run a mutation, you first call `useCreateDepositeTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDepositeTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDepositeTransactionMutation, { data, loading, error }] = useCreateDepositeTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateDepositeTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateDepositeTransactionMutation, CreateDepositeTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateDepositeTransactionMutation, CreateDepositeTransactionMutationVariables>(CreateDepositeTransactionDocument, baseOptions);
      }
export type CreateDepositeTransactionMutationHookResult = ReturnType<typeof useCreateDepositeTransactionMutation>;
export type CreateDepositeTransactionMutationResult = ApolloReactCommon.MutationResult<CreateDepositeTransactionMutation>;
export type CreateDepositeTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateDepositeTransactionMutation, CreateDepositeTransactionMutationVariables>;
export const CreateRefundRequestDocument = gql`
    mutation createRefundRequest($input: CreateRefundRequestInput!) {
  createRefundRequest(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateRefundRequestMutationFn = ApolloReactCommon.MutationFunction<CreateRefundRequestMutation, CreateRefundRequestMutationVariables>;

/**
 * __useCreateRefundRequestMutation__
 *
 * To run a mutation, you first call `useCreateRefundRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRefundRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRefundRequestMutation, { data, loading, error }] = useCreateRefundRequestMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateRefundRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateRefundRequestMutation, CreateRefundRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateRefundRequestMutation, CreateRefundRequestMutationVariables>(CreateRefundRequestDocument, baseOptions);
      }
export type CreateRefundRequestMutationHookResult = ReturnType<typeof useCreateRefundRequestMutation>;
export type CreateRefundRequestMutationResult = ApolloReactCommon.MutationResult<CreateRefundRequestMutation>;
export type CreateRefundRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateRefundRequestMutation, CreateRefundRequestMutationVariables>;
export const FastPayDepositTransactionDocument = gql`
    mutation FastPayDepositTransaction($payDepositTransactionInput: PayDepositTransactionInput!) {
  fastPayDepositTransaction(
    payDepositTransactionInput: $payDepositTransactionInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    linkPaymentUrl
    returnUrl
    ipnUrl
    disablePayment
    transactionId
  }
}
    `;
export type FastPayDepositTransactionMutationFn = ApolloReactCommon.MutationFunction<FastPayDepositTransactionMutation, FastPayDepositTransactionMutationVariables>;

/**
 * __useFastPayDepositTransactionMutation__
 *
 * To run a mutation, you first call `useFastPayDepositTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFastPayDepositTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [fastPayDepositTransactionMutation, { data, loading, error }] = useFastPayDepositTransactionMutation({
 *   variables: {
 *      payDepositTransactionInput: // value for 'payDepositTransactionInput'
 *   },
 * });
 */
export function useFastPayDepositTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FastPayDepositTransactionMutation, FastPayDepositTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<FastPayDepositTransactionMutation, FastPayDepositTransactionMutationVariables>(FastPayDepositTransactionDocument, baseOptions);
      }
export type FastPayDepositTransactionMutationHookResult = ReturnType<typeof useFastPayDepositTransactionMutation>;
export type FastPayDepositTransactionMutationResult = ApolloReactCommon.MutationResult<FastPayDepositTransactionMutation>;
export type FastPayDepositTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<FastPayDepositTransactionMutation, FastPayDepositTransactionMutationVariables>;
export const GetDepositeDetailValidatePaymentDocument = gql`
    query GetDepositeDetailValidatePayment($transactionId: String, $paymentReturnUrl: String, $propertyPostId: String) {
  depositeTransactionValidatePayment(
    depositeTransactionValidatePaymentInput: {depositeTransactionId: $transactionId, paymentReturnUrl: $paymentReturnUrl, propertyPostId: $propertyPostId}
  ) {
    errorCode
    errorMessage
    isValid
  }
}
    `;

/**
 * __useGetDepositeDetailValidatePaymentQuery__
 *
 * To run a query within a React component, call `useGetDepositeDetailValidatePaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositeDetailValidatePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositeDetailValidatePaymentQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *      paymentReturnUrl: // value for 'paymentReturnUrl'
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetDepositeDetailValidatePaymentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDepositeDetailValidatePaymentQuery, GetDepositeDetailValidatePaymentQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDepositeDetailValidatePaymentQuery, GetDepositeDetailValidatePaymentQueryVariables>(GetDepositeDetailValidatePaymentDocument, baseOptions);
      }
export function useGetDepositeDetailValidatePaymentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDepositeDetailValidatePaymentQuery, GetDepositeDetailValidatePaymentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDepositeDetailValidatePaymentQuery, GetDepositeDetailValidatePaymentQueryVariables>(GetDepositeDetailValidatePaymentDocument, baseOptions);
        }
export type GetDepositeDetailValidatePaymentQueryHookResult = ReturnType<typeof useGetDepositeDetailValidatePaymentQuery>;
export type GetDepositeDetailValidatePaymentLazyQueryHookResult = ReturnType<typeof useGetDepositeDetailValidatePaymentLazyQuery>;
export type GetDepositeDetailValidatePaymentQueryResult = ApolloReactCommon.QueryResult<GetDepositeDetailValidatePaymentQuery, GetDepositeDetailValidatePaymentQueryVariables>;
export const GetDepositeDurationByBookingTransactionIdDocument = gql`
    query GetDepositeDurationByBookingTransactionId($transactionId: Uuid!) {
  depositeDurationByBookingTransactionId(bookingTransactionId: $transactionId) {
    ableConfirmDeposite
    beginDepositeDatetime
    endDepositeDatetime
    endDepositeTimeInSecond
  }
}
    `;

/**
 * __useGetDepositeDurationByBookingTransactionIdQuery__
 *
 * To run a query within a React component, call `useGetDepositeDurationByBookingTransactionIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositeDurationByBookingTransactionIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositeDurationByBookingTransactionIdQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *   },
 * });
 */
export function useGetDepositeDurationByBookingTransactionIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDepositeDurationByBookingTransactionIdQuery, GetDepositeDurationByBookingTransactionIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDepositeDurationByBookingTransactionIdQuery, GetDepositeDurationByBookingTransactionIdQueryVariables>(GetDepositeDurationByBookingTransactionIdDocument, baseOptions);
      }
export function useGetDepositeDurationByBookingTransactionIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDepositeDurationByBookingTransactionIdQuery, GetDepositeDurationByBookingTransactionIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDepositeDurationByBookingTransactionIdQuery, GetDepositeDurationByBookingTransactionIdQueryVariables>(GetDepositeDurationByBookingTransactionIdDocument, baseOptions);
        }
export type GetDepositeDurationByBookingTransactionIdQueryHookResult = ReturnType<typeof useGetDepositeDurationByBookingTransactionIdQuery>;
export type GetDepositeDurationByBookingTransactionIdLazyQueryHookResult = ReturnType<typeof useGetDepositeDurationByBookingTransactionIdLazyQuery>;
export type GetDepositeDurationByBookingTransactionIdQueryResult = ApolloReactCommon.QueryResult<GetDepositeDurationByBookingTransactionIdQuery, GetDepositeDurationByBookingTransactionIdQueryVariables>;
export const GetValidateDepositeTransactionDocument = gql`
    query GetValidateDepositeTransaction($depositeTransactionId: Uuid!) {
  validateDepositeTransaction(depositeTransactionId: $depositeTransactionId) {
    errorCode
    errorMessage
    errorMessageCode
    isValid
  }
}
    `;

/**
 * __useGetValidateDepositeTransactionQuery__
 *
 * To run a query within a React component, call `useGetValidateDepositeTransactionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetValidateDepositeTransactionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetValidateDepositeTransactionQuery({
 *   variables: {
 *      depositeTransactionId: // value for 'depositeTransactionId'
 *   },
 * });
 */
export function useGetValidateDepositeTransactionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetValidateDepositeTransactionQuery, GetValidateDepositeTransactionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetValidateDepositeTransactionQuery, GetValidateDepositeTransactionQueryVariables>(GetValidateDepositeTransactionDocument, baseOptions);
      }
export function useGetValidateDepositeTransactionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetValidateDepositeTransactionQuery, GetValidateDepositeTransactionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetValidateDepositeTransactionQuery, GetValidateDepositeTransactionQueryVariables>(GetValidateDepositeTransactionDocument, baseOptions);
        }
export type GetValidateDepositeTransactionQueryHookResult = ReturnType<typeof useGetValidateDepositeTransactionQuery>;
export type GetValidateDepositeTransactionLazyQueryHookResult = ReturnType<typeof useGetValidateDepositeTransactionLazyQuery>;
export type GetValidateDepositeTransactionQueryResult = ApolloReactCommon.QueryResult<GetValidateDepositeTransactionQuery, GetValidateDepositeTransactionQueryVariables>;
export const MoveDepositeTransactionDocument = gql`
    mutation MoveDepositeTransaction($input: MoveDepositeTransactionInput!) {
  moveDepositeTransaction(moveDepositeTransactionInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    depositeTransactionDto {
      depositeTransactionId
      depositeStatusId
      numberOfChanging
      priorDepositeTransactionId
    }
  }
}
    `;
export type MoveDepositeTransactionMutationFn = ApolloReactCommon.MutationFunction<MoveDepositeTransactionMutation, MoveDepositeTransactionMutationVariables>;

/**
 * __useMoveDepositeTransactionMutation__
 *
 * To run a mutation, you first call `useMoveDepositeTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useMoveDepositeTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [moveDepositeTransactionMutation, { data, loading, error }] = useMoveDepositeTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useMoveDepositeTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<MoveDepositeTransactionMutation, MoveDepositeTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<MoveDepositeTransactionMutation, MoveDepositeTransactionMutationVariables>(MoveDepositeTransactionDocument, baseOptions);
      }
export type MoveDepositeTransactionMutationHookResult = ReturnType<typeof useMoveDepositeTransactionMutation>;
export type MoveDepositeTransactionMutationResult = ApolloReactCommon.MutationResult<MoveDepositeTransactionMutation>;
export type MoveDepositeTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<MoveDepositeTransactionMutation, MoveDepositeTransactionMutationVariables>;
export const UnlockDepositForB2CPropertyPostDocument = gql`
    mutation UnlockDepositForB2CPropertyPost($input: UnlockDepositForB2CPropertyPostInput!) {
  unlockDepositForB2CPropertyPost(unlockDepositForB2CPropertyPostInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UnlockDepositForB2CPropertyPostMutationFn = ApolloReactCommon.MutationFunction<UnlockDepositForB2CPropertyPostMutation, UnlockDepositForB2CPropertyPostMutationVariables>;

/**
 * __useUnlockDepositForB2CPropertyPostMutation__
 *
 * To run a mutation, you first call `useUnlockDepositForB2CPropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnlockDepositForB2CPropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unlockDepositForB2CPropertyPostMutation, { data, loading, error }] = useUnlockDepositForB2CPropertyPostMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUnlockDepositForB2CPropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UnlockDepositForB2CPropertyPostMutation, UnlockDepositForB2CPropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<UnlockDepositForB2CPropertyPostMutation, UnlockDepositForB2CPropertyPostMutationVariables>(UnlockDepositForB2CPropertyPostDocument, baseOptions);
      }
export type UnlockDepositForB2CPropertyPostMutationHookResult = ReturnType<typeof useUnlockDepositForB2CPropertyPostMutation>;
export type UnlockDepositForB2CPropertyPostMutationResult = ApolloReactCommon.MutationResult<UnlockDepositForB2CPropertyPostMutation>;
export type UnlockDepositForB2CPropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<UnlockDepositForB2CPropertyPostMutation, UnlockDepositForB2CPropertyPostMutationVariables>;
export const VnpayPayDepositTransactionDocument = gql`
    mutation VnpayPayDepositTransaction($payDepositTransactionInput: PayDepositTransactionInput!) {
  vnpayPayDepositTransaction(
    payDepositTransactionInput: $payDepositTransactionInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    linkPaymentUrl
    returnUrl
    ipnUrl
    disablePayment
    transactionId
  }
}
    `;
export type VnpayPayDepositTransactionMutationFn = ApolloReactCommon.MutationFunction<VnpayPayDepositTransactionMutation, VnpayPayDepositTransactionMutationVariables>;

/**
 * __useVnpayPayDepositTransactionMutation__
 *
 * To run a mutation, you first call `useVnpayPayDepositTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVnpayPayDepositTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [vnpayPayDepositTransactionMutation, { data, loading, error }] = useVnpayPayDepositTransactionMutation({
 *   variables: {
 *      payDepositTransactionInput: // value for 'payDepositTransactionInput'
 *   },
 * });
 */
export function useVnpayPayDepositTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<VnpayPayDepositTransactionMutation, VnpayPayDepositTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<VnpayPayDepositTransactionMutation, VnpayPayDepositTransactionMutationVariables>(VnpayPayDepositTransactionDocument, baseOptions);
      }
export type VnpayPayDepositTransactionMutationHookResult = ReturnType<typeof useVnpayPayDepositTransactionMutation>;
export type VnpayPayDepositTransactionMutationResult = ApolloReactCommon.MutationResult<VnpayPayDepositTransactionMutation>;
export type VnpayPayDepositTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<VnpayPayDepositTransactionMutation, VnpayPayDepositTransactionMutationVariables>;
export const GetSecuredFileUploadUrlDocument = gql`
    query GetSecuredFileUploadUrl($payload: GetSecuredFileUploadUrlInput!) {
  getSecuredFileUploadUrl(request: $payload) {
    fileUrl
    fileName
    signatureKey
    uploadContainer
  }
}
    `;

/**
 * __useGetSecuredFileUploadUrlQuery__
 *
 * To run a query within a React component, call `useGetSecuredFileUploadUrlQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSecuredFileUploadUrlQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSecuredFileUploadUrlQuery({
 *   variables: {
 *      payload: // value for 'payload'
 *   },
 * });
 */
export function useGetSecuredFileUploadUrlQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSecuredFileUploadUrlQuery, GetSecuredFileUploadUrlQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSecuredFileUploadUrlQuery, GetSecuredFileUploadUrlQueryVariables>(GetSecuredFileUploadUrlDocument, baseOptions);
      }
export function useGetSecuredFileUploadUrlLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSecuredFileUploadUrlQuery, GetSecuredFileUploadUrlQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSecuredFileUploadUrlQuery, GetSecuredFileUploadUrlQueryVariables>(GetSecuredFileUploadUrlDocument, baseOptions);
        }
export type GetSecuredFileUploadUrlQueryHookResult = ReturnType<typeof useGetSecuredFileUploadUrlQuery>;
export type GetSecuredFileUploadUrlLazyQueryHookResult = ReturnType<typeof useGetSecuredFileUploadUrlLazyQuery>;
export type GetSecuredFileUploadUrlQueryResult = ApolloReactCommon.QueryResult<GetSecuredFileUploadUrlQuery, GetSecuredFileUploadUrlQueryVariables>;
export const GetSecuredFileUrlDocument = gql`
    query GetSecuredFileUrl($payload: GetSecuredFileUrlInput!) {
  getSecuredFileUrl(request: $payload) {
    securedUrl
    errorCode
    errorMessage
  }
}
    `;

/**
 * __useGetSecuredFileUrlQuery__
 *
 * To run a query within a React component, call `useGetSecuredFileUrlQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSecuredFileUrlQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSecuredFileUrlQuery({
 *   variables: {
 *      payload: // value for 'payload'
 *   },
 * });
 */
export function useGetSecuredFileUrlQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSecuredFileUrlQuery, GetSecuredFileUrlQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSecuredFileUrlQuery, GetSecuredFileUrlQueryVariables>(GetSecuredFileUrlDocument, baseOptions);
      }
export function useGetSecuredFileUrlLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSecuredFileUrlQuery, GetSecuredFileUrlQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSecuredFileUrlQuery, GetSecuredFileUrlQueryVariables>(GetSecuredFileUrlDocument, baseOptions);
        }
export type GetSecuredFileUrlQueryHookResult = ReturnType<typeof useGetSecuredFileUrlQuery>;
export type GetSecuredFileUrlLazyQueryHookResult = ReturnType<typeof useGetSecuredFileUrlLazyQuery>;
export type GetSecuredFileUrlQueryResult = ApolloReactCommon.QueryResult<GetSecuredFileUrlQuery, GetSecuredFileUrlQueryVariables>;
export const GetFoInvestorByCodeDocument = gql`
    query GetFOInvestorByCode($foInvestorCode: String!) {
  getFOInvestorByCode(foInvestorCode: $foInvestorCode) {
    errorCode
    errorMessage
    errorMessageCode
    investorInfoDto {
      investorId
      investorCode
      investorName
      website
      logo
      phoneNumber
      areas
      establishmentDate
      charterCapital
      introduce
      activityImages
      createdBy
      createdByUserFullName
      createdDatetime
      lastModified
      deletedDatetime
      deletedBy
      isActive
      isDeleted
      detailPath
      projectCountByStatuses {
        statusName
        count
      }
      address {
        countryId
        cityId
        districtId
        wardId
        streetName
        homeAddress
      }
    }
  }
}
    `;

/**
 * __useGetFoInvestorByCodeQuery__
 *
 * To run a query within a React component, call `useGetFoInvestorByCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFoInvestorByCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFoInvestorByCodeQuery({
 *   variables: {
 *      foInvestorCode: // value for 'foInvestorCode'
 *   },
 * });
 */
export function useGetFoInvestorByCodeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFoInvestorByCodeQuery, GetFoInvestorByCodeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetFoInvestorByCodeQuery, GetFoInvestorByCodeQueryVariables>(GetFoInvestorByCodeDocument, baseOptions);
      }
export function useGetFoInvestorByCodeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFoInvestorByCodeQuery, GetFoInvestorByCodeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFoInvestorByCodeQuery, GetFoInvestorByCodeQueryVariables>(GetFoInvestorByCodeDocument, baseOptions);
        }
export type GetFoInvestorByCodeQueryHookResult = ReturnType<typeof useGetFoInvestorByCodeQuery>;
export type GetFoInvestorByCodeLazyQueryHookResult = ReturnType<typeof useGetFoInvestorByCodeLazyQuery>;
export type GetFoInvestorByCodeQueryResult = ApolloReactCommon.QueryResult<GetFoInvestorByCodeQuery, GetFoInvestorByCodeQueryVariables>;
export const GetFoProjectsOfInvestorByIdDocument = gql`
    query GetFOProjectsOfInvestorById($input: GetFOProjectsOfInvestorInput!) {
  getFOProjectsOfInvestorById(getFOProjectsOfInvestorInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    totalCount
    projectDtos {
      projectId
      projectCode
      projectName
      propertyTypeId
      projectAddressId
      projectStatusId
      projectPostStatusId
      projectProgress
      minPrice
      projectDescription
      featurePhotos
      isFeaturesProject
      investorOwnerName
      investorOwnerInfo
      investorOwnerLogo
      commissionRates
      partnersInfo
      bankInfo
      overviewDescription
      overviewMediaInfo
      sizingDescription
      sizingMediaInfo
      locationDescription
      locationMediaInfo
      facilitiesDescription
      facilitiesMediaInfo
      groundPlanDescription
      groundPlanMediaInfo
      saleProgramDescription
      saleProgramMediaInfo
      createdDatetime
      createdByUserId
      longitude
      latitude
      sortOrder
      projectStatusName
      totalFollower
      totalShare
      isFollowed
      totalArea
      overallDescription
      startYear
      mediaLibrary
      detailPath
      investorId
      investorDetailPath
      totalBlock
      totalPropertyPost
      projectAddress {
        cityId
        countryId
        districtId
        wardId
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
    }
  }
}
    `;

/**
 * __useGetFoProjectsOfInvestorByIdQuery__
 *
 * To run a query within a React component, call `useGetFoProjectsOfInvestorByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFoProjectsOfInvestorByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFoProjectsOfInvestorByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetFoProjectsOfInvestorByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFoProjectsOfInvestorByIdQuery, GetFoProjectsOfInvestorByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetFoProjectsOfInvestorByIdQuery, GetFoProjectsOfInvestorByIdQueryVariables>(GetFoProjectsOfInvestorByIdDocument, baseOptions);
      }
export function useGetFoProjectsOfInvestorByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFoProjectsOfInvestorByIdQuery, GetFoProjectsOfInvestorByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFoProjectsOfInvestorByIdQuery, GetFoProjectsOfInvestorByIdQueryVariables>(GetFoProjectsOfInvestorByIdDocument, baseOptions);
        }
export type GetFoProjectsOfInvestorByIdQueryHookResult = ReturnType<typeof useGetFoProjectsOfInvestorByIdQuery>;
export type GetFoProjectsOfInvestorByIdLazyQueryHookResult = ReturnType<typeof useGetFoProjectsOfInvestorByIdLazyQuery>;
export type GetFoProjectsOfInvestorByIdQueryResult = ApolloReactCommon.QueryResult<GetFoProjectsOfInvestorByIdQuery, GetFoProjectsOfInvestorByIdQueryVariables>;
export const SearchAllFoInvestorsDocument = gql`
    query SearchAllFOInvestors($input: SearchFOInvestorInput!) {
  searchFOInvestors(searchFOInvestorInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    investorInfoDtos {
      investorId
      investorCode
      logo
      investorName
      website
      phoneNumber
      areas
      establishmentDate
      charterCapital
      introduce
      activityImages
      createdBy
      createdByUserFullName
      createdDatetime
      createdByUserName
      lastModified
      modifiedByUserName
      deletedDatetime
      deletedBy
      isActive
      isDeleted
      detailPath
      address {
        countryId
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        streetName
        homeAddress
      }
    }
    totalCount
  }
}
    `;

/**
 * __useSearchAllFoInvestorsQuery__
 *
 * To run a query within a React component, call `useSearchAllFoInvestorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchAllFoInvestorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchAllFoInvestorsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchAllFoInvestorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchAllFoInvestorsQuery, SearchAllFoInvestorsQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchAllFoInvestorsQuery, SearchAllFoInvestorsQueryVariables>(SearchAllFoInvestorsDocument, baseOptions);
      }
export function useSearchAllFoInvestorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchAllFoInvestorsQuery, SearchAllFoInvestorsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchAllFoInvestorsQuery, SearchAllFoInvestorsQueryVariables>(SearchAllFoInvestorsDocument, baseOptions);
        }
export type SearchAllFoInvestorsQueryHookResult = ReturnType<typeof useSearchAllFoInvestorsQuery>;
export type SearchAllFoInvestorsLazyQueryHookResult = ReturnType<typeof useSearchAllFoInvestorsLazyQuery>;
export type SearchAllFoInvestorsQueryResult = ApolloReactCommon.QueryResult<SearchAllFoInvestorsQuery, SearchAllFoInvestorsQueryVariables>;
export const SearchOtherInvestorsDocument = gql`
    query SearchOtherInvestors($input: SearchFOInvestorInput!) {
  searchFOInvestors(searchFOInvestorInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    investorInfoDtos {
      investorId
      investorCode
      logo
      investorName
      detailPath
      isActive
      isDeleted
    }
    totalCount
  }
}
    `;

/**
 * __useSearchOtherInvestorsQuery__
 *
 * To run a query within a React component, call `useSearchOtherInvestorsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchOtherInvestorsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchOtherInvestorsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchOtherInvestorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchOtherInvestorsQuery, SearchOtherInvestorsQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchOtherInvestorsQuery, SearchOtherInvestorsQueryVariables>(SearchOtherInvestorsDocument, baseOptions);
      }
export function useSearchOtherInvestorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchOtherInvestorsQuery, SearchOtherInvestorsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchOtherInvestorsQuery, SearchOtherInvestorsQueryVariables>(SearchOtherInvestorsDocument, baseOptions);
        }
export type SearchOtherInvestorsQueryHookResult = ReturnType<typeof useSearchOtherInvestorsQuery>;
export type SearchOtherInvestorsLazyQueryHookResult = ReturnType<typeof useSearchOtherInvestorsLazyQuery>;
export type SearchOtherInvestorsQueryResult = ApolloReactCommon.QueryResult<SearchOtherInvestorsQuery, SearchOtherInvestorsQueryVariables>;
export const CreateC2CDemandDocument = gql`
    mutation CreateC2CDemand($request: CreateC2CDemandInput!) {
  createC2CDemand(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    c2CDemandId
  }
}
    `;
export type CreateC2CDemandMutationFn = ApolloReactCommon.MutationFunction<CreateC2CDemandMutation, CreateC2CDemandMutationVariables>;

/**
 * __useCreateC2CDemandMutation__
 *
 * To run a mutation, you first call `useCreateC2CDemandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateC2CDemandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createC2CDemandMutation, { data, loading, error }] = useCreateC2CDemandMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useCreateC2CDemandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateC2CDemandMutation, CreateC2CDemandMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateC2CDemandMutation, CreateC2CDemandMutationVariables>(CreateC2CDemandDocument, baseOptions);
      }
export type CreateC2CDemandMutationHookResult = ReturnType<typeof useCreateC2CDemandMutation>;
export type CreateC2CDemandMutationResult = ApolloReactCommon.MutationResult<CreateC2CDemandMutation>;
export type CreateC2CDemandMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateC2CDemandMutation, CreateC2CDemandMutationVariables>;
export const GetC2CContactTradingsByC2CDemandIdDocument = gql`
    query GetC2CContactTradingsByC2CDemandId($c2CDemandId: Uuid!, $page: Int, $pageSize: Int, $order_by: C2CDemandContactTradingDtoSort!) {
  getC2CContactTradingsByC2CDemandId(
    c2CDemandId: $c2CDemandId
    page: $page
    pageSize: $pageSize
    order_by: $order_by
  ) {
    edges {
      c2CDemandCode
      c2CDemandId
      createdDatetime
      createdByUserId
      contactTradingId
      contactTradingCode
      propertyPostId
      propertyCode
    }
    totalCount
  }
}
    `;

/**
 * __useGetC2CContactTradingsByC2CDemandIdQuery__
 *
 * To run a query within a React component, call `useGetC2CContactTradingsByC2CDemandIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetC2CContactTradingsByC2CDemandIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetC2CContactTradingsByC2CDemandIdQuery({
 *   variables: {
 *      c2CDemandId: // value for 'c2CDemandId'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetC2CContactTradingsByC2CDemandIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetC2CContactTradingsByC2CDemandIdQuery, GetC2CContactTradingsByC2CDemandIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetC2CContactTradingsByC2CDemandIdQuery, GetC2CContactTradingsByC2CDemandIdQueryVariables>(GetC2CContactTradingsByC2CDemandIdDocument, baseOptions);
      }
export function useGetC2CContactTradingsByC2CDemandIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetC2CContactTradingsByC2CDemandIdQuery, GetC2CContactTradingsByC2CDemandIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetC2CContactTradingsByC2CDemandIdQuery, GetC2CContactTradingsByC2CDemandIdQueryVariables>(GetC2CContactTradingsByC2CDemandIdDocument, baseOptions);
        }
export type GetC2CContactTradingsByC2CDemandIdQueryHookResult = ReturnType<typeof useGetC2CContactTradingsByC2CDemandIdQuery>;
export type GetC2CContactTradingsByC2CDemandIdLazyQueryHookResult = ReturnType<typeof useGetC2CContactTradingsByC2CDemandIdLazyQuery>;
export type GetC2CContactTradingsByC2CDemandIdQueryResult = ApolloReactCommon.QueryResult<GetC2CContactTradingsByC2CDemandIdQuery, GetC2CContactTradingsByC2CDemandIdQueryVariables>;
export const GetTopenerReadC2CDemandDocument = gql`
    mutation GetTopenerReadC2CDemand($c2CDemandId: Uuid!) {
  topenerReadC2CDemand(c2CDemandId: $c2CDemandId) {
    errorCode
    errorMessage
    c2CDemandDto {
      c2CDemandCode
      c2CDemandId
      title
      propertyTypeId
      propertyTypeName
      forSale
      placeDto {
        cityId
        cityName
        districts {
          districtName
          districtId
        }
      }
      priceRangeDto {
        priceTo
        priceFrom
      }
      squareRangeDto {
        squareTo
        squareFrom
      }
      propertyLocation
      projectId
      numberOfBathrooms
      numberOfBedrooms
      directionJson
      isUserReadNotification
      isInterested
      createdDatetime
      requesterIsBuyer
      requesterId
    }
  }
}
    `;
export type GetTopenerReadC2CDemandMutationFn = ApolloReactCommon.MutationFunction<GetTopenerReadC2CDemandMutation, GetTopenerReadC2CDemandMutationVariables>;

/**
 * __useGetTopenerReadC2CDemandMutation__
 *
 * To run a mutation, you first call `useGetTopenerReadC2CDemandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGetTopenerReadC2CDemandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [getTopenerReadC2CDemandMutation, { data, loading, error }] = useGetTopenerReadC2CDemandMutation({
 *   variables: {
 *      c2CDemandId: // value for 'c2CDemandId'
 *   },
 * });
 */
export function useGetTopenerReadC2CDemandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GetTopenerReadC2CDemandMutation, GetTopenerReadC2CDemandMutationVariables>) {
        return ApolloReactHooks.useMutation<GetTopenerReadC2CDemandMutation, GetTopenerReadC2CDemandMutationVariables>(GetTopenerReadC2CDemandDocument, baseOptions);
      }
export type GetTopenerReadC2CDemandMutationHookResult = ReturnType<typeof useGetTopenerReadC2CDemandMutation>;
export type GetTopenerReadC2CDemandMutationResult = ApolloReactCommon.MutationResult<GetTopenerReadC2CDemandMutation>;
export type GetTopenerReadC2CDemandMutationOptions = ApolloReactCommon.BaseMutationOptions<GetTopenerReadC2CDemandMutation, GetTopenerReadC2CDemandMutationVariables>;
export const GetContactTradingsForC2CDemandDocument = gql`
    query GetContactTradingsForC2CDemand($where: ContactTradingForC2CDemandDtoFilter) {
  getContactTradingsForC2CDemand(where: $where) {
    edges {
      contactTradingId
      contactTradingStatusId
      createdDatetime
      propertyDetailPath
    }
  }
}
    `;

/**
 * __useGetContactTradingsForC2CDemandQuery__
 *
 * To run a query within a React component, call `useGetContactTradingsForC2CDemandQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetContactTradingsForC2CDemandQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetContactTradingsForC2CDemandQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetContactTradingsForC2CDemandQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetContactTradingsForC2CDemandQuery, GetContactTradingsForC2CDemandQueryVariables>) {
        return ApolloReactHooks.useQuery<GetContactTradingsForC2CDemandQuery, GetContactTradingsForC2CDemandQueryVariables>(GetContactTradingsForC2CDemandDocument, baseOptions);
      }
export function useGetContactTradingsForC2CDemandLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetContactTradingsForC2CDemandQuery, GetContactTradingsForC2CDemandQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetContactTradingsForC2CDemandQuery, GetContactTradingsForC2CDemandQueryVariables>(GetContactTradingsForC2CDemandDocument, baseOptions);
        }
export type GetContactTradingsForC2CDemandQueryHookResult = ReturnType<typeof useGetContactTradingsForC2CDemandQuery>;
export type GetContactTradingsForC2CDemandLazyQueryHookResult = ReturnType<typeof useGetContactTradingsForC2CDemandLazyQuery>;
export type GetContactTradingsForC2CDemandQueryResult = ApolloReactCommon.QueryResult<GetContactTradingsForC2CDemandQuery, GetContactTradingsForC2CDemandQueryVariables>;
export const GetRequesterByIdDocument = gql`
    query GetRequesterById($customerId: Uuid) {
  customerById(customerId: $customerId) {
    customerEmail
    customerFullName
    customerPhone
  }
}
    `;

/**
 * __useGetRequesterByIdQuery__
 *
 * To run a query within a React component, call `useGetRequesterByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequesterByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequesterByIdQuery({
 *   variables: {
 *      customerId: // value for 'customerId'
 *   },
 * });
 */
export function useGetRequesterByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRequesterByIdQuery, GetRequesterByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetRequesterByIdQuery, GetRequesterByIdQueryVariables>(GetRequesterByIdDocument, baseOptions);
      }
export function useGetRequesterByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRequesterByIdQuery, GetRequesterByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetRequesterByIdQuery, GetRequesterByIdQueryVariables>(GetRequesterByIdDocument, baseOptions);
        }
export type GetRequesterByIdQueryHookResult = ReturnType<typeof useGetRequesterByIdQuery>;
export type GetRequesterByIdLazyQueryHookResult = ReturnType<typeof useGetRequesterByIdLazyQuery>;
export type GetRequesterByIdQueryResult = ApolloReactCommon.QueryResult<GetRequesterByIdQuery, GetRequesterByIdQueryVariables>;
export const GetUserC2CDemandsDocument = gql`
    query GetUserC2CDemands($page: Int, $pageSize: Int, $request: GetUserC2CDemandsInput!, $order_by: C2CDemandDtoSort!, $where: C2CDemandDtoFilter!) {
  getUserC2CDemands(
    page: $page
    pageSize: $pageSize
    request: $request
    order_by: $order_by
    where: $where
  ) {
    edges {
      c2CDemandCode
      c2CDemandId
      title
      propertyTypeName
      forSale
      placeDto {
        cityId
        cityName
        districts {
          districtName
          districtId
        }
      }
      priceRangeDto {
        priceTo
        priceFrom
      }
      createdDatetime
    }
    totalCount
  }
}
    `;

/**
 * __useGetUserC2CDemandsQuery__
 *
 * To run a query within a React component, call `useGetUserC2CDemandsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserC2CDemandsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserC2CDemandsQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      request: // value for 'request'
 *      order_by: // value for 'order_by'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetUserC2CDemandsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserC2CDemandsQuery, GetUserC2CDemandsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserC2CDemandsQuery, GetUserC2CDemandsQueryVariables>(GetUserC2CDemandsDocument, baseOptions);
      }
export function useGetUserC2CDemandsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserC2CDemandsQuery, GetUserC2CDemandsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserC2CDemandsQuery, GetUserC2CDemandsQueryVariables>(GetUserC2CDemandsDocument, baseOptions);
        }
export type GetUserC2CDemandsQueryHookResult = ReturnType<typeof useGetUserC2CDemandsQuery>;
export type GetUserC2CDemandsLazyQueryHookResult = ReturnType<typeof useGetUserC2CDemandsLazyQuery>;
export type GetUserC2CDemandsQueryResult = ApolloReactCommon.QueryResult<GetUserC2CDemandsQuery, GetUserC2CDemandsQueryVariables>;
export const SearchPropertyPostsOnC2CDemandForRentDocument = gql`
    query SearchPropertyPostsOnC2CDemandForRent($input: SearchPropertyPostsC2CDemandForRentInput!) {
  searchPropertyPostsOnC2CDemandForRent(input: $input) {
    errorCode
    errorMessage
    totalCount
    propertyPostForC2CDemandDtos {
      propertyPostId
      price
      postTitle
      propertyAddressDto {
        homeAddress
        streetName
        wardName
        districtName
        cityName
      }
      commission
      propertyPostApprovalStatusId
      propertyTypeId
      propertyCode
      propertyTypeName
      direction
      forRent
      forSale
      isSold
      isRented
      saleCommissionCurrencyUnitId
      detailPath
      numberOfBedrooms
      numberOfBathrooms
      buildingArea
    }
  }
}
    `;

/**
 * __useSearchPropertyPostsOnC2CDemandForRentQuery__
 *
 * To run a query within a React component, call `useSearchPropertyPostsOnC2CDemandForRentQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPropertyPostsOnC2CDemandForRentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPropertyPostsOnC2CDemandForRentQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchPropertyPostsOnC2CDemandForRentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchPropertyPostsOnC2CDemandForRentQuery, SearchPropertyPostsOnC2CDemandForRentQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchPropertyPostsOnC2CDemandForRentQuery, SearchPropertyPostsOnC2CDemandForRentQueryVariables>(SearchPropertyPostsOnC2CDemandForRentDocument, baseOptions);
      }
export function useSearchPropertyPostsOnC2CDemandForRentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchPropertyPostsOnC2CDemandForRentQuery, SearchPropertyPostsOnC2CDemandForRentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchPropertyPostsOnC2CDemandForRentQuery, SearchPropertyPostsOnC2CDemandForRentQueryVariables>(SearchPropertyPostsOnC2CDemandForRentDocument, baseOptions);
        }
export type SearchPropertyPostsOnC2CDemandForRentQueryHookResult = ReturnType<typeof useSearchPropertyPostsOnC2CDemandForRentQuery>;
export type SearchPropertyPostsOnC2CDemandForRentLazyQueryHookResult = ReturnType<typeof useSearchPropertyPostsOnC2CDemandForRentLazyQuery>;
export type SearchPropertyPostsOnC2CDemandForRentQueryResult = ApolloReactCommon.QueryResult<SearchPropertyPostsOnC2CDemandForRentQuery, SearchPropertyPostsOnC2CDemandForRentQueryVariables>;
export const SearchPropertyPostsOnC2CDemandForSaleDocument = gql`
    query SearchPropertyPostsOnC2CDemandForSale($input: SearchPropertyPostsC2CDemandForSaleInput!) {
  searchPropertyPostsOnC2CDemandForSale(input: $input) {
    errorCode
    errorMessage
    totalCount
    propertyPostForC2CDemandDtos {
      propertyPostId
      price
      postTitle
      propertyAddressDto {
        homeAddress
        streetName
        wardName
        districtName
        cityName
      }
      commission
      propertyPostApprovalStatusId
      propertyTypeId
      propertyCode
      propertyTypeName
      direction
      forRent
      forSale
      isSold
      isRented
      saleCommissionCurrencyUnitId
      images
      detailPath
      numberOfBedrooms
      numberOfBathrooms
      buildingArea
    }
  }
}
    `;

/**
 * __useSearchPropertyPostsOnC2CDemandForSaleQuery__
 *
 * To run a query within a React component, call `useSearchPropertyPostsOnC2CDemandForSaleQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPropertyPostsOnC2CDemandForSaleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPropertyPostsOnC2CDemandForSaleQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchPropertyPostsOnC2CDemandForSaleQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchPropertyPostsOnC2CDemandForSaleQuery, SearchPropertyPostsOnC2CDemandForSaleQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchPropertyPostsOnC2CDemandForSaleQuery, SearchPropertyPostsOnC2CDemandForSaleQueryVariables>(SearchPropertyPostsOnC2CDemandForSaleDocument, baseOptions);
      }
export function useSearchPropertyPostsOnC2CDemandForSaleLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchPropertyPostsOnC2CDemandForSaleQuery, SearchPropertyPostsOnC2CDemandForSaleQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchPropertyPostsOnC2CDemandForSaleQuery, SearchPropertyPostsOnC2CDemandForSaleQueryVariables>(SearchPropertyPostsOnC2CDemandForSaleDocument, baseOptions);
        }
export type SearchPropertyPostsOnC2CDemandForSaleQueryHookResult = ReturnType<typeof useSearchPropertyPostsOnC2CDemandForSaleQuery>;
export type SearchPropertyPostsOnC2CDemandForSaleLazyQueryHookResult = ReturnType<typeof useSearchPropertyPostsOnC2CDemandForSaleLazyQuery>;
export type SearchPropertyPostsOnC2CDemandForSaleQueryResult = ApolloReactCommon.QueryResult<SearchPropertyPostsOnC2CDemandForSaleQuery, SearchPropertyPostsOnC2CDemandForSaleQueryVariables>;
export const SkipPropertyPostC2CDemandDocument = gql`
    mutation SkipPropertyPostC2CDemand($request: SkipPropertyPostC2CDemandInput!) {
  skipPropertyPostC2CDemand(request: $request) {
    errorCode
    errorMessage
    c2CDemandId
  }
}
    `;
export type SkipPropertyPostC2CDemandMutationFn = ApolloReactCommon.MutationFunction<SkipPropertyPostC2CDemandMutation, SkipPropertyPostC2CDemandMutationVariables>;

/**
 * __useSkipPropertyPostC2CDemandMutation__
 *
 * To run a mutation, you first call `useSkipPropertyPostC2CDemandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSkipPropertyPostC2CDemandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [skipPropertyPostC2CDemandMutation, { data, loading, error }] = useSkipPropertyPostC2CDemandMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useSkipPropertyPostC2CDemandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SkipPropertyPostC2CDemandMutation, SkipPropertyPostC2CDemandMutationVariables>) {
        return ApolloReactHooks.useMutation<SkipPropertyPostC2CDemandMutation, SkipPropertyPostC2CDemandMutationVariables>(SkipPropertyPostC2CDemandDocument, baseOptions);
      }
export type SkipPropertyPostC2CDemandMutationHookResult = ReturnType<typeof useSkipPropertyPostC2CDemandMutation>;
export type SkipPropertyPostC2CDemandMutationResult = ApolloReactCommon.MutationResult<SkipPropertyPostC2CDemandMutation>;
export type SkipPropertyPostC2CDemandMutationOptions = ApolloReactCommon.BaseMutationOptions<SkipPropertyPostC2CDemandMutation, SkipPropertyPostC2CDemandMutationVariables>;
export const UpdateC2CDemandDocument = gql`
    mutation UpdateC2CDemand($request: UpdateC2CDemandInput!) {
  updateC2CDemand(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    c2CDemandId
  }
}
    `;
export type UpdateC2CDemandMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CDemandMutation, UpdateC2CDemandMutationVariables>;

/**
 * __useUpdateC2CDemandMutation__
 *
 * To run a mutation, you first call `useUpdateC2CDemandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CDemandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CDemandMutation, { data, loading, error }] = useUpdateC2CDemandMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useUpdateC2CDemandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CDemandMutation, UpdateC2CDemandMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CDemandMutation, UpdateC2CDemandMutationVariables>(UpdateC2CDemandDocument, baseOptions);
      }
export type UpdateC2CDemandMutationHookResult = ReturnType<typeof useUpdateC2CDemandMutation>;
export type UpdateC2CDemandMutationResult = ApolloReactCommon.MutationResult<UpdateC2CDemandMutation>;
export type UpdateC2CDemandMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CDemandMutation, UpdateC2CDemandMutationVariables>;
export const UserInterestedC2CDemandDocument = gql`
    mutation UserInterestedC2CDemand($request: UserInterestedC2CDemandInput!) {
  userInterestedC2CDemand(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    c2CDemandId
  }
}
    `;
export type UserInterestedC2CDemandMutationFn = ApolloReactCommon.MutationFunction<UserInterestedC2CDemandMutation, UserInterestedC2CDemandMutationVariables>;

/**
 * __useUserInterestedC2CDemandMutation__
 *
 * To run a mutation, you first call `useUserInterestedC2CDemandMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserInterestedC2CDemandMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userInterestedC2CDemandMutation, { data, loading, error }] = useUserInterestedC2CDemandMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useUserInterestedC2CDemandMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UserInterestedC2CDemandMutation, UserInterestedC2CDemandMutationVariables>) {
        return ApolloReactHooks.useMutation<UserInterestedC2CDemandMutation, UserInterestedC2CDemandMutationVariables>(UserInterestedC2CDemandDocument, baseOptions);
      }
export type UserInterestedC2CDemandMutationHookResult = ReturnType<typeof useUserInterestedC2CDemandMutation>;
export type UserInterestedC2CDemandMutationResult = ApolloReactCommon.MutationResult<UserInterestedC2CDemandMutation>;
export type UserInterestedC2CDemandMutationOptions = ApolloReactCommon.BaseMutationOptions<UserInterestedC2CDemandMutation, UserInterestedC2CDemandMutationVariables>;
export const CheckMobileAppVersionStableDocument = gql`
    query CheckMobileAppVersionStable($input: CheckMobileAppVersionStableInput!) {
  checkMobileAppVersionStable(checkMobileAppVersionStableInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    mobileAppVersionStable {
      mobileOs
      mobileVersion
      updateOption
      releaseNotes
      releaseUrl
    }
  }
}
    `;

/**
 * __useCheckMobileAppVersionStableQuery__
 *
 * To run a query within a React component, call `useCheckMobileAppVersionStableQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckMobileAppVersionStableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckMobileAppVersionStableQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckMobileAppVersionStableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckMobileAppVersionStableQuery, CheckMobileAppVersionStableQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckMobileAppVersionStableQuery, CheckMobileAppVersionStableQueryVariables>(CheckMobileAppVersionStableDocument, baseOptions);
      }
export function useCheckMobileAppVersionStableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckMobileAppVersionStableQuery, CheckMobileAppVersionStableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckMobileAppVersionStableQuery, CheckMobileAppVersionStableQueryVariables>(CheckMobileAppVersionStableDocument, baseOptions);
        }
export type CheckMobileAppVersionStableQueryHookResult = ReturnType<typeof useCheckMobileAppVersionStableQuery>;
export type CheckMobileAppVersionStableLazyQueryHookResult = ReturnType<typeof useCheckMobileAppVersionStableLazyQuery>;
export type CheckMobileAppVersionStableQueryResult = ApolloReactCommon.QueryResult<CheckMobileAppVersionStableQuery, CheckMobileAppVersionStableQueryVariables>;
export const GetBanksDocument = gql`
    query GetBanks($pageSize: Int) {
  banks(pageSize: $pageSize) {
    edges {
      bankId
      bankName
      bankDescription
      bankCode
      isActive
    }
  }
}
    `;

/**
 * __useGetBanksQuery__
 *
 * To run a query within a React component, call `useGetBanksQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBanksQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBanksQuery({
 *   variables: {
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetBanksQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBanksQuery, GetBanksQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBanksQuery, GetBanksQueryVariables>(GetBanksDocument, baseOptions);
      }
export function useGetBanksLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBanksQuery, GetBanksQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBanksQuery, GetBanksQueryVariables>(GetBanksDocument, baseOptions);
        }
export type GetBanksQueryHookResult = ReturnType<typeof useGetBanksQuery>;
export type GetBanksLazyQueryHookResult = ReturnType<typeof useGetBanksLazyQuery>;
export type GetBanksQueryResult = ApolloReactCommon.QueryResult<GetBanksQuery, GetBanksQueryVariables>;
export const GetImageUploadUrlDocument = gql`
    query GetImageUploadUrl($payload: GetImageUploadUrlInput!) {
  getImageUploadUrl(request: $payload) {
    fileUrl
    fileName
    signatureKey
    uploadContainer
  }
}
    `;

/**
 * __useGetImageUploadUrlQuery__
 *
 * To run a query within a React component, call `useGetImageUploadUrlQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetImageUploadUrlQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetImageUploadUrlQuery({
 *   variables: {
 *      payload: // value for 'payload'
 *   },
 * });
 */
export function useGetImageUploadUrlQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetImageUploadUrlQuery, GetImageUploadUrlQueryVariables>) {
        return ApolloReactHooks.useQuery<GetImageUploadUrlQuery, GetImageUploadUrlQueryVariables>(GetImageUploadUrlDocument, baseOptions);
      }
export function useGetImageUploadUrlLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetImageUploadUrlQuery, GetImageUploadUrlQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetImageUploadUrlQuery, GetImageUploadUrlQueryVariables>(GetImageUploadUrlDocument, baseOptions);
        }
export type GetImageUploadUrlQueryHookResult = ReturnType<typeof useGetImageUploadUrlQuery>;
export type GetImageUploadUrlLazyQueryHookResult = ReturnType<typeof useGetImageUploadUrlLazyQuery>;
export type GetImageUploadUrlQueryResult = ApolloReactCommon.QueryResult<GetImageUploadUrlQuery, GetImageUploadUrlQueryVariables>;
export const GetMasterDataDocument = gql`
    query GetMasterData {
  contactTradingStatus {
    edges {
      contactTradingStatusName
      contactTradingStatusId
      contactTradingStatusDescription
    }
  }
  contactTradingRelevantPropertyStatus {
    edges {
      contactTradingPropertyConsultationStatusId
      contactTradingPropertyConsultationStatusName
      contactTradingPropertyConsultationStatusDescription
    }
  }
  projectStatus {
    edges {
      projectStatusName
      projectStatusId
      projectStatusDescription
    }
  }
  saleSeasonStatuses {
    edges {
      saleSeasonStatusId
      saleSeasonStatusName
      saleSeasonStatusDescription
    }
  }
  saleTrackingStatus {
    edges {
      saleTrackingStatusId
      saleTrackingStatusName
      saleTrackingStatusDescription
    }
  }
  bookingStatus {
    edges {
      bookingStatusId
      bookingStatusName
      bookingStatusDescription
    }
  }
  projectPostStatus {
    edges {
      projectPostStatusName
      projectPostStatusId
      projectPostStatusDescription
    }
  }
  agentRankings {
    totalCount
    edges {
      agentRankingId
      agentRankingName
      agentRankingDescription
    }
  }
  propertyTypes {
    edges {
      propertyTypeId
      propertyTypeName
      propertyTypeDescription
      isActive
    }
  }
  propertyPostStatus {
    edges {
      propertyPostStatusId
      propertyPostStatusName
      propertyPostStatusDescription
      isActive
    }
  }
  legalInfoes {
    edges {
      legalInfoId
      legalInfoName
      legalInfoDescription
      isActive
      isDeleted
    }
  }
  banks {
    edges {
      bankId
      bankName
      bankDescription
      bankCode
      isActive
    }
  }
  unitOfMeasures {
    edges {
      unitOfMeasureId
      unitOfMeasureName
      unitOfMeasureCode
      multiplyWithBaseUnit
      isRound
    }
  }
  propertyPostApprovalStatus {
    totalCount
    edges {
      propertyPostApprovalStatusId
      propertyPostApprovalStatusName
      propertyPostApprovalStatusDescription
    }
  }
  postTypes {
    edges {
      postTypeId
      postTypeName
    }
  }
  cities(pageSize: 1000) {
    totalCount
    edges {
      cityId
      cityName
    }
  }
  pendingReasons {
    edges {
      pendingReasonId
      pendingReasonName
      pendingReasonDescription
    }
  }
  subscriptionPackageStatus {
    edges {
      subscriptionPackageStatusId
      subscriptionPackageStatusName
      subscriptionPackageStatusDescription
    }
  }
  internalFacilities {
    edges {
      internalFacilityId
      internalFacilityName
      internalFacilityCode
    }
  }
  nearFacilities {
    edges {
      nearFacilityId
      nearFacilityName
      nearFacilityCode
    }
  }
  fundAccounts {
    edges {
      cityId
      fundAccountId
      fundAccountCode
      branchAddress
      branchName
      phoneNumber
      faxNumber
      fundEmail
    }
  }
  paymentUnits {
    edges {
      paymentUnitId
      paymentMethod
      paymentUnitCode
      paymentUnitName
    }
  }
  feedObjectTypes(pageSize: 999) {
    edges {
      feedObjectTypeId
      feedObjectTypeName
      feedObjectTypeDescription
      isActive
    }
    totalCount
  }
  getContactTradingRejectReasons {
    edges {
      contactTradingRejectReasonId
      rejectReasonName
      rejectReasonDescription
      sortOrder
      isActive
    }
  }
  getC2CDepositRejectReasons(order_by: {sortOrder: ASC}) {
    edges {
      c2CDepositRejectReasonId
      rejectReasonName
      rejectReasonDescription
      isActive
      sortOrder
    }
  }
  getSupportServiceTypesForFrontOffice {
    requestTypes {
      price
      requestTypeId
      requestTypeName
      requestTypeDescription
    }
  }
  supportServiceTicketStatuses {
    edges {
      supportServiceTicketStatusId
      supportServiceTicketStatusName
      supportServiceTicketStatusDescription
    }
  }
  supportServiceTicketProcessingStatuses {
    edges {
      supportServiceTicketProcessingStatusId
      supportServiceTicketProcessingStatusName
      supportServiceTicketProcessingStatusDescription
    }
  }
  supportServiceTicketCancelReasons {
    edges {
      supportServiceTicketCancelReasonId
      supportServiceTicketCancelReasonName
      supportServiceTicketCancelReasonDescription
    }
  }
  supportServiceTicketRejectReasons {
    edges {
      supportServiceTicketRejectReasonId
      supportServiceTicketRejectReasonName
      supportServiceTicketRejectReasonDescription
    }
  }
}
    `;

/**
 * __useGetMasterDataQuery__
 *
 * To run a query within a React component, call `useGetMasterDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetMasterDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetMasterDataQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetMasterDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetMasterDataQuery, GetMasterDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetMasterDataQuery, GetMasterDataQueryVariables>(GetMasterDataDocument, baseOptions);
      }
export function useGetMasterDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetMasterDataQuery, GetMasterDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetMasterDataQuery, GetMasterDataQueryVariables>(GetMasterDataDocument, baseOptions);
        }
export type GetMasterDataQueryHookResult = ReturnType<typeof useGetMasterDataQuery>;
export type GetMasterDataLazyQueryHookResult = ReturnType<typeof useGetMasterDataLazyQuery>;
export type GetMasterDataQueryResult = ApolloReactCommon.QueryResult<GetMasterDataQuery, GetMasterDataQueryVariables>;
export const GetSupportRequestClosingReasonsDocument = gql`
    query GetSupportRequestClosingReasons {
  getSupportRequestClosingReasons(pageSize: 100) {
    edges {
      id
      name
      description
      type
    }
  }
}
    `;

/**
 * __useGetSupportRequestClosingReasonsQuery__
 *
 * To run a query within a React component, call `useGetSupportRequestClosingReasonsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportRequestClosingReasonsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportRequestClosingReasonsQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSupportRequestClosingReasonsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportRequestClosingReasonsQuery, GetSupportRequestClosingReasonsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportRequestClosingReasonsQuery, GetSupportRequestClosingReasonsQueryVariables>(GetSupportRequestClosingReasonsDocument, baseOptions);
      }
export function useGetSupportRequestClosingReasonsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportRequestClosingReasonsQuery, GetSupportRequestClosingReasonsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportRequestClosingReasonsQuery, GetSupportRequestClosingReasonsQueryVariables>(GetSupportRequestClosingReasonsDocument, baseOptions);
        }
export type GetSupportRequestClosingReasonsQueryHookResult = ReturnType<typeof useGetSupportRequestClosingReasonsQuery>;
export type GetSupportRequestClosingReasonsLazyQueryHookResult = ReturnType<typeof useGetSupportRequestClosingReasonsLazyQuery>;
export type GetSupportRequestClosingReasonsQueryResult = ApolloReactCommon.QueryResult<GetSupportRequestClosingReasonsQuery, GetSupportRequestClosingReasonsQueryVariables>;
export const GetTopenerServiceRequestTypesDocument = gql`
    query GetTopenerServiceRequestTypes($where: RequestTypeDtoFilter, $orderBy: RequestTypeDtoSort) {
  topenerServiceRequestTypes(where: $where, order_by: $orderBy, pageSize: 999) {
    edges {
      requestTypeId
      requestTypeName
      requestTypeDescription
    }
  }
}
    `;

/**
 * __useGetTopenerServiceRequestTypesQuery__
 *
 * To run a query within a React component, call `useGetTopenerServiceRequestTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenerServiceRequestTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenerServiceRequestTypesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetTopenerServiceRequestTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenerServiceRequestTypesQuery, GetTopenerServiceRequestTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenerServiceRequestTypesQuery, GetTopenerServiceRequestTypesQueryVariables>(GetTopenerServiceRequestTypesDocument, baseOptions);
      }
export function useGetTopenerServiceRequestTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenerServiceRequestTypesQuery, GetTopenerServiceRequestTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenerServiceRequestTypesQuery, GetTopenerServiceRequestTypesQueryVariables>(GetTopenerServiceRequestTypesDocument, baseOptions);
        }
export type GetTopenerServiceRequestTypesQueryHookResult = ReturnType<typeof useGetTopenerServiceRequestTypesQuery>;
export type GetTopenerServiceRequestTypesLazyQueryHookResult = ReturnType<typeof useGetTopenerServiceRequestTypesLazyQuery>;
export type GetTopenerServiceRequestTypesQueryResult = ApolloReactCommon.QueryResult<GetTopenerServiceRequestTypesQuery, GetTopenerServiceRequestTypesQueryVariables>;
export const SearchAllArticlesDocument = gql`
    query SearchAllArticles($input: SearchArticleRequest!) {
  searchArticles(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
    totalCount
    articleDtos {
      id
      slug
      title
      preview
      body
      articleType
      createdDatetime
      previewImageUrl
    }
  }
}
    `;

/**
 * __useSearchAllArticlesQuery__
 *
 * To run a query within a React component, call `useSearchAllArticlesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchAllArticlesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchAllArticlesQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchAllArticlesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchAllArticlesQuery, SearchAllArticlesQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchAllArticlesQuery, SearchAllArticlesQueryVariables>(SearchAllArticlesDocument, baseOptions);
      }
export function useSearchAllArticlesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchAllArticlesQuery, SearchAllArticlesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchAllArticlesQuery, SearchAllArticlesQueryVariables>(SearchAllArticlesDocument, baseOptions);
        }
export type SearchAllArticlesQueryHookResult = ReturnType<typeof useSearchAllArticlesQuery>;
export type SearchAllArticlesLazyQueryHookResult = ReturnType<typeof useSearchAllArticlesLazyQuery>;
export type SearchAllArticlesQueryResult = ApolloReactCommon.QueryResult<SearchAllArticlesQuery, SearchAllArticlesQueryVariables>;
export const SubscribeEmailForNewsDocument = gql`
    mutation SubscribeEmailForNews($input: SubscribeEmailForNewsInput!) {
  subscribeEmailForNews(subscribeEmailForNewsInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    isRequiredToUseCaptcha
  }
}
    `;
export type SubscribeEmailForNewsMutationFn = ApolloReactCommon.MutationFunction<SubscribeEmailForNewsMutation, SubscribeEmailForNewsMutationVariables>;

/**
 * __useSubscribeEmailForNewsMutation__
 *
 * To run a mutation, you first call `useSubscribeEmailForNewsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubscribeEmailForNewsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [subscribeEmailForNewsMutation, { data, loading, error }] = useSubscribeEmailForNewsMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSubscribeEmailForNewsMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SubscribeEmailForNewsMutation, SubscribeEmailForNewsMutationVariables>) {
        return ApolloReactHooks.useMutation<SubscribeEmailForNewsMutation, SubscribeEmailForNewsMutationVariables>(SubscribeEmailForNewsDocument, baseOptions);
      }
export type SubscribeEmailForNewsMutationHookResult = ReturnType<typeof useSubscribeEmailForNewsMutation>;
export type SubscribeEmailForNewsMutationResult = ApolloReactCommon.MutationResult<SubscribeEmailForNewsMutation>;
export type SubscribeEmailForNewsMutationOptions = ApolloReactCommon.BaseMutationOptions<SubscribeEmailForNewsMutation, SubscribeEmailForNewsMutationVariables>;
export const GetNotificationsByUserIdDocument = gql`
    query GetNotificationsByUserId($where: NotificationDtoFilter, $pageSize: Int, $page: Int, $order_by: NotificationDtoSort) {
  notificationsByUserId(
    where: $where
    pageSize: $pageSize
    page: $page
    order_by: $order_by
  ) {
    edges {
      id
      title
      message
      notificationType
      subTypeCode
      isUnread
      link
      createdDatetime
    }
    totalCount
  }
}
    `;

/**
 * __useGetNotificationsByUserIdQuery__
 *
 * To run a query within a React component, call `useGetNotificationsByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetNotificationsByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetNotificationsByUserIdQuery({
 *   variables: {
 *      where: // value for 'where'
 *      pageSize: // value for 'pageSize'
 *      page: // value for 'page'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetNotificationsByUserIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetNotificationsByUserIdQuery, GetNotificationsByUserIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetNotificationsByUserIdQuery, GetNotificationsByUserIdQueryVariables>(GetNotificationsByUserIdDocument, baseOptions);
      }
export function useGetNotificationsByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetNotificationsByUserIdQuery, GetNotificationsByUserIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetNotificationsByUserIdQuery, GetNotificationsByUserIdQueryVariables>(GetNotificationsByUserIdDocument, baseOptions);
        }
export type GetNotificationsByUserIdQueryHookResult = ReturnType<typeof useGetNotificationsByUserIdQuery>;
export type GetNotificationsByUserIdLazyQueryHookResult = ReturnType<typeof useGetNotificationsByUserIdLazyQuery>;
export type GetNotificationsByUserIdQueryResult = ApolloReactCommon.QueryResult<GetNotificationsByUserIdQuery, GetNotificationsByUserIdQueryVariables>;
export const GetSummaryNotificationByCurrentUserDocument = gql`
    query GetSummaryNotificationByCurrentUser {
  getSummaryNotificationByCurrentUser {
    errorCode
    errorMessage
    errorMessageCode
    summaryNotificationDto {
      totalNotificationUnread
      totalTypeSuggestionUnread
      totalTypeSystemUnread
      totalTypeTransactionUnread
    }
  }
}
    `;

/**
 * __useGetSummaryNotificationByCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetSummaryNotificationByCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSummaryNotificationByCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSummaryNotificationByCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSummaryNotificationByCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSummaryNotificationByCurrentUserQuery, GetSummaryNotificationByCurrentUserQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSummaryNotificationByCurrentUserQuery, GetSummaryNotificationByCurrentUserQueryVariables>(GetSummaryNotificationByCurrentUserDocument, baseOptions);
      }
export function useGetSummaryNotificationByCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSummaryNotificationByCurrentUserQuery, GetSummaryNotificationByCurrentUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSummaryNotificationByCurrentUserQuery, GetSummaryNotificationByCurrentUserQueryVariables>(GetSummaryNotificationByCurrentUserDocument, baseOptions);
        }
export type GetSummaryNotificationByCurrentUserQueryHookResult = ReturnType<typeof useGetSummaryNotificationByCurrentUserQuery>;
export type GetSummaryNotificationByCurrentUserLazyQueryHookResult = ReturnType<typeof useGetSummaryNotificationByCurrentUserLazyQuery>;
export type GetSummaryNotificationByCurrentUserQueryResult = ApolloReactCommon.QueryResult<GetSummaryNotificationByCurrentUserQuery, GetSummaryNotificationByCurrentUserQueryVariables>;
export const GetUnReadNotificationDocument = gql`
    query GetUnReadNotification {
  notificationsByUserId(where: {isUnread: true}) {
    totalCount
  }
}
    `;

/**
 * __useGetUnReadNotificationQuery__
 *
 * To run a query within a React component, call `useGetUnReadNotificationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUnReadNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUnReadNotificationQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUnReadNotificationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUnReadNotificationQuery, GetUnReadNotificationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUnReadNotificationQuery, GetUnReadNotificationQueryVariables>(GetUnReadNotificationDocument, baseOptions);
      }
export function useGetUnReadNotificationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUnReadNotificationQuery, GetUnReadNotificationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUnReadNotificationQuery, GetUnReadNotificationQueryVariables>(GetUnReadNotificationDocument, baseOptions);
        }
export type GetUnReadNotificationQueryHookResult = ReturnType<typeof useGetUnReadNotificationQuery>;
export type GetUnReadNotificationLazyQueryHookResult = ReturnType<typeof useGetUnReadNotificationLazyQuery>;
export type GetUnReadNotificationQueryResult = ApolloReactCommon.QueryResult<GetUnReadNotificationQuery, GetUnReadNotificationQueryVariables>;
export const ReadAllNotificationDocument = gql`
    mutation ReadAllNotification {
  markReadAllUserNotifications {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ReadAllNotificationMutationFn = ApolloReactCommon.MutationFunction<ReadAllNotificationMutation, ReadAllNotificationMutationVariables>;

/**
 * __useReadAllNotificationMutation__
 *
 * To run a mutation, you first call `useReadAllNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReadAllNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [readAllNotificationMutation, { data, loading, error }] = useReadAllNotificationMutation({
 *   variables: {
 *   },
 * });
 */
export function useReadAllNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReadAllNotificationMutation, ReadAllNotificationMutationVariables>) {
        return ApolloReactHooks.useMutation<ReadAllNotificationMutation, ReadAllNotificationMutationVariables>(ReadAllNotificationDocument, baseOptions);
      }
export type ReadAllNotificationMutationHookResult = ReturnType<typeof useReadAllNotificationMutation>;
export type ReadAllNotificationMutationResult = ApolloReactCommon.MutationResult<ReadAllNotificationMutation>;
export type ReadAllNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<ReadAllNotificationMutation, ReadAllNotificationMutationVariables>;
export const ReadNotificationDocument = gql`
    mutation ReadNotification($input: UpdateUserNotificationRequestInput!) {
  updateUserNotification(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ReadNotificationMutationFn = ApolloReactCommon.MutationFunction<ReadNotificationMutation, ReadNotificationMutationVariables>;

/**
 * __useReadNotificationMutation__
 *
 * To run a mutation, you first call `useReadNotificationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useReadNotificationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [readNotificationMutation, { data, loading, error }] = useReadNotificationMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useReadNotificationMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ReadNotificationMutation, ReadNotificationMutationVariables>) {
        return ApolloReactHooks.useMutation<ReadNotificationMutation, ReadNotificationMutationVariables>(ReadNotificationDocument, baseOptions);
      }
export type ReadNotificationMutationHookResult = ReturnType<typeof useReadNotificationMutation>;
export type ReadNotificationMutationResult = ApolloReactCommon.MutationResult<ReadNotificationMutation>;
export type ReadNotificationMutationOptions = ApolloReactCommon.BaseMutationOptions<ReadNotificationMutation, ReadNotificationMutationVariables>;
export const UpdateNotificationStatusDocument = gql`
    mutation UpdateNotificationStatus($input: UpdateUserNotificationRequestInput!) {
  updateUserNotification(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateNotificationStatusMutationFn = ApolloReactCommon.MutationFunction<UpdateNotificationStatusMutation, UpdateNotificationStatusMutationVariables>;

/**
 * __useUpdateNotificationStatusMutation__
 *
 * To run a mutation, you first call `useUpdateNotificationStatusMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNotificationStatusMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNotificationStatusMutation, { data, loading, error }] = useUpdateNotificationStatusMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateNotificationStatusMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateNotificationStatusMutation, UpdateNotificationStatusMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateNotificationStatusMutation, UpdateNotificationStatusMutationVariables>(UpdateNotificationStatusDocument, baseOptions);
      }
export type UpdateNotificationStatusMutationHookResult = ReturnType<typeof useUpdateNotificationStatusMutation>;
export type UpdateNotificationStatusMutationResult = ApolloReactCommon.MutationResult<UpdateNotificationStatusMutation>;
export type UpdateNotificationStatusMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateNotificationStatusMutation, UpdateNotificationStatusMutationVariables>;
export const GetArticlePageDocument = gql`
    query GetArticlePage($input: GetArticleRequest!) {
  articlePage(request: $input) {
    edges {
      createdBy
      createdDatetime
      body
      id
      preview
      previewImageUrl
      title
      articleType
    }
  }
}
    `;

/**
 * __useGetArticlePageQuery__
 *
 * To run a query within a React component, call `useGetArticlePageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetArticlePageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetArticlePageQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetArticlePageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetArticlePageQuery, GetArticlePageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetArticlePageQuery, GetArticlePageQueryVariables>(GetArticlePageDocument, baseOptions);
      }
export function useGetArticlePageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetArticlePageQuery, GetArticlePageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetArticlePageQuery, GetArticlePageQueryVariables>(GetArticlePageDocument, baseOptions);
        }
export type GetArticlePageQueryHookResult = ReturnType<typeof useGetArticlePageQuery>;
export type GetArticlePageLazyQueryHookResult = ReturnType<typeof useGetArticlePageLazyQuery>;
export type GetArticlePageQueryResult = ApolloReactCommon.QueryResult<GetArticlePageQuery, GetArticlePageQueryVariables>;
export const GetPlusServicesDocument = gql`
    query GetPlusServices($where: RequestTypeDtoFilter, $orderBy: RequestTypeDtoSort) {
  plusServices(page: 1, pageSize: 10, where: $where, order_by: $orderBy) {
    edges {
      requestTypeId
      requestTypeName
      requestTypeDescription
      isDisplayHomepage
      sortOrder
    }
    totalCount
  }
}
    `;

/**
 * __useGetPlusServicesQuery__
 *
 * To run a query within a React component, call `useGetPlusServicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPlusServicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPlusServicesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetPlusServicesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPlusServicesQuery, GetPlusServicesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPlusServicesQuery, GetPlusServicesQueryVariables>(GetPlusServicesDocument, baseOptions);
      }
export function useGetPlusServicesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPlusServicesQuery, GetPlusServicesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPlusServicesQuery, GetPlusServicesQueryVariables>(GetPlusServicesDocument, baseOptions);
        }
export type GetPlusServicesQueryHookResult = ReturnType<typeof useGetPlusServicesQuery>;
export type GetPlusServicesLazyQueryHookResult = ReturnType<typeof useGetPlusServicesLazyQuery>;
export type GetPlusServicesQueryResult = ApolloReactCommon.QueryResult<GetPlusServicesQuery, GetPlusServicesQueryVariables>;
export const GetQnaPageDocument = gql`
    query GetQnaPage($input: GetPagesWithPaging!) {
  qnaPage(request: $input) {
    edges {
      createdBy
      createdDatetime
      title
      body
    }
    totalCount
    currentPage
  }
}
    `;

/**
 * __useGetQnaPageQuery__
 *
 * To run a query within a React component, call `useGetQnaPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetQnaPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetQnaPageQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetQnaPageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetQnaPageQuery, GetQnaPageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetQnaPageQuery, GetQnaPageQueryVariables>(GetQnaPageDocument, baseOptions);
      }
export function useGetQnaPageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetQnaPageQuery, GetQnaPageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetQnaPageQuery, GetQnaPageQueryVariables>(GetQnaPageDocument, baseOptions);
        }
export type GetQnaPageQueryHookResult = ReturnType<typeof useGetQnaPageQuery>;
export type GetQnaPageLazyQueryHookResult = ReturnType<typeof useGetQnaPageLazyQuery>;
export type GetQnaPageQueryResult = ApolloReactCommon.QueryResult<GetQnaPageQuery, GetQnaPageQueryVariables>;
export const GetRecruitmentPageDocument = gql`
    query GetRecruitmentPage($input: GetPagesWithPaging!) {
  recruitmentPage(request: $input) {
    edges {
      createdBy
      createdDatetime
      title
      preview
      body
      id
      slug
    }
    totalCount
    currentPage
  }
}
    `;

/**
 * __useGetRecruitmentPageQuery__
 *
 * To run a query within a React component, call `useGetRecruitmentPageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecruitmentPageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecruitmentPageQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetRecruitmentPageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRecruitmentPageQuery, GetRecruitmentPageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetRecruitmentPageQuery, GetRecruitmentPageQueryVariables>(GetRecruitmentPageDocument, baseOptions);
      }
export function useGetRecruitmentPageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRecruitmentPageQuery, GetRecruitmentPageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetRecruitmentPageQuery, GetRecruitmentPageQueryVariables>(GetRecruitmentPageDocument, baseOptions);
        }
export type GetRecruitmentPageQueryHookResult = ReturnType<typeof useGetRecruitmentPageQuery>;
export type GetRecruitmentPageLazyQueryHookResult = ReturnType<typeof useGetRecruitmentPageLazyQuery>;
export type GetRecruitmentPageQueryResult = ApolloReactCommon.QueryResult<GetRecruitmentPageQuery, GetRecruitmentPageQueryVariables>;
export const SearchAllCoursesDocument = gql`
    query SearchAllCourses($input: SearchArticleRequest!) {
  searchArticles(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
    totalCount
    articleDtos {
      id
      slug
      title
      preview
      articleType
      articleTypeId
      articleSubTypeId
      highlightTag
      highlightTagId
      createdDatetime
      previewImageUrl
    }
  }
}
    `;

/**
 * __useSearchAllCoursesQuery__
 *
 * To run a query within a React component, call `useSearchAllCoursesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchAllCoursesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchAllCoursesQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchAllCoursesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchAllCoursesQuery, SearchAllCoursesQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchAllCoursesQuery, SearchAllCoursesQueryVariables>(SearchAllCoursesDocument, baseOptions);
      }
export function useSearchAllCoursesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchAllCoursesQuery, SearchAllCoursesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchAllCoursesQuery, SearchAllCoursesQueryVariables>(SearchAllCoursesDocument, baseOptions);
        }
export type SearchAllCoursesQueryHookResult = ReturnType<typeof useSearchAllCoursesQuery>;
export type SearchAllCoursesLazyQueryHookResult = ReturnType<typeof useSearchAllCoursesLazyQuery>;
export type SearchAllCoursesQueryResult = ApolloReactCommon.QueryResult<SearchAllCoursesQuery, SearchAllCoursesQueryVariables>;
export const CreatePanoramaForC2CPropertyPostDocument = gql`
    mutation CreatePanoramaForC2CPropertyPost($input: CreatePanoramaForC2CPropertyPostInput!) {
  createPanoramaForC2CPropertyPost(createPanoramaForC2CPropertyPostInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreatePanoramaForC2CPropertyPostMutationFn = ApolloReactCommon.MutationFunction<CreatePanoramaForC2CPropertyPostMutation, CreatePanoramaForC2CPropertyPostMutationVariables>;

/**
 * __useCreatePanoramaForC2CPropertyPostMutation__
 *
 * To run a mutation, you first call `useCreatePanoramaForC2CPropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePanoramaForC2CPropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPanoramaForC2CPropertyPostMutation, { data, loading, error }] = useCreatePanoramaForC2CPropertyPostMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePanoramaForC2CPropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreatePanoramaForC2CPropertyPostMutation, CreatePanoramaForC2CPropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<CreatePanoramaForC2CPropertyPostMutation, CreatePanoramaForC2CPropertyPostMutationVariables>(CreatePanoramaForC2CPropertyPostDocument, baseOptions);
      }
export type CreatePanoramaForC2CPropertyPostMutationHookResult = ReturnType<typeof useCreatePanoramaForC2CPropertyPostMutation>;
export type CreatePanoramaForC2CPropertyPostMutationResult = ApolloReactCommon.MutationResult<CreatePanoramaForC2CPropertyPostMutation>;
export type CreatePanoramaForC2CPropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<CreatePanoramaForC2CPropertyPostMutation, CreatePanoramaForC2CPropertyPostMutationVariables>;
export const GetPanoramaByCodeDocument = gql`
    query GetPanoramaByCode($panoramaImageCode: String!) {
  getPanoramaByCode(panoramaImageCode: $panoramaImageCode) {
    errorCode
    errorMessage
    errorMessageCode
    panoramaImageDto {
      panoramaImageId
      panoramaImageCode
      panoramaImageJson
      panoramaImageApprovalStatusId
      panoramaImageApprovalStatusName
      panoramaImageApprovalStatusDescription
      panoramaRequestUpdateReasonId
      panoramaRequestUpdateReasonName
      panoramaRequestUpdateReasonDescription
      propertyPostId
      recordVersion
    }
  }
}
    `;

/**
 * __useGetPanoramaByCodeQuery__
 *
 * To run a query within a React component, call `useGetPanoramaByCodeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPanoramaByCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPanoramaByCodeQuery({
 *   variables: {
 *      panoramaImageCode: // value for 'panoramaImageCode'
 *   },
 * });
 */
export function useGetPanoramaByCodeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPanoramaByCodeQuery, GetPanoramaByCodeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPanoramaByCodeQuery, GetPanoramaByCodeQueryVariables>(GetPanoramaByCodeDocument, baseOptions);
      }
export function useGetPanoramaByCodeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPanoramaByCodeQuery, GetPanoramaByCodeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPanoramaByCodeQuery, GetPanoramaByCodeQueryVariables>(GetPanoramaByCodeDocument, baseOptions);
        }
export type GetPanoramaByCodeQueryHookResult = ReturnType<typeof useGetPanoramaByCodeQuery>;
export type GetPanoramaByCodeLazyQueryHookResult = ReturnType<typeof useGetPanoramaByCodeLazyQuery>;
export type GetPanoramaByCodeQueryResult = ApolloReactCommon.QueryResult<GetPanoramaByCodeQuery, GetPanoramaByCodeQueryVariables>;
export const GetPanoramaByPropertyPostIdDocument = gql`
    query GetPanoramaByPropertyPostId($propertyPostId: Uuid!) {
  getPanoramaByPropertyPostId(propertyPostId: $propertyPostId) {
    errorCode
    errorMessage
    errorMessageCode
    panoramaImageDto {
      panoramaImageId
      panoramaImageCode
      panoramaImageJson
      panoramaImageApprovalStatusId
      panoramaImageApprovalStatusName
      panoramaImageApprovalStatusDescription
      panoramaRequestUpdateReasonId
      panoramaRequestUpdateReasonName
      panoramaRequestUpdateReasonDescription
      propertyPostId
      recordVersion
    }
  }
}
    `;

/**
 * __useGetPanoramaByPropertyPostIdQuery__
 *
 * To run a query within a React component, call `useGetPanoramaByPropertyPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPanoramaByPropertyPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPanoramaByPropertyPostIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetPanoramaByPropertyPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPanoramaByPropertyPostIdQuery, GetPanoramaByPropertyPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPanoramaByPropertyPostIdQuery, GetPanoramaByPropertyPostIdQueryVariables>(GetPanoramaByPropertyPostIdDocument, baseOptions);
      }
export function useGetPanoramaByPropertyPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPanoramaByPropertyPostIdQuery, GetPanoramaByPropertyPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPanoramaByPropertyPostIdQuery, GetPanoramaByPropertyPostIdQueryVariables>(GetPanoramaByPropertyPostIdDocument, baseOptions);
        }
export type GetPanoramaByPropertyPostIdQueryHookResult = ReturnType<typeof useGetPanoramaByPropertyPostIdQuery>;
export type GetPanoramaByPropertyPostIdLazyQueryHookResult = ReturnType<typeof useGetPanoramaByPropertyPostIdLazyQuery>;
export type GetPanoramaByPropertyPostIdQueryResult = ApolloReactCommon.QueryResult<GetPanoramaByPropertyPostIdQuery, GetPanoramaByPropertyPostIdQueryVariables>;
export const UpdateC2CPropertyPostPanoramaDocument = gql`
    mutation UpdateC2CPropertyPostPanorama($input: UpdateC2CPropertyPostPanoramaInput!) {
  updateC2CPropertyPostPanorama(updateC2CPropertyPostPanoramaInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateC2CPropertyPostPanoramaMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CPropertyPostPanoramaMutation, UpdateC2CPropertyPostPanoramaMutationVariables>;

/**
 * __useUpdateC2CPropertyPostPanoramaMutation__
 *
 * To run a mutation, you first call `useUpdateC2CPropertyPostPanoramaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CPropertyPostPanoramaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CPropertyPostPanoramaMutation, { data, loading, error }] = useUpdateC2CPropertyPostPanoramaMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateC2CPropertyPostPanoramaMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CPropertyPostPanoramaMutation, UpdateC2CPropertyPostPanoramaMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CPropertyPostPanoramaMutation, UpdateC2CPropertyPostPanoramaMutationVariables>(UpdateC2CPropertyPostPanoramaDocument, baseOptions);
      }
export type UpdateC2CPropertyPostPanoramaMutationHookResult = ReturnType<typeof useUpdateC2CPropertyPostPanoramaMutation>;
export type UpdateC2CPropertyPostPanoramaMutationResult = ApolloReactCommon.MutationResult<UpdateC2CPropertyPostPanoramaMutation>;
export type UpdateC2CPropertyPostPanoramaMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CPropertyPostPanoramaMutation, UpdateC2CPropertyPostPanoramaMutationVariables>;
export const GetBankTransferDetailsByTransactionIdDocument = gql`
    query GetBankTransferDetailsByTransactionId($transactionId: Uuid!) {
  bankTransferDetailsByTransactionId(transactionId: $transactionId) {
    edges {
      amount
      paidDatetime
      paymentUnit
    }
  }
}
    `;

/**
 * __useGetBankTransferDetailsByTransactionIdQuery__
 *
 * To run a query within a React component, call `useGetBankTransferDetailsByTransactionIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBankTransferDetailsByTransactionIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBankTransferDetailsByTransactionIdQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *   },
 * });
 */
export function useGetBankTransferDetailsByTransactionIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBankTransferDetailsByTransactionIdQuery, GetBankTransferDetailsByTransactionIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBankTransferDetailsByTransactionIdQuery, GetBankTransferDetailsByTransactionIdQueryVariables>(GetBankTransferDetailsByTransactionIdDocument, baseOptions);
      }
export function useGetBankTransferDetailsByTransactionIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBankTransferDetailsByTransactionIdQuery, GetBankTransferDetailsByTransactionIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBankTransferDetailsByTransactionIdQuery, GetBankTransferDetailsByTransactionIdQueryVariables>(GetBankTransferDetailsByTransactionIdDocument, baseOptions);
        }
export type GetBankTransferDetailsByTransactionIdQueryHookResult = ReturnType<typeof useGetBankTransferDetailsByTransactionIdQuery>;
export type GetBankTransferDetailsByTransactionIdLazyQueryHookResult = ReturnType<typeof useGetBankTransferDetailsByTransactionIdLazyQuery>;
export type GetBankTransferDetailsByTransactionIdQueryResult = ApolloReactCommon.QueryResult<GetBankTransferDetailsByTransactionIdQuery, GetBankTransferDetailsByTransactionIdQueryVariables>;
export const GetFastPaymentTransferInfoByTransIdDocument = gql`
    query GetFastPaymentTransferInfoByTransId($input: Uuid!) {
  fastPaymentTransferInfoByTransId(transactionId: $input) {
    fastPaymentTransferInfoDto {
      expectedAmount
      fundAccount {
        branchAddress
        branchName
        cityId
        faxNumber
        fundAccountId
        fundEmail
        phoneNumber
      }
      fundAccountId
      paidAmount
      paidDatetime
      paymentCode
      paymentUnit
      productName
      projectId
      transactionDatetime
      transactionPaymentStatus
      userTransactionId
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetFastPaymentTransferInfoByTransIdQuery__
 *
 * To run a query within a React component, call `useGetFastPaymentTransferInfoByTransIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFastPaymentTransferInfoByTransIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFastPaymentTransferInfoByTransIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetFastPaymentTransferInfoByTransIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFastPaymentTransferInfoByTransIdQuery, GetFastPaymentTransferInfoByTransIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetFastPaymentTransferInfoByTransIdQuery, GetFastPaymentTransferInfoByTransIdQueryVariables>(GetFastPaymentTransferInfoByTransIdDocument, baseOptions);
      }
export function useGetFastPaymentTransferInfoByTransIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFastPaymentTransferInfoByTransIdQuery, GetFastPaymentTransferInfoByTransIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFastPaymentTransferInfoByTransIdQuery, GetFastPaymentTransferInfoByTransIdQueryVariables>(GetFastPaymentTransferInfoByTransIdDocument, baseOptions);
        }
export type GetFastPaymentTransferInfoByTransIdQueryHookResult = ReturnType<typeof useGetFastPaymentTransferInfoByTransIdQuery>;
export type GetFastPaymentTransferInfoByTransIdLazyQueryHookResult = ReturnType<typeof useGetFastPaymentTransferInfoByTransIdLazyQuery>;
export type GetFastPaymentTransferInfoByTransIdQueryResult = ApolloReactCommon.QueryResult<GetFastPaymentTransferInfoByTransIdQuery, GetFastPaymentTransferInfoByTransIdQueryVariables>;
export const GetFundAccountByIdDocument = gql`
    query GetFundAccountById($fundAccountId: Uuid!) {
  fundAccountById(fundAccountId: $fundAccountId) {
    fundAccountId
    cityId
    branchAddress
    branchName
    fundAccountNo
    fundAccountDescription
    remark
    phoneNumber
    faxNumber
    fundEmail
  }
}
    `;

/**
 * __useGetFundAccountByIdQuery__
 *
 * To run a query within a React component, call `useGetFundAccountByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFundAccountByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFundAccountByIdQuery({
 *   variables: {
 *      fundAccountId: // value for 'fundAccountId'
 *   },
 * });
 */
export function useGetFundAccountByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFundAccountByIdQuery, GetFundAccountByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetFundAccountByIdQuery, GetFundAccountByIdQueryVariables>(GetFundAccountByIdDocument, baseOptions);
      }
export function useGetFundAccountByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFundAccountByIdQuery, GetFundAccountByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFundAccountByIdQuery, GetFundAccountByIdQueryVariables>(GetFundAccountByIdDocument, baseOptions);
        }
export type GetFundAccountByIdQueryHookResult = ReturnType<typeof useGetFundAccountByIdQuery>;
export type GetFundAccountByIdLazyQueryHookResult = ReturnType<typeof useGetFundAccountByIdLazyQuery>;
export type GetFundAccountByIdQueryResult = ApolloReactCommon.QueryResult<GetFundAccountByIdQuery, GetFundAccountByIdQueryVariables>;
export const GetPaymentTransferInfoByTransIdDocument = gql`
    query GetPaymentTransferInfoByTransId($input: Uuid!) {
  bankPaymentTransferInfoByTransId(transactionId: $input) {
    bankPaymentTransferInfoDto {
      bankAccountName
      bankAccountNumber
      bankTransferContents
      expectedAmount
      paidAmount
      paymentUnit
      productName
      transactionDatetime
      transactionPaymentStatus
      projectId
      paidDatetime
      userTransactionId
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetPaymentTransferInfoByTransIdQuery__
 *
 * To run a query within a React component, call `useGetPaymentTransferInfoByTransIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPaymentTransferInfoByTransIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPaymentTransferInfoByTransIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetPaymentTransferInfoByTransIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPaymentTransferInfoByTransIdQuery, GetPaymentTransferInfoByTransIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPaymentTransferInfoByTransIdQuery, GetPaymentTransferInfoByTransIdQueryVariables>(GetPaymentTransferInfoByTransIdDocument, baseOptions);
      }
export function useGetPaymentTransferInfoByTransIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPaymentTransferInfoByTransIdQuery, GetPaymentTransferInfoByTransIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPaymentTransferInfoByTransIdQuery, GetPaymentTransferInfoByTransIdQueryVariables>(GetPaymentTransferInfoByTransIdDocument, baseOptions);
        }
export type GetPaymentTransferInfoByTransIdQueryHookResult = ReturnType<typeof useGetPaymentTransferInfoByTransIdQuery>;
export type GetPaymentTransferInfoByTransIdLazyQueryHookResult = ReturnType<typeof useGetPaymentTransferInfoByTransIdLazyQuery>;
export type GetPaymentTransferInfoByTransIdQueryResult = ApolloReactCommon.QueryResult<GetPaymentTransferInfoByTransIdQuery, GetPaymentTransferInfoByTransIdQueryVariables>;
export const GetRefundPaymentTransferInfoByTransIdDocument = gql`
    query GetRefundPaymentTransferInfoByTransId($transactionId: Uuid!) {
  refundPaymentTransferInfoByTransId(transactionId: $transactionId) {
    refundPaymentTransferInfoDto {
      bankAccountName
      bankAccountNo
      bankInfo {
        bankAddress
        bankCode
        bankDescription
        bankEmail
        bankId
        bankName
        bankTelephone
        bankWebsite
      }
      branchName
      cityId
      customerInfo {
        customerEmail
        customerFirstName
        customerLastName
        customerPhone
      }
      fundAccount {
        branchAddress
        branchName
        cityId
        faxNumber
        fundAccountDescription
        fundAccountId
        fundAccountNo
        fundEmail
        phoneNumber
        remark
      }
      notes
      paidAmount
      paidDatetime
      paidFundAccount {
        branchAddress
        branchName
        cityId
        faxNumber
        fundAccountDescription
        fundAccountId
        fundAccountNo
        fundEmail
        phoneNumber
        remark
      }
      projectId
      refundAmount
      refundDatetime
      refundContents
      vnpayAccountNumber
      transactionId
      transactionType
    }
  }
}
    `;

/**
 * __useGetRefundPaymentTransferInfoByTransIdQuery__
 *
 * To run a query within a React component, call `useGetRefundPaymentTransferInfoByTransIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRefundPaymentTransferInfoByTransIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRefundPaymentTransferInfoByTransIdQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *   },
 * });
 */
export function useGetRefundPaymentTransferInfoByTransIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRefundPaymentTransferInfoByTransIdQuery, GetRefundPaymentTransferInfoByTransIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetRefundPaymentTransferInfoByTransIdQuery, GetRefundPaymentTransferInfoByTransIdQueryVariables>(GetRefundPaymentTransferInfoByTransIdDocument, baseOptions);
      }
export function useGetRefundPaymentTransferInfoByTransIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRefundPaymentTransferInfoByTransIdQuery, GetRefundPaymentTransferInfoByTransIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetRefundPaymentTransferInfoByTransIdQuery, GetRefundPaymentTransferInfoByTransIdQueryVariables>(GetRefundPaymentTransferInfoByTransIdDocument, baseOptions);
        }
export type GetRefundPaymentTransferInfoByTransIdQueryHookResult = ReturnType<typeof useGetRefundPaymentTransferInfoByTransIdQuery>;
export type GetRefundPaymentTransferInfoByTransIdLazyQueryHookResult = ReturnType<typeof useGetRefundPaymentTransferInfoByTransIdLazyQuery>;
export type GetRefundPaymentTransferInfoByTransIdQueryResult = ApolloReactCommon.QueryResult<GetRefundPaymentTransferInfoByTransIdQuery, GetRefundPaymentTransferInfoByTransIdQueryVariables>;
export const GetTransactionPaymentMethodConfigsDocument = gql`
    query GetTransactionPaymentMethodConfigs($where: TransactionPaymentMethodConfigDtoFilter) {
  transactionPaymentMethodConfigs(
    page: 1
    pageSize: 999
    order_by: {paymentMethodOrder: ASC}
    where: $where
  ) {
    edges {
      transactionType
      paymentMethod
      isActive
      paymentMethodOrder
      transactionPaymentUnitDtos {
        transactionPaymentUnitId
        paymentMethod
        paymentUnitCode
        isActive
      }
    }
  }
}
    `;

/**
 * __useGetTransactionPaymentMethodConfigsQuery__
 *
 * To run a query within a React component, call `useGetTransactionPaymentMethodConfigsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTransactionPaymentMethodConfigsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTransactionPaymentMethodConfigsQuery({
 *   variables: {
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetTransactionPaymentMethodConfigsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTransactionPaymentMethodConfigsQuery, GetTransactionPaymentMethodConfigsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTransactionPaymentMethodConfigsQuery, GetTransactionPaymentMethodConfigsQueryVariables>(GetTransactionPaymentMethodConfigsDocument, baseOptions);
      }
export function useGetTransactionPaymentMethodConfigsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTransactionPaymentMethodConfigsQuery, GetTransactionPaymentMethodConfigsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTransactionPaymentMethodConfigsQuery, GetTransactionPaymentMethodConfigsQueryVariables>(GetTransactionPaymentMethodConfigsDocument, baseOptions);
        }
export type GetTransactionPaymentMethodConfigsQueryHookResult = ReturnType<typeof useGetTransactionPaymentMethodConfigsQuery>;
export type GetTransactionPaymentMethodConfigsLazyQueryHookResult = ReturnType<typeof useGetTransactionPaymentMethodConfigsLazyQuery>;
export type GetTransactionPaymentMethodConfigsQueryResult = ApolloReactCommon.QueryResult<GetTransactionPaymentMethodConfigsQuery, GetTransactionPaymentMethodConfigsQueryVariables>;
export const GetUserTransactionDetailDocument = gql`
    query GetUserTransactionDetail($input: userTransactionInput!) {
  userTransactionById(userTransactionInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    userTransactionDto {
      createdDatetime
      expectedAmount
      fundAccountId
      transactionId
      paidAmount
      paidDatetime
      paymentUnit
      productName
      transactionType
      paymentTransferNumber
      transactionPaymentStatus
      userTransactionId
      paymentNotes
      transactionServiceType
      propertyPostId
    }
  }
}
    `;

/**
 * __useGetUserTransactionDetailQuery__
 *
 * To run a query within a React component, call `useGetUserTransactionDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserTransactionDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserTransactionDetailQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetUserTransactionDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTransactionDetailQuery, GetUserTransactionDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserTransactionDetailQuery, GetUserTransactionDetailQueryVariables>(GetUserTransactionDetailDocument, baseOptions);
      }
export function useGetUserTransactionDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTransactionDetailQuery, GetUserTransactionDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserTransactionDetailQuery, GetUserTransactionDetailQueryVariables>(GetUserTransactionDetailDocument, baseOptions);
        }
export type GetUserTransactionDetailQueryHookResult = ReturnType<typeof useGetUserTransactionDetailQuery>;
export type GetUserTransactionDetailLazyQueryHookResult = ReturnType<typeof useGetUserTransactionDetailLazyQuery>;
export type GetUserTransactionDetailQueryResult = ApolloReactCommon.QueryResult<GetUserTransactionDetailQuery, GetUserTransactionDetailQueryVariables>;
export const GetUserTransactionsDocument = gql`
    query GetUserTransactions($where: UserTransactionDtoFilter, $page: Int, $pageSize: Int, $order_by: UserTransactionDtoSort) {
  userTransactions(
    where: $where
    page: $page
    pageSize: $pageSize
    order_by: $order_by
  ) {
    totalCount
    edges {
      createdDatetime
      expectedAmount
      transactionId
      paidAmount
      paymentUnit
      productName
      transactionType
      paymentTransferNumber
      transactionPaymentStatus
      paidDatetime
      userTransactionId
      transactionServiceType
      propertyPostId
    }
  }
}
    `;

/**
 * __useGetUserTransactionsQuery__
 *
 * To run a query within a React component, call `useGetUserTransactionsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserTransactionsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetUserTransactionsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserTransactionsQuery, GetUserTransactionsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserTransactionsQuery, GetUserTransactionsQueryVariables>(GetUserTransactionsDocument, baseOptions);
      }
export function useGetUserTransactionsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserTransactionsQuery, GetUserTransactionsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserTransactionsQuery, GetUserTransactionsQueryVariables>(GetUserTransactionsDocument, baseOptions);
        }
export type GetUserTransactionsQueryHookResult = ReturnType<typeof useGetUserTransactionsQuery>;
export type GetUserTransactionsLazyQueryHookResult = ReturnType<typeof useGetUserTransactionsLazyQuery>;
export type GetUserTransactionsQueryResult = ApolloReactCommon.QueryResult<GetUserTransactionsQuery, GetUserTransactionsQueryVariables>;
export const GetVnPayPaymentTransferInfoByTransIdDocument = gql`
    query GetVNPayPaymentTransferInfoByTransId($input: Uuid!) {
  vnpayPaymentTransferInfoByTransId(transactionId: $input) {
    vnpayPaymentTransferInfoDto {
      expectedAmount
      paidAmount
      paidDatetime
      paymentUnit
      productName
      projectId
      transactionDatetime
      transactionPaymentStatus
      userTransactionId
      vnpayAccountNumber
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetVnPayPaymentTransferInfoByTransIdQuery__
 *
 * To run a query within a React component, call `useGetVnPayPaymentTransferInfoByTransIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetVnPayPaymentTransferInfoByTransIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetVnPayPaymentTransferInfoByTransIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetVnPayPaymentTransferInfoByTransIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetVnPayPaymentTransferInfoByTransIdQuery, GetVnPayPaymentTransferInfoByTransIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetVnPayPaymentTransferInfoByTransIdQuery, GetVnPayPaymentTransferInfoByTransIdQueryVariables>(GetVnPayPaymentTransferInfoByTransIdDocument, baseOptions);
      }
export function useGetVnPayPaymentTransferInfoByTransIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetVnPayPaymentTransferInfoByTransIdQuery, GetVnPayPaymentTransferInfoByTransIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetVnPayPaymentTransferInfoByTransIdQuery, GetVnPayPaymentTransferInfoByTransIdQueryVariables>(GetVnPayPaymentTransferInfoByTransIdDocument, baseOptions);
        }
export type GetVnPayPaymentTransferInfoByTransIdQueryHookResult = ReturnType<typeof useGetVnPayPaymentTransferInfoByTransIdQuery>;
export type GetVnPayPaymentTransferInfoByTransIdLazyQueryHookResult = ReturnType<typeof useGetVnPayPaymentTransferInfoByTransIdLazyQuery>;
export type GetVnPayPaymentTransferInfoByTransIdQueryResult = ApolloReactCommon.QueryResult<GetVnPayPaymentTransferInfoByTransIdQuery, GetVnPayPaymentTransferInfoByTransIdQueryVariables>;
export const CheckCurrentUserInAgentAssignedBySaleSeasonIdDocument = gql`
    query CheckCurrentUserInAgentAssignedBySaleSeasonId($request: CheckCurrentUserInAgentAssignedBySaleSeasonIdInput!) {
  checkCurrentUserInAgentAssignedBySaleSeasonId(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    isExist
  }
}
    `;

/**
 * __useCheckCurrentUserInAgentAssignedBySaleSeasonIdQuery__
 *
 * To run a query within a React component, call `useCheckCurrentUserInAgentAssignedBySaleSeasonIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckCurrentUserInAgentAssignedBySaleSeasonIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckCurrentUserInAgentAssignedBySaleSeasonIdQuery({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useCheckCurrentUserInAgentAssignedBySaleSeasonIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckCurrentUserInAgentAssignedBySaleSeasonIdQuery, CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckCurrentUserInAgentAssignedBySaleSeasonIdQuery, CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryVariables>(CheckCurrentUserInAgentAssignedBySaleSeasonIdDocument, baseOptions);
      }
export function useCheckCurrentUserInAgentAssignedBySaleSeasonIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckCurrentUserInAgentAssignedBySaleSeasonIdQuery, CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckCurrentUserInAgentAssignedBySaleSeasonIdQuery, CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryVariables>(CheckCurrentUserInAgentAssignedBySaleSeasonIdDocument, baseOptions);
        }
export type CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryHookResult = ReturnType<typeof useCheckCurrentUserInAgentAssignedBySaleSeasonIdQuery>;
export type CheckCurrentUserInAgentAssignedBySaleSeasonIdLazyQueryHookResult = ReturnType<typeof useCheckCurrentUserInAgentAssignedBySaleSeasonIdLazyQuery>;
export type CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryResult = ApolloReactCommon.QueryResult<CheckCurrentUserInAgentAssignedBySaleSeasonIdQuery, CheckCurrentUserInAgentAssignedBySaleSeasonIdQueryVariables>;
export const CheckPropertyPostAvailableForBookingBySeasonIdDocument = gql`
    query CheckPropertyPostAvailableForBookingBySeasonId($input: CheckPropertyPostAvailableForBookingBySeasonIdInput!) {
  checkPropertyPostAvailableForBookingBySeasonId(
    checkPropertyPostAvailableForBookingBySeasonIdInput: $input
  ) {
    isAvailable
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useCheckPropertyPostAvailableForBookingBySeasonIdQuery__
 *
 * To run a query within a React component, call `useCheckPropertyPostAvailableForBookingBySeasonIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPropertyPostAvailableForBookingBySeasonIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPropertyPostAvailableForBookingBySeasonIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckPropertyPostAvailableForBookingBySeasonIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckPropertyPostAvailableForBookingBySeasonIdQuery, CheckPropertyPostAvailableForBookingBySeasonIdQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckPropertyPostAvailableForBookingBySeasonIdQuery, CheckPropertyPostAvailableForBookingBySeasonIdQueryVariables>(CheckPropertyPostAvailableForBookingBySeasonIdDocument, baseOptions);
      }
export function useCheckPropertyPostAvailableForBookingBySeasonIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckPropertyPostAvailableForBookingBySeasonIdQuery, CheckPropertyPostAvailableForBookingBySeasonIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckPropertyPostAvailableForBookingBySeasonIdQuery, CheckPropertyPostAvailableForBookingBySeasonIdQueryVariables>(CheckPropertyPostAvailableForBookingBySeasonIdDocument, baseOptions);
        }
export type CheckPropertyPostAvailableForBookingBySeasonIdQueryHookResult = ReturnType<typeof useCheckPropertyPostAvailableForBookingBySeasonIdQuery>;
export type CheckPropertyPostAvailableForBookingBySeasonIdLazyQueryHookResult = ReturnType<typeof useCheckPropertyPostAvailableForBookingBySeasonIdLazyQuery>;
export type CheckPropertyPostAvailableForBookingBySeasonIdQueryResult = ApolloReactCommon.QueryResult<CheckPropertyPostAvailableForBookingBySeasonIdQuery, CheckPropertyPostAvailableForBookingBySeasonIdQueryVariables>;
export const CheckPropertyPostLockedForBookingBySeasonIdDocument = gql`
    query CheckPropertyPostLockedForBookingBySeasonId($input: CheckPropertyPostLockedForBookingBySeasonIdInput!) {
  checkPropertyPostLockedForBookingBySeasonId(
    checkPropertyPostLockedForBookingBySeasonIdInput: $input
  ) {
    isLocked
    errorCode
    errorMessage
    errorMessageCode
    openDatetime
  }
}
    `;

/**
 * __useCheckPropertyPostLockedForBookingBySeasonIdQuery__
 *
 * To run a query within a React component, call `useCheckPropertyPostLockedForBookingBySeasonIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPropertyPostLockedForBookingBySeasonIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPropertyPostLockedForBookingBySeasonIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckPropertyPostLockedForBookingBySeasonIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckPropertyPostLockedForBookingBySeasonIdQuery, CheckPropertyPostLockedForBookingBySeasonIdQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckPropertyPostLockedForBookingBySeasonIdQuery, CheckPropertyPostLockedForBookingBySeasonIdQueryVariables>(CheckPropertyPostLockedForBookingBySeasonIdDocument, baseOptions);
      }
export function useCheckPropertyPostLockedForBookingBySeasonIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckPropertyPostLockedForBookingBySeasonIdQuery, CheckPropertyPostLockedForBookingBySeasonIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckPropertyPostLockedForBookingBySeasonIdQuery, CheckPropertyPostLockedForBookingBySeasonIdQueryVariables>(CheckPropertyPostLockedForBookingBySeasonIdDocument, baseOptions);
        }
export type CheckPropertyPostLockedForBookingBySeasonIdQueryHookResult = ReturnType<typeof useCheckPropertyPostLockedForBookingBySeasonIdQuery>;
export type CheckPropertyPostLockedForBookingBySeasonIdLazyQueryHookResult = ReturnType<typeof useCheckPropertyPostLockedForBookingBySeasonIdLazyQuery>;
export type CheckPropertyPostLockedForBookingBySeasonIdQueryResult = ApolloReactCommon.QueryResult<CheckPropertyPostLockedForBookingBySeasonIdQuery, CheckPropertyPostLockedForBookingBySeasonIdQueryVariables>;
export const FollowProjectDocument = gql`
    mutation FollowProject($input: FollowProject!) {
  followProject(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    projectDto {
      projectId
      projectName
      isFollowed
      isFollowed
      totalFollower
      totalShare
    }
  }
}
    `;
export type FollowProjectMutationFn = ApolloReactCommon.MutationFunction<FollowProjectMutation, FollowProjectMutationVariables>;

/**
 * __useFollowProjectMutation__
 *
 * To run a mutation, you first call `useFollowProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFollowProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [followProjectMutation, { data, loading, error }] = useFollowProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useFollowProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FollowProjectMutation, FollowProjectMutationVariables>) {
        return ApolloReactHooks.useMutation<FollowProjectMutation, FollowProjectMutationVariables>(FollowProjectDocument, baseOptions);
      }
export type FollowProjectMutationHookResult = ReturnType<typeof useFollowProjectMutation>;
export type FollowProjectMutationResult = ApolloReactCommon.MutationResult<FollowProjectMutation>;
export type FollowProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<FollowProjectMutation, FollowProjectMutationVariables>;
export const GetB2C2CProjectDetailByIdFoDocument = gql`
    query getB2C2CProjectDetailByIdFo($b2C2CProjectId: Uuid!) {
  getB2C2CProjectDetailByIdFo(b2C2CProjectId: $b2C2CProjectId) {
    b2C2CProject {
      b2C2CProjectId
      b2C2CProjectName
      b2CDetailPath
      b2CProjectId
      investorId
      investorName
      isActive
      propertyTypeId
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetB2C2CProjectDetailByIdFoQuery__
 *
 * To run a query within a React component, call `useGetB2C2CProjectDetailByIdFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetB2C2CProjectDetailByIdFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetB2C2CProjectDetailByIdFoQuery({
 *   variables: {
 *      b2C2CProjectId: // value for 'b2C2CProjectId'
 *   },
 * });
 */
export function useGetB2C2CProjectDetailByIdFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetB2C2CProjectDetailByIdFoQuery, GetB2C2CProjectDetailByIdFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetB2C2CProjectDetailByIdFoQuery, GetB2C2CProjectDetailByIdFoQueryVariables>(GetB2C2CProjectDetailByIdFoDocument, baseOptions);
      }
export function useGetB2C2CProjectDetailByIdFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetB2C2CProjectDetailByIdFoQuery, GetB2C2CProjectDetailByIdFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetB2C2CProjectDetailByIdFoQuery, GetB2C2CProjectDetailByIdFoQueryVariables>(GetB2C2CProjectDetailByIdFoDocument, baseOptions);
        }
export type GetB2C2CProjectDetailByIdFoQueryHookResult = ReturnType<typeof useGetB2C2CProjectDetailByIdFoQuery>;
export type GetB2C2CProjectDetailByIdFoLazyQueryHookResult = ReturnType<typeof useGetB2C2CProjectDetailByIdFoLazyQuery>;
export type GetB2C2CProjectDetailByIdFoQueryResult = ApolloReactCommon.QueryResult<GetB2C2CProjectDetailByIdFoQuery, GetB2C2CProjectDetailByIdFoQueryVariables>;
export const GetB2C2CProjectsFoDocument = gql`
    query getB2C2CProjectsFo($page: Int, $pageSize: Int, $propertyTypeId: String, $projectName: String) {
  getB2C2CProjectsFo(
    propertyTypeId: $propertyTypeId
    page: $page
    pageSize: $pageSize
    projectName: $projectName
  ) {
    downloadUrl
    edges {
      b2C2CProjectId
      b2C2CProjectName
      b2CProjectId
      investorId
      investorName
      propertyTypeId
    }
    pageSize
    totalCount
    totalPages
  }
}
    `;

/**
 * __useGetB2C2CProjectsFoQuery__
 *
 * To run a query within a React component, call `useGetB2C2CProjectsFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetB2C2CProjectsFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetB2C2CProjectsFoQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      propertyTypeId: // value for 'propertyTypeId'
 *      projectName: // value for 'projectName'
 *   },
 * });
 */
export function useGetB2C2CProjectsFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetB2C2CProjectsFoQuery, GetB2C2CProjectsFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetB2C2CProjectsFoQuery, GetB2C2CProjectsFoQueryVariables>(GetB2C2CProjectsFoDocument, baseOptions);
      }
export function useGetB2C2CProjectsFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetB2C2CProjectsFoQuery, GetB2C2CProjectsFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetB2C2CProjectsFoQuery, GetB2C2CProjectsFoQueryVariables>(GetB2C2CProjectsFoDocument, baseOptions);
        }
export type GetB2C2CProjectsFoQueryHookResult = ReturnType<typeof useGetB2C2CProjectsFoQuery>;
export type GetB2C2CProjectsFoLazyQueryHookResult = ReturnType<typeof useGetB2C2CProjectsFoLazyQuery>;
export type GetB2C2CProjectsFoQueryResult = ApolloReactCommon.QueryResult<GetB2C2CProjectsFoQuery, GetB2C2CProjectsFoQueryVariables>;
export const GetFoProjectsHomePageV1Document = gql`
    query GetFoProjectsHomePageV1($input: GetFoProjectsHomePageV1Input!) {
  getFoProjectsHomePageV1(getFoProjectsHomePageV1Input: $input) {
    projectInfoDtos {
      projectId
      projectName
      featurePhotos
      overviewMediaInfo
      isFollowed
      investorOwnerName
      investorOwnerLogo
      investorOwnerInfo
      projectStatusId
      projectStatusName
      sortOrder
      propertyTypeId
      totalArea
      overallDescription
      startYear
      projectAddress {
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        streetName
        homeAddress
        __typename
      }
      minPrice
      commissionRates
      detailPath
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetFoProjectsHomePageV1Query__
 *
 * To run a query within a React component, call `useGetFoProjectsHomePageV1Query` and pass it any options that fit your needs.
 * When your component renders, `useGetFoProjectsHomePageV1Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFoProjectsHomePageV1Query({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetFoProjectsHomePageV1Query(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFoProjectsHomePageV1Query, GetFoProjectsHomePageV1QueryVariables>) {
        return ApolloReactHooks.useQuery<GetFoProjectsHomePageV1Query, GetFoProjectsHomePageV1QueryVariables>(GetFoProjectsHomePageV1Document, baseOptions);
      }
export function useGetFoProjectsHomePageV1LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFoProjectsHomePageV1Query, GetFoProjectsHomePageV1QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFoProjectsHomePageV1Query, GetFoProjectsHomePageV1QueryVariables>(GetFoProjectsHomePageV1Document, baseOptions);
        }
export type GetFoProjectsHomePageV1QueryHookResult = ReturnType<typeof useGetFoProjectsHomePageV1Query>;
export type GetFoProjectsHomePageV1LazyQueryHookResult = ReturnType<typeof useGetFoProjectsHomePageV1LazyQuery>;
export type GetFoProjectsHomePageV1QueryResult = ApolloReactCommon.QueryResult<GetFoProjectsHomePageV1Query, GetFoProjectsHomePageV1QueryVariables>;
export const GetForTransactionCursorDocument = gql`
    query GetForTransactionCursor($request: GetConsultantsForTransactionInput!, $first: PaginationAmount, $after: String!) {
  getConsultantsForTransactionCursor(
    getConsultantsForTransactionInput: $request
    first: $first
    after: $after
  ) {
    edges {
      node {
        staffId
        staffCode
        profilePhoto
        profilePhotos
        fullName
        phoneNumber
        staffGroupId
        staffGroupDescription
        rating
        isGroupLeader
      }
      cursor
    }
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
      startCursor
      endCursor
    }
  }
}
    `;

/**
 * __useGetForTransactionCursorQuery__
 *
 * To run a query within a React component, call `useGetForTransactionCursorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetForTransactionCursorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetForTransactionCursorQuery({
 *   variables: {
 *      request: // value for 'request'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useGetForTransactionCursorQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetForTransactionCursorQuery, GetForTransactionCursorQueryVariables>) {
        return ApolloReactHooks.useQuery<GetForTransactionCursorQuery, GetForTransactionCursorQueryVariables>(GetForTransactionCursorDocument, baseOptions);
      }
export function useGetForTransactionCursorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetForTransactionCursorQuery, GetForTransactionCursorQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetForTransactionCursorQuery, GetForTransactionCursorQueryVariables>(GetForTransactionCursorDocument, baseOptions);
        }
export type GetForTransactionCursorQueryHookResult = ReturnType<typeof useGetForTransactionCursorQuery>;
export type GetForTransactionCursorLazyQueryHookResult = ReturnType<typeof useGetForTransactionCursorLazyQuery>;
export type GetForTransactionCursorQueryResult = ApolloReactCommon.QueryResult<GetForTransactionCursorQuery, GetForTransactionCursorQueryVariables>;
export const GetCurProjectsAssignedToAgentForPublicDocument = gql`
    query GetCurProjectsAssignedToAgentForPublic($agentId: Uuid!, $first: PaginationAmount, $after: String!, $where: ProjectForPublicDtoFilter) {
  curProjectsAssignedToAgentForPublic(
    agentId: $agentId
    first: $first
    after: $after
    where: $where
  ) {
    edges {
      node {
        isFollowed
        totalFollower
        projectId
        projectName
        projectCode
        minPrice
        commissionRates
        projectStatusName
        featurePhotos
        investorOwnerName
        propertyTypeId
        projectStatusId
        projectTypeName
        projectStatusDescription
        projectAddress {
          cityId
          countryId
          districtId
          wardId
          homeAddress
          streetName
          cityName
          districtName
          wardName
        }
        unitOfMeasureProject {
          calculateSize
          multiplyWithBaseUnit
          numberOfDecimal
          unitOfMeasureCode
          unitOfMeasureId
          unitOfMeasureName
        }
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetCurProjectsAssignedToAgentForPublicQuery__
 *
 * To run a query within a React component, call `useGetCurProjectsAssignedToAgentForPublicQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurProjectsAssignedToAgentForPublicQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurProjectsAssignedToAgentForPublicQuery({
 *   variables: {
 *      agentId: // value for 'agentId'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetCurProjectsAssignedToAgentForPublicQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCurProjectsAssignedToAgentForPublicQuery, GetCurProjectsAssignedToAgentForPublicQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCurProjectsAssignedToAgentForPublicQuery, GetCurProjectsAssignedToAgentForPublicQueryVariables>(GetCurProjectsAssignedToAgentForPublicDocument, baseOptions);
      }
export function useGetCurProjectsAssignedToAgentForPublicLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCurProjectsAssignedToAgentForPublicQuery, GetCurProjectsAssignedToAgentForPublicQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCurProjectsAssignedToAgentForPublicQuery, GetCurProjectsAssignedToAgentForPublicQueryVariables>(GetCurProjectsAssignedToAgentForPublicDocument, baseOptions);
        }
export type GetCurProjectsAssignedToAgentForPublicQueryHookResult = ReturnType<typeof useGetCurProjectsAssignedToAgentForPublicQuery>;
export type GetCurProjectsAssignedToAgentForPublicLazyQueryHookResult = ReturnType<typeof useGetCurProjectsAssignedToAgentForPublicLazyQuery>;
export type GetCurProjectsAssignedToAgentForPublicQueryResult = ApolloReactCommon.QueryResult<GetCurProjectsAssignedToAgentForPublicQuery, GetCurProjectsAssignedToAgentForPublicQueryVariables>;
export const GetFollowedProjectByFollowerIdDocument = gql`
    query GetFollowedProjectByFollowerId($followerId: Uuid!, $pageSize: PaginationAmount, $cursor: String, $filter: ProjectWithPropertyPostDtoFilter) {
  curProjectWithPropertyPostsByFollowerId(
    followerId: $followerId
    first: $pageSize
    after: $cursor
    where: $filter
    order_by: {createdDatetime: ASC}
  ) {
    totalCount
    edges {
      node {
        isFollowed
        totalFollower
        projectId
        projectName
        projectCode
        minPrice
        commissionRates
        projectStatusName
        featurePhotos
        investorOwnerName
        propertyTypeId
        projectStatusId
        projectTypeName
        projectStatusDescription
        projectAddress {
          cityId
          countryId
          districtId
          wardId
          homeAddress
          streetName
          cityName
          districtName
          wardName
        }
        unitOfMeasureProject {
          calculateSize
          multiplyWithBaseUnit
          numberOfDecimal
          unitOfMeasureCode
          unitOfMeasureId
          unitOfMeasureName
        }
      }
      cursor
    }
  }
}
    `;

/**
 * __useGetFollowedProjectByFollowerIdQuery__
 *
 * To run a query within a React component, call `useGetFollowedProjectByFollowerIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFollowedProjectByFollowerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFollowedProjectByFollowerIdQuery({
 *   variables: {
 *      followerId: // value for 'followerId'
 *      pageSize: // value for 'pageSize'
 *      cursor: // value for 'cursor'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetFollowedProjectByFollowerIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFollowedProjectByFollowerIdQuery, GetFollowedProjectByFollowerIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetFollowedProjectByFollowerIdQuery, GetFollowedProjectByFollowerIdQueryVariables>(GetFollowedProjectByFollowerIdDocument, baseOptions);
      }
export function useGetFollowedProjectByFollowerIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFollowedProjectByFollowerIdQuery, GetFollowedProjectByFollowerIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFollowedProjectByFollowerIdQuery, GetFollowedProjectByFollowerIdQueryVariables>(GetFollowedProjectByFollowerIdDocument, baseOptions);
        }
export type GetFollowedProjectByFollowerIdQueryHookResult = ReturnType<typeof useGetFollowedProjectByFollowerIdQuery>;
export type GetFollowedProjectByFollowerIdLazyQueryHookResult = ReturnType<typeof useGetFollowedProjectByFollowerIdLazyQuery>;
export type GetFollowedProjectByFollowerIdQueryResult = ApolloReactCommon.QueryResult<GetFollowedProjectByFollowerIdQuery, GetFollowedProjectByFollowerIdQueryVariables>;
export const GetProjectByCurrentUserDocument = gql`
    query GetProjectByCurrentUser($pageSize: Int, $page: Int, $keyword: String, $userId: Uuid!, $filter: ProjectWithPropertyPostDtoFilter) {
  projectWithPropertyPostsByUserId(
    pageSize: $pageSize
    page: $page
    keyword: $keyword
    where: $filter
    userId: $userId
    order_by: {createdDatetime: ASC}
  ) {
    edges {
      totalFollower
      projectId
      projectName
      projectCode
      minPrice
      commissionRates
      projectStatusName
      featurePhotos
      investorOwnerName
      propertyTypeId
      projectStatusId
      projectTypeName
      projectStatusDescription
      projectAddress {
        cityId
        countryId
        districtId
        wardId
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
      unitOfMeasureProject {
        calculateSize
        multiplyWithBaseUnit
        numberOfDecimal
        unitOfMeasureCode
        unitOfMeasureId
        unitOfMeasureName
      }
    }
  }
}
    `;

/**
 * __useGetProjectByCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetProjectByCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectByCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectByCurrentUserQuery({
 *   variables: {
 *      pageSize: // value for 'pageSize'
 *      page: // value for 'page'
 *      keyword: // value for 'keyword'
 *      userId: // value for 'userId'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetProjectByCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectByCurrentUserQuery, GetProjectByCurrentUserQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectByCurrentUserQuery, GetProjectByCurrentUserQueryVariables>(GetProjectByCurrentUserDocument, baseOptions);
      }
export function useGetProjectByCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectByCurrentUserQuery, GetProjectByCurrentUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectByCurrentUserQuery, GetProjectByCurrentUserQueryVariables>(GetProjectByCurrentUserDocument, baseOptions);
        }
export type GetProjectByCurrentUserQueryHookResult = ReturnType<typeof useGetProjectByCurrentUserQuery>;
export type GetProjectByCurrentUserLazyQueryHookResult = ReturnType<typeof useGetProjectByCurrentUserLazyQuery>;
export type GetProjectByCurrentUserQueryResult = ApolloReactCommon.QueryResult<GetProjectByCurrentUserQuery, GetProjectByCurrentUserQueryVariables>;
export const GetUserFollowOnProjectsByProjectIdsDocument = gql`
    query GetUserFollowOnProjectsByProjectIds($request: GetUserFollowOnProjectsByProjectIdsInput!) {
  getUserFollowOnProjectsByProjectIds(
    getUserFollowOnProjectsByProjectIdsInput: $request
  ) {
    userFollowOnProjectDtos {
      projectId
      isFollowed
    }
  }
}
    `;

/**
 * __useGetUserFollowOnProjectsByProjectIdsQuery__
 *
 * To run a query within a React component, call `useGetUserFollowOnProjectsByProjectIdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserFollowOnProjectsByProjectIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserFollowOnProjectsByProjectIdsQuery({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useGetUserFollowOnProjectsByProjectIdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserFollowOnProjectsByProjectIdsQuery, GetUserFollowOnProjectsByProjectIdsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserFollowOnProjectsByProjectIdsQuery, GetUserFollowOnProjectsByProjectIdsQueryVariables>(GetUserFollowOnProjectsByProjectIdsDocument, baseOptions);
      }
export function useGetUserFollowOnProjectsByProjectIdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserFollowOnProjectsByProjectIdsQuery, GetUserFollowOnProjectsByProjectIdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserFollowOnProjectsByProjectIdsQuery, GetUserFollowOnProjectsByProjectIdsQueryVariables>(GetUserFollowOnProjectsByProjectIdsDocument, baseOptions);
        }
export type GetUserFollowOnProjectsByProjectIdsQueryHookResult = ReturnType<typeof useGetUserFollowOnProjectsByProjectIdsQuery>;
export type GetUserFollowOnProjectsByProjectIdsLazyQueryHookResult = ReturnType<typeof useGetUserFollowOnProjectsByProjectIdsLazyQuery>;
export type GetUserFollowOnProjectsByProjectIdsQueryResult = ApolloReactCommon.QueryResult<GetUserFollowOnProjectsByProjectIdsQuery, GetUserFollowOnProjectsByProjectIdsQueryVariables>;
export const GetProjectByIdDocument = gql`
    query GetProjectById($projectId: Uuid!) {
  foProjectById(projectId: $projectId) {
    isFollowed
    projectDescription
    totalFollower
    projectId
    projectName
    projectCode
    minPrice
    commissionRates
    projectStatusName
    featurePhotos
    investorOwnerName
    overallDescription
    propertyTypeId
    projectTypeName
    projectStatusId
    projectPostStatusName
    projectProgress
    projectStatusDescription
    startYear
    totalArea
    projectAddress {
      projectAddressId
      cityId
      districtId
      wardId
      streetName
      homeAddress
      longitude
      latitude
      cityName
      districtName
      wardName
    }
  }
}
    `;

/**
 * __useGetProjectByIdQuery__
 *
 * To run a query within a React component, call `useGetProjectByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectByIdQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectByIdQuery, GetProjectByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectByIdQuery, GetProjectByIdQueryVariables>(GetProjectByIdDocument, baseOptions);
      }
export function useGetProjectByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectByIdQuery, GetProjectByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectByIdQuery, GetProjectByIdQueryVariables>(GetProjectByIdDocument, baseOptions);
        }
export type GetProjectByIdQueryHookResult = ReturnType<typeof useGetProjectByIdQuery>;
export type GetProjectByIdLazyQueryHookResult = ReturnType<typeof useGetProjectByIdLazyQuery>;
export type GetProjectByIdQueryResult = ApolloReactCommon.QueryResult<GetProjectByIdQuery, GetProjectByIdQueryVariables>;
export const GetProjectDetailDocument = gql`
    query GetProjectDetail($projectId: Uuid!) {
  foProjectById(projectId: $projectId) {
    isFollowed
    totalFollower
    bankInfo
    commissionRates
    projectStatusDescription
    projectTypeName
    projectTypeDescription
    facilitiesDescription
    facilitiesMediaInfo
    startYear
    totalArea
    overallDescription
    featurePhotos
    groundPlanDescription
    groundPlanMediaInfo
    investorOwnerName
    investorDetailPath
    investorId
    investorOwnerLogo
    isFeaturesProject
    locationDescription
    locationMediaInfo
    overviewDescription
    overviewMediaInfo
    partnersInfo
    projectAddressId
    projectAddress {
      projectAddressId
      cityId
      districtId
      wardId
      streetName
      homeAddress
      longitude
      latitude
      cityName
      districtName
      wardName
    }
    projectItems {
      id
      title
      photo
      cost
      commission
      sortOrder
    }
    projectCode
    projectDescription
    projectId
    totalShare
    projectName
    projectPostStatusId
    projectPostStatusName
    projectProgress
    projectStatusId
    propertyTypeId
    saleProgramDescription
    saleProgramMediaInfo
    handoverMaterialDescription
    handoverMaterialMediaInfo
    legalInformationDescription
    legalInformationMediaInfo
    sizingDescription
    sizingMediaInfo
    sortOrder
    minPrice
    projectStatusName
    saleSeasonInfo {
      saleSeasonId
      seasonName
      saleSeasonStatusId
      startBookingDatetime
      genericBasketDatetime
      endBookingDatetime
      openDatetime
      closeDatetime
      allTopenersCanViewProducts
      maxBookingNumber
    }
    detailPath
  }
}
    `;

/**
 * __useGetProjectDetailQuery__
 *
 * To run a query within a React component, call `useGetProjectDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectDetailQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetProjectDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectDetailQuery, GetProjectDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectDetailQuery, GetProjectDetailQueryVariables>(GetProjectDetailDocument, baseOptions);
      }
export function useGetProjectDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectDetailQuery, GetProjectDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectDetailQuery, GetProjectDetailQueryVariables>(GetProjectDetailDocument, baseOptions);
        }
export type GetProjectDetailQueryHookResult = ReturnType<typeof useGetProjectDetailQuery>;
export type GetProjectDetailLazyQueryHookResult = ReturnType<typeof useGetProjectDetailLazyQuery>;
export type GetProjectDetailQueryResult = ApolloReactCommon.QueryResult<GetProjectDetailQuery, GetProjectDetailQueryVariables>;
export const GetProjectSuggestionDocument = gql`
    query GetProjectSuggestion($pageSize: PaginationAmount, $cursor: String, $filter: ProjectSuggestionDtoFilter) {
  curProjectSuggestions(
    first: $pageSize
    after: $cursor
    where: $filter
    order_by: {projectSuggestionCreatedDatetime: DESC}
  ) {
    edges {
      node {
        projectId
        projectName
        minPrice
        projectStatusName
        featurePhotos
        investorOwnerName
        propertyTypeId
        projectStatusId
        projectStatusDescription
        projectAddress {
          cityId
          countryId
          districtId
          wardId
          homeAddress
          streetName
          cityName
          districtName
          wardName
        }
        commissionRates
        totalFollower
        isFollowed
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetProjectSuggestionQuery__
 *
 * To run a query within a React component, call `useGetProjectSuggestionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectSuggestionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectSuggestionQuery({
 *   variables: {
 *      pageSize: // value for 'pageSize'
 *      cursor: // value for 'cursor'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetProjectSuggestionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectSuggestionQuery, GetProjectSuggestionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectSuggestionQuery, GetProjectSuggestionQueryVariables>(GetProjectSuggestionDocument, baseOptions);
      }
export function useGetProjectSuggestionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectSuggestionQuery, GetProjectSuggestionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectSuggestionQuery, GetProjectSuggestionQueryVariables>(GetProjectSuggestionDocument, baseOptions);
        }
export type GetProjectSuggestionQueryHookResult = ReturnType<typeof useGetProjectSuggestionQuery>;
export type GetProjectSuggestionLazyQueryHookResult = ReturnType<typeof useGetProjectSuggestionLazyQuery>;
export type GetProjectSuggestionQueryResult = ApolloReactCommon.QueryResult<GetProjectSuggestionQuery, GetProjectSuggestionQueryVariables>;
export const GetProjectWithPropertyPostDocument = gql`
    query GetProjectWithPropertyPost {
  projectWithPropertyPosts {
    edges {
      isFollowed
      totalFollower
      projectId
      projectName
      projectCode
      overviewDescription
      overviewMediaInfo
      projectDescription
      minPrice
      commissionRates
      bankInfo
      featurePhotos
      propertyTypeId
      projectStatusId
      projectTypeName
      projectAddress {
        cityId
        countryId
        districtId
        wardId
        homeAddress
        streetName
      }
    }
    totalCount
  }
}
    `;

/**
 * __useGetProjectWithPropertyPostQuery__
 *
 * To run a query within a React component, call `useGetProjectWithPropertyPostQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectWithPropertyPostQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectWithPropertyPostQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetProjectWithPropertyPostQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectWithPropertyPostQuery, GetProjectWithPropertyPostQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectWithPropertyPostQuery, GetProjectWithPropertyPostQueryVariables>(GetProjectWithPropertyPostDocument, baseOptions);
      }
export function useGetProjectWithPropertyPostLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectWithPropertyPostQuery, GetProjectWithPropertyPostQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectWithPropertyPostQuery, GetProjectWithPropertyPostQueryVariables>(GetProjectWithPropertyPostDocument, baseOptions);
        }
export type GetProjectWithPropertyPostQueryHookResult = ReturnType<typeof useGetProjectWithPropertyPostQuery>;
export type GetProjectWithPropertyPostLazyQueryHookResult = ReturnType<typeof useGetProjectWithPropertyPostLazyQuery>;
export type GetProjectWithPropertyPostQueryResult = ApolloReactCommon.QueryResult<GetProjectWithPropertyPostQuery, GetProjectWithPropertyPostQueryVariables>;
export const GetProjectsDocument = gql`
    query GetProjects($order_by: ProjectDtoSort, $page: Int, $pageSize: Int, $where: ProjectDtoFilter, $projectName: String!) {
  projectsForPublic(
    order_by: $order_by
    page: $page
    pageSize: $pageSize
    where: $where
    projectName: $projectName
  ) {
    edges {
      projectId
      projectName
      projectAddress {
        projectAddressId
        cityId
        districtId
        wardId
        streetName
        homeAddress
        longitude
        latitude
        cityName
        districtName
        wardName
      }
    }
  }
}
    `;

/**
 * __useGetProjectsQuery__
 *
 * To run a query within a React component, call `useGetProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectsQuery({
 *   variables: {
 *      order_by: // value for 'order_by'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      where: // value for 'where'
 *      projectName: // value for 'projectName'
 *   },
 * });
 */
export function useGetProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectsQuery, GetProjectsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectsQuery, GetProjectsQueryVariables>(GetProjectsDocument, baseOptions);
      }
export function useGetProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectsQuery, GetProjectsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectsQuery, GetProjectsQueryVariables>(GetProjectsDocument, baseOptions);
        }
export type GetProjectsQueryHookResult = ReturnType<typeof useGetProjectsQuery>;
export type GetProjectsLazyQueryHookResult = ReturnType<typeof useGetProjectsLazyQuery>;
export type GetProjectsQueryResult = ApolloReactCommon.QueryResult<GetProjectsQuery, GetProjectsQueryVariables>;
export const GetSaleSeasonFromProjectByIdDocument = gql`
    query GetSaleSeasonFromProjectById($projectId: Uuid!) {
  foProjectById(projectId: $projectId) {
    projectId
    saleSeasonInfo {
      saleSeasonId
      seasonStatusName
      startBookingDatetime
      openDatetime
    }
  }
}
    `;

/**
 * __useGetSaleSeasonFromProjectByIdQuery__
 *
 * To run a query within a React component, call `useGetSaleSeasonFromProjectByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSaleSeasonFromProjectByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSaleSeasonFromProjectByIdQuery({
 *   variables: {
 *      projectId: // value for 'projectId'
 *   },
 * });
 */
export function useGetSaleSeasonFromProjectByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSaleSeasonFromProjectByIdQuery, GetSaleSeasonFromProjectByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSaleSeasonFromProjectByIdQuery, GetSaleSeasonFromProjectByIdQueryVariables>(GetSaleSeasonFromProjectByIdDocument, baseOptions);
      }
export function useGetSaleSeasonFromProjectByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSaleSeasonFromProjectByIdQuery, GetSaleSeasonFromProjectByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSaleSeasonFromProjectByIdQuery, GetSaleSeasonFromProjectByIdQueryVariables>(GetSaleSeasonFromProjectByIdDocument, baseOptions);
        }
export type GetSaleSeasonFromProjectByIdQueryHookResult = ReturnType<typeof useGetSaleSeasonFromProjectByIdQuery>;
export type GetSaleSeasonFromProjectByIdLazyQueryHookResult = ReturnType<typeof useGetSaleSeasonFromProjectByIdLazyQuery>;
export type GetSaleSeasonFromProjectByIdQueryResult = ApolloReactCommon.QueryResult<GetSaleSeasonFromProjectByIdQuery, GetSaleSeasonFromProjectByIdQueryVariables>;
export const GetSimilarProjectsForFoDocument = gql`
    query getSimilarProjectsForFO($getSimilarProjectsForFOInput: GetSimilarProjectsForFOInput!) {
  getSimilarProjectsForFO(
    getSimilarProjectsForFOInput: $getSimilarProjectsForFOInput
  ) {
    edges {
      detailPath
      fastProjectId
      projectCode
      projectStatusId
      projectStatusName
      projectId
      projectName
      featurePhotos
      investorOwnerName
      projectStatusDescription
      propertyTypeId
      minPrice
      projectAddress {
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        streetName
        homeAddress
      }
    }
    totalCount
  }
}
    `;

/**
 * __useGetSimilarProjectsForFoQuery__
 *
 * To run a query within a React component, call `useGetSimilarProjectsForFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSimilarProjectsForFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSimilarProjectsForFoQuery({
 *   variables: {
 *      getSimilarProjectsForFOInput: // value for 'getSimilarProjectsForFOInput'
 *   },
 * });
 */
export function useGetSimilarProjectsForFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSimilarProjectsForFoQuery, GetSimilarProjectsForFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSimilarProjectsForFoQuery, GetSimilarProjectsForFoQueryVariables>(GetSimilarProjectsForFoDocument, baseOptions);
      }
export function useGetSimilarProjectsForFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSimilarProjectsForFoQuery, GetSimilarProjectsForFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSimilarProjectsForFoQuery, GetSimilarProjectsForFoQueryVariables>(GetSimilarProjectsForFoDocument, baseOptions);
        }
export type GetSimilarProjectsForFoQueryHookResult = ReturnType<typeof useGetSimilarProjectsForFoQuery>;
export type GetSimilarProjectsForFoLazyQueryHookResult = ReturnType<typeof useGetSimilarProjectsForFoLazyQuery>;
export type GetSimilarProjectsForFoQueryResult = ApolloReactCommon.QueryResult<GetSimilarProjectsForFoQuery, GetSimilarProjectsForFoQueryVariables>;
export const GetStaffGroupsDocument = gql`
    query GetStaffGroups($page: Int, $pageSize: Int, $where: StaffGroupDtoFilter, $orderBy: StaffGroupDtoSort) {
  staffGroups(page: $page, pageSize: $pageSize, where: $where, order_by: $orderBy) {
    edges {
      staffGroupId
      staffGroupName
      staffGroupDescription
      staffTypeId
    }
    totalCount
  }
}
    `;

/**
 * __useGetStaffGroupsQuery__
 *
 * To run a query within a React component, call `useGetStaffGroupsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffGroupsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffGroupsQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      where: // value for 'where'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetStaffGroupsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetStaffGroupsQuery, GetStaffGroupsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetStaffGroupsQuery, GetStaffGroupsQueryVariables>(GetStaffGroupsDocument, baseOptions);
      }
export function useGetStaffGroupsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStaffGroupsQuery, GetStaffGroupsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetStaffGroupsQuery, GetStaffGroupsQueryVariables>(GetStaffGroupsDocument, baseOptions);
        }
export type GetStaffGroupsQueryHookResult = ReturnType<typeof useGetStaffGroupsQuery>;
export type GetStaffGroupsLazyQueryHookResult = ReturnType<typeof useGetStaffGroupsLazyQuery>;
export type GetStaffGroupsQueryResult = ApolloReactCommon.QueryResult<GetStaffGroupsQuery, GetStaffGroupsQueryVariables>;
export const UnfollowProjectDocument = gql`
    mutation UnfollowProject($input: FollowProject!) {
  unfollowProject(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    projectDto {
      projectId
      projectName
      isFollowed
      totalFollower
      totalShare
    }
  }
}
    `;
export type UnfollowProjectMutationFn = ApolloReactCommon.MutationFunction<UnfollowProjectMutation, UnfollowProjectMutationVariables>;

/**
 * __useUnfollowProjectMutation__
 *
 * To run a mutation, you first call `useUnfollowProjectMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnfollowProjectMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unfollowProjectMutation, { data, loading, error }] = useUnfollowProjectMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUnfollowProjectMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UnfollowProjectMutation, UnfollowProjectMutationVariables>) {
        return ApolloReactHooks.useMutation<UnfollowProjectMutation, UnfollowProjectMutationVariables>(UnfollowProjectDocument, baseOptions);
      }
export type UnfollowProjectMutationHookResult = ReturnType<typeof useUnfollowProjectMutation>;
export type UnfollowProjectMutationResult = ApolloReactCommon.MutationResult<UnfollowProjectMutation>;
export type UnfollowProjectMutationOptions = ApolloReactCommon.BaseMutationOptions<UnfollowProjectMutation, UnfollowProjectMutationVariables>;
export const CheckPropertyPostHasC2CContactTradingDepositedDocument = gql`
    query CheckPropertyPostHasC2CContactTradingDeposited($propertyPostId: Uuid!) {
  checkPropertyPostHasC2CContactTradingDeposited(propertyPostId: $propertyPostId) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useCheckPropertyPostHasC2CContactTradingDepositedQuery__
 *
 * To run a query within a React component, call `useCheckPropertyPostHasC2CContactTradingDepositedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckPropertyPostHasC2CContactTradingDepositedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckPropertyPostHasC2CContactTradingDepositedQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useCheckPropertyPostHasC2CContactTradingDepositedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckPropertyPostHasC2CContactTradingDepositedQuery, CheckPropertyPostHasC2CContactTradingDepositedQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckPropertyPostHasC2CContactTradingDepositedQuery, CheckPropertyPostHasC2CContactTradingDepositedQueryVariables>(CheckPropertyPostHasC2CContactTradingDepositedDocument, baseOptions);
      }
export function useCheckPropertyPostHasC2CContactTradingDepositedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckPropertyPostHasC2CContactTradingDepositedQuery, CheckPropertyPostHasC2CContactTradingDepositedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckPropertyPostHasC2CContactTradingDepositedQuery, CheckPropertyPostHasC2CContactTradingDepositedQueryVariables>(CheckPropertyPostHasC2CContactTradingDepositedDocument, baseOptions);
        }
export type CheckPropertyPostHasC2CContactTradingDepositedQueryHookResult = ReturnType<typeof useCheckPropertyPostHasC2CContactTradingDepositedQuery>;
export type CheckPropertyPostHasC2CContactTradingDepositedLazyQueryHookResult = ReturnType<typeof useCheckPropertyPostHasC2CContactTradingDepositedLazyQuery>;
export type CheckPropertyPostHasC2CContactTradingDepositedQueryResult = ApolloReactCommon.QueryResult<CheckPropertyPostHasC2CContactTradingDepositedQuery, CheckPropertyPostHasC2CContactTradingDepositedQueryVariables>;
export const ClosePropertyPostDocument = gql`
    mutation ClosePropertyPost($closePropertyPostInput: ClosePropertyPostInput!) {
  closePropertyPost(closePropertyPostInput: $closePropertyPostInput) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ClosePropertyPostMutationFn = ApolloReactCommon.MutationFunction<ClosePropertyPostMutation, ClosePropertyPostMutationVariables>;

/**
 * __useClosePropertyPostMutation__
 *
 * To run a mutation, you first call `useClosePropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useClosePropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [closePropertyPostMutation, { data, loading, error }] = useClosePropertyPostMutation({
 *   variables: {
 *      closePropertyPostInput: // value for 'closePropertyPostInput'
 *   },
 * });
 */
export function useClosePropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ClosePropertyPostMutation, ClosePropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<ClosePropertyPostMutation, ClosePropertyPostMutationVariables>(ClosePropertyPostDocument, baseOptions);
      }
export type ClosePropertyPostMutationHookResult = ReturnType<typeof useClosePropertyPostMutation>;
export type ClosePropertyPostMutationResult = ApolloReactCommon.MutationResult<ClosePropertyPostMutation>;
export type ClosePropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<ClosePropertyPostMutation, ClosePropertyPostMutationVariables>;
export const CreateC2CPropertyPostDocument = gql`
    mutation CreateC2CPropertyPost($createC2CPropertyPost: CreateC2CPropertyPostInput!) {
  createC2CPropertyPost(createC2CPropertyPostInput: $createC2CPropertyPost) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostDto {
      propertyPostId
      createdByUserId
      propertyCode
      propertyName
      postTitle
      postDescription
      blockCode
      blockName
      postTypeId
      propertyPostStatusId
      propertyTypeId
      propertySubTypeId
      propertySubTypeName
      bookingFee
      price
      priceNoVat
      priceVat
      commission
      buyCommission
      saleCommission
      unitOfMeasureId
      unitOfMeasure {
        unitOfMeasureId
        unitOfMeasureCode
        unitOfMeasureName
        numberOfDecimal
        multiplyWithBaseUnit
        isRound
      }
      buildingArea
      capetAreas
      totalSiteArea
      buildingLine
      direction
      balconyDirection
      latitude
      longitude
      floor
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      houseDesign
      images
      internalFacility
      nearFacility
      propertyPostApprovalStatusId
      approvedBy
      approvedDatetime
      sendingApprovalFrom
      rejectedDatetime
      rejectedReason
      legalInfoId
      collateralizedAtBankId
      expiredDate
      projectId
      projectInfo {
        projectDescription
        projectImage
        projectId
        projectName
      }
      freeTextProject
      addressId
      propertyAddress {
        countryId
        countryName
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
      }
      ownerId
      ownerIsAuthor
      owner {
        userId
        customerFullName
        customerPhone
        customerEmail
      }
      isPrivate
      supportRequestTypeIds
      staffGroups
      staffGroupDescriptions
      length
      width
      isShowGoogleStreetView
      postServiceType
      guaranteedPackageId
      saleCommissionCurrencyUnitId
      propertyPostApprovalStatusDescription
      detailPath
      propertyTypeDescription
    }
    badWordListDto {
      originalContent
      highlightedContent
      badWords
    }
  }
}
    `;
export type CreateC2CPropertyPostMutationFn = ApolloReactCommon.MutationFunction<CreateC2CPropertyPostMutation, CreateC2CPropertyPostMutationVariables>;

/**
 * __useCreateC2CPropertyPostMutation__
 *
 * To run a mutation, you first call `useCreateC2CPropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateC2CPropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createC2CPropertyPostMutation, { data, loading, error }] = useCreateC2CPropertyPostMutation({
 *   variables: {
 *      createC2CPropertyPost: // value for 'createC2CPropertyPost'
 *   },
 * });
 */
export function useCreateC2CPropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateC2CPropertyPostMutation, CreateC2CPropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateC2CPropertyPostMutation, CreateC2CPropertyPostMutationVariables>(CreateC2CPropertyPostDocument, baseOptions);
      }
export type CreateC2CPropertyPostMutationHookResult = ReturnType<typeof useCreateC2CPropertyPostMutation>;
export type CreateC2CPropertyPostMutationResult = ApolloReactCommon.MutationResult<CreateC2CPropertyPostMutation>;
export type CreateC2CPropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateC2CPropertyPostMutation, CreateC2CPropertyPostMutationVariables>;
export const FollowPropertyPostDocument = gql`
    mutation FollowPropertyPost($followPropertyPostInput: FollowPropertyPostInput!) {
  followPropertyPost(followPropertyPostInput: $followPropertyPostInput) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostDto {
      isFollowed
      totalFollower
      totalShare
      totalSpam
      isPrivate
      propertyPostId
      createdByUserId
      propertyCode
      propertyName
      postTitle
      postDescription
      blockCode
      blockName
      postTypeId
      propertyPostStatusId
      propertyTypeId
      propertySubTypeId
      propertySubTypeName
      bookingFee
      price
      priceNoVat
      priceVat
      commission
      buyCommission
      saleCommission
      unitOfMeasureId
      unitOfMeasure {
        unitOfMeasureId
        unitOfMeasureCode
        unitOfMeasureName
        numberOfDecimal
        multiplyWithBaseUnit
        isRound
      }
      buildingArea
      capetAreas
      totalSiteArea
      buildingLine
      direction
      latitude
      longitude
      floor
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      houseDesign
      images
      internalFacility
      nearFacility
      propertyPostApprovalStatusId
      approvedBy
      approvedDatetime
      sendingApprovalFrom
      rejectedDatetime
      rejectedReason
      legalInfoId
      collateralizedAtBankId
      isCollateralized
      expiredDate
      projectId
      freeTextProject
      addressId
      propertyAddress {
        countryId
        countryName
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
      }
      ownerId
      ownerIsAuthor
      owner {
        userId
        customerFullName
        customerPhone
        customerEmail
      }
      longitude
      latitude
      projectInfo {
        projectId
        projectName
        projectImage
        projectDescription
      }
      requestedUpdatingReason
      rejectedReason
    }
  }
}
    `;
export type FollowPropertyPostMutationFn = ApolloReactCommon.MutationFunction<FollowPropertyPostMutation, FollowPropertyPostMutationVariables>;

/**
 * __useFollowPropertyPostMutation__
 *
 * To run a mutation, you first call `useFollowPropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFollowPropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [followPropertyPostMutation, { data, loading, error }] = useFollowPropertyPostMutation({
 *   variables: {
 *      followPropertyPostInput: // value for 'followPropertyPostInput'
 *   },
 * });
 */
export function useFollowPropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FollowPropertyPostMutation, FollowPropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<FollowPropertyPostMutation, FollowPropertyPostMutationVariables>(FollowPropertyPostDocument, baseOptions);
      }
export type FollowPropertyPostMutationHookResult = ReturnType<typeof useFollowPropertyPostMutation>;
export type FollowPropertyPostMutationResult = ApolloReactCommon.MutationResult<FollowPropertyPostMutation>;
export type FollowPropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<FollowPropertyPostMutation, FollowPropertyPostMutationVariables>;
export const GetC2CPropertyPostByIdPublicLastVersionFoDocument = gql`
    query getC2CPropertyPostByIdPublicLastVersionFO($propertyPostId: Uuid!) {
  getC2CPropertyPostByIdPublicLastVersionFO(propertyPostId: $propertyPostId) {
    errorCode
    errorMessageCode
    propertyPostDto {
      propertyPostApprovalStatusId
      buildingArea
      propertyPostId
      propertyCode
      postTitle
      propertyName
      numberOfBedrooms
      numberOfBathrooms
      price
      commission
      commissionTpl
      createdByUserId
      direction
      detailPath
      images
      owner {
        userId
        customerFullName
        customerPhone
        customerEmail
      }
      ownerIsAuthor
      sellerInfo {
        sellerId
        fullName
        avatar
        avatars
        email
        phoneNumber
        isAgent
        agentGroupDescription
      }
      saleCommissionCurrencyUnitId
      isCreateByAgent
      propertyAddress {
        countryName
        cityName
        districtName
        wardName
        homeAddress
        streetName
      }
      propertyPostForRentDto {
        isRented
        rentPrice
        rentCommission
        rentCommissionCurrencyUnitId
      }
    }
  }
}
    `;

/**
 * __useGetC2CPropertyPostByIdPublicLastVersionFoQuery__
 *
 * To run a query within a React component, call `useGetC2CPropertyPostByIdPublicLastVersionFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetC2CPropertyPostByIdPublicLastVersionFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetC2CPropertyPostByIdPublicLastVersionFoQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetC2CPropertyPostByIdPublicLastVersionFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetC2CPropertyPostByIdPublicLastVersionFoQuery, GetC2CPropertyPostByIdPublicLastVersionFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetC2CPropertyPostByIdPublicLastVersionFoQuery, GetC2CPropertyPostByIdPublicLastVersionFoQueryVariables>(GetC2CPropertyPostByIdPublicLastVersionFoDocument, baseOptions);
      }
export function useGetC2CPropertyPostByIdPublicLastVersionFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetC2CPropertyPostByIdPublicLastVersionFoQuery, GetC2CPropertyPostByIdPublicLastVersionFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetC2CPropertyPostByIdPublicLastVersionFoQuery, GetC2CPropertyPostByIdPublicLastVersionFoQueryVariables>(GetC2CPropertyPostByIdPublicLastVersionFoDocument, baseOptions);
        }
export type GetC2CPropertyPostByIdPublicLastVersionFoQueryHookResult = ReturnType<typeof useGetC2CPropertyPostByIdPublicLastVersionFoQuery>;
export type GetC2CPropertyPostByIdPublicLastVersionFoLazyQueryHookResult = ReturnType<typeof useGetC2CPropertyPostByIdPublicLastVersionFoLazyQuery>;
export type GetC2CPropertyPostByIdPublicLastVersionFoQueryResult = ApolloReactCommon.QueryResult<GetC2CPropertyPostByIdPublicLastVersionFoQuery, GetC2CPropertyPostByIdPublicLastVersionFoQueryVariables>;
export const C2CPropertyPostCommissionTplConfigByDateDocument = gql`
    query C2CPropertyPostCommissionTPLConfigByDate($date: Long!) {
  c2CPropertyPostCommissionTPLConfigByDate(date: $date) {
    commissionConfigDto {
      platformFeeBasedOnCommission
      platformFeeMinimumBasedOnSellingPrice
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useC2CPropertyPostCommissionTplConfigByDateQuery__
 *
 * To run a query within a React component, call `useC2CPropertyPostCommissionTplConfigByDateQuery` and pass it any options that fit your needs.
 * When your component renders, `useC2CPropertyPostCommissionTplConfigByDateQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useC2CPropertyPostCommissionTplConfigByDateQuery({
 *   variables: {
 *      date: // value for 'date'
 *   },
 * });
 */
export function useC2CPropertyPostCommissionTplConfigByDateQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<C2CPropertyPostCommissionTplConfigByDateQuery, C2CPropertyPostCommissionTplConfigByDateQueryVariables>) {
        return ApolloReactHooks.useQuery<C2CPropertyPostCommissionTplConfigByDateQuery, C2CPropertyPostCommissionTplConfigByDateQueryVariables>(C2CPropertyPostCommissionTplConfigByDateDocument, baseOptions);
      }
export function useC2CPropertyPostCommissionTplConfigByDateLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<C2CPropertyPostCommissionTplConfigByDateQuery, C2CPropertyPostCommissionTplConfigByDateQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<C2CPropertyPostCommissionTplConfigByDateQuery, C2CPropertyPostCommissionTplConfigByDateQueryVariables>(C2CPropertyPostCommissionTplConfigByDateDocument, baseOptions);
        }
export type C2CPropertyPostCommissionTplConfigByDateQueryHookResult = ReturnType<typeof useC2CPropertyPostCommissionTplConfigByDateQuery>;
export type C2CPropertyPostCommissionTplConfigByDateLazyQueryHookResult = ReturnType<typeof useC2CPropertyPostCommissionTplConfigByDateLazyQuery>;
export type C2CPropertyPostCommissionTplConfigByDateQueryResult = ApolloReactCommon.QueryResult<C2CPropertyPostCommissionTplConfigByDateQuery, C2CPropertyPostCommissionTplConfigByDateQueryVariables>;
export const GetFoC2CPropertyPostsHomePageV1Document = gql`
    query GetFoC2CPropertyPostsHomePageV1($input: GetFoC2CPropertyPostsHomePageV1Input!) {
  getFoC2CPropertyPostsHomePageV1(getFoC2CPropertyPostsHomePageV1Input: $input) {
    propertyPostInfoDtos {
      propertyPostId
      images
      price
      postTitle
      unitOfMeasureId
      propertyTypeId
      propertyAddress {
        homeAddress
        streetName
        wardName
        districtName
        cityName
        __typename
      }
      numberOfBedrooms
      numberOfBathrooms
      buildingArea
      totalSiteArea
      capetAreas
      commission
      isCreatedByAgent
      isFollowed
      isGuaranteed
      direction
      sellerInfo {
        sellerId
        fullName
        avatar
        avatars
        email
        phoneNumber
        isAgent
        agentRating
        agentRankingName
        agentGroupDescription
        __typename
      }
      forSale
      forRent
      detailPath
      saleCommissionCurrencyUnitId
      __typename
    }
    __typename
  }
}
    `;

/**
 * __useGetFoC2CPropertyPostsHomePageV1Query__
 *
 * To run a query within a React component, call `useGetFoC2CPropertyPostsHomePageV1Query` and pass it any options that fit your needs.
 * When your component renders, `useGetFoC2CPropertyPostsHomePageV1Query` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFoC2CPropertyPostsHomePageV1Query({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetFoC2CPropertyPostsHomePageV1Query(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFoC2CPropertyPostsHomePageV1Query, GetFoC2CPropertyPostsHomePageV1QueryVariables>) {
        return ApolloReactHooks.useQuery<GetFoC2CPropertyPostsHomePageV1Query, GetFoC2CPropertyPostsHomePageV1QueryVariables>(GetFoC2CPropertyPostsHomePageV1Document, baseOptions);
      }
export function useGetFoC2CPropertyPostsHomePageV1LazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFoC2CPropertyPostsHomePageV1Query, GetFoC2CPropertyPostsHomePageV1QueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFoC2CPropertyPostsHomePageV1Query, GetFoC2CPropertyPostsHomePageV1QueryVariables>(GetFoC2CPropertyPostsHomePageV1Document, baseOptions);
        }
export type GetFoC2CPropertyPostsHomePageV1QueryHookResult = ReturnType<typeof useGetFoC2CPropertyPostsHomePageV1Query>;
export type GetFoC2CPropertyPostsHomePageV1LazyQueryHookResult = ReturnType<typeof useGetFoC2CPropertyPostsHomePageV1LazyQuery>;
export type GetFoC2CPropertyPostsHomePageV1QueryResult = ApolloReactCommon.QueryResult<GetFoC2CPropertyPostsHomePageV1Query, GetFoC2CPropertyPostsHomePageV1QueryVariables>;
export const GetC2CSimilarPostsDocument = gql`
    query GetC2CSimilarPosts($input: GetC2CSimilarPostsInput!) {
  getC2CSimilarPosts(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
    totalCount
    propertyPostInfoDtos {
      isFollowed
      createdByUserId
      totalFollower
      totalShare
      totalSpam
      propertyPostId
      postTitle
      postDescription
      propertyTypeId
      propertyCode
      direction
      propertyAddress {
        countryId
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
      sellerInfo {
        sellerId
        fullName
        phoneNumber
        email
        isAgent
        agentRating
        agentRankingName
        agentGroupDescription
        avatar
        avatars
      }
      saleCommissionCurrencyUnitId
      unitOfMeasureId
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      images
      price
      latitude
      longitude
      priceNoVat
      priceVat
      buildingArea
      capetAreas
      totalSiteArea
      isVip
      forRent
      forSale
      isSold
      isRented
      isCreatedByAgent
      propertyPostApprovalStatusId
      commission
      isGuaranteed
    }
  }
}
    `;

/**
 * __useGetC2CSimilarPostsQuery__
 *
 * To run a query within a React component, call `useGetC2CSimilarPostsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetC2CSimilarPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetC2CSimilarPostsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetC2CSimilarPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetC2CSimilarPostsQuery, GetC2CSimilarPostsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetC2CSimilarPostsQuery, GetC2CSimilarPostsQueryVariables>(GetC2CSimilarPostsDocument, baseOptions);
      }
export function useGetC2CSimilarPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetC2CSimilarPostsQuery, GetC2CSimilarPostsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetC2CSimilarPostsQuery, GetC2CSimilarPostsQueryVariables>(GetC2CSimilarPostsDocument, baseOptions);
        }
export type GetC2CSimilarPostsQueryHookResult = ReturnType<typeof useGetC2CSimilarPostsQuery>;
export type GetC2CSimilarPostsLazyQueryHookResult = ReturnType<typeof useGetC2CSimilarPostsLazyQuery>;
export type GetC2CSimilarPostsQueryResult = ApolloReactCommon.QueryResult<GetC2CSimilarPostsQuery, GetC2CSimilarPostsQueryVariables>;
export const GetCurPropertyPostsByAgentIdForPublicDocument = gql`
    query GetCurPropertyPostsByAgentIdForPublic($agentId: Uuid!, $first: PaginationAmount, $after: String!, $where: PropertyPostForPublicDtoFilter) {
  curPropertyPostsByAgentIdForPublic(
    agentId: $agentId
    first: $first
    after: $after
    where: $where
  ) {
    edges {
      node {
        isFollowed
        totalFollower
        totalShare
        direction
        propertyPostId
        createdByUserId
        propertyTypeId
        propertyName
        postTitle
        price
        images
        numberOfBedrooms
        numberOfBathrooms
        buildingArea
        commission
        saleCommissionCurrencyUnitId
        propertyPostApprovalStatusId
        unitOfMeasure {
          unitOfMeasureId
          unitOfMeasureCode
          unitOfMeasureName
          numberOfDecimal
          multiplyWithBaseUnit
          isRound
        }
        propertyAddress {
          homeAddress
          streetName
          wardName
          cityName
          districtName
        }
        forSale
        forRent
        propertyPostForRentDto {
          propertyPostForRentId
          rentCommission
          rentCommissionCurrencyUnitId
          rentPeriod
          rentPrice
          isRented
        }
        propertyCode
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetCurPropertyPostsByAgentIdForPublicQuery__
 *
 * To run a query within a React component, call `useGetCurPropertyPostsByAgentIdForPublicQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurPropertyPostsByAgentIdForPublicQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurPropertyPostsByAgentIdForPublicQuery({
 *   variables: {
 *      agentId: // value for 'agentId'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetCurPropertyPostsByAgentIdForPublicQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCurPropertyPostsByAgentIdForPublicQuery, GetCurPropertyPostsByAgentIdForPublicQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCurPropertyPostsByAgentIdForPublicQuery, GetCurPropertyPostsByAgentIdForPublicQueryVariables>(GetCurPropertyPostsByAgentIdForPublicDocument, baseOptions);
      }
export function useGetCurPropertyPostsByAgentIdForPublicLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCurPropertyPostsByAgentIdForPublicQuery, GetCurPropertyPostsByAgentIdForPublicQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCurPropertyPostsByAgentIdForPublicQuery, GetCurPropertyPostsByAgentIdForPublicQueryVariables>(GetCurPropertyPostsByAgentIdForPublicDocument, baseOptions);
        }
export type GetCurPropertyPostsByAgentIdForPublicQueryHookResult = ReturnType<typeof useGetCurPropertyPostsByAgentIdForPublicQuery>;
export type GetCurPropertyPostsByAgentIdForPublicLazyQueryHookResult = ReturnType<typeof useGetCurPropertyPostsByAgentIdForPublicLazyQuery>;
export type GetCurPropertyPostsByAgentIdForPublicQueryResult = ApolloReactCommon.QueryResult<GetCurPropertyPostsByAgentIdForPublicQuery, GetCurPropertyPostsByAgentIdForPublicQueryVariables>;
export const GetFoC2CPropertyPostRequestUpdateReasonDocument = gql`
    query GetFoC2CPropertyPostRequestUpdateReason($propertyPostId: Uuid!) {
  getFoC2CPropertyPostRequestUpdateReason(propertyPostId: $propertyPostId) {
    errorCode
    errorMessage
    errorMessageCode
    requestedUpdatingReason
  }
}
    `;

/**
 * __useGetFoC2CPropertyPostRequestUpdateReasonQuery__
 *
 * To run a query within a React component, call `useGetFoC2CPropertyPostRequestUpdateReasonQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetFoC2CPropertyPostRequestUpdateReasonQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetFoC2CPropertyPostRequestUpdateReasonQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetFoC2CPropertyPostRequestUpdateReasonQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetFoC2CPropertyPostRequestUpdateReasonQuery, GetFoC2CPropertyPostRequestUpdateReasonQueryVariables>) {
        return ApolloReactHooks.useQuery<GetFoC2CPropertyPostRequestUpdateReasonQuery, GetFoC2CPropertyPostRequestUpdateReasonQueryVariables>(GetFoC2CPropertyPostRequestUpdateReasonDocument, baseOptions);
      }
export function useGetFoC2CPropertyPostRequestUpdateReasonLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetFoC2CPropertyPostRequestUpdateReasonQuery, GetFoC2CPropertyPostRequestUpdateReasonQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetFoC2CPropertyPostRequestUpdateReasonQuery, GetFoC2CPropertyPostRequestUpdateReasonQueryVariables>(GetFoC2CPropertyPostRequestUpdateReasonDocument, baseOptions);
        }
export type GetFoC2CPropertyPostRequestUpdateReasonQueryHookResult = ReturnType<typeof useGetFoC2CPropertyPostRequestUpdateReasonQuery>;
export type GetFoC2CPropertyPostRequestUpdateReasonLazyQueryHookResult = ReturnType<typeof useGetFoC2CPropertyPostRequestUpdateReasonLazyQuery>;
export type GetFoC2CPropertyPostRequestUpdateReasonQueryResult = ApolloReactCommon.QueryResult<GetFoC2CPropertyPostRequestUpdateReasonQuery, GetFoC2CPropertyPostRequestUpdateReasonQueryVariables>;
export const GetGuaranteedPackagesDocument = gql`
    query GetGuaranteedPackages {
  guaranteedPackages(
    page: 1
    pageSize: 999
    order_by: {guaranteedPackageCode: DESC}
  ) {
    totalCount
    edges {
      guaranteedPackageId
      guaranteedPackageName
      guaranteedPackageCode
      guaranteedPackageDescription
      guaranteedPackagePrepaymentRate
      guaranteedPackageValidMonths
    }
  }
}
    `;

/**
 * __useGetGuaranteedPackagesQuery__
 *
 * To run a query within a React component, call `useGetGuaranteedPackagesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetGuaranteedPackagesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetGuaranteedPackagesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetGuaranteedPackagesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetGuaranteedPackagesQuery, GetGuaranteedPackagesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetGuaranteedPackagesQuery, GetGuaranteedPackagesQueryVariables>(GetGuaranteedPackagesDocument, baseOptions);
      }
export function useGetGuaranteedPackagesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetGuaranteedPackagesQuery, GetGuaranteedPackagesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetGuaranteedPackagesQuery, GetGuaranteedPackagesQueryVariables>(GetGuaranteedPackagesDocument, baseOptions);
        }
export type GetGuaranteedPackagesQueryHookResult = ReturnType<typeof useGetGuaranteedPackagesQuery>;
export type GetGuaranteedPackagesLazyQueryHookResult = ReturnType<typeof useGetGuaranteedPackagesLazyQuery>;
export type GetGuaranteedPackagesQueryResult = ApolloReactCommon.QueryResult<GetGuaranteedPackagesQuery, GetGuaranteedPackagesQueryVariables>;
export const GetPropertyByUserIdDocument = gql`
    query GetPropertyByUserId($pageSize: PaginationAmount!, $cursor: String!, $filter: PropertyPostDtoFilter!) {
  curPropertyPosts(
    first: $pageSize
    after: $cursor
    where: $filter
    order_by: {createdDatetime: ASC}
  ) {
    edges {
      node {
        isFollowed
        totalFollower
        totalShare
        totalSpam
        direction
        isPrivate
        propertyPostId
        createdByUserId
        propertyTypeId
        propertyName
        postTitle
        price
        images
        numberOfBedrooms
        numberOfBathrooms
        buildingArea
        capetAreas
        commission
        saleCommissionCurrencyUnitId
        propertyPostApprovalStatusId
        unitOfMeasureId
        unitOfMeasure {
          unitOfMeasureId
          unitOfMeasureCode
          unitOfMeasureName
          numberOfDecimal
          multiplyWithBaseUnit
          isRound
        }
        propertyAddress {
          homeAddress
          streetName
          wardName
          cityName
          districtName
        }
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetPropertyByUserIdQuery__
 *
 * To run a query within a React component, call `useGetPropertyByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyByUserIdQuery({
 *   variables: {
 *      pageSize: // value for 'pageSize'
 *      cursor: // value for 'cursor'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetPropertyByUserIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyByUserIdQuery, GetPropertyByUserIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyByUserIdQuery, GetPropertyByUserIdQueryVariables>(GetPropertyByUserIdDocument, baseOptions);
      }
export function useGetPropertyByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyByUserIdQuery, GetPropertyByUserIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyByUserIdQuery, GetPropertyByUserIdQueryVariables>(GetPropertyByUserIdDocument, baseOptions);
        }
export type GetPropertyByUserIdQueryHookResult = ReturnType<typeof useGetPropertyByUserIdQuery>;
export type GetPropertyByUserIdLazyQueryHookResult = ReturnType<typeof useGetPropertyByUserIdLazyQuery>;
export type GetPropertyByUserIdQueryResult = ApolloReactCommon.QueryResult<GetPropertyByUserIdQuery, GetPropertyByUserIdQueryVariables>;
export const GetPropertyPostByCurrentUserDocument = gql`
    query getPropertyPostByCurrentUser($page: Int, $pageSize: Int, $where: PropertyPostDtoFilter, $sort: PropertyPostDtoSort, $keywords: String) {
  propertyPostsByCurrentUser(
    page: $page
    pageSize: $pageSize
    where: $where
    order_by: $sort
    keywords: $keywords
  ) {
    edges {
      guaranteedPackageEndTime
      postServiceType
      contractStatus
      propertyPostId
      propertyCode
      postTitle
      price
      buildingArea
      numberOfBedrooms
      numberOfBathrooms
      images
      propertyAddress {
        countryName
        cityName
        districtName
        wardName
        homeAddress
        streetName
      }
      propertyPostApprovalStatusId
      direction
      commission
      saleCommissionCurrencyUnitId
      propertyPostForRentDto {
        rentPrice
        rentCommission
        rentCommissionCurrencyUnitId
        rentPeriod
        isRented
      }
      forSale
      forRent
      isSold
      createdDatetime
    }
    totalCount
  }
}
    `;

/**
 * __useGetPropertyPostByCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostByCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostByCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostByCurrentUserQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      where: // value for 'where'
 *      sort: // value for 'sort'
 *      keywords: // value for 'keywords'
 *   },
 * });
 */
export function useGetPropertyPostByCurrentUserQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostByCurrentUserQuery, GetPropertyPostByCurrentUserQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostByCurrentUserQuery, GetPropertyPostByCurrentUserQueryVariables>(GetPropertyPostByCurrentUserDocument, baseOptions);
      }
export function useGetPropertyPostByCurrentUserLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostByCurrentUserQuery, GetPropertyPostByCurrentUserQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostByCurrentUserQuery, GetPropertyPostByCurrentUserQueryVariables>(GetPropertyPostByCurrentUserDocument, baseOptions);
        }
export type GetPropertyPostByCurrentUserQueryHookResult = ReturnType<typeof useGetPropertyPostByCurrentUserQuery>;
export type GetPropertyPostByCurrentUserLazyQueryHookResult = ReturnType<typeof useGetPropertyPostByCurrentUserLazyQuery>;
export type GetPropertyPostByCurrentUserQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostByCurrentUserQuery, GetPropertyPostByCurrentUserQueryVariables>;
export const GetPropertyPostByIdDocument = gql`
    query GetPropertyPostById($propertyPostId: Uuid!) {
  propertyPostById(propertyPostId: $propertyPostId) {
    isPrivate
    isSold
    isRented
    propertyPostId
    panoramaImageCode
    propertyPostApprovalStatusId
    negotiable
    isFollowed
    totalFollower
    totalShare
    totalSpam
    width
    length
    images
    recordVersion
    createdByUserId
    expiredDate
    approvedBy
    approvedDatetime
    sendingApprovalFrom
    rejectReasonId
    rejectedDatetime
    rejectedReason
    requestedUpdatingReason
    updatedDatetime
    createdDatetime
    lastModified
    propertyCode
    propertyName
    postTitle
    postDescription
    blockCode
    blockName
    postTypeId
    propertyPostStatusId
    propertyTypeId
    propertySubTypeId
    propertySubTypeName
    bookingFee
    price
    priceNoVat
    priceVat
    commission
    saleCommissionCurrencyUnitId
    buyCommission
    saleCommission
    unitOfMeasureId
    unitOfMeasure {
      unitOfMeasureId
      unitOfMeasureCode
      unitOfMeasureName
      numberOfDecimal
      multiplyWithBaseUnit
      isRound
    }
    buildingArea
    capetAreas
    totalSiteArea
    buildingLine
    direction
    balconyDirection
    latitude
    longitude
    floor
    numberOfFloor
    numberOfBedrooms
    numberOfBathrooms
    houseDesign
    internalFacility
    nearFacility
    propertyPostForRentDto {
      propertyPostForRentId
      rentCommission
      rentCommissionCurrencyUnitId
      rentPeriod
      rentPrice
      isRented
    }
    legalInfoId
    collateralizedAtBankId
    isCollateralized
    addressId
    propertyAddress {
      countryId
      countryName
      cityId
      cityName
      districtId
      districtName
      wardId
      wardName
      homeAddress
      streetName
    }
    forRent
    forSale
    ownerId
    ownerIsAuthor
    owner {
      userId
      customerFullName
      customerPhone
      customerEmail
    }
    sellerInfo {
      sellerId
      fullName
      avatar
      avatars
      email
      phoneNumber
      isAgent
      agentRating
      agentRankingName
      agentGroupDescription
    }
    isShowGoogleStreetView
    guaranteedPackage {
      guaranteedPackageId
      contractDocument
      contractPrepaymentAmount
      contractRefuseNote
      contractStatus
      guaranteedPackageStartTime
      guaranteedPackageEndTime
      guaranteedPackageValidMonths
      paymentStatusId
    }
    contractStatus
    guaranteedPackageEndTime
    projectId
    b2C2CProjectId
    freeTextProject
    projectInfo {
      projectId
      projectName
      projectImage
      projectDescription
    }
    supportRequestTypeIds
    staffUserId
    postServiceType
    legalDocuments
    guaranteedPackageId
    propertyLocation
    alleyWidth
    commissionTpl
    commissionBuyer
    commissionSeller
    matterportUrl
    detailPath
    rating
  }
}
    `;

/**
 * __useGetPropertyPostByIdQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostByIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetPropertyPostByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostByIdQuery, GetPropertyPostByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostByIdQuery, GetPropertyPostByIdQueryVariables>(GetPropertyPostByIdDocument, baseOptions);
      }
export function useGetPropertyPostByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostByIdQuery, GetPropertyPostByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostByIdQuery, GetPropertyPostByIdQueryVariables>(GetPropertyPostByIdDocument, baseOptions);
        }
export type GetPropertyPostByIdQueryHookResult = ReturnType<typeof useGetPropertyPostByIdQuery>;
export type GetPropertyPostByIdLazyQueryHookResult = ReturnType<typeof useGetPropertyPostByIdLazyQuery>;
export type GetPropertyPostByIdQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostByIdQuery, GetPropertyPostByIdQueryVariables>;
export const GetPropertyPostByIdPublicDocument = gql`
    query GetPropertyPostByIdPublic($propertyPostId: Uuid!) {
  propertyPostDetail(propertyPostId: $propertyPostId) {
    isPrivate
    propertyPostId
    panoramaImageCode
    propertyPostApprovalStatusId
    negotiable
    isFollowed
    totalFollower
    totalShare
    totalSpam
    width
    length
    images
    recordVersion
    createdByUserId
    expiredDate
    approvedBy
    approvedDatetime
    sendingApprovalFrom
    rejectedDatetime
    rejectedReason
    requestedUpdatingReason
    updatedDatetime
    createdDatetime
    lastModified
    propertyCode
    propertyName
    postTitle
    postDescription
    blockCode
    blockName
    postTypeId
    propertyPostStatusId
    propertyTypeId
    propertySubTypeId
    propertySubTypeName
    bookingFee
    price
    priceNoVat
    priceVat
    commission
    saleCommissionCurrencyUnitId
    buyCommission
    saleCommission
    unitOfMeasureId
    unitOfMeasure {
      unitOfMeasureId
      unitOfMeasureCode
      unitOfMeasureName
      numberOfDecimal
      multiplyWithBaseUnit
      isRound
    }
    buildingArea
    capetAreas
    totalSiteArea
    buildingLine
    direction
    latitude
    longitude
    floor
    numberOfFloor
    numberOfBedrooms
    numberOfBathrooms
    houseDesign
    internalFacility
    nearFacility
    propertyPostForRentDto {
      propertyPostForRentId
      rentCommission
      rentCommissionCurrencyUnitId
      rentPeriod
      rentPrice
      isRented
    }
    legalInfoId
    collateralizedAtBankId
    isCollateralized
    addressId
    propertyAddress {
      countryId
      countryName
      cityId
      cityName
      districtId
      districtName
      wardId
      wardName
      homeAddress
      streetName
    }
    isSold
    isRented
    forRent
    forSale
    ownerId
    ownerIsAuthor
    owner {
      userId
      customerFullName
      customerPhone
      customerEmail
    }
    longitude
    latitude
    sellerInfo {
      sellerId
      fullName
      avatar
      avatars
      email
      phoneNumber
      isAgent
      agentRating
      agentRankingName
      agentGroupDescription
    }
    projectId
    freeTextProject
    projectInfo {
      projectId
      projectName
      projectImage
      projectDescription
    }
    supportRequestTypeIds
    isShowGoogleStreetView
    guaranteedPackage {
      contractDocument
      contractPrepaymentAmount
      contractRefuseNote
      contractStatus
      guaranteedPackageEndTime
    }
    contractStatus
    guaranteedPackageEndTime
    staffUserId
    postServiceType
    propertyLocation
    alleyWidth
    commissionTpl
    commissionBuyer
    commissionSeller
    matterportUrl
    detailPath
    rating
  }
}
    `;

/**
 * __useGetPropertyPostByIdPublicQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostByIdPublicQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostByIdPublicQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostByIdPublicQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetPropertyPostByIdPublicQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostByIdPublicQuery, GetPropertyPostByIdPublicQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostByIdPublicQuery, GetPropertyPostByIdPublicQueryVariables>(GetPropertyPostByIdPublicDocument, baseOptions);
      }
export function useGetPropertyPostByIdPublicLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostByIdPublicQuery, GetPropertyPostByIdPublicQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostByIdPublicQuery, GetPropertyPostByIdPublicQueryVariables>(GetPropertyPostByIdPublicDocument, baseOptions);
        }
export type GetPropertyPostByIdPublicQueryHookResult = ReturnType<typeof useGetPropertyPostByIdPublicQuery>;
export type GetPropertyPostByIdPublicLazyQueryHookResult = ReturnType<typeof useGetPropertyPostByIdPublicLazyQuery>;
export type GetPropertyPostByIdPublicQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostByIdPublicQuery, GetPropertyPostByIdPublicQueryVariables>;
export const GetPropertyPostSuggestionDocument = gql`
    query GetPropertyPostSuggestion($pageSize: PaginationAmount!, $cursor: String!, $filter: PropertyPostSuggestionDtoFilter) {
  curPropertyPostSuggestions(
    first: $pageSize
    after: $cursor
    where: $filter
    order_by: {propertyPostSuggestionCreatedDatetime: DESC}
  ) {
    edges {
      node {
        propertyTypeId
        propertyPostId
        propertyName
        postTitle
        price
        images
        numberOfBedrooms
        numberOfBathrooms
        buildingArea
        capetAreas
        propertyPostApprovalStatusId
        unitOfMeasure {
          unitOfMeasureId
          unitOfMeasureCode
          unitOfMeasureName
          numberOfDecimal
          multiplyWithBaseUnit
          isRound
        }
        propertyAddress {
          streetName
          wardName
          cityName
          districtName
        }
        commission
        isFollowed
        totalFollower
        direction
        postServiceType
        contractStatus
        guaranteedPackageEndTime
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetPropertyPostSuggestionQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostSuggestionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostSuggestionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostSuggestionQuery({
 *   variables: {
 *      pageSize: // value for 'pageSize'
 *      cursor: // value for 'cursor'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetPropertyPostSuggestionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostSuggestionQuery, GetPropertyPostSuggestionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostSuggestionQuery, GetPropertyPostSuggestionQueryVariables>(GetPropertyPostSuggestionDocument, baseOptions);
      }
export function useGetPropertyPostSuggestionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostSuggestionQuery, GetPropertyPostSuggestionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostSuggestionQuery, GetPropertyPostSuggestionQueryVariables>(GetPropertyPostSuggestionDocument, baseOptions);
        }
export type GetPropertyPostSuggestionQueryHookResult = ReturnType<typeof useGetPropertyPostSuggestionQuery>;
export type GetPropertyPostSuggestionLazyQueryHookResult = ReturnType<typeof useGetPropertyPostSuggestionLazyQuery>;
export type GetPropertyPostSuggestionQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostSuggestionQuery, GetPropertyPostSuggestionQueryVariables>;
export const GetPropertyPostsDocument = gql`
    query GetPropertyPosts($where: PropertyPostDtoFilter, $page: Int, $pageSize: Int, $order_by: PropertyPostDtoSort) {
  propertyPosts(
    where: $where
    page: $page
    pageSize: $pageSize
    order_by: $order_by
  ) {
    edges {
      isPrivate
      propertyPostId
      propertyPostApprovalStatusId
      isFollowed
      totalFollower
      totalShare
      totalSpam
      images
      createdByUserId
      expiredDate
      approvedBy
      approvedDatetime
      sendingApprovalFrom
      rejectedDatetime
      rejectedReason
      requestedUpdatingReason
      updatedDatetime
      createdDatetime
      lastModified
      propertyCode
      propertyName
      postTitle
      postDescription
      blockCode
      blockName
      postTypeId
      propertyPostStatusId
      propertyTypeId
      propertySubTypeId
      propertySubTypeName
      bookingFee
      price
      priceNoVat
      priceVat
      commission
      saleCommissionCurrencyUnitId
      buyCommission
      saleCommission
      unitOfMeasureId
      unitOfMeasure {
        unitOfMeasureId
        unitOfMeasureCode
        unitOfMeasureName
        numberOfDecimal
        multiplyWithBaseUnit
        isRound
      }
      projectId
      projectInfo {
        calculateSize
        projectDescription
        projectId
        projectName
        projectImage
      }
      buildingArea
      capetAreas
      totalSiteArea
      buildingLine
      direction
      latitude
      longitude
      floor
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      houseDesign
      internalFacility
      nearFacility
      legalInfoId
      collateralizedAtBankId
      isCollateralized
      addressId
      propertyAddress {
        countryId
        countryName
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
      }
      longitude
      latitude
      sellerInfo {
        sellerId
        fullName
        avatar
        email
        phoneNumber
        isAgent
        agentRating
        agentRankingName
        agentGroupDescription
      }
      propertyPostForRentDto {
        propertyPostForRentId
        rentCommission
        rentCommissionCurrencyUnitId
        rentPeriod
        rentPrice
        isRented
      }
      forRent
      forSale
      freeTextProject
      ownerId
    }
  }
}
    `;

/**
 * __useGetPropertyPostsQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostsQuery({
 *   variables: {
 *      where: // value for 'where'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetPropertyPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostsQuery, GetPropertyPostsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostsQuery, GetPropertyPostsQueryVariables>(GetPropertyPostsDocument, baseOptions);
      }
export function useGetPropertyPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostsQuery, GetPropertyPostsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostsQuery, GetPropertyPostsQueryVariables>(GetPropertyPostsDocument, baseOptions);
        }
export type GetPropertyPostsQueryHookResult = ReturnType<typeof useGetPropertyPostsQuery>;
export type GetPropertyPostsLazyQueryHookResult = ReturnType<typeof useGetPropertyPostsLazyQuery>;
export type GetPropertyPostsQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostsQuery, GetPropertyPostsQueryVariables>;
export const GetPropertyPostsByFollowerIdDocument = gql`
    query GetPropertyPostsByFollowerId($followerId: Uuid!, $pageSize: PaginationAmount!, $cursor: String!, $filter: PropertyPostDtoFilter) {
  curPropertyPostsByFollowerId(
    followerId: $followerId
    first: $pageSize
    after: $cursor
    where: $filter
    order_by: {createdDatetime: ASC}
  ) {
    edges {
      node {
        isFollowed
        totalFollower
        createdByUserId
        propertyPostId
        propertyTypeId
        propertyName
        postTitle
        price
        images
        numberOfBedrooms
        numberOfBathrooms
        buildingArea
        direction
        capetAreas
        commission
        propertyPostApprovalStatusId
        saleCommissionCurrencyUnitId
        unitOfMeasureId
        unitOfMeasure {
          unitOfMeasureId
          unitOfMeasureCode
          unitOfMeasureName
          numberOfDecimal
          multiplyWithBaseUnit
          isRound
        }
        propertyAddress {
          streetName
          wardName
          cityName
          districtName
        }
        forSale
        forRent
        propertyPostForRentDto {
          propertyPostForRentId
          rentCommission
          rentCommissionCurrencyUnitId
          rentPeriod
          rentPrice
          isRented
        }
        postServiceType
        contractStatus
        guaranteedPackageEndTime
        guaranteedPackage {
          contractStatus
          guaranteedPackageEndTime
        }
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetPropertyPostsByFollowerIdQuery__
 *
 * To run a query within a React component, call `useGetPropertyPostsByFollowerIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyPostsByFollowerIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyPostsByFollowerIdQuery({
 *   variables: {
 *      followerId: // value for 'followerId'
 *      pageSize: // value for 'pageSize'
 *      cursor: // value for 'cursor'
 *      filter: // value for 'filter'
 *   },
 * });
 */
export function useGetPropertyPostsByFollowerIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyPostsByFollowerIdQuery, GetPropertyPostsByFollowerIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyPostsByFollowerIdQuery, GetPropertyPostsByFollowerIdQueryVariables>(GetPropertyPostsByFollowerIdDocument, baseOptions);
      }
export function useGetPropertyPostsByFollowerIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyPostsByFollowerIdQuery, GetPropertyPostsByFollowerIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyPostsByFollowerIdQuery, GetPropertyPostsByFollowerIdQueryVariables>(GetPropertyPostsByFollowerIdDocument, baseOptions);
        }
export type GetPropertyPostsByFollowerIdQueryHookResult = ReturnType<typeof useGetPropertyPostsByFollowerIdQuery>;
export type GetPropertyPostsByFollowerIdLazyQueryHookResult = ReturnType<typeof useGetPropertyPostsByFollowerIdLazyQuery>;
export type GetPropertyPostsByFollowerIdQueryResult = ApolloReactCommon.QueryResult<GetPropertyPostsByFollowerIdQuery, GetPropertyPostsByFollowerIdQueryVariables>;
export const GetShortPropertyPostByIdDocument = gql`
    query GetShortPropertyPostById($propertyPostId: Uuid!) {
  propertyPostById(propertyPostId: $propertyPostId) {
    propertyPostId
    postTitle
    postDescription
    postTypeId
    propertyPostStatusId
    propertyTypeId
    propertyTypeName
    isCreateByAgent
    addressId
    propertyAddress {
      countryId
      countryName
      cityId
      cityName
      districtId
      districtName
      wardId
      wardName
      homeAddress
      streetName
    }
    unitOfMeasureId
    unitOfMeasure {
      unitOfMeasureId
      unitOfMeasureCode
      unitOfMeasureName
      numberOfDecimal
      multiplyWithBaseUnit
      isRound
    }
    sellerInfo {
      sellerId
      fullName
      phoneNumber
      email
      isAgent
      agentRating
      agentRankingName
      agentGroupDescription
      avatar
      avatars
    }
    propertyPostForRentDto {
      propertyPostForRentId
      rentCommission
      rentCommissionCurrencyUnitId
      rentPeriod
      rentPrice
    }
    forRent
    forSale
    numberOfFloor
    numberOfBedrooms
    numberOfBathrooms
    images
    price
    priceNoVat
    priceVat
    commission
    saleCommissionCurrencyUnitId
    buildingArea
    direction
    capetAreas
    totalSiteArea
    latitude
    longitude
    propertyPostApprovalStatusId
    propertyPostApprovalStatusName
    isFollowed
    ownerId
    guaranteedPackage {
      contractStatus
      guaranteedPackageEndTime
    }
    contractStatus
    guaranteedPackageEndTime
    postServiceType
    rating
  }
}
    `;

/**
 * __useGetShortPropertyPostByIdQuery__
 *
 * To run a query within a React component, call `useGetShortPropertyPostByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetShortPropertyPostByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetShortPropertyPostByIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetShortPropertyPostByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetShortPropertyPostByIdQuery, GetShortPropertyPostByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetShortPropertyPostByIdQuery, GetShortPropertyPostByIdQueryVariables>(GetShortPropertyPostByIdDocument, baseOptions);
      }
export function useGetShortPropertyPostByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetShortPropertyPostByIdQuery, GetShortPropertyPostByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetShortPropertyPostByIdQuery, GetShortPropertyPostByIdQueryVariables>(GetShortPropertyPostByIdDocument, baseOptions);
        }
export type GetShortPropertyPostByIdQueryHookResult = ReturnType<typeof useGetShortPropertyPostByIdQuery>;
export type GetShortPropertyPostByIdLazyQueryHookResult = ReturnType<typeof useGetShortPropertyPostByIdLazyQuery>;
export type GetShortPropertyPostByIdQueryResult = ApolloReactCommon.QueryResult<GetShortPropertyPostByIdQuery, GetShortPropertyPostByIdQueryVariables>;
export const GetShortPropertyPostByIdForPublicDocument = gql`
    query GetShortPropertyPostByIdForPublic($propertyPostId: Uuid!) {
  propertyPostDetail(propertyPostId: $propertyPostId) {
    propertyPostId
    postTitle
    postDescription
    postTypeId
    propertyPostStatusId
    propertyTypeId
    propertyTypeName
    isCreateByAgent
    addressId
    propertyAddress {
      countryId
      countryName
      cityId
      cityName
      districtId
      districtName
      wardId
      wardName
      homeAddress
      streetName
    }
    unitOfMeasureId
    unitOfMeasure {
      unitOfMeasureId
      unitOfMeasureCode
      unitOfMeasureName
      numberOfDecimal
      multiplyWithBaseUnit
      isRound
    }
    sellerInfo {
      sellerId
      fullName
      phoneNumber
      email
      isAgent
      agentRating
      agentRankingName
      agentGroupDescription
      avatar
      avatars
    }
    propertyPostForRentDto {
      propertyPostForRentId
      rentCommission
      rentCommissionCurrencyUnitId
      rentPeriod
      rentPrice
    }
    isSold
    isRented
    forRent
    forSale
    numberOfFloor
    numberOfBedrooms
    numberOfBathrooms
    images
    price
    priceNoVat
    priceVat
    commission
    saleCommissionCurrencyUnitId
    buildingArea
    direction
    capetAreas
    totalSiteArea
    latitude
    longitude
    propertyPostApprovalStatusId
    isFollowed
    guaranteedPackage {
      contractStatus
      guaranteedPackageEndTime
    }
    contractStatus
    guaranteedPackageEndTime
    postServiceType
    rating
  }
}
    `;

/**
 * __useGetShortPropertyPostByIdForPublicQuery__
 *
 * To run a query within a React component, call `useGetShortPropertyPostByIdForPublicQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetShortPropertyPostByIdForPublicQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetShortPropertyPostByIdForPublicQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetShortPropertyPostByIdForPublicQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetShortPropertyPostByIdForPublicQuery, GetShortPropertyPostByIdForPublicQueryVariables>) {
        return ApolloReactHooks.useQuery<GetShortPropertyPostByIdForPublicQuery, GetShortPropertyPostByIdForPublicQueryVariables>(GetShortPropertyPostByIdForPublicDocument, baseOptions);
      }
export function useGetShortPropertyPostByIdForPublicLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetShortPropertyPostByIdForPublicQuery, GetShortPropertyPostByIdForPublicQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetShortPropertyPostByIdForPublicQuery, GetShortPropertyPostByIdForPublicQueryVariables>(GetShortPropertyPostByIdForPublicDocument, baseOptions);
        }
export type GetShortPropertyPostByIdForPublicQueryHookResult = ReturnType<typeof useGetShortPropertyPostByIdForPublicQuery>;
export type GetShortPropertyPostByIdForPublicLazyQueryHookResult = ReturnType<typeof useGetShortPropertyPostByIdForPublicLazyQuery>;
export type GetShortPropertyPostByIdForPublicQueryResult = ApolloReactCommon.QueryResult<GetShortPropertyPostByIdForPublicQuery, GetShortPropertyPostByIdForPublicQueryVariables>;
export const GetSummaryPropertyPostDocument = gql`
    query GetSummaryPropertyPost {
  summaryPropertyPosts {
    propertyPostInfoByApproveStatus
    propertyPostInfoByPostStatus
  }
  summaryByCrawlerTrackingStatus {
    totalCount
  }
}
    `;

/**
 * __useGetSummaryPropertyPostQuery__
 *
 * To run a query within a React component, call `useGetSummaryPropertyPostQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSummaryPropertyPostQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSummaryPropertyPostQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSummaryPropertyPostQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSummaryPropertyPostQuery, GetSummaryPropertyPostQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSummaryPropertyPostQuery, GetSummaryPropertyPostQueryVariables>(GetSummaryPropertyPostDocument, baseOptions);
      }
export function useGetSummaryPropertyPostLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSummaryPropertyPostQuery, GetSummaryPropertyPostQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSummaryPropertyPostQuery, GetSummaryPropertyPostQueryVariables>(GetSummaryPropertyPostDocument, baseOptions);
        }
export type GetSummaryPropertyPostQueryHookResult = ReturnType<typeof useGetSummaryPropertyPostQuery>;
export type GetSummaryPropertyPostLazyQueryHookResult = ReturnType<typeof useGetSummaryPropertyPostLazyQuery>;
export type GetSummaryPropertyPostQueryResult = ApolloReactCommon.QueryResult<GetSummaryPropertyPostQuery, GetSummaryPropertyPostQueryVariables>;
export const UnfollowPropertyPostDocument = gql`
    mutation UnfollowPropertyPost($unfollowPropertyPostInput: UnfollowPropertyPostInput!) {
  unfollowPropertyPost(unfollowPropertyPostInput: $unfollowPropertyPostInput) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostDto {
      isFollowed
      isPrivate
      propertyPostId
      createdByUserId
      propertyCode
      propertyName
      postTitle
      postDescription
      blockCode
      blockName
      postTypeId
      propertyPostStatusId
      propertyTypeId
      propertySubTypeId
      propertySubTypeName
      bookingFee
      price
      priceNoVat
      priceVat
      commission
      buyCommission
      saleCommission
      unitOfMeasureId
      unitOfMeasure {
        unitOfMeasureId
        unitOfMeasureCode
        unitOfMeasureName
        numberOfDecimal
        multiplyWithBaseUnit
        isRound
      }
      buildingArea
      capetAreas
      totalSiteArea
      buildingLine
      direction
      latitude
      longitude
      floor
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      houseDesign
      images
      internalFacility
      nearFacility
      propertyPostApprovalStatusId
      approvedBy
      approvedDatetime
      sendingApprovalFrom
      rejectedDatetime
      rejectedReason
      legalInfoId
      collateralizedAtBankId
      isCollateralized
      expiredDate
      projectId
      freeTextProject
      addressId
      propertyAddress {
        countryId
        countryName
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
      }
      ownerId
      ownerIsAuthor
      owner {
        userId
        customerFullName
        customerPhone
        customerEmail
      }
      longitude
      latitude
      projectInfo {
        projectId
        projectName
        projectImage
        projectDescription
      }
      totalFollower
      totalShare
      totalSpam
      requestedUpdatingReason
      rejectedReason
    }
  }
}
    `;
export type UnfollowPropertyPostMutationFn = ApolloReactCommon.MutationFunction<UnfollowPropertyPostMutation, UnfollowPropertyPostMutationVariables>;

/**
 * __useUnfollowPropertyPostMutation__
 *
 * To run a mutation, you first call `useUnfollowPropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUnfollowPropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [unfollowPropertyPostMutation, { data, loading, error }] = useUnfollowPropertyPostMutation({
 *   variables: {
 *      unfollowPropertyPostInput: // value for 'unfollowPropertyPostInput'
 *   },
 * });
 */
export function useUnfollowPropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UnfollowPropertyPostMutation, UnfollowPropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<UnfollowPropertyPostMutation, UnfollowPropertyPostMutationVariables>(UnfollowPropertyPostDocument, baseOptions);
      }
export type UnfollowPropertyPostMutationHookResult = ReturnType<typeof useUnfollowPropertyPostMutation>;
export type UnfollowPropertyPostMutationResult = ApolloReactCommon.MutationResult<UnfollowPropertyPostMutation>;
export type UnfollowPropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<UnfollowPropertyPostMutation, UnfollowPropertyPostMutationVariables>;
export const UpdateC2CPropertyPostDocument = gql`
    mutation UpdateC2CPropertyPost($updateC2CPropertyPostInput: UpdateC2CPropertyPostInput!) {
  updateC2CPropertyPost(updateC2CPropertyPostInput: $updateC2CPropertyPostInput) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostDto {
      isFollowed
      propertyPostId
      createdByUserId
      propertyCode
      propertyName
      postTitle
      postDescription
      blockCode
      blockName
      postTypeId
      propertyPostStatusId
      propertyTypeId
      propertySubTypeId
      propertySubTypeName
      bookingFee
      price
      priceNoVat
      priceVat
      commission
      buyCommission
      saleCommission
      unitOfMeasureId
      unitOfMeasure {
        unitOfMeasureId
        unitOfMeasureCode
        unitOfMeasureName
        numberOfDecimal
        multiplyWithBaseUnit
        isRound
      }
      buildingArea
      capetAreas
      totalSiteArea
      buildingLine
      direction
      balconyDirection
      latitude
      longitude
      floor
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      houseDesign
      images
      internalFacility
      nearFacility
      propertyPostApprovalStatusId
      approvedBy
      approvedDatetime
      sendingApprovalFrom
      rejectedDatetime
      rejectedReason
      legalInfoId
      collateralizedAtBankId
      expiredDate
      projectId
      freeTextProject
      addressId
      propertyAddress {
        countryId
        countryName
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
      }
      supportRequestTypeIds
      ownerId
      ownerIsAuthor
      owner {
        userId
        customerFullName
        customerPhone
        customerEmail
      }
    }
    badWordListDto {
      originalContent
      highlightedContent
      badWords
    }
  }
}
    `;
export type UpdateC2CPropertyPostMutationFn = ApolloReactCommon.MutationFunction<UpdateC2CPropertyPostMutation, UpdateC2CPropertyPostMutationVariables>;

/**
 * __useUpdateC2CPropertyPostMutation__
 *
 * To run a mutation, you first call `useUpdateC2CPropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateC2CPropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateC2CPropertyPostMutation, { data, loading, error }] = useUpdateC2CPropertyPostMutation({
 *   variables: {
 *      updateC2CPropertyPostInput: // value for 'updateC2CPropertyPostInput'
 *   },
 * });
 */
export function useUpdateC2CPropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateC2CPropertyPostMutation, UpdateC2CPropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateC2CPropertyPostMutation, UpdateC2CPropertyPostMutationVariables>(UpdateC2CPropertyPostDocument, baseOptions);
      }
export type UpdateC2CPropertyPostMutationHookResult = ReturnType<typeof useUpdateC2CPropertyPostMutation>;
export type UpdateC2CPropertyPostMutationResult = ApolloReactCommon.MutationResult<UpdateC2CPropertyPostMutation>;
export type UpdateC2CPropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateC2CPropertyPostMutation, UpdateC2CPropertyPostMutationVariables>;
export const UpdatePropertyPostDocument = gql`
    mutation UpdatePropertyPost($updatePropertyPostInput: UpdatePropertyPostInput!) {
  updatePropertyPost(updatePropertyPostInput: $updatePropertyPostInput) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostDto {
      isFollowed
      propertyPostId
      createdByUserId
      propertyCode
      propertyName
      postTitle
      postDescription
      blockCode
      blockName
      postTypeId
      propertyPostStatusId
      propertyTypeId
      propertySubTypeId
      propertySubTypeName
      bookingFee
      price
      priceNoVat
      priceVat
      commission
      buyCommission
      saleCommission
      unitOfMeasureId
      unitOfMeasure {
        unitOfMeasureId
        unitOfMeasureCode
        unitOfMeasureName
        numberOfDecimal
        multiplyWithBaseUnit
        isRound
      }
      buildingArea
      capetAreas
      totalSiteArea
      buildingLine
      direction
      latitude
      longitude
      floor
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      houseDesign
      images
      internalFacility
      nearFacility
      propertyPostApprovalStatusId
      approvedBy
      approvedDatetime
      sendingApprovalFrom
      rejectedDatetime
      rejectedReason
      legalInfoId
      collateralizedAtBankId
      expiredDate
      projectId
      freeTextProject
      addressId
      propertyAddress {
        countryId
        countryName
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
      }
      ownerId
      ownerIsAuthor
      owner {
        userId
        customerFullName
        customerPhone
        customerEmail
      }
    }
    badWordListDto {
      originalContent
      highlightedContent
      badWords
    }
  }
}
    `;
export type UpdatePropertyPostMutationFn = ApolloReactCommon.MutationFunction<UpdatePropertyPostMutation, UpdatePropertyPostMutationVariables>;

/**
 * __useUpdatePropertyPostMutation__
 *
 * To run a mutation, you first call `useUpdatePropertyPostMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePropertyPostMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePropertyPostMutation, { data, loading, error }] = useUpdatePropertyPostMutation({
 *   variables: {
 *      updatePropertyPostInput: // value for 'updatePropertyPostInput'
 *   },
 * });
 */
export function useUpdatePropertyPostMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdatePropertyPostMutation, UpdatePropertyPostMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdatePropertyPostMutation, UpdatePropertyPostMutationVariables>(UpdatePropertyPostDocument, baseOptions);
      }
export type UpdatePropertyPostMutationHookResult = ReturnType<typeof useUpdatePropertyPostMutation>;
export type UpdatePropertyPostMutationResult = ApolloReactCommon.MutationResult<UpdatePropertyPostMutation>;
export type UpdatePropertyPostMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdatePropertyPostMutation, UpdatePropertyPostMutationVariables>;
export const ValidateNumberOfPostByUserIdDocument = gql`
    query ValidateNumberOfPostByUserId($validateNumberOfPostByUserIdInput: ValidateNumberOfPostByUserIdInput!) {
  validateNumberPostByUserId(
    validateNumberOfPostByUserIdInput: $validateNumberOfPostByUserIdInput
  ) {
    errorCode
    errorMessage
    errorMessageCode
    isValid
  }
}
    `;

/**
 * __useValidateNumberOfPostByUserIdQuery__
 *
 * To run a query within a React component, call `useValidateNumberOfPostByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useValidateNumberOfPostByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useValidateNumberOfPostByUserIdQuery({
 *   variables: {
 *      validateNumberOfPostByUserIdInput: // value for 'validateNumberOfPostByUserIdInput'
 *   },
 * });
 */
export function useValidateNumberOfPostByUserIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ValidateNumberOfPostByUserIdQuery, ValidateNumberOfPostByUserIdQueryVariables>) {
        return ApolloReactHooks.useQuery<ValidateNumberOfPostByUserIdQuery, ValidateNumberOfPostByUserIdQueryVariables>(ValidateNumberOfPostByUserIdDocument, baseOptions);
      }
export function useValidateNumberOfPostByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ValidateNumberOfPostByUserIdQuery, ValidateNumberOfPostByUserIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ValidateNumberOfPostByUserIdQuery, ValidateNumberOfPostByUserIdQueryVariables>(ValidateNumberOfPostByUserIdDocument, baseOptions);
        }
export type ValidateNumberOfPostByUserIdQueryHookResult = ReturnType<typeof useValidateNumberOfPostByUserIdQuery>;
export type ValidateNumberOfPostByUserIdLazyQueryHookResult = ReturnType<typeof useValidateNumberOfPostByUserIdLazyQuery>;
export type ValidateNumberOfPostByUserIdQueryResult = ApolloReactCommon.QueryResult<ValidateNumberOfPostByUserIdQuery, ValidateNumberOfPostByUserIdQueryVariables>;
export const ValidateReCaptchaForPropertyPostBasketDocument = gql`
    mutation ValidateReCaptchaForPropertyPostBasket($request: ValidateReCaptchaForPropertyPostBasketInput!) {
  validateReCaptchaForPropertyPostBasket(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    requestId
  }
}
    `;
export type ValidateReCaptchaForPropertyPostBasketMutationFn = ApolloReactCommon.MutationFunction<ValidateReCaptchaForPropertyPostBasketMutation, ValidateReCaptchaForPropertyPostBasketMutationVariables>;

/**
 * __useValidateReCaptchaForPropertyPostBasketMutation__
 *
 * To run a mutation, you first call `useValidateReCaptchaForPropertyPostBasketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useValidateReCaptchaForPropertyPostBasketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [validateReCaptchaForPropertyPostBasketMutation, { data, loading, error }] = useValidateReCaptchaForPropertyPostBasketMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useValidateReCaptchaForPropertyPostBasketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ValidateReCaptchaForPropertyPostBasketMutation, ValidateReCaptchaForPropertyPostBasketMutationVariables>) {
        return ApolloReactHooks.useMutation<ValidateReCaptchaForPropertyPostBasketMutation, ValidateReCaptchaForPropertyPostBasketMutationVariables>(ValidateReCaptchaForPropertyPostBasketDocument, baseOptions);
      }
export type ValidateReCaptchaForPropertyPostBasketMutationHookResult = ReturnType<typeof useValidateReCaptchaForPropertyPostBasketMutation>;
export type ValidateReCaptchaForPropertyPostBasketMutationResult = ApolloReactCommon.MutationResult<ValidateReCaptchaForPropertyPostBasketMutation>;
export type ValidateReCaptchaForPropertyPostBasketMutationOptions = ApolloReactCommon.BaseMutationOptions<ValidateReCaptchaForPropertyPostBasketMutation, ValidateReCaptchaForPropertyPostBasketMutationVariables>;
export const GetPropertyTypesDocument = gql`
    query GetPropertyTypes($where: PropertyTypeDtoFilter, $page: Int, $pageSize: Int, $order_by: PropertyTypeDtoSort) {
  propertyTypes(
    where: $where
    page: $page
    pageSize: $pageSize
    order_by: $order_by
  ) {
    totalCount
    edges {
      isActive
      path
      propertyTypeId
      propertyTypeName
      propertyTypeDescription
      postUsageFields
      projectUsageFields
    }
  }
}
    `;

/**
 * __useGetPropertyTypesQuery__
 *
 * To run a query within a React component, call `useGetPropertyTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyTypesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetPropertyTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyTypesQuery, GetPropertyTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyTypesQuery, GetPropertyTypesQueryVariables>(GetPropertyTypesDocument, baseOptions);
      }
export function useGetPropertyTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyTypesQuery, GetPropertyTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyTypesQuery, GetPropertyTypesQueryVariables>(GetPropertyTypesDocument, baseOptions);
        }
export type GetPropertyTypesQueryHookResult = ReturnType<typeof useGetPropertyTypesQuery>;
export type GetPropertyTypesLazyQueryHookResult = ReturnType<typeof useGetPropertyTypesLazyQuery>;
export type GetPropertyTypesQueryResult = ApolloReactCommon.QueryResult<GetPropertyTypesQuery, GetPropertyTypesQueryVariables>;
export const GetPropertyTypeByIdDocument = gql`
    query GetPropertyTypeById($input: Uuid) {
  propertyTypeById(propertyTypeId: $input) {
    isActive
    path
    propertyTypeId
    propertyTypeName
    propertyTypeDescription
    postUsageFields
    projectUsageFields
  }
}
    `;

/**
 * __useGetPropertyTypeByIdQuery__
 *
 * To run a query within a React component, call `useGetPropertyTypeByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyTypeByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyTypeByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetPropertyTypeByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyTypeByIdQuery, GetPropertyTypeByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyTypeByIdQuery, GetPropertyTypeByIdQueryVariables>(GetPropertyTypeByIdDocument, baseOptions);
      }
export function useGetPropertyTypeByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyTypeByIdQuery, GetPropertyTypeByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyTypeByIdQuery, GetPropertyTypeByIdQueryVariables>(GetPropertyTypeByIdDocument, baseOptions);
        }
export type GetPropertyTypeByIdQueryHookResult = ReturnType<typeof useGetPropertyTypeByIdQuery>;
export type GetPropertyTypeByIdLazyQueryHookResult = ReturnType<typeof useGetPropertyTypeByIdLazyQuery>;
export type GetPropertyTypeByIdQueryResult = ApolloReactCommon.QueryResult<GetPropertyTypeByIdQuery, GetPropertyTypeByIdQueryVariables>;
export const ChangePushNotificationModeDocument = gql`
    mutation ChangePushNotificationMode($input: ChangePushNotificationModeInput!) {
  changePushNotificationMode(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ChangePushNotificationModeMutationFn = ApolloReactCommon.MutationFunction<ChangePushNotificationModeMutation, ChangePushNotificationModeMutationVariables>;

/**
 * __useChangePushNotificationModeMutation__
 *
 * To run a mutation, you first call `useChangePushNotificationModeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangePushNotificationModeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changePushNotificationModeMutation, { data, loading, error }] = useChangePushNotificationModeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangePushNotificationModeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangePushNotificationModeMutation, ChangePushNotificationModeMutationVariables>) {
        return ApolloReactHooks.useMutation<ChangePushNotificationModeMutation, ChangePushNotificationModeMutationVariables>(ChangePushNotificationModeDocument, baseOptions);
      }
export type ChangePushNotificationModeMutationHookResult = ReturnType<typeof useChangePushNotificationModeMutation>;
export type ChangePushNotificationModeMutationResult = ApolloReactCommon.MutationResult<ChangePushNotificationModeMutation>;
export type ChangePushNotificationModeMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangePushNotificationModeMutation, ChangePushNotificationModeMutationVariables>;
export const CountPropertiesByCityDocument = gql`
    query CountPropertiesByCity($input: SearchPropertyPostInput!) {
  searchPropertyPosts(searchPropertyPostInput: $input) {
    totalCount
  }
}
    `;

/**
 * __useCountPropertiesByCityQuery__
 *
 * To run a query within a React component, call `useCountPropertiesByCityQuery` and pass it any options that fit your needs.
 * When your component renders, `useCountPropertiesByCityQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCountPropertiesByCityQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCountPropertiesByCityQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CountPropertiesByCityQuery, CountPropertiesByCityQueryVariables>) {
        return ApolloReactHooks.useQuery<CountPropertiesByCityQuery, CountPropertiesByCityQueryVariables>(CountPropertiesByCityDocument, baseOptions);
      }
export function useCountPropertiesByCityLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CountPropertiesByCityQuery, CountPropertiesByCityQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CountPropertiesByCityQuery, CountPropertiesByCityQueryVariables>(CountPropertiesByCityDocument, baseOptions);
        }
export type CountPropertiesByCityQueryHookResult = ReturnType<typeof useCountPropertiesByCityQuery>;
export type CountPropertiesByCityLazyQueryHookResult = ReturnType<typeof useCountPropertiesByCityLazyQuery>;
export type CountPropertiesByCityQueryResult = ApolloReactCommon.QueryResult<CountPropertiesByCityQuery, CountPropertiesByCityQueryVariables>;
export const CreateSearchTermDocument = gql`
    mutation createSearchTerm($input: CreateSearchTermInput!) {
  createSearchTerm(createSearchTermInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateSearchTermMutationFn = ApolloReactCommon.MutationFunction<CreateSearchTermMutation, CreateSearchTermMutationVariables>;

/**
 * __useCreateSearchTermMutation__
 *
 * To run a mutation, you first call `useCreateSearchTermMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSearchTermMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSearchTermMutation, { data, loading, error }] = useCreateSearchTermMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSearchTermMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSearchTermMutation, CreateSearchTermMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateSearchTermMutation, CreateSearchTermMutationVariables>(CreateSearchTermDocument, baseOptions);
      }
export type CreateSearchTermMutationHookResult = ReturnType<typeof useCreateSearchTermMutation>;
export type CreateSearchTermMutationResult = ApolloReactCommon.MutationResult<CreateSearchTermMutation>;
export type CreateSearchTermMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSearchTermMutation, CreateSearchTermMutationVariables>;
export const GetProjectAdditionalDataDocument = gql`
    query GetProjectAdditionalData($input: projectsAdditionalForSearchInput!) {
  getProjectsAdditionalForSearch(projectsAdditionalForSearchInput: $input) {
    edges {
      projectId
      isFollowed
      totalFollower
      totalShare
    }
  }
}
    `;

/**
 * __useGetProjectAdditionalDataQuery__
 *
 * To run a query within a React component, call `useGetProjectAdditionalDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetProjectAdditionalDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetProjectAdditionalDataQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetProjectAdditionalDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetProjectAdditionalDataQuery, GetProjectAdditionalDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetProjectAdditionalDataQuery, GetProjectAdditionalDataQueryVariables>(GetProjectAdditionalDataDocument, baseOptions);
      }
export function useGetProjectAdditionalDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetProjectAdditionalDataQuery, GetProjectAdditionalDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetProjectAdditionalDataQuery, GetProjectAdditionalDataQueryVariables>(GetProjectAdditionalDataDocument, baseOptions);
        }
export type GetProjectAdditionalDataQueryHookResult = ReturnType<typeof useGetProjectAdditionalDataQuery>;
export type GetProjectAdditionalDataLazyQueryHookResult = ReturnType<typeof useGetProjectAdditionalDataLazyQuery>;
export type GetProjectAdditionalDataQueryResult = ApolloReactCommon.QueryResult<GetProjectAdditionalDataQuery, GetProjectAdditionalDataQueryVariables>;
export const GetPropertyAdditionalDataDocument = gql`
    query GetPropertyAdditionalData($input: propertyPostsAdditionalForSearchInput!) {
  getPropertyPostsAdditionalForSearch(
    propertyPostsAdditionalForSearchInput: $input
  ) {
    edges {
      propertyPostId
      isFollowed
      totalFollower
      totalShare
      totalSpam
    }
  }
}
    `;

/**
 * __useGetPropertyAdditionalDataQuery__
 *
 * To run a query within a React component, call `useGetPropertyAdditionalDataQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPropertyAdditionalDataQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPropertyAdditionalDataQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetPropertyAdditionalDataQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetPropertyAdditionalDataQuery, GetPropertyAdditionalDataQueryVariables>) {
        return ApolloReactHooks.useQuery<GetPropertyAdditionalDataQuery, GetPropertyAdditionalDataQueryVariables>(GetPropertyAdditionalDataDocument, baseOptions);
      }
export function useGetPropertyAdditionalDataLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetPropertyAdditionalDataQuery, GetPropertyAdditionalDataQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetPropertyAdditionalDataQuery, GetPropertyAdditionalDataQueryVariables>(GetPropertyAdditionalDataDocument, baseOptions);
        }
export type GetPropertyAdditionalDataQueryHookResult = ReturnType<typeof useGetPropertyAdditionalDataQuery>;
export type GetPropertyAdditionalDataLazyQueryHookResult = ReturnType<typeof useGetPropertyAdditionalDataLazyQuery>;
export type GetPropertyAdditionalDataQueryResult = ApolloReactCommon.QueryResult<GetPropertyAdditionalDataQuery, GetPropertyAdditionalDataQueryVariables>;
export const GetSearchTermsDocument = gql`
    query getSearchTerms($page: Int, $pageSize: Int, $where: SearchTermDtoFilter, $order_by: SearchTermDtoSort) {
  getSearchTerms(
    page: $page
    pageSize: $pageSize
    where: $where
    order_by: $order_by
  ) {
    edges {
      keyWord
    }
    totalCount
  }
}
    `;

/**
 * __useGetSearchTermsQuery__
 *
 * To run a query within a React component, call `useGetSearchTermsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSearchTermsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSearchTermsQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      where: // value for 'where'
 *      order_by: // value for 'order_by'
 *   },
 * });
 */
export function useGetSearchTermsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSearchTermsQuery, GetSearchTermsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSearchTermsQuery, GetSearchTermsQueryVariables>(GetSearchTermsDocument, baseOptions);
      }
export function useGetSearchTermsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSearchTermsQuery, GetSearchTermsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSearchTermsQuery, GetSearchTermsQueryVariables>(GetSearchTermsDocument, baseOptions);
        }
export type GetSearchTermsQueryHookResult = ReturnType<typeof useGetSearchTermsQuery>;
export type GetSearchTermsLazyQueryHookResult = ReturnType<typeof useGetSearchTermsLazyQuery>;
export type GetSearchTermsQueryResult = ApolloReactCommon.QueryResult<GetSearchTermsQuery, GetSearchTermsQueryVariables>;
export const SearchSuggestDocument = gql`
    query SearchSuggest($project: SearchProjectInput!, $agent: SearchAgentInput!, $property: SearchPropertyPostInput!) {
  searchProjects(searchProjectInput: $project) {
    projectInfoDtos {
      projectId
      projectName
      projectAddress {
        cityId
        countryId
        districtId
        wardId
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
    }
  }
  searchAgents(searchAgentInput: $agent) {
    agentInfoDtos {
      agentId
      profilePhoto
      firstName
      lastName
      agentGroupDescription
    }
  }
  searchPropertyPosts(searchPropertyPostInput: $property) {
    propertyPostInfoDtos {
      propertyPostId
      postTitle
      propertyAddress {
        countryId
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
    }
  }
}
    `;

/**
 * __useSearchSuggestQuery__
 *
 * To run a query within a React component, call `useSearchSuggestQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchSuggestQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchSuggestQuery({
 *   variables: {
 *      project: // value for 'project'
 *      agent: // value for 'agent'
 *      property: // value for 'property'
 *   },
 * });
 */
export function useSearchSuggestQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchSuggestQuery, SearchSuggestQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchSuggestQuery, SearchSuggestQueryVariables>(SearchSuggestDocument, baseOptions);
      }
export function useSearchSuggestLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchSuggestQuery, SearchSuggestQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchSuggestQuery, SearchSuggestQueryVariables>(SearchSuggestDocument, baseOptions);
        }
export type SearchSuggestQueryHookResult = ReturnType<typeof useSearchSuggestQuery>;
export type SearchSuggestLazyQueryHookResult = ReturnType<typeof useSearchSuggestLazyQuery>;
export type SearchSuggestQueryResult = ApolloReactCommon.QueryResult<SearchSuggestQuery, SearchSuggestQueryVariables>;
export const SearchAgentsDocument = gql`
    query SearchAgents($input: SearchAgentInput!) {
  searchAgents(searchAgentInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    totalCount
    agentInfoDtos {
      sellingTotal
      agentId
      latitude
      longitude
      profilePhoto
      userName
      agentGroupDescription
      agentId
      instruction
      permanentAddress
      nationalId
      agentCode
      firstName
      lastName
      email
      phoneNumber
      agentGroupId
      isInitialAccount
      rating
      isAgentLeader
      preferPropertyTypes
      preferPropertyPriceFrom
      preferPropertyPriceTo
      workingAreas
      profilePhoto
      agentRankingName
      agentRankingLevel
      agentGroupName
      updatedDatetime
      createdDatetime
      agentRankingDescription
    }
  }
}
    `;

/**
 * __useSearchAgentsQuery__
 *
 * To run a query within a React component, call `useSearchAgentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchAgentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchAgentsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchAgentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchAgentsQuery, SearchAgentsQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchAgentsQuery, SearchAgentsQueryVariables>(SearchAgentsDocument, baseOptions);
      }
export function useSearchAgentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchAgentsQuery, SearchAgentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchAgentsQuery, SearchAgentsQueryVariables>(SearchAgentsDocument, baseOptions);
        }
export type SearchAgentsQueryHookResult = ReturnType<typeof useSearchAgentsQuery>;
export type SearchAgentsLazyQueryHookResult = ReturnType<typeof useSearchAgentsLazyQuery>;
export type SearchAgentsQueryResult = ApolloReactCommon.QueryResult<SearchAgentsQuery, SearchAgentsQueryVariables>;
export const SearchAgentsCoordinatesDocument = gql`
    query SearchAgentsCoordinates($input: SearchAgentInput!) {
  searchAgents(searchAgentInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    agentInfoDtos {
      agentId
      profilePhoto
      latitude
      longitude
    }
    totalCount
  }
}
    `;

/**
 * __useSearchAgentsCoordinatesQuery__
 *
 * To run a query within a React component, call `useSearchAgentsCoordinatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchAgentsCoordinatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchAgentsCoordinatesQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchAgentsCoordinatesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchAgentsCoordinatesQuery, SearchAgentsCoordinatesQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchAgentsCoordinatesQuery, SearchAgentsCoordinatesQueryVariables>(SearchAgentsCoordinatesDocument, baseOptions);
      }
export function useSearchAgentsCoordinatesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchAgentsCoordinatesQuery, SearchAgentsCoordinatesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchAgentsCoordinatesQuery, SearchAgentsCoordinatesQueryVariables>(SearchAgentsCoordinatesDocument, baseOptions);
        }
export type SearchAgentsCoordinatesQueryHookResult = ReturnType<typeof useSearchAgentsCoordinatesQuery>;
export type SearchAgentsCoordinatesLazyQueryHookResult = ReturnType<typeof useSearchAgentsCoordinatesLazyQuery>;
export type SearchAgentsCoordinatesQueryResult = ApolloReactCommon.QueryResult<SearchAgentsCoordinatesQuery, SearchAgentsCoordinatesQueryVariables>;
export const SearchProjectsDocument = gql`
    query SearchProjects($input: SearchProjectInput!) {
  searchProjects(searchProjectInput: $input) {
    totalCount
    projectInfoDtos {
      projectId
      isFollowed
      totalFollower
      totalShare
      projectName
      projectCode
      latitude
      longitude
      minPrice
      startYear
      totalArea
      overallDescription
      commissionRates
      projectStatusName
      featurePhotos
      investorOwnerName
      investorOwnerLogo
      propertyTypeId
      projectStatusId
      projectTypeName
      isFeaturesProject
      projectAddress {
        cityId
        countryId
        districtId
        wardId
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
    }
  }
}
    `;

/**
 * __useSearchProjectsQuery__
 *
 * To run a query within a React component, call `useSearchProjectsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchProjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchProjectsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchProjectsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchProjectsQuery, SearchProjectsQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchProjectsQuery, SearchProjectsQueryVariables>(SearchProjectsDocument, baseOptions);
      }
export function useSearchProjectsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchProjectsQuery, SearchProjectsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchProjectsQuery, SearchProjectsQueryVariables>(SearchProjectsDocument, baseOptions);
        }
export type SearchProjectsQueryHookResult = ReturnType<typeof useSearchProjectsQuery>;
export type SearchProjectsLazyQueryHookResult = ReturnType<typeof useSearchProjectsLazyQuery>;
export type SearchProjectsQueryResult = ApolloReactCommon.QueryResult<SearchProjectsQuery, SearchProjectsQueryVariables>;
export const SearchProjectsCoordinatesDocument = gql`
    query SearchProjectsCoordinates($input: SearchProjectInput!) {
  searchProjects(searchProjectInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    projectInfoDtos {
      projectId
      latitude
      longitude
      minPrice
    }
    totalCount
  }
}
    `;

/**
 * __useSearchProjectsCoordinatesQuery__
 *
 * To run a query within a React component, call `useSearchProjectsCoordinatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchProjectsCoordinatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchProjectsCoordinatesQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchProjectsCoordinatesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchProjectsCoordinatesQuery, SearchProjectsCoordinatesQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchProjectsCoordinatesQuery, SearchProjectsCoordinatesQueryVariables>(SearchProjectsCoordinatesDocument, baseOptions);
      }
export function useSearchProjectsCoordinatesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchProjectsCoordinatesQuery, SearchProjectsCoordinatesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchProjectsCoordinatesQuery, SearchProjectsCoordinatesQueryVariables>(SearchProjectsCoordinatesDocument, baseOptions);
        }
export type SearchProjectsCoordinatesQueryHookResult = ReturnType<typeof useSearchProjectsCoordinatesQuery>;
export type SearchProjectsCoordinatesLazyQueryHookResult = ReturnType<typeof useSearchProjectsCoordinatesLazyQuery>;
export type SearchProjectsCoordinatesQueryResult = ApolloReactCommon.QueryResult<SearchProjectsCoordinatesQuery, SearchProjectsCoordinatesQueryVariables>;
export const SearchPropertyPostsDocument = gql`
    query SearchPropertyPosts($input: SearchPropertyPostInput!) {
  searchPropertyPosts(searchPropertyPostInput: $input) {
    totalCount
    propertyPostInfoDtos {
      isFollowed
      createdByUserId
      totalFollower
      totalShare
      totalSpam
      propertyPostId
      postTitle
      postDescription
      propertyTypeId
      propertyCode
      direction
      balconyDirection
      propertyAddress {
        countryId
        cityId
        cityName
        districtId
        districtName
        wardId
        wardName
        homeAddress
        streetName
        cityName
        districtName
        wardName
      }
      sellerInfo {
        sellerId
        fullName
        phoneNumber
        email
        isAgent
        agentRating
        agentRankingName
        agentGroupDescription
        avatar
        avatars
      }
      saleCommissionCurrencyUnitId
      unitOfMeasureId
      numberOfFloor
      numberOfBedrooms
      numberOfBathrooms
      images
      price
      latitude
      longitude
      priceNoVat
      priceVat
      buildingArea
      capetAreas
      totalSiteArea
      isVip
      forRent
      forSale
      isSold
      isRented
      isCreatedByAgent
      propertyPostApprovalStatusId
      commission
      isGuaranteed
    }
  }
}
    `;

/**
 * __useSearchPropertyPostsQuery__
 *
 * To run a query within a React component, call `useSearchPropertyPostsQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPropertyPostsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPropertyPostsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchPropertyPostsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchPropertyPostsQuery, SearchPropertyPostsQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchPropertyPostsQuery, SearchPropertyPostsQueryVariables>(SearchPropertyPostsDocument, baseOptions);
      }
export function useSearchPropertyPostsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchPropertyPostsQuery, SearchPropertyPostsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchPropertyPostsQuery, SearchPropertyPostsQueryVariables>(SearchPropertyPostsDocument, baseOptions);
        }
export type SearchPropertyPostsQueryHookResult = ReturnType<typeof useSearchPropertyPostsQuery>;
export type SearchPropertyPostsLazyQueryHookResult = ReturnType<typeof useSearchPropertyPostsLazyQuery>;
export type SearchPropertyPostsQueryResult = ApolloReactCommon.QueryResult<SearchPropertyPostsQuery, SearchPropertyPostsQueryVariables>;
export const SearchPropertyPostsCoordinatesDocument = gql`
    query SearchPropertyPostsCoordinates($input: SearchPropertyPostInput!) {
  searchPropertyPosts(searchPropertyPostInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    totalCount
    propertyPostInfoDtos {
      propertyPostId
      createdByUserId
      price
      longitude
      latitude
    }
  }
}
    `;

/**
 * __useSearchPropertyPostsCoordinatesQuery__
 *
 * To run a query within a React component, call `useSearchPropertyPostsCoordinatesQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPropertyPostsCoordinatesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPropertyPostsCoordinatesQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchPropertyPostsCoordinatesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchPropertyPostsCoordinatesQuery, SearchPropertyPostsCoordinatesQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchPropertyPostsCoordinatesQuery, SearchPropertyPostsCoordinatesQueryVariables>(SearchPropertyPostsCoordinatesDocument, baseOptions);
      }
export function useSearchPropertyPostsCoordinatesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchPropertyPostsCoordinatesQuery, SearchPropertyPostsCoordinatesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchPropertyPostsCoordinatesQuery, SearchPropertyPostsCoordinatesQueryVariables>(SearchPropertyPostsCoordinatesDocument, baseOptions);
        }
export type SearchPropertyPostsCoordinatesQueryHookResult = ReturnType<typeof useSearchPropertyPostsCoordinatesQuery>;
export type SearchPropertyPostsCoordinatesLazyQueryHookResult = ReturnType<typeof useSearchPropertyPostsCoordinatesLazyQuery>;
export type SearchPropertyPostsCoordinatesQueryResult = ApolloReactCommon.QueryResult<SearchPropertyPostsCoordinatesQuery, SearchPropertyPostsCoordinatesQueryVariables>;
export const SearchPropertyPostsForRentDocument = gql`
    query SearchPropertyPostsForRent($input: SearchPropertyPostForRentInput!) {
  searchPropertyPostsForRent(searchPropertyPostForRentInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    propertyPostForRentInfoDtos {
      propertyPostForRentId
      rentCommission
      rentCommissionCurrencyUnitId
      rentPeriod
      rentPrice
      searchPropertyPostInfoDto {
        isFollowed
        createdByUserId
        totalFollower
        totalShare
        totalSpam
        propertyPostId
        postTitle
        postDescription
        propertyTypeId
        propertyCode
        direction
        forRent
        forSale
        propertyAddress {
          countryId
          cityId
          districtId
          districtName
          wardId
          homeAddress
          streetName
          cityName
          wardName
        }
        sellerInfo {
          sellerId
          fullName
          phoneNumber
          email
          isAgent
          agentRating
          agentRankingName
          agentGroupDescription
          avatar
          avatars
        }
        saleCommissionCurrencyUnitId
        unitOfMeasureId
        numberOfFloor
        numberOfBedrooms
        numberOfBathrooms
        images
        price
        priceNoVat
        priceVat
        buildingArea
        capetAreas
        totalSiteArea
        isSold
        isRented
        isVip
        isCreatedByAgent
        longitude
        latitude
        propertyPostApprovalStatusId
        commission
      }
    }
    totalCount
  }
}
    `;

/**
 * __useSearchPropertyPostsForRentQuery__
 *
 * To run a query within a React component, call `useSearchPropertyPostsForRentQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchPropertyPostsForRentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchPropertyPostsForRentQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSearchPropertyPostsForRentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<SearchPropertyPostsForRentQuery, SearchPropertyPostsForRentQueryVariables>) {
        return ApolloReactHooks.useQuery<SearchPropertyPostsForRentQuery, SearchPropertyPostsForRentQueryVariables>(SearchPropertyPostsForRentDocument, baseOptions);
      }
export function useSearchPropertyPostsForRentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<SearchPropertyPostsForRentQuery, SearchPropertyPostsForRentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<SearchPropertyPostsForRentQuery, SearchPropertyPostsForRentQueryVariables>(SearchPropertyPostsForRentDocument, baseOptions);
        }
export type SearchPropertyPostsForRentQueryHookResult = ReturnType<typeof useSearchPropertyPostsForRentQuery>;
export type SearchPropertyPostsForRentLazyQueryHookResult = ReturnType<typeof useSearchPropertyPostsForRentLazyQuery>;
export type SearchPropertyPostsForRentQueryResult = ApolloReactCommon.QueryResult<SearchPropertyPostsForRentQuery, SearchPropertyPostsForRentQueryVariables>;
export const CreateCommentDocument = gql`
    mutation createComment($input: CreateCommentInput!) {
  createCommentForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    recaptchaEnable
  }
}
    `;
export type CreateCommentMutationFn = ApolloReactCommon.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;

/**
 * __useCreateCommentMutation__
 *
 * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, baseOptions);
      }
export type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;
export type CreateCommentMutationResult = ApolloReactCommon.MutationResult<CreateCommentMutation>;
export type CreateCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;
export const CreateReplyDocument = gql`
    mutation createReply($input: CreateCommentInput!) {
  createCommentForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    recaptchaEnable
  }
}
    `;
export type CreateReplyMutationFn = ApolloReactCommon.MutationFunction<CreateReplyMutation, CreateReplyMutationVariables>;

/**
 * __useCreateReplyMutation__
 *
 * To run a mutation, you first call `useCreateReplyMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateReplyMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createReplyMutation, { data, loading, error }] = useCreateReplyMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateReplyMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateReplyMutation, CreateReplyMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateReplyMutation, CreateReplyMutationVariables>(CreateReplyDocument, baseOptions);
      }
export type CreateReplyMutationHookResult = ReturnType<typeof useCreateReplyMutation>;
export type CreateReplyMutationResult = ApolloReactCommon.MutationResult<CreateReplyMutation>;
export type CreateReplyMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateReplyMutation, CreateReplyMutationVariables>;
export const DeleteFollowerOfCurrentUserForFrontOfficeDocument = gql`
    mutation DeleteFollowerOfCurrentUserForFrontOffice($input: DeleteFollowerOfCurrentUserInput!) {
  deleteFollowerOfCurrentUserForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type DeleteFollowerOfCurrentUserForFrontOfficeMutationFn = ApolloReactCommon.MutationFunction<DeleteFollowerOfCurrentUserForFrontOfficeMutation, DeleteFollowerOfCurrentUserForFrontOfficeMutationVariables>;

/**
 * __useDeleteFollowerOfCurrentUserForFrontOfficeMutation__
 *
 * To run a mutation, you first call `useDeleteFollowerOfCurrentUserForFrontOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteFollowerOfCurrentUserForFrontOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteFollowerOfCurrentUserForFrontOfficeMutation, { data, loading, error }] = useDeleteFollowerOfCurrentUserForFrontOfficeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteFollowerOfCurrentUserForFrontOfficeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteFollowerOfCurrentUserForFrontOfficeMutation, DeleteFollowerOfCurrentUserForFrontOfficeMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteFollowerOfCurrentUserForFrontOfficeMutation, DeleteFollowerOfCurrentUserForFrontOfficeMutationVariables>(DeleteFollowerOfCurrentUserForFrontOfficeDocument, baseOptions);
      }
export type DeleteFollowerOfCurrentUserForFrontOfficeMutationHookResult = ReturnType<typeof useDeleteFollowerOfCurrentUserForFrontOfficeMutation>;
export type DeleteFollowerOfCurrentUserForFrontOfficeMutationResult = ApolloReactCommon.MutationResult<DeleteFollowerOfCurrentUserForFrontOfficeMutation>;
export type DeleteFollowerOfCurrentUserForFrontOfficeMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteFollowerOfCurrentUserForFrontOfficeMutation, DeleteFollowerOfCurrentUserForFrontOfficeMutationVariables>;
export const FollowFeedItemDocument = gql`
    mutation FollowFeedItem($input: FollowFeedItemInput!) {
  followFeedItemForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    isFollowFeedItem
  }
}
    `;
export type FollowFeedItemMutationFn = ApolloReactCommon.MutationFunction<FollowFeedItemMutation, FollowFeedItemMutationVariables>;

/**
 * __useFollowFeedItemMutation__
 *
 * To run a mutation, you first call `useFollowFeedItemMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useFollowFeedItemMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [followFeedItemMutation, { data, loading, error }] = useFollowFeedItemMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useFollowFeedItemMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<FollowFeedItemMutation, FollowFeedItemMutationVariables>) {
        return ApolloReactHooks.useMutation<FollowFeedItemMutation, FollowFeedItemMutationVariables>(FollowFeedItemDocument, baseOptions);
      }
export type FollowFeedItemMutationHookResult = ReturnType<typeof useFollowFeedItemMutation>;
export type FollowFeedItemMutationResult = ApolloReactCommon.MutationResult<FollowFeedItemMutation>;
export type FollowFeedItemMutationOptions = ApolloReactCommon.BaseMutationOptions<FollowFeedItemMutation, FollowFeedItemMutationVariables>;
export const GetCommentsDocument = gql`
    query GetComments($input: GetCommentsByObjectIdCursorInput!, $first: PaginationAmount, $after: String, $before: String) {
  curCommentsByObjectIdForFrontOffice(
    input: $input
    first: $first
    after: $after
    before: $before
  ) {
    edges {
      node {
        commentId
        feedObjectTypeId
        feedObjectId
        feedItemId
        feedObjectTitle
        totalLike
        currentUserLikeComment
        userInfo {
          userId
          fullName
          profilePhoto
          profilePhotos
        }
        createdDatetime
        content
        replies {
          commentId
          feedObjectTypeId
          feedObjectId
          feedObjectTitle
          feedItemId
          totalLike
          createdDatetime
          currentUserLikeComment
          content
          userInfo {
            userId
            fullName
            profilePhoto
            profilePhotos
          }
        }
        totalReply
      }
    }
    pageInfo {
      hasNextPage
      endCursor
      startCursor
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useGetCommentsQuery__
 *
 * To run a query within a React component, call `useGetCommentsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCommentsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCommentsQuery({
 *   variables: {
 *      input: // value for 'input'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      before: // value for 'before'
 *   },
 * });
 */
export function useGetCommentsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);
      }
export function useGetCommentsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCommentsQuery, GetCommentsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCommentsQuery, GetCommentsQueryVariables>(GetCommentsDocument, baseOptions);
        }
export type GetCommentsQueryHookResult = ReturnType<typeof useGetCommentsQuery>;
export type GetCommentsLazyQueryHookResult = ReturnType<typeof useGetCommentsLazyQuery>;
export type GetCommentsQueryResult = ApolloReactCommon.QueryResult<GetCommentsQuery, GetCommentsQueryVariables>;
export const InviteUserActiveDocument = gql`
    query inviteUserActive($page: Int, $pageSize: Int, $userId: Uuid!, $where: SimpleUserInfoDtoFilter) {
  inviteUserActive(
    page: $page
    pageSize: $pageSize
    userId: $userId
    where: $where
  ) {
    edges {
      userName
      fullName
      profilePhoto
      profilePhotos
    }
    totalCount
    __typename
  }
}
    `;

/**
 * __useInviteUserActiveQuery__
 *
 * To run a query within a React component, call `useInviteUserActiveQuery` and pass it any options that fit your needs.
 * When your component renders, `useInviteUserActiveQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInviteUserActiveQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      userId: // value for 'userId'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useInviteUserActiveQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<InviteUserActiveQuery, InviteUserActiveQueryVariables>) {
        return ApolloReactHooks.useQuery<InviteUserActiveQuery, InviteUserActiveQueryVariables>(InviteUserActiveDocument, baseOptions);
      }
export function useInviteUserActiveLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<InviteUserActiveQuery, InviteUserActiveQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<InviteUserActiveQuery, InviteUserActiveQueryVariables>(InviteUserActiveDocument, baseOptions);
        }
export type InviteUserActiveQueryHookResult = ReturnType<typeof useInviteUserActiveQuery>;
export type InviteUserActiveLazyQueryHookResult = ReturnType<typeof useInviteUserActiveLazyQuery>;
export type InviteUserActiveQueryResult = ApolloReactCommon.QueryResult<InviteUserActiveQuery, InviteUserActiveQueryVariables>;
export const InviteUserInfoDocument = gql`
    query inviteUserInfo($userId: Uuid!) {
  inviteInfo(userId: $userId) {
    inviteCode
    inviteLink
    totalInviteActive
    __typename
  }
}
    `;

/**
 * __useInviteUserInfoQuery__
 *
 * To run a query within a React component, call `useInviteUserInfoQuery` and pass it any options that fit your needs.
 * When your component renders, `useInviteUserInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useInviteUserInfoQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useInviteUserInfoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<InviteUserInfoQuery, InviteUserInfoQueryVariables>) {
        return ApolloReactHooks.useQuery<InviteUserInfoQuery, InviteUserInfoQueryVariables>(InviteUserInfoDocument, baseOptions);
      }
export function useInviteUserInfoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<InviteUserInfoQuery, InviteUserInfoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<InviteUserInfoQuery, InviteUserInfoQueryVariables>(InviteUserInfoDocument, baseOptions);
        }
export type InviteUserInfoQueryHookResult = ReturnType<typeof useInviteUserInfoQuery>;
export type InviteUserInfoLazyQueryHookResult = ReturnType<typeof useInviteUserInfoLazyQuery>;
export type InviteUserInfoQueryResult = ApolloReactCommon.QueryResult<InviteUserInfoQuery, InviteUserInfoQueryVariables>;
export const GetTopenersByCurrentUserForFrontOfficeDocument = gql`
    query GetTopenersByCurrentUserForFrontOffice($page: Int, $pageSize: Int, $input: GetTopenersByCurrentUserInput, $orderBy: GetTopenersByCurrentUserDtoSort) {
  getTopenersByCurrentUserForFrontOffice(
    page: $page
    pageSize: $pageSize
    input: $input
    order_by: $orderBy
  ) {
    edges {
      userId
      fullName
      phoneNumber
      profilePhoto
      isFollow
      profilePhotos
      agentRating
      agentGroupId
      agentGroupName
      agentRankingId
      agentRankingName
    }
    totalCount
  }
}
    `;

/**
 * __useGetTopenersByCurrentUserForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetTopenersByCurrentUserForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenersByCurrentUserForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenersByCurrentUserForFrontOfficeQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      input: // value for 'input'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetTopenersByCurrentUserForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenersByCurrentUserForFrontOfficeQuery, GetTopenersByCurrentUserForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenersByCurrentUserForFrontOfficeQuery, GetTopenersByCurrentUserForFrontOfficeQueryVariables>(GetTopenersByCurrentUserForFrontOfficeDocument, baseOptions);
      }
export function useGetTopenersByCurrentUserForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenersByCurrentUserForFrontOfficeQuery, GetTopenersByCurrentUserForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenersByCurrentUserForFrontOfficeQuery, GetTopenersByCurrentUserForFrontOfficeQueryVariables>(GetTopenersByCurrentUserForFrontOfficeDocument, baseOptions);
        }
export type GetTopenersByCurrentUserForFrontOfficeQueryHookResult = ReturnType<typeof useGetTopenersByCurrentUserForFrontOfficeQuery>;
export type GetTopenersByCurrentUserForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetTopenersByCurrentUserForFrontOfficeLazyQuery>;
export type GetTopenersByCurrentUserForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetTopenersByCurrentUserForFrontOfficeQuery, GetTopenersByCurrentUserForFrontOfficeQueryVariables>;
export const GetRepliesByCommentIdForFrontOfficeDocument = gql`
    query GetRepliesByCommentIdForFrontOffice($commentId: Uuid!, $first: PaginationAmount, $after: String!) {
  curRepliesByCommentIdForFrontOffice(
    commentId: $commentId
    first: $first
    after: $after
  ) {
    edges {
      node {
        commentId
        feedObjectId
        feedObjectTitle
        feedObjectTypeId
        totalLike
        feedItemId
        createdDatetime
        currentUserLikeComment
        content
        userInfo {
          fullName
          profilePhoto
        }
      }
    }
    pageInfo {
      hasNextPage
      endCursor
      startCursor
      hasPreviousPage
    }
  }
}
    `;

/**
 * __useGetRepliesByCommentIdForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetRepliesByCommentIdForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRepliesByCommentIdForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRepliesByCommentIdForFrontOfficeQuery({
 *   variables: {
 *      commentId: // value for 'commentId'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *   },
 * });
 */
export function useGetRepliesByCommentIdForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRepliesByCommentIdForFrontOfficeQuery, GetRepliesByCommentIdForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetRepliesByCommentIdForFrontOfficeQuery, GetRepliesByCommentIdForFrontOfficeQueryVariables>(GetRepliesByCommentIdForFrontOfficeDocument, baseOptions);
      }
export function useGetRepliesByCommentIdForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRepliesByCommentIdForFrontOfficeQuery, GetRepliesByCommentIdForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetRepliesByCommentIdForFrontOfficeQuery, GetRepliesByCommentIdForFrontOfficeQueryVariables>(GetRepliesByCommentIdForFrontOfficeDocument, baseOptions);
        }
export type GetRepliesByCommentIdForFrontOfficeQueryHookResult = ReturnType<typeof useGetRepliesByCommentIdForFrontOfficeQuery>;
export type GetRepliesByCommentIdForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetRepliesByCommentIdForFrontOfficeLazyQuery>;
export type GetRepliesByCommentIdForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetRepliesByCommentIdForFrontOfficeQuery, GetRepliesByCommentIdForFrontOfficeQueryVariables>;
export const GetTotalFollowerByFeedObjectIdForFrontOfficeDocument = gql`
    query GetTotalFollowerByFeedObjectIdForFrontOffice($feedObjectId: String!) {
  getTotalFollowerByFeedObjectIdForFrontOffice(feedObjectId: $feedObjectId) {
    errorMessage
    errorCode
    currentUserFollowFeedItem
    totalFollower
    totalFollowing
  }
}
    `;

/**
 * __useGetTotalFollowerByFeedObjectIdForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetTotalFollowerByFeedObjectIdForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTotalFollowerByFeedObjectIdForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTotalFollowerByFeedObjectIdForFrontOfficeQuery({
 *   variables: {
 *      feedObjectId: // value for 'feedObjectId'
 *   },
 * });
 */
export function useGetTotalFollowerByFeedObjectIdForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTotalFollowerByFeedObjectIdForFrontOfficeQuery, GetTotalFollowerByFeedObjectIdForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTotalFollowerByFeedObjectIdForFrontOfficeQuery, GetTotalFollowerByFeedObjectIdForFrontOfficeQueryVariables>(GetTotalFollowerByFeedObjectIdForFrontOfficeDocument, baseOptions);
      }
export function useGetTotalFollowerByFeedObjectIdForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTotalFollowerByFeedObjectIdForFrontOfficeQuery, GetTotalFollowerByFeedObjectIdForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTotalFollowerByFeedObjectIdForFrontOfficeQuery, GetTotalFollowerByFeedObjectIdForFrontOfficeQueryVariables>(GetTotalFollowerByFeedObjectIdForFrontOfficeDocument, baseOptions);
        }
export type GetTotalFollowerByFeedObjectIdForFrontOfficeQueryHookResult = ReturnType<typeof useGetTotalFollowerByFeedObjectIdForFrontOfficeQuery>;
export type GetTotalFollowerByFeedObjectIdForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetTotalFollowerByFeedObjectIdForFrontOfficeLazyQuery>;
export type GetTotalFollowerByFeedObjectIdForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetTotalFollowerByFeedObjectIdForFrontOfficeQuery, GetTotalFollowerByFeedObjectIdForFrontOfficeQueryVariables>;
export const LikeCommentDocument = gql`
    mutation likeComment($input: LikeCommentInput!) {
  likeCommentForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    isLikeComment
  }
}
    `;
export type LikeCommentMutationFn = ApolloReactCommon.MutationFunction<LikeCommentMutation, LikeCommentMutationVariables>;

/**
 * __useLikeCommentMutation__
 *
 * To run a mutation, you first call `useLikeCommentMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLikeCommentMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [likeCommentMutation, { data, loading, error }] = useLikeCommentMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLikeCommentMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LikeCommentMutation, LikeCommentMutationVariables>) {
        return ApolloReactHooks.useMutation<LikeCommentMutation, LikeCommentMutationVariables>(LikeCommentDocument, baseOptions);
      }
export type LikeCommentMutationHookResult = ReturnType<typeof useLikeCommentMutation>;
export type LikeCommentMutationResult = ApolloReactCommon.MutationResult<LikeCommentMutation>;
export type LikeCommentMutationOptions = ApolloReactCommon.BaseMutationOptions<LikeCommentMutation, LikeCommentMutationVariables>;
export const ShareProjectByIdDocument = gql`
    mutation ShareProjectById($input: ShareProjectByIdInput!) {
  shareProjectById(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ShareProjectByIdMutationFn = ApolloReactCommon.MutationFunction<ShareProjectByIdMutation, ShareProjectByIdMutationVariables>;

/**
 * __useShareProjectByIdMutation__
 *
 * To run a mutation, you first call `useShareProjectByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useShareProjectByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [shareProjectByIdMutation, { data, loading, error }] = useShareProjectByIdMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useShareProjectByIdMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ShareProjectByIdMutation, ShareProjectByIdMutationVariables>) {
        return ApolloReactHooks.useMutation<ShareProjectByIdMutation, ShareProjectByIdMutationVariables>(ShareProjectByIdDocument, baseOptions);
      }
export type ShareProjectByIdMutationHookResult = ReturnType<typeof useShareProjectByIdMutation>;
export type ShareProjectByIdMutationResult = ApolloReactCommon.MutationResult<ShareProjectByIdMutation>;
export type ShareProjectByIdMutationOptions = ApolloReactCommon.BaseMutationOptions<ShareProjectByIdMutation, ShareProjectByIdMutationVariables>;
export const SharePropertyPostByIdDocument = gql`
    mutation SharePropertyPostById($input: SharePropertyPostInput!) {
  sharePropertyPost(sharePropertyPostInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type SharePropertyPostByIdMutationFn = ApolloReactCommon.MutationFunction<SharePropertyPostByIdMutation, SharePropertyPostByIdMutationVariables>;

/**
 * __useSharePropertyPostByIdMutation__
 *
 * To run a mutation, you first call `useSharePropertyPostByIdMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSharePropertyPostByIdMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sharePropertyPostByIdMutation, { data, loading, error }] = useSharePropertyPostByIdMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSharePropertyPostByIdMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SharePropertyPostByIdMutation, SharePropertyPostByIdMutationVariables>) {
        return ApolloReactHooks.useMutation<SharePropertyPostByIdMutation, SharePropertyPostByIdMutationVariables>(SharePropertyPostByIdDocument, baseOptions);
      }
export type SharePropertyPostByIdMutationHookResult = ReturnType<typeof useSharePropertyPostByIdMutation>;
export type SharePropertyPostByIdMutationResult = ApolloReactCommon.MutationResult<SharePropertyPostByIdMutation>;
export type SharePropertyPostByIdMutationOptions = ApolloReactCommon.BaseMutationOptions<SharePropertyPostByIdMutation, SharePropertyPostByIdMutationVariables>;
export const GetStaffByIdDocument = gql`
    query GetStaffById($input: Uuid) {
  staffById(staffId: $input) {
    createdDatetime
    departmentId
    departmentName
    dob
    email
    firstName
    fullName
    gender
    isActive
    isConsultant
    isCreatedByAdmin
    isGroupLeader
    isLocked
    isMember
    lastName
    nationalId
    permanentAddress
    phoneNumber
    preferPropertyPriceFrom
    preferPropertyPriceTo
    preferPropertyTypes
    profilePhoto
    rating
    recordVersion
    specialityIds
    staffCode
    staffContractTypeId
    staffGroupId
    staffGroupName
    staffId
    staffPositionId
    staffPositionName
    staffRankingId
    staffStatusId
    staffTypeId
    staffTypeName
    userId
    userName
    userStatus
    workingAreas
  }
}
    `;

/**
 * __useGetStaffByIdQuery__
 *
 * To run a query within a React component, call `useGetStaffByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetStaffByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetStaffByIdQuery, GetStaffByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetStaffByIdQuery, GetStaffByIdQueryVariables>(GetStaffByIdDocument, baseOptions);
      }
export function useGetStaffByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStaffByIdQuery, GetStaffByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetStaffByIdQuery, GetStaffByIdQueryVariables>(GetStaffByIdDocument, baseOptions);
        }
export type GetStaffByIdQueryHookResult = ReturnType<typeof useGetStaffByIdQuery>;
export type GetStaffByIdLazyQueryHookResult = ReturnType<typeof useGetStaffByIdLazyQuery>;
export type GetStaffByIdQueryResult = ApolloReactCommon.QueryResult<GetStaffByIdQuery, GetStaffByIdQueryVariables>;
export const GetStaffByPostIdDocument = gql`
    query GetStaffByPostId($propertyPostId: Uuid!) {
  getConsultantSupportForC2CPostFO(propertyPostId: $propertyPostId) {
    errorCode
    errorMessageCode
    errorMessage
    consultantDto {
      staffId
      staffCode
      fullName
      phoneNumber
      phoneNumber
      rating
      staffGroupDescription
      profilePhoto
      profilePhotos
      __typename
    }
  }
}
    `;

/**
 * __useGetStaffByPostIdQuery__
 *
 * To run a query within a React component, call `useGetStaffByPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffByPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffByPostIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetStaffByPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetStaffByPostIdQuery, GetStaffByPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetStaffByPostIdQuery, GetStaffByPostIdQueryVariables>(GetStaffByPostIdDocument, baseOptions);
      }
export function useGetStaffByPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStaffByPostIdQuery, GetStaffByPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetStaffByPostIdQuery, GetStaffByPostIdQueryVariables>(GetStaffByPostIdDocument, baseOptions);
        }
export type GetStaffByPostIdQueryHookResult = ReturnType<typeof useGetStaffByPostIdQuery>;
export type GetStaffByPostIdLazyQueryHookResult = ReturnType<typeof useGetStaffByPostIdLazyQuery>;
export type GetStaffByPostIdQueryResult = ApolloReactCommon.QueryResult<GetStaffByPostIdQuery, GetStaffByPostIdQueryVariables>;
export const GetStaffByUserIdDocument = gql`
    query GetStaffByUserId($userId: Uuid) {
  staffByUserId(userId: $userId) {
    email
    fullName
    phoneNumber
    profilePhoto
    rating
    userId
    staffId
    staffGroupName
  }
}
    `;

/**
 * __useGetStaffByUserIdQuery__
 *
 * To run a query within a React component, call `useGetStaffByUserIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetStaffByUserIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetStaffByUserIdQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetStaffByUserIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetStaffByUserIdQuery, GetStaffByUserIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetStaffByUserIdQuery, GetStaffByUserIdQueryVariables>(GetStaffByUserIdDocument, baseOptions);
      }
export function useGetStaffByUserIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetStaffByUserIdQuery, GetStaffByUserIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetStaffByUserIdQuery, GetStaffByUserIdQueryVariables>(GetStaffByUserIdDocument, baseOptions);
        }
export type GetStaffByUserIdQueryHookResult = ReturnType<typeof useGetStaffByUserIdQuery>;
export type GetStaffByUserIdLazyQueryHookResult = ReturnType<typeof useGetStaffByUserIdLazyQuery>;
export type GetStaffByUserIdQueryResult = ApolloReactCommon.QueryResult<GetStaffByUserIdQuery, GetStaffByUserIdQueryVariables>;
export const GenerateStringeeAuthTokenDocument = gql`
    mutation GenerateStringeeAuthToken($payload: GenerateStringeeAuthTokenInput!) {
  generateStringeeAuthToken(request: $payload) {
    authToken
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type GenerateStringeeAuthTokenMutationFn = ApolloReactCommon.MutationFunction<GenerateStringeeAuthTokenMutation, GenerateStringeeAuthTokenMutationVariables>;

/**
 * __useGenerateStringeeAuthTokenMutation__
 *
 * To run a mutation, you first call `useGenerateStringeeAuthTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateStringeeAuthTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateStringeeAuthTokenMutation, { data, loading, error }] = useGenerateStringeeAuthTokenMutation({
 *   variables: {
 *      payload: // value for 'payload'
 *   },
 * });
 */
export function useGenerateStringeeAuthTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GenerateStringeeAuthTokenMutation, GenerateStringeeAuthTokenMutationVariables>) {
        return ApolloReactHooks.useMutation<GenerateStringeeAuthTokenMutation, GenerateStringeeAuthTokenMutationVariables>(GenerateStringeeAuthTokenDocument, baseOptions);
      }
export type GenerateStringeeAuthTokenMutationHookResult = ReturnType<typeof useGenerateStringeeAuthTokenMutation>;
export type GenerateStringeeAuthTokenMutationResult = ApolloReactCommon.MutationResult<GenerateStringeeAuthTokenMutation>;
export type GenerateStringeeAuthTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<GenerateStringeeAuthTokenMutation, GenerateStringeeAuthTokenMutationVariables>;
export const GetCurrentSubscriptionPackageDocument = gql`
    query GetCurrentSubscriptionPackage {
  getActiveAgentSubscriptionPackageByCurrentUser {
    agentSubscriptionPackageDto {
      isActive
      packageBoughtTime
      subscriptionInvoiceId
      subscriptionPackageEndTime
      subscriptionPackageId
      subscriptionPackageStartTime
      agentSubscriptionPackageId
      agentSubscriptionPackageStatus
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetCurrentSubscriptionPackageQuery__
 *
 * To run a query within a React component, call `useGetCurrentSubscriptionPackageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentSubscriptionPackageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentSubscriptionPackageQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCurrentSubscriptionPackageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCurrentSubscriptionPackageQuery, GetCurrentSubscriptionPackageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCurrentSubscriptionPackageQuery, GetCurrentSubscriptionPackageQueryVariables>(GetCurrentSubscriptionPackageDocument, baseOptions);
      }
export function useGetCurrentSubscriptionPackageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCurrentSubscriptionPackageQuery, GetCurrentSubscriptionPackageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCurrentSubscriptionPackageQuery, GetCurrentSubscriptionPackageQueryVariables>(GetCurrentSubscriptionPackageDocument, baseOptions);
        }
export type GetCurrentSubscriptionPackageQueryHookResult = ReturnType<typeof useGetCurrentSubscriptionPackageQuery>;
export type GetCurrentSubscriptionPackageLazyQueryHookResult = ReturnType<typeof useGetCurrentSubscriptionPackageLazyQuery>;
export type GetCurrentSubscriptionPackageQueryResult = ApolloReactCommon.QueryResult<GetCurrentSubscriptionPackageQuery, GetCurrentSubscriptionPackageQueryVariables>;
export const GetAgentLastSubscriptionPackageDocument = gql`
    query GetAgentLastSubscriptionPackage {
  getAgentLastSubscriptionPackageByCurrentUser {
    agentSubscriptionPackageDto {
      isActive
      packageBoughtTime
      subscriptionInvoiceId
      subscriptionPackageEndTime
      subscriptionPackageId
      subscriptionPackageStartTime
      agentSubscriptionPackageId
      hasBoughtNewPackage
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetAgentLastSubscriptionPackageQuery__
 *
 * To run a query within a React component, call `useGetAgentLastSubscriptionPackageQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentLastSubscriptionPackageQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentLastSubscriptionPackageQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetAgentLastSubscriptionPackageQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentLastSubscriptionPackageQuery, GetAgentLastSubscriptionPackageQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentLastSubscriptionPackageQuery, GetAgentLastSubscriptionPackageQueryVariables>(GetAgentLastSubscriptionPackageDocument, baseOptions);
      }
export function useGetAgentLastSubscriptionPackageLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentLastSubscriptionPackageQuery, GetAgentLastSubscriptionPackageQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentLastSubscriptionPackageQuery, GetAgentLastSubscriptionPackageQueryVariables>(GetAgentLastSubscriptionPackageDocument, baseOptions);
        }
export type GetAgentLastSubscriptionPackageQueryHookResult = ReturnType<typeof useGetAgentLastSubscriptionPackageQuery>;
export type GetAgentLastSubscriptionPackageLazyQueryHookResult = ReturnType<typeof useGetAgentLastSubscriptionPackageLazyQuery>;
export type GetAgentLastSubscriptionPackageQueryResult = ApolloReactCommon.QueryResult<GetAgentLastSubscriptionPackageQuery, GetAgentLastSubscriptionPackageQueryVariables>;
export const GetAgentSubscriptionTransactionValidatePaymentDocument = gql`
    query GetAgentSubscriptionTransactionValidatePayment($input: getAgentSubscriptionTransactionValidatePaymentInput!) {
  getAgentSubscriptionTransactionValidatePayment(
    getAgentSubscriptionTransactionValidatePaymentInput: $input
  ) {
    agentSubscriptionTransactionDto {
      transactionId
      transactionStatusId
      purchaseDate
      startDate
      subscriptionPackageName
      subscriptionPackageValidDays
    }
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;

/**
 * __useGetAgentSubscriptionTransactionValidatePaymentQuery__
 *
 * To run a query within a React component, call `useGetAgentSubscriptionTransactionValidatePaymentQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAgentSubscriptionTransactionValidatePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAgentSubscriptionTransactionValidatePaymentQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetAgentSubscriptionTransactionValidatePaymentQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAgentSubscriptionTransactionValidatePaymentQuery, GetAgentSubscriptionTransactionValidatePaymentQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAgentSubscriptionTransactionValidatePaymentQuery, GetAgentSubscriptionTransactionValidatePaymentQueryVariables>(GetAgentSubscriptionTransactionValidatePaymentDocument, baseOptions);
      }
export function useGetAgentSubscriptionTransactionValidatePaymentLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAgentSubscriptionTransactionValidatePaymentQuery, GetAgentSubscriptionTransactionValidatePaymentQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAgentSubscriptionTransactionValidatePaymentQuery, GetAgentSubscriptionTransactionValidatePaymentQueryVariables>(GetAgentSubscriptionTransactionValidatePaymentDocument, baseOptions);
        }
export type GetAgentSubscriptionTransactionValidatePaymentQueryHookResult = ReturnType<typeof useGetAgentSubscriptionTransactionValidatePaymentQuery>;
export type GetAgentSubscriptionTransactionValidatePaymentLazyQueryHookResult = ReturnType<typeof useGetAgentSubscriptionTransactionValidatePaymentLazyQuery>;
export type GetAgentSubscriptionTransactionValidatePaymentQueryResult = ApolloReactCommon.QueryResult<GetAgentSubscriptionTransactionValidatePaymentQuery, GetAgentSubscriptionTransactionValidatePaymentQueryVariables>;
export const GetSubscriptionByIdDocument = gql`
    query GetSubscriptionById($packageId: Uuid) {
  getSubscriptionPackageById(subscriptionPackageId: $packageId) {
    errorCode
    errorMessage
    errorMessageCode
    subscriptionPackageDto {
      subscriptionPackageId
      subscriptionPackageName
      subscriptionPackagePrice
      subscriptionPackageValidDays
    }
  }
}
    `;

/**
 * __useGetSubscriptionByIdQuery__
 *
 * To run a query within a React component, call `useGetSubscriptionByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSubscriptionByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSubscriptionByIdQuery({
 *   variables: {
 *      packageId: // value for 'packageId'
 *   },
 * });
 */
export function useGetSubscriptionByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSubscriptionByIdQuery, GetSubscriptionByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSubscriptionByIdQuery, GetSubscriptionByIdQueryVariables>(GetSubscriptionByIdDocument, baseOptions);
      }
export function useGetSubscriptionByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSubscriptionByIdQuery, GetSubscriptionByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSubscriptionByIdQuery, GetSubscriptionByIdQueryVariables>(GetSubscriptionByIdDocument, baseOptions);
        }
export type GetSubscriptionByIdQueryHookResult = ReturnType<typeof useGetSubscriptionByIdQuery>;
export type GetSubscriptionByIdLazyQueryHookResult = ReturnType<typeof useGetSubscriptionByIdLazyQuery>;
export type GetSubscriptionByIdQueryResult = ApolloReactCommon.QueryResult<GetSubscriptionByIdQuery, GetSubscriptionByIdQueryVariables>;
export const PayAgentSubscriptionTransctionDocument = gql`
    mutation PayAgentSubscriptionTransction($input: payAgentSubscriptionInput!) {
  payAgentSubscriptionTransction(payAgentSubscriptionInput: $input) {
    disablePayment
    errorCode
    errorMessageCode
    errorMessage
    ipnUrl
    linkPaymentUrl
    returnUrl
    transactionId
  }
}
    `;
export type PayAgentSubscriptionTransctionMutationFn = ApolloReactCommon.MutationFunction<PayAgentSubscriptionTransctionMutation, PayAgentSubscriptionTransctionMutationVariables>;

/**
 * __usePayAgentSubscriptionTransctionMutation__
 *
 * To run a mutation, you first call `usePayAgentSubscriptionTransctionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePayAgentSubscriptionTransctionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [payAgentSubscriptionTransctionMutation, { data, loading, error }] = usePayAgentSubscriptionTransctionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePayAgentSubscriptionTransctionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<PayAgentSubscriptionTransctionMutation, PayAgentSubscriptionTransctionMutationVariables>) {
        return ApolloReactHooks.useMutation<PayAgentSubscriptionTransctionMutation, PayAgentSubscriptionTransctionMutationVariables>(PayAgentSubscriptionTransctionDocument, baseOptions);
      }
export type PayAgentSubscriptionTransctionMutationHookResult = ReturnType<typeof usePayAgentSubscriptionTransctionMutation>;
export type PayAgentSubscriptionTransctionMutationResult = ApolloReactCommon.MutationResult<PayAgentSubscriptionTransctionMutation>;
export type PayAgentSubscriptionTransctionMutationOptions = ApolloReactCommon.BaseMutationOptions<PayAgentSubscriptionTransctionMutation, PayAgentSubscriptionTransctionMutationVariables>;
export const ChangeExecutorServiceTicketForFrontOfficeDocument = gql`
    mutation ChangeExecutorServiceTicketForFrontOffice($input: ChangeExecutorServiceTicketInput!) {
  changeExecutorServiceTicketForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ChangeExecutorServiceTicketForFrontOfficeMutationFn = ApolloReactCommon.MutationFunction<ChangeExecutorServiceTicketForFrontOfficeMutation, ChangeExecutorServiceTicketForFrontOfficeMutationVariables>;

/**
 * __useChangeExecutorServiceTicketForFrontOfficeMutation__
 *
 * To run a mutation, you first call `useChangeExecutorServiceTicketForFrontOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeExecutorServiceTicketForFrontOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeExecutorServiceTicketForFrontOfficeMutation, { data, loading, error }] = useChangeExecutorServiceTicketForFrontOfficeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeExecutorServiceTicketForFrontOfficeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeExecutorServiceTicketForFrontOfficeMutation, ChangeExecutorServiceTicketForFrontOfficeMutationVariables>) {
        return ApolloReactHooks.useMutation<ChangeExecutorServiceTicketForFrontOfficeMutation, ChangeExecutorServiceTicketForFrontOfficeMutationVariables>(ChangeExecutorServiceTicketForFrontOfficeDocument, baseOptions);
      }
export type ChangeExecutorServiceTicketForFrontOfficeMutationHookResult = ReturnType<typeof useChangeExecutorServiceTicketForFrontOfficeMutation>;
export type ChangeExecutorServiceTicketForFrontOfficeMutationResult = ApolloReactCommon.MutationResult<ChangeExecutorServiceTicketForFrontOfficeMutation>;
export type ChangeExecutorServiceTicketForFrontOfficeMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeExecutorServiceTicketForFrontOfficeMutation, ChangeExecutorServiceTicketForFrontOfficeMutationVariables>;
export const ChangeStateOfServiceTicketForFrontOfficeDocument = gql`
    mutation ChangeStateOfServiceTicketForFrontOffice($input: ChangeStateOfServiceTicketInput!) {
  changeStateOfServiceTicketForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ChangeStateOfServiceTicketForFrontOfficeMutationFn = ApolloReactCommon.MutationFunction<ChangeStateOfServiceTicketForFrontOfficeMutation, ChangeStateOfServiceTicketForFrontOfficeMutationVariables>;

/**
 * __useChangeStateOfServiceTicketForFrontOfficeMutation__
 *
 * To run a mutation, you first call `useChangeStateOfServiceTicketForFrontOfficeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useChangeStateOfServiceTicketForFrontOfficeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [changeStateOfServiceTicketForFrontOfficeMutation, { data, loading, error }] = useChangeStateOfServiceTicketForFrontOfficeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useChangeStateOfServiceTicketForFrontOfficeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ChangeStateOfServiceTicketForFrontOfficeMutation, ChangeStateOfServiceTicketForFrontOfficeMutationVariables>) {
        return ApolloReactHooks.useMutation<ChangeStateOfServiceTicketForFrontOfficeMutation, ChangeStateOfServiceTicketForFrontOfficeMutationVariables>(ChangeStateOfServiceTicketForFrontOfficeDocument, baseOptions);
      }
export type ChangeStateOfServiceTicketForFrontOfficeMutationHookResult = ReturnType<typeof useChangeStateOfServiceTicketForFrontOfficeMutation>;
export type ChangeStateOfServiceTicketForFrontOfficeMutationResult = ApolloReactCommon.MutationResult<ChangeStateOfServiceTicketForFrontOfficeMutation>;
export type ChangeStateOfServiceTicketForFrontOfficeMutationOptions = ApolloReactCommon.BaseMutationOptions<ChangeStateOfServiceTicketForFrontOfficeMutation, ChangeStateOfServiceTicketForFrontOfficeMutationVariables>;
export const CreateServiceTicketDocument = gql`
    mutation CreateServiceTicket($input: CreateServiceTicketInput!) {
  createServiceTicketForFrontOffice(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    supportServiceTicketId
  }
}
    `;
export type CreateServiceTicketMutationFn = ApolloReactCommon.MutationFunction<CreateServiceTicketMutation, CreateServiceTicketMutationVariables>;

/**
 * __useCreateServiceTicketMutation__
 *
 * To run a mutation, you first call `useCreateServiceTicketMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateServiceTicketMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createServiceTicketMutation, { data, loading, error }] = useCreateServiceTicketMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateServiceTicketMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateServiceTicketMutation, CreateServiceTicketMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateServiceTicketMutation, CreateServiceTicketMutationVariables>(CreateServiceTicketDocument, baseOptions);
      }
export type CreateServiceTicketMutationHookResult = ReturnType<typeof useCreateServiceTicketMutation>;
export type CreateServiceTicketMutationResult = ApolloReactCommon.MutationResult<CreateServiceTicketMutation>;
export type CreateServiceTicketMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateServiceTicketMutation, CreateServiceTicketMutationVariables>;
export const ExecutorSubmitServiceTicketResultDocument = gql`
    mutation ExecutorSubmitServiceTicketResult($input: ExecutorSubmitServiceTicketResultInput!) {
  executorSubmitServiceTicketResult(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type ExecutorSubmitServiceTicketResultMutationFn = ApolloReactCommon.MutationFunction<ExecutorSubmitServiceTicketResultMutation, ExecutorSubmitServiceTicketResultMutationVariables>;

/**
 * __useExecutorSubmitServiceTicketResultMutation__
 *
 * To run a mutation, you first call `useExecutorSubmitServiceTicketResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useExecutorSubmitServiceTicketResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [executorSubmitServiceTicketResultMutation, { data, loading, error }] = useExecutorSubmitServiceTicketResultMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useExecutorSubmitServiceTicketResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<ExecutorSubmitServiceTicketResultMutation, ExecutorSubmitServiceTicketResultMutationVariables>) {
        return ApolloReactHooks.useMutation<ExecutorSubmitServiceTicketResultMutation, ExecutorSubmitServiceTicketResultMutationVariables>(ExecutorSubmitServiceTicketResultDocument, baseOptions);
      }
export type ExecutorSubmitServiceTicketResultMutationHookResult = ReturnType<typeof useExecutorSubmitServiceTicketResultMutation>;
export type ExecutorSubmitServiceTicketResultMutationResult = ApolloReactCommon.MutationResult<ExecutorSubmitServiceTicketResultMutation>;
export type ExecutorSubmitServiceTicketResultMutationOptions = ApolloReactCommon.BaseMutationOptions<ExecutorSubmitServiceTicketResultMutation, ExecutorSubmitServiceTicketResultMutationVariables>;
export const GetReceivedServiceTicketsByCurrentUserForFrontOfficeDocument = gql`
    query GetReceivedServiceTicketsByCurrentUserForFrontOffice($page: Int, $pageSize: Int, $orderBy: ReceivedServiceTicketForFrontOfficeDtoSort, $where: ReceivedServiceTicketForFrontOfficeDtoFilter) {
  getReceivedServiceTicketsByCurrentUserForFrontOffice(
    page: $page
    pageSize: $pageSize
    order_by: $orderBy
    where: $where
  ) {
    edges {
      ticketCode
      ticketStatusName
      ticketStatusId
      propertyPostId
      propertyPostCode
      supportServiceId
      supportServiceTicketId
      requesterId
      supportServiceName
      requesterFullName
      supportServiceName
      propertyPostDetailPath
      appointmentDatetime
      ticketProcessingStatusId
      createdDatetime
    }
    totalCount
  }
}
    `;

/**
 * __useGetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery, GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery, GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryVariables>(GetReceivedServiceTicketsByCurrentUserForFrontOfficeDocument, baseOptions);
      }
export function useGetReceivedServiceTicketsByCurrentUserForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery, GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery, GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryVariables>(GetReceivedServiceTicketsByCurrentUserForFrontOfficeDocument, baseOptions);
        }
export type GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryHookResult = ReturnType<typeof useGetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery>;
export type GetReceivedServiceTicketsByCurrentUserForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetReceivedServiceTicketsByCurrentUserForFrontOfficeLazyQuery>;
export type GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetReceivedServiceTicketsByCurrentUserForFrontOfficeQuery, GetReceivedServiceTicketsByCurrentUserForFrontOfficeQueryVariables>;
export const GetSentServiceTicketsByCurrentUserForFrontOfficeDocument = gql`
    query GetSentServiceTicketsByCurrentUserForFrontOffice($page: Int, $pageSize: Int, $orderBy: SentServiceTicketForFrontOfficeDtoSort, $where: SentServiceTicketForFrontOfficeDtoFilter) {
  getSentServiceTicketsByCurrentUserForFrontOffice(
    page: $page
    pageSize: $pageSize
    order_by: $orderBy
    where: $where
  ) {
    edges {
      ticketCode
      ticketStatusId
      propertyPostId
      ticketStatusName
      supportServiceName
      propertyPostCode
      supportServiceId
      supportServiceTicketId
      currentExecutorName
      currentExecutorId
      propertyPostDetailPath
      appointmentDatetime
      createdDatetime
    }
    totalCount
  }
}
    `;

/**
 * __useGetSentServiceTicketsByCurrentUserForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetSentServiceTicketsByCurrentUserForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSentServiceTicketsByCurrentUserForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSentServiceTicketsByCurrentUserForFrontOfficeQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetSentServiceTicketsByCurrentUserForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSentServiceTicketsByCurrentUserForFrontOfficeQuery, GetSentServiceTicketsByCurrentUserForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSentServiceTicketsByCurrentUserForFrontOfficeQuery, GetSentServiceTicketsByCurrentUserForFrontOfficeQueryVariables>(GetSentServiceTicketsByCurrentUserForFrontOfficeDocument, baseOptions);
      }
export function useGetSentServiceTicketsByCurrentUserForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSentServiceTicketsByCurrentUserForFrontOfficeQuery, GetSentServiceTicketsByCurrentUserForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSentServiceTicketsByCurrentUserForFrontOfficeQuery, GetSentServiceTicketsByCurrentUserForFrontOfficeQueryVariables>(GetSentServiceTicketsByCurrentUserForFrontOfficeDocument, baseOptions);
        }
export type GetSentServiceTicketsByCurrentUserForFrontOfficeQueryHookResult = ReturnType<typeof useGetSentServiceTicketsByCurrentUserForFrontOfficeQuery>;
export type GetSentServiceTicketsByCurrentUserForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetSentServiceTicketsByCurrentUserForFrontOfficeLazyQuery>;
export type GetSentServiceTicketsByCurrentUserForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetSentServiceTicketsByCurrentUserForFrontOfficeQuery, GetSentServiceTicketsByCurrentUserForFrontOfficeQueryVariables>;
export const GetServiceTicketByIdForFrontOfficeDocument = gql`
    query GetServiceTicketByIdForFrontOffice($SupportServiceTicketId: Uuid!) {
  getServiceTicketByIdForFrontOffice(
    supportServiceTicketId: $SupportServiceTicketId
  ) {
    errorCode
    supportServiceTicket {
      supportServiceTicketId
      supportServiceId
      supportServiceName
      ticketPaymentStatusId
      propertyPostId
      ticketCode
      appointmentDatetime
      requesterId
      requesterFullName
      requester {
        fullName
        phoneNumber
        profilePhotos
        profilePhoto
        userId
      }
      ticketStatusId
      ticketStatusName
      currentExecutorId
      currentExecutorName
      currentExecutor {
        fullName
        phoneNumber
        profilePhotos
        profilePhoto
      }
      updatedDatetime
      consultantStaffId
      consultantStaffName
      ticketNote
      supportServiceTicketProcessings {
        reasonId
        reasonNote
        ticketProcessingStatusId
        ticketProcessingStatusName
        supportServiceTicketProcessingId
        updatedDatetime
      }
      supportServiceTicketResult {
        autoAcceptTicketInMinutes
        supportServiceTicketResultId
        ticketResultStatusId
        note
        ticketResultStatusId
        rejectReasonId
        rejectReasonNote
        resultDescriptions
        resultDocuments
        resultImages
        ticketResultStatusId
      }
      nextStates
      currentAllStates
    }
  }
}
    `;

/**
 * __useGetServiceTicketByIdForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetServiceTicketByIdForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetServiceTicketByIdForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetServiceTicketByIdForFrontOfficeQuery({
 *   variables: {
 *      SupportServiceTicketId: // value for 'SupportServiceTicketId'
 *   },
 * });
 */
export function useGetServiceTicketByIdForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetServiceTicketByIdForFrontOfficeQuery, GetServiceTicketByIdForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetServiceTicketByIdForFrontOfficeQuery, GetServiceTicketByIdForFrontOfficeQueryVariables>(GetServiceTicketByIdForFrontOfficeDocument, baseOptions);
      }
export function useGetServiceTicketByIdForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetServiceTicketByIdForFrontOfficeQuery, GetServiceTicketByIdForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetServiceTicketByIdForFrontOfficeQuery, GetServiceTicketByIdForFrontOfficeQueryVariables>(GetServiceTicketByIdForFrontOfficeDocument, baseOptions);
        }
export type GetServiceTicketByIdForFrontOfficeQueryHookResult = ReturnType<typeof useGetServiceTicketByIdForFrontOfficeQuery>;
export type GetServiceTicketByIdForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetServiceTicketByIdForFrontOfficeLazyQuery>;
export type GetServiceTicketByIdForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetServiceTicketByIdForFrontOfficeQuery, GetServiceTicketByIdForFrontOfficeQueryVariables>;
export const GetSupportServiceTicketDetailDocument = gql`
    query GetSupportServiceTicketDetail($supportServiceTicketId: Uuid!) {
  getSupportServiceTicketDetail(supportServiceTicketId: $supportServiceTicketId) {
    errorCode
    supportServiceTicketDto {
      supportServiceId
      supportServiceName
      supportServiceTicketId
      ticketStatusId
      ticketStatusName
      ticketCode
      ticketNote
      appointmentDatetime
      propertyPostCode
      propertyPostId
      currentExecutorId
      currentExecutorName
      currentExecutor {
        userId
        fullName
        phoneNumber
        profilePhoto
        profilePhotos
      }
      requesterId
      requesterFullName
      requester {
        userId
        fullName
        phoneNumber
        profilePhoto
        profilePhotos
      }
      createdDatetime
      consultantStaffId
      consultantStaffName
      price
    }
    supportServiceTicketResultDto {
      supportServiceTicketResultId
      resultDescriptions
      resultDocuments
      resultImages
    }
  }
}
    `;

/**
 * __useGetSupportServiceTicketDetailQuery__
 *
 * To run a query within a React component, call `useGetSupportServiceTicketDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportServiceTicketDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportServiceTicketDetailQuery({
 *   variables: {
 *      supportServiceTicketId: // value for 'supportServiceTicketId'
 *   },
 * });
 */
export function useGetSupportServiceTicketDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportServiceTicketDetailQuery, GetSupportServiceTicketDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportServiceTicketDetailQuery, GetSupportServiceTicketDetailQueryVariables>(GetSupportServiceTicketDetailDocument, baseOptions);
      }
export function useGetSupportServiceTicketDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportServiceTicketDetailQuery, GetSupportServiceTicketDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportServiceTicketDetailQuery, GetSupportServiceTicketDetailQueryVariables>(GetSupportServiceTicketDetailDocument, baseOptions);
        }
export type GetSupportServiceTicketDetailQueryHookResult = ReturnType<typeof useGetSupportServiceTicketDetailQuery>;
export type GetSupportServiceTicketDetailLazyQueryHookResult = ReturnType<typeof useGetSupportServiceTicketDetailLazyQuery>;
export type GetSupportServiceTicketDetailQueryResult = ApolloReactCommon.QueryResult<GetSupportServiceTicketDetailQuery, GetSupportServiceTicketDetailQueryVariables>;
export const GetSupportServiceTicketProcessingHistoriesDocument = gql`
    query GetSupportServiceTicketProcessingHistories($supportServiceTicketId: Uuid!) {
  getSupportServiceTicketProcessingHistories(
    supportServiceTicketId: $supportServiceTicketId
  ) {
    edges {
      updatedDatetime
      logEvent
      executorId
      executorName
      reasonNote
    }
  }
}
    `;

/**
 * __useGetSupportServiceTicketProcessingHistoriesQuery__
 *
 * To run a query within a React component, call `useGetSupportServiceTicketProcessingHistoriesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportServiceTicketProcessingHistoriesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportServiceTicketProcessingHistoriesQuery({
 *   variables: {
 *      supportServiceTicketId: // value for 'supportServiceTicketId'
 *   },
 * });
 */
export function useGetSupportServiceTicketProcessingHistoriesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportServiceTicketProcessingHistoriesQuery, GetSupportServiceTicketProcessingHistoriesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportServiceTicketProcessingHistoriesQuery, GetSupportServiceTicketProcessingHistoriesQueryVariables>(GetSupportServiceTicketProcessingHistoriesDocument, baseOptions);
      }
export function useGetSupportServiceTicketProcessingHistoriesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportServiceTicketProcessingHistoriesQuery, GetSupportServiceTicketProcessingHistoriesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportServiceTicketProcessingHistoriesQuery, GetSupportServiceTicketProcessingHistoriesQueryVariables>(GetSupportServiceTicketProcessingHistoriesDocument, baseOptions);
        }
export type GetSupportServiceTicketProcessingHistoriesQueryHookResult = ReturnType<typeof useGetSupportServiceTicketProcessingHistoriesQuery>;
export type GetSupportServiceTicketProcessingHistoriesLazyQueryHookResult = ReturnType<typeof useGetSupportServiceTicketProcessingHistoriesLazyQuery>;
export type GetSupportServiceTicketProcessingHistoriesQueryResult = ApolloReactCommon.QueryResult<GetSupportServiceTicketProcessingHistoriesQuery, GetSupportServiceTicketProcessingHistoriesQueryVariables>;
export const GetsupportServiceTicketProcessingStatusesDocument = gql`
    query GetsupportServiceTicketProcessingStatuses($orderBy: SupportServiceTicketProcessingStatusDtoSort, $page: Int) {
  supportServiceTicketProcessingStatuses(
    order_by: $orderBy
    page: $page
    pageSize: 999
  ) {
    edges {
      supportServiceTicketProcessingStatusId
      supportServiceTicketProcessingStatusName
      supportServiceTicketProcessingStatusDescription
    }
  }
}
    `;

/**
 * __useGetsupportServiceTicketProcessingStatusesQuery__
 *
 * To run a query within a React component, call `useGetsupportServiceTicketProcessingStatusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetsupportServiceTicketProcessingStatusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetsupportServiceTicketProcessingStatusesQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetsupportServiceTicketProcessingStatusesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetsupportServiceTicketProcessingStatusesQuery, GetsupportServiceTicketProcessingStatusesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetsupportServiceTicketProcessingStatusesQuery, GetsupportServiceTicketProcessingStatusesQueryVariables>(GetsupportServiceTicketProcessingStatusesDocument, baseOptions);
      }
export function useGetsupportServiceTicketProcessingStatusesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetsupportServiceTicketProcessingStatusesQuery, GetsupportServiceTicketProcessingStatusesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetsupportServiceTicketProcessingStatusesQuery, GetsupportServiceTicketProcessingStatusesQueryVariables>(GetsupportServiceTicketProcessingStatusesDocument, baseOptions);
        }
export type GetsupportServiceTicketProcessingStatusesQueryHookResult = ReturnType<typeof useGetsupportServiceTicketProcessingStatusesQuery>;
export type GetsupportServiceTicketProcessingStatusesLazyQueryHookResult = ReturnType<typeof useGetsupportServiceTicketProcessingStatusesLazyQuery>;
export type GetsupportServiceTicketProcessingStatusesQueryResult = ApolloReactCommon.QueryResult<GetsupportServiceTicketProcessingStatusesQuery, GetsupportServiceTicketProcessingStatusesQueryVariables>;
export const GetServiceTicketResultByIdForFrontOfficeDocument = gql`
    query GetServiceTicketResultByIdForFrontOffice($SupportServiceTicketResultId: Uuid!) {
  getServiceTicketResultByIdForFrontOffice(
    supportServiceTicketResultId: $SupportServiceTicketResultId
  ) {
    errorCode
    supportServiceTicketResult {
      autoAcceptTicketInMinutes
      resultImages
      resultDocuments
      resultDescriptions
      supportServiceTicketResultId
      note
    }
  }
}
    `;

/**
 * __useGetServiceTicketResultByIdForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetServiceTicketResultByIdForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetServiceTicketResultByIdForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetServiceTicketResultByIdForFrontOfficeQuery({
 *   variables: {
 *      SupportServiceTicketResultId: // value for 'SupportServiceTicketResultId'
 *   },
 * });
 */
export function useGetServiceTicketResultByIdForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetServiceTicketResultByIdForFrontOfficeQuery, GetServiceTicketResultByIdForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetServiceTicketResultByIdForFrontOfficeQuery, GetServiceTicketResultByIdForFrontOfficeQueryVariables>(GetServiceTicketResultByIdForFrontOfficeDocument, baseOptions);
      }
export function useGetServiceTicketResultByIdForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetServiceTicketResultByIdForFrontOfficeQuery, GetServiceTicketResultByIdForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetServiceTicketResultByIdForFrontOfficeQuery, GetServiceTicketResultByIdForFrontOfficeQueryVariables>(GetServiceTicketResultByIdForFrontOfficeDocument, baseOptions);
        }
export type GetServiceTicketResultByIdForFrontOfficeQueryHookResult = ReturnType<typeof useGetServiceTicketResultByIdForFrontOfficeQuery>;
export type GetServiceTicketResultByIdForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetServiceTicketResultByIdForFrontOfficeLazyQuery>;
export type GetServiceTicketResultByIdForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetServiceTicketResultByIdForFrontOfficeQuery, GetServiceTicketResultByIdForFrontOfficeQueryVariables>;
export const GetSupportServiceTicketsByPropertyPostIdDocument = gql`
    query GetSupportServiceTicketsByPropertyPostId($page: Int, $pageSize: Int, $propertyPostId: Uuid!) {
  getSupportServiceTicketsByPropertyPostId(
    page: $page
    pageSize: $pageSize
    propertyPostId: $propertyPostId
  ) {
    edges {
      supportServiceId
      supportServiceName
      supportServiceTicketId
      ticketStatusId
      ticketStatusName
      ticketCode
      ticketNote
      appointmentDatetime
      propertyPostCode
      propertyPostId
      currentExecutorId
      currentExecutorName
      requesterId
      requesterFullName
      createdDatetime
      consultantStaffId
      consultantStaffName
    }
    __typename
  }
}
    `;

/**
 * __useGetSupportServiceTicketsByPropertyPostIdQuery__
 *
 * To run a query within a React component, call `useGetSupportServiceTicketsByPropertyPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportServiceTicketsByPropertyPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportServiceTicketsByPropertyPostIdQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetSupportServiceTicketsByPropertyPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportServiceTicketsByPropertyPostIdQuery, GetSupportServiceTicketsByPropertyPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportServiceTicketsByPropertyPostIdQuery, GetSupportServiceTicketsByPropertyPostIdQueryVariables>(GetSupportServiceTicketsByPropertyPostIdDocument, baseOptions);
      }
export function useGetSupportServiceTicketsByPropertyPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportServiceTicketsByPropertyPostIdQuery, GetSupportServiceTicketsByPropertyPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportServiceTicketsByPropertyPostIdQuery, GetSupportServiceTicketsByPropertyPostIdQueryVariables>(GetSupportServiceTicketsByPropertyPostIdDocument, baseOptions);
        }
export type GetSupportServiceTicketsByPropertyPostIdQueryHookResult = ReturnType<typeof useGetSupportServiceTicketsByPropertyPostIdQuery>;
export type GetSupportServiceTicketsByPropertyPostIdLazyQueryHookResult = ReturnType<typeof useGetSupportServiceTicketsByPropertyPostIdLazyQuery>;
export type GetSupportServiceTicketsByPropertyPostIdQueryResult = ApolloReactCommon.QueryResult<GetSupportServiceTicketsByPropertyPostIdQuery, GetSupportServiceTicketsByPropertyPostIdQueryVariables>;
export const GetSupportServiceTypesForFrontOfficeDocument = gql`
    query GetSupportServiceTypesForFrontOffice {
  getSupportServiceTypesForFrontOffice {
    errorCode
    errorMessage
    errorMessageCode
    requestTypes {
      price
      requestTypeId
      requestTypeName
      requestTypeDescription
    }
  }
}
    `;

/**
 * __useGetSupportServiceTypesForFrontOfficeQuery__
 *
 * To run a query within a React component, call `useGetSupportServiceTypesForFrontOfficeQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportServiceTypesForFrontOfficeQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportServiceTypesForFrontOfficeQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSupportServiceTypesForFrontOfficeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportServiceTypesForFrontOfficeQuery, GetSupportServiceTypesForFrontOfficeQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportServiceTypesForFrontOfficeQuery, GetSupportServiceTypesForFrontOfficeQueryVariables>(GetSupportServiceTypesForFrontOfficeDocument, baseOptions);
      }
export function useGetSupportServiceTypesForFrontOfficeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportServiceTypesForFrontOfficeQuery, GetSupportServiceTypesForFrontOfficeQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportServiceTypesForFrontOfficeQuery, GetSupportServiceTypesForFrontOfficeQueryVariables>(GetSupportServiceTypesForFrontOfficeDocument, baseOptions);
        }
export type GetSupportServiceTypesForFrontOfficeQueryHookResult = ReturnType<typeof useGetSupportServiceTypesForFrontOfficeQuery>;
export type GetSupportServiceTypesForFrontOfficeLazyQueryHookResult = ReturnType<typeof useGetSupportServiceTypesForFrontOfficeLazyQuery>;
export type GetSupportServiceTypesForFrontOfficeQueryResult = ApolloReactCommon.QueryResult<GetSupportServiceTypesForFrontOfficeQuery, GetSupportServiceTypesForFrontOfficeQueryVariables>;
export const GetTopenersAvailableDocument = gql`
    query GetTopenersAvailable($page: Int, $pageSize: Int, $request: GetTopenersAvailableInput!) {
  getTopenersAvailable(page: $page, pageSize: $pageSize, request: $request) {
    edges {
      topenerId
      fullName
      agentGroupDescription
      agentGroupId
      agentGroupName
      agentRankingDescription
      agentRankingId
      agentRankingName
      agentRating
      avatar
      email
      imageSizes
      isAgent
      phoneNumber
      topenerId
    }
  }
}
    `;

/**
 * __useGetTopenersAvailableQuery__
 *
 * To run a query within a React component, call `useGetTopenersAvailableQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenersAvailableQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenersAvailableQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      request: // value for 'request'
 *   },
 * });
 */
export function useGetTopenersAvailableQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenersAvailableQuery, GetTopenersAvailableQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenersAvailableQuery, GetTopenersAvailableQueryVariables>(GetTopenersAvailableDocument, baseOptions);
      }
export function useGetTopenersAvailableLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenersAvailableQuery, GetTopenersAvailableQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenersAvailableQuery, GetTopenersAvailableQueryVariables>(GetTopenersAvailableDocument, baseOptions);
        }
export type GetTopenersAvailableQueryHookResult = ReturnType<typeof useGetTopenersAvailableQuery>;
export type GetTopenersAvailableLazyQueryHookResult = ReturnType<typeof useGetTopenersAvailableLazyQuery>;
export type GetTopenersAvailableQueryResult = ApolloReactCommon.QueryResult<GetTopenersAvailableQuery, GetTopenersAvailableQueryVariables>;
export const GetTopenersRecentlySupportTicketDocument = gql`
    query GetTopenersRecentlySupportTicket($page: Int, $pageSize: Int, $request: GetTopenersRecentlySupportTicketInput!) {
  getTopenersRecentlySupportTicket(
    page: $page
    pageSize: $pageSize
    request: $request
  ) {
    edges {
      topenerId
      fullName
      agentGroupDescription
      agentGroupId
      agentGroupName
      agentRankingDescription
      agentRankingId
      agentRankingName
      agentRating
      avatar
      email
      imageSizes
      isAgent
      phoneNumber
      topenerId
    }
  }
}
    `;

/**
 * __useGetTopenersRecentlySupportTicketQuery__
 *
 * To run a query within a React component, call `useGetTopenersRecentlySupportTicketQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenersRecentlySupportTicketQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenersRecentlySupportTicketQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      request: // value for 'request'
 *   },
 * });
 */
export function useGetTopenersRecentlySupportTicketQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenersRecentlySupportTicketQuery, GetTopenersRecentlySupportTicketQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenersRecentlySupportTicketQuery, GetTopenersRecentlySupportTicketQueryVariables>(GetTopenersRecentlySupportTicketDocument, baseOptions);
      }
export function useGetTopenersRecentlySupportTicketLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenersRecentlySupportTicketQuery, GetTopenersRecentlySupportTicketQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenersRecentlySupportTicketQuery, GetTopenersRecentlySupportTicketQueryVariables>(GetTopenersRecentlySupportTicketDocument, baseOptions);
        }
export type GetTopenersRecentlySupportTicketQueryHookResult = ReturnType<typeof useGetTopenersRecentlySupportTicketQuery>;
export type GetTopenersRecentlySupportTicketLazyQueryHookResult = ReturnType<typeof useGetTopenersRecentlySupportTicketLazyQuery>;
export type GetTopenersRecentlySupportTicketQueryResult = ApolloReactCommon.QueryResult<GetTopenersRecentlySupportTicketQuery, GetTopenersRecentlySupportTicketQueryVariables>;
export const GetTopenersSuggestionDocument = gql`
    query GetTopenersSuggestion($page: Int, $pageSize: Int, $request: GetTopenersSuggestionInput!) {
  getTopenersSuggestion(page: $page, pageSize: $pageSize, request: $request) {
    edges {
      avatar
      fullName
      topenerId
      phoneNumber
      agentRating
    }
    totalCount
  }
}
    `;

/**
 * __useGetTopenersSuggestionQuery__
 *
 * To run a query within a React component, call `useGetTopenersSuggestionQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenersSuggestionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenersSuggestionQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      request: // value for 'request'
 *   },
 * });
 */
export function useGetTopenersSuggestionQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenersSuggestionQuery, GetTopenersSuggestionQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenersSuggestionQuery, GetTopenersSuggestionQueryVariables>(GetTopenersSuggestionDocument, baseOptions);
      }
export function useGetTopenersSuggestionLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenersSuggestionQuery, GetTopenersSuggestionQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenersSuggestionQuery, GetTopenersSuggestionQueryVariables>(GetTopenersSuggestionDocument, baseOptions);
        }
export type GetTopenersSuggestionQueryHookResult = ReturnType<typeof useGetTopenersSuggestionQuery>;
export type GetTopenersSuggestionLazyQueryHookResult = ReturnType<typeof useGetTopenersSuggestionLazyQuery>;
export type GetTopenersSuggestionQueryResult = ApolloReactCommon.QueryResult<GetTopenersSuggestionQuery, GetTopenersSuggestionQueryVariables>;
export const GetsupportServiceTicketCancelReasonsDocument = gql`
    query GetsupportServiceTicketCancelReasons($orderBy: SupportServiceTicketCancelReasonDtoSort, $page: Int) {
  supportServiceTicketCancelReasons(
    order_by: $orderBy
    page: $page
    pageSize: 999
  ) {
    edges {
      supportServiceTicketCancelReasonId
      supportServiceTicketCancelReasonName
      supportServiceTicketCancelReasonDescription
    }
  }
}
    `;

/**
 * __useGetsupportServiceTicketCancelReasonsQuery__
 *
 * To run a query within a React component, call `useGetsupportServiceTicketCancelReasonsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetsupportServiceTicketCancelReasonsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetsupportServiceTicketCancelReasonsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetsupportServiceTicketCancelReasonsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetsupportServiceTicketCancelReasonsQuery, GetsupportServiceTicketCancelReasonsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetsupportServiceTicketCancelReasonsQuery, GetsupportServiceTicketCancelReasonsQueryVariables>(GetsupportServiceTicketCancelReasonsDocument, baseOptions);
      }
export function useGetsupportServiceTicketCancelReasonsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetsupportServiceTicketCancelReasonsQuery, GetsupportServiceTicketCancelReasonsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetsupportServiceTicketCancelReasonsQuery, GetsupportServiceTicketCancelReasonsQueryVariables>(GetsupportServiceTicketCancelReasonsDocument, baseOptions);
        }
export type GetsupportServiceTicketCancelReasonsQueryHookResult = ReturnType<typeof useGetsupportServiceTicketCancelReasonsQuery>;
export type GetsupportServiceTicketCancelReasonsLazyQueryHookResult = ReturnType<typeof useGetsupportServiceTicketCancelReasonsLazyQuery>;
export type GetsupportServiceTicketCancelReasonsQueryResult = ApolloReactCommon.QueryResult<GetsupportServiceTicketCancelReasonsQuery, GetsupportServiceTicketCancelReasonsQueryVariables>;
export const GetsupportServiceTicketRejectReasonsDocument = gql`
    query GetsupportServiceTicketRejectReasons($orderBy: SupportServiceTicketRejectReasonDtoSort, $page: Int) {
  supportServiceTicketRejectReasons(
    order_by: $orderBy
    page: $page
    pageSize: 999
  ) {
    edges {
      supportServiceTicketRejectReasonId
      supportServiceTicketRejectReasonName
      supportServiceTicketRejectReasonDescription
    }
  }
}
    `;

/**
 * __useGetsupportServiceTicketRejectReasonsQuery__
 *
 * To run a query within a React component, call `useGetsupportServiceTicketRejectReasonsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetsupportServiceTicketRejectReasonsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetsupportServiceTicketRejectReasonsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetsupportServiceTicketRejectReasonsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetsupportServiceTicketRejectReasonsQuery, GetsupportServiceTicketRejectReasonsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetsupportServiceTicketRejectReasonsQuery, GetsupportServiceTicketRejectReasonsQueryVariables>(GetsupportServiceTicketRejectReasonsDocument, baseOptions);
      }
export function useGetsupportServiceTicketRejectReasonsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetsupportServiceTicketRejectReasonsQuery, GetsupportServiceTicketRejectReasonsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetsupportServiceTicketRejectReasonsQuery, GetsupportServiceTicketRejectReasonsQueryVariables>(GetsupportServiceTicketRejectReasonsDocument, baseOptions);
        }
export type GetsupportServiceTicketRejectReasonsQueryHookResult = ReturnType<typeof useGetsupportServiceTicketRejectReasonsQuery>;
export type GetsupportServiceTicketRejectReasonsLazyQueryHookResult = ReturnType<typeof useGetsupportServiceTicketRejectReasonsLazyQuery>;
export type GetsupportServiceTicketRejectReasonsQueryResult = ApolloReactCommon.QueryResult<GetsupportServiceTicketRejectReasonsQuery, GetsupportServiceTicketRejectReasonsQueryVariables>;
export const GetsupportServiceTicketStatusesDocument = gql`
    query GetsupportServiceTicketStatuses($orderBy: SupportServiceTicketStatusDtoSort, $page: Int) {
  supportServiceTicketStatuses(order_by: $orderBy, page: $page, pageSize: 999) {
    edges {
      supportServiceTicketStatusId
      supportServiceTicketStatusName
      supportServiceTicketStatusDescription
    }
  }
}
    `;

/**
 * __useGetsupportServiceTicketStatusesQuery__
 *
 * To run a query within a React component, call `useGetsupportServiceTicketStatusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetsupportServiceTicketStatusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetsupportServiceTicketStatusesQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetsupportServiceTicketStatusesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetsupportServiceTicketStatusesQuery, GetsupportServiceTicketStatusesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetsupportServiceTicketStatusesQuery, GetsupportServiceTicketStatusesQueryVariables>(GetsupportServiceTicketStatusesDocument, baseOptions);
      }
export function useGetsupportServiceTicketStatusesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetsupportServiceTicketStatusesQuery, GetsupportServiceTicketStatusesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetsupportServiceTicketStatusesQuery, GetsupportServiceTicketStatusesQueryVariables>(GetsupportServiceTicketStatusesDocument, baseOptions);
        }
export type GetsupportServiceTicketStatusesQueryHookResult = ReturnType<typeof useGetsupportServiceTicketStatusesQuery>;
export type GetsupportServiceTicketStatusesLazyQueryHookResult = ReturnType<typeof useGetsupportServiceTicketStatusesLazyQuery>;
export type GetsupportServiceTicketStatusesQueryResult = ApolloReactCommon.QueryResult<GetsupportServiceTicketStatusesQuery, GetsupportServiceTicketStatusesQueryVariables>;
export const PayTransactionDocument = gql`
    mutation PayTransaction($input: payTransactionInput!) {
  payTransaction(payTransactionInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    disablePayment
    ipnUrl
    linkPaymentUrl
    returnUrl
    transactionId
    paymentCode
  }
}
    `;
export type PayTransactionMutationFn = ApolloReactCommon.MutationFunction<PayTransactionMutation, PayTransactionMutationVariables>;

/**
 * __usePayTransactionMutation__
 *
 * To run a mutation, you first call `usePayTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `usePayTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [payTransactionMutation, { data, loading, error }] = usePayTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function usePayTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<PayTransactionMutation, PayTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<PayTransactionMutation, PayTransactionMutationVariables>(PayTransactionDocument, baseOptions);
      }
export type PayTransactionMutationHookResult = ReturnType<typeof usePayTransactionMutation>;
export type PayTransactionMutationResult = ApolloReactCommon.MutationResult<PayTransactionMutation>;
export type PayTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<PayTransactionMutation, PayTransactionMutationVariables>;
export const RequesterAcceptServiceTicketResultDocument = gql`
    mutation RequesterAcceptServiceTicketResult($input: RequesterAcceptServiceTicketResultInput!) {
  requesterAcceptServiceTicketResult(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type RequesterAcceptServiceTicketResultMutationFn = ApolloReactCommon.MutationFunction<RequesterAcceptServiceTicketResultMutation, RequesterAcceptServiceTicketResultMutationVariables>;

/**
 * __useRequesterAcceptServiceTicketResultMutation__
 *
 * To run a mutation, you first call `useRequesterAcceptServiceTicketResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRequesterAcceptServiceTicketResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [requesterAcceptServiceTicketResultMutation, { data, loading, error }] = useRequesterAcceptServiceTicketResultMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRequesterAcceptServiceTicketResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RequesterAcceptServiceTicketResultMutation, RequesterAcceptServiceTicketResultMutationVariables>) {
        return ApolloReactHooks.useMutation<RequesterAcceptServiceTicketResultMutation, RequesterAcceptServiceTicketResultMutationVariables>(RequesterAcceptServiceTicketResultDocument, baseOptions);
      }
export type RequesterAcceptServiceTicketResultMutationHookResult = ReturnType<typeof useRequesterAcceptServiceTicketResultMutation>;
export type RequesterAcceptServiceTicketResultMutationResult = ApolloReactCommon.MutationResult<RequesterAcceptServiceTicketResultMutation>;
export type RequesterAcceptServiceTicketResultMutationOptions = ApolloReactCommon.BaseMutationOptions<RequesterAcceptServiceTicketResultMutation, RequesterAcceptServiceTicketResultMutationVariables>;
export const RequesterRejectServiceTicketResultDocument = gql`
    mutation RequesterRejectServiceTicketResult($input: RequesterRejectServiceTicketResultInput!) {
  requesterRejectServiceTicketResult(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type RequesterRejectServiceTicketResultMutationFn = ApolloReactCommon.MutationFunction<RequesterRejectServiceTicketResultMutation, RequesterRejectServiceTicketResultMutationVariables>;

/**
 * __useRequesterRejectServiceTicketResultMutation__
 *
 * To run a mutation, you first call `useRequesterRejectServiceTicketResultMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRequesterRejectServiceTicketResultMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [requesterRejectServiceTicketResultMutation, { data, loading, error }] = useRequesterRejectServiceTicketResultMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useRequesterRejectServiceTicketResultMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<RequesterRejectServiceTicketResultMutation, RequesterRejectServiceTicketResultMutationVariables>) {
        return ApolloReactHooks.useMutation<RequesterRejectServiceTicketResultMutation, RequesterRejectServiceTicketResultMutationVariables>(RequesterRejectServiceTicketResultDocument, baseOptions);
      }
export type RequesterRejectServiceTicketResultMutationHookResult = ReturnType<typeof useRequesterRejectServiceTicketResultMutation>;
export type RequesterRejectServiceTicketResultMutationResult = ApolloReactCommon.MutationResult<RequesterRejectServiceTicketResultMutation>;
export type RequesterRejectServiceTicketResultMutationOptions = ApolloReactCommon.BaseMutationOptions<RequesterRejectServiceTicketResultMutation, RequesterRejectServiceTicketResultMutationVariables>;
export const GetsupportServiceTicketResultUpdateReasonsDocument = gql`
    query GetsupportServiceTicketResultUpdateReasons($orderBy: SupportServiceTicketResultUpdateReasonDtoSort, $page: Int) {
  supportServiceTicketResultUpdateReasons(
    order_by: $orderBy
    page: $page
    pageSize: 999
  ) {
    edges {
      supportServiceTicketResultUpdateReasonId
      supportServiceTicketResultUpdateReasonName
      supportServiceTicketResultUpdateReasonDescription
    }
  }
}
    `;

/**
 * __useGetsupportServiceTicketResultUpdateReasonsQuery__
 *
 * To run a query within a React component, call `useGetsupportServiceTicketResultUpdateReasonsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetsupportServiceTicketResultUpdateReasonsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetsupportServiceTicketResultUpdateReasonsQuery({
 *   variables: {
 *      orderBy: // value for 'orderBy'
 *      page: // value for 'page'
 *   },
 * });
 */
export function useGetsupportServiceTicketResultUpdateReasonsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetsupportServiceTicketResultUpdateReasonsQuery, GetsupportServiceTicketResultUpdateReasonsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetsupportServiceTicketResultUpdateReasonsQuery, GetsupportServiceTicketResultUpdateReasonsQueryVariables>(GetsupportServiceTicketResultUpdateReasonsDocument, baseOptions);
      }
export function useGetsupportServiceTicketResultUpdateReasonsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetsupportServiceTicketResultUpdateReasonsQuery, GetsupportServiceTicketResultUpdateReasonsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetsupportServiceTicketResultUpdateReasonsQuery, GetsupportServiceTicketResultUpdateReasonsQueryVariables>(GetsupportServiceTicketResultUpdateReasonsDocument, baseOptions);
        }
export type GetsupportServiceTicketResultUpdateReasonsQueryHookResult = ReturnType<typeof useGetsupportServiceTicketResultUpdateReasonsQuery>;
export type GetsupportServiceTicketResultUpdateReasonsLazyQueryHookResult = ReturnType<typeof useGetsupportServiceTicketResultUpdateReasonsLazyQuery>;
export type GetsupportServiceTicketResultUpdateReasonsQueryResult = ApolloReactCommon.QueryResult<GetsupportServiceTicketResultUpdateReasonsQuery, GetsupportServiceTicketResultUpdateReasonsQueryVariables>;
export const GetRequestServiceTypesDocument = gql`
    query GetRequestServiceTypes($where: RequestTypeDtoFilter, $orderBy: RequestTypeDtoSort) {
  requestTypes(page: 1, pageSize: 20, where: $where, order_by: $orderBy) {
    edges {
      requestTypeId
      requestTypeName
      requestTypeDescription
      isDisplayHomepage
      sortOrder
    }
    totalCount
  }
}
    `;

/**
 * __useGetRequestServiceTypesQuery__
 *
 * To run a query within a React component, call `useGetRequestServiceTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequestServiceTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequestServiceTypesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetRequestServiceTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRequestServiceTypesQuery, GetRequestServiceTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetRequestServiceTypesQuery, GetRequestServiceTypesQueryVariables>(GetRequestServiceTypesDocument, baseOptions);
      }
export function useGetRequestServiceTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRequestServiceTypesQuery, GetRequestServiceTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetRequestServiceTypesQuery, GetRequestServiceTypesQueryVariables>(GetRequestServiceTypesDocument, baseOptions);
        }
export type GetRequestServiceTypesQueryHookResult = ReturnType<typeof useGetRequestServiceTypesQuery>;
export type GetRequestServiceTypesLazyQueryHookResult = ReturnType<typeof useGetRequestServiceTypesLazyQuery>;
export type GetRequestServiceTypesQueryResult = ApolloReactCommon.QueryResult<GetRequestServiceTypesQuery, GetRequestServiceTypesQueryVariables>;
export const CheckContactTradingByIdDocument = gql`
    query CheckContactTradingById($input: CheckContactTradingByIdInput!) {
  checkContactTradingById(checkContactTradingByIdInput: $input) {
    errorMessage
    errorCode
    errorMessageCode
    buy
    rent
  }
}
    `;

/**
 * __useCheckContactTradingByIdQuery__
 *
 * To run a query within a React component, call `useCheckContactTradingByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckContactTradingByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckContactTradingByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckContactTradingByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckContactTradingByIdQuery, CheckContactTradingByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckContactTradingByIdQuery, CheckContactTradingByIdQueryVariables>(CheckContactTradingByIdDocument, baseOptions);
      }
export function useCheckContactTradingByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckContactTradingByIdQuery, CheckContactTradingByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckContactTradingByIdQuery, CheckContactTradingByIdQueryVariables>(CheckContactTradingByIdDocument, baseOptions);
        }
export type CheckContactTradingByIdQueryHookResult = ReturnType<typeof useCheckContactTradingByIdQuery>;
export type CheckContactTradingByIdLazyQueryHookResult = ReturnType<typeof useCheckContactTradingByIdLazyQuery>;
export type CheckContactTradingByIdQueryResult = ApolloReactCommon.QueryResult<CheckContactTradingByIdQuery, CheckContactTradingByIdQueryVariables>;
export const CheckExistingReportByPostIdDocument = gql`
    query CheckExistingReportByPostId($input: Uuid!) {
  checkExistingReportByPostId(propertyPostId: $input)
}
    `;

/**
 * __useCheckExistingReportByPostIdQuery__
 *
 * To run a query within a React component, call `useCheckExistingReportByPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckExistingReportByPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckExistingReportByPostIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckExistingReportByPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckExistingReportByPostIdQuery, CheckExistingReportByPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckExistingReportByPostIdQuery, CheckExistingReportByPostIdQueryVariables>(CheckExistingReportByPostIdDocument, baseOptions);
      }
export function useCheckExistingReportByPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckExistingReportByPostIdQuery, CheckExistingReportByPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckExistingReportByPostIdQuery, CheckExistingReportByPostIdQueryVariables>(CheckExistingReportByPostIdDocument, baseOptions);
        }
export type CheckExistingReportByPostIdQueryHookResult = ReturnType<typeof useCheckExistingReportByPostIdQuery>;
export type CheckExistingReportByPostIdLazyQueryHookResult = ReturnType<typeof useCheckExistingReportByPostIdLazyQuery>;
export type CheckExistingReportByPostIdQueryResult = ApolloReactCommon.QueryResult<CheckExistingReportByPostIdQuery, CheckExistingReportByPostIdQueryVariables>;
export const CloseSupportRequestFoDocument = gql`
    mutation CloseSupportRequestFO($input: CloseSupportRequestFOInput!) {
  closeSupportRequestFO(closeSupportRequestFOInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CloseSupportRequestFoMutationFn = ApolloReactCommon.MutationFunction<CloseSupportRequestFoMutation, CloseSupportRequestFoMutationVariables>;

/**
 * __useCloseSupportRequestFoMutation__
 *
 * To run a mutation, you first call `useCloseSupportRequestFoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCloseSupportRequestFoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [closeSupportRequestFoMutation, { data, loading, error }] = useCloseSupportRequestFoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCloseSupportRequestFoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CloseSupportRequestFoMutation, CloseSupportRequestFoMutationVariables>) {
        return ApolloReactHooks.useMutation<CloseSupportRequestFoMutation, CloseSupportRequestFoMutationVariables>(CloseSupportRequestFoDocument, baseOptions);
      }
export type CloseSupportRequestFoMutationHookResult = ReturnType<typeof useCloseSupportRequestFoMutation>;
export type CloseSupportRequestFoMutationResult = ApolloReactCommon.MutationResult<CloseSupportRequestFoMutation>;
export type CloseSupportRequestFoMutationOptions = ApolloReactCommon.BaseMutationOptions<CloseSupportRequestFoMutation, CloseSupportRequestFoMutationVariables>;
export const CreateContactTradingRequestDocument = gql`
    mutation CreateContactTradingRequest($input: CreateContactTradingRequestInput!) {
  createContactTradingRequest(createContactTradingRequestInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateContactTradingRequestMutationFn = ApolloReactCommon.MutationFunction<CreateContactTradingRequestMutation, CreateContactTradingRequestMutationVariables>;

/**
 * __useCreateContactTradingRequestMutation__
 *
 * To run a mutation, you first call `useCreateContactTradingRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateContactTradingRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createContactTradingRequestMutation, { data, loading, error }] = useCreateContactTradingRequestMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateContactTradingRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateContactTradingRequestMutation, CreateContactTradingRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateContactTradingRequestMutation, CreateContactTradingRequestMutationVariables>(CreateContactTradingRequestDocument, baseOptions);
      }
export type CreateContactTradingRequestMutationHookResult = ReturnType<typeof useCreateContactTradingRequestMutation>;
export type CreateContactTradingRequestMutationResult = ApolloReactCommon.MutationResult<CreateContactTradingRequestMutation>;
export type CreateContactTradingRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateContactTradingRequestMutation, CreateContactTradingRequestMutationVariables>;
export const CreateSupportRequestDocument = gql`
    mutation CreateSupportRequest($input: CreateSupportRequestInput!) {
  createSupportRequest(createSupportRequestInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateSupportRequestMutationFn = ApolloReactCommon.MutationFunction<CreateSupportRequestMutation, CreateSupportRequestMutationVariables>;

/**
 * __useCreateSupportRequestMutation__
 *
 * To run a mutation, you first call `useCreateSupportRequestMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSupportRequestMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSupportRequestMutation, { data, loading, error }] = useCreateSupportRequestMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSupportRequestMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateSupportRequestMutation, CreateSupportRequestMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateSupportRequestMutation, CreateSupportRequestMutationVariables>(CreateSupportRequestDocument, baseOptions);
      }
export type CreateSupportRequestMutationHookResult = ReturnType<typeof useCreateSupportRequestMutation>;
export type CreateSupportRequestMutationResult = ApolloReactCommon.MutationResult<CreateSupportRequestMutation>;
export type CreateSupportRequestMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateSupportRequestMutation, CreateSupportRequestMutationVariables>;
export const CreateUserReportSpamDocument = gql`
    mutation CreateUserReportSpam($input: CreateUserReportSpamInput!) {
  createUserReportSpam(createUserReportSpamInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateUserReportSpamMutationFn = ApolloReactCommon.MutationFunction<CreateUserReportSpamMutation, CreateUserReportSpamMutationVariables>;

/**
 * __useCreateUserReportSpamMutation__
 *
 * To run a mutation, you first call `useCreateUserReportSpamMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserReportSpamMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserReportSpamMutation, { data, loading, error }] = useCreateUserReportSpamMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserReportSpamMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateUserReportSpamMutation, CreateUserReportSpamMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateUserReportSpamMutation, CreateUserReportSpamMutationVariables>(CreateUserReportSpamDocument, baseOptions);
      }
export type CreateUserReportSpamMutationHookResult = ReturnType<typeof useCreateUserReportSpamMutation>;
export type CreateUserReportSpamMutationResult = ApolloReactCommon.MutationResult<CreateUserReportSpamMutation>;
export type CreateUserReportSpamMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateUserReportSpamMutation, CreateUserReportSpamMutationVariables>;
export const GetRequestTypesDocument = gql`
    query GetRequestTypes($where: RequestTypeDtoFilter, $orderBy: RequestTypeDtoSort) {
  requestTypes(where: $where, order_by: $orderBy) {
    edges {
      requestTypeId
      requestTypeName
      requestTypeDescription
    }
  }
}
    `;

/**
 * __useGetRequestTypesQuery__
 *
 * To run a query within a React component, call `useGetRequestTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRequestTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRequestTypesQuery({
 *   variables: {
 *      where: // value for 'where'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useGetRequestTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetRequestTypesQuery, GetRequestTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetRequestTypesQuery, GetRequestTypesQueryVariables>(GetRequestTypesDocument, baseOptions);
      }
export function useGetRequestTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetRequestTypesQuery, GetRequestTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetRequestTypesQuery, GetRequestTypesQueryVariables>(GetRequestTypesDocument, baseOptions);
        }
export type GetRequestTypesQueryHookResult = ReturnType<typeof useGetRequestTypesQuery>;
export type GetRequestTypesLazyQueryHookResult = ReturnType<typeof useGetRequestTypesLazyQuery>;
export type GetRequestTypesQueryResult = ApolloReactCommon.QueryResult<GetRequestTypesQuery, GetRequestTypesQueryVariables>;
export const GetSpamTypesDocument = gql`
    query GetSpamTypes {
  spamTypes {
    edges {
      spamTypeId
      spamTypeName
      spamTypeDescription
      sortOrder
      isActive
    }
  }
}
    `;

/**
 * __useGetSpamTypesQuery__
 *
 * To run a query within a React component, call `useGetSpamTypesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSpamTypesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSpamTypesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSpamTypesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSpamTypesQuery, GetSpamTypesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSpamTypesQuery, GetSpamTypesQueryVariables>(GetSpamTypesDocument, baseOptions);
      }
export function useGetSpamTypesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSpamTypesQuery, GetSpamTypesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSpamTypesQuery, GetSpamTypesQueryVariables>(GetSpamTypesDocument, baseOptions);
        }
export type GetSpamTypesQueryHookResult = ReturnType<typeof useGetSpamTypesQuery>;
export type GetSpamTypesLazyQueryHookResult = ReturnType<typeof useGetSpamTypesLazyQuery>;
export type GetSpamTypesQueryResult = ApolloReactCommon.QueryResult<GetSpamTypesQuery, GetSpamTypesQueryVariables>;
export const GetSupportRequestExactByIdDocument = gql`
    query GetSupportRequestExactById($input: Uuid!) {
  supportRequestExactById(supportRequestId: $input) {
    supportRequestId
    supportRequestTitle
    supportRequestCode
    supportRequestStatusName
    supportRequestStatusDescription
    sourceTypeName
    requestTypeId
    requestTypeName
    requestTypeDescription
    requestDescription
    requestData
    createdDatetime
    assignedDatetime
    processingDatetime
    closeDatetime
    completeDatetime
    cancelledDatetime
    assigneeFirstName
    assigneeLastName
    assigneePhoneNumber
    assigneeEmail
    assigneeProfilePhoto
    assigneeProfilePhotos
    assigneeStaffGroupDescription
    assigneeStaffRating
    paymentMethod
    paymentDatetime
    productId
    productType
    productName
    propertyPostId
    propertyPostCreatedUserEmail
    propertyPostCreatedUserFullName
    propertyPostCreatedUserPhoneNumber
  }
}
    `;

/**
 * __useGetSupportRequestExactByIdQuery__
 *
 * To run a query within a React component, call `useGetSupportRequestExactByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportRequestExactByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportRequestExactByIdQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSupportRequestExactByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportRequestExactByIdQuery, GetSupportRequestExactByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportRequestExactByIdQuery, GetSupportRequestExactByIdQueryVariables>(GetSupportRequestExactByIdDocument, baseOptions);
      }
export function useGetSupportRequestExactByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportRequestExactByIdQuery, GetSupportRequestExactByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportRequestExactByIdQuery, GetSupportRequestExactByIdQueryVariables>(GetSupportRequestExactByIdDocument, baseOptions);
        }
export type GetSupportRequestExactByIdQueryHookResult = ReturnType<typeof useGetSupportRequestExactByIdQuery>;
export type GetSupportRequestExactByIdLazyQueryHookResult = ReturnType<typeof useGetSupportRequestExactByIdLazyQuery>;
export type GetSupportRequestExactByIdQueryResult = ApolloReactCommon.QueryResult<GetSupportRequestExactByIdQuery, GetSupportRequestExactByIdQueryVariables>;
export const GetSupportRequestServiceBonusesDocument = gql`
    query GetSupportRequestServiceBonuses {
  supportRequestServiceBonuses {
    edges {
      supportRequestServiceBonusId
      supportRequestServiceBonusName
      supportRequestServiceBonusDescription
      price
      unitOfMeasureId
      unitOfMeasureCode
      unitOfMeasureName
    }
  }
}
    `;

/**
 * __useGetSupportRequestServiceBonusesQuery__
 *
 * To run a query within a React component, call `useGetSupportRequestServiceBonusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportRequestServiceBonusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportRequestServiceBonusesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSupportRequestServiceBonusesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportRequestServiceBonusesQuery, GetSupportRequestServiceBonusesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportRequestServiceBonusesQuery, GetSupportRequestServiceBonusesQueryVariables>(GetSupportRequestServiceBonusesDocument, baseOptions);
      }
export function useGetSupportRequestServiceBonusesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportRequestServiceBonusesQuery, GetSupportRequestServiceBonusesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportRequestServiceBonusesQuery, GetSupportRequestServiceBonusesQueryVariables>(GetSupportRequestServiceBonusesDocument, baseOptions);
        }
export type GetSupportRequestServiceBonusesQueryHookResult = ReturnType<typeof useGetSupportRequestServiceBonusesQuery>;
export type GetSupportRequestServiceBonusesLazyQueryHookResult = ReturnType<typeof useGetSupportRequestServiceBonusesLazyQuery>;
export type GetSupportRequestServiceBonusesQueryResult = ApolloReactCommon.QueryResult<GetSupportRequestServiceBonusesQuery, GetSupportRequestServiceBonusesQueryVariables>;
export const GetSupportRequestStatusesDocument = gql`
    query GetSupportRequestStatuses {
  supportRequestStatuses(pageSize: 999) {
    edges {
      supportRequestStatusId
      supportRequestStatusName
      supportRequestStatusDescription
      isActive
    }
  }
}
    `;

/**
 * __useGetSupportRequestStatusesQuery__
 *
 * To run a query within a React component, call `useGetSupportRequestStatusesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportRequestStatusesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportRequestStatusesQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetSupportRequestStatusesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportRequestStatusesQuery, GetSupportRequestStatusesQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportRequestStatusesQuery, GetSupportRequestStatusesQueryVariables>(GetSupportRequestStatusesDocument, baseOptions);
      }
export function useGetSupportRequestStatusesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportRequestStatusesQuery, GetSupportRequestStatusesQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportRequestStatusesQuery, GetSupportRequestStatusesQueryVariables>(GetSupportRequestStatusesDocument, baseOptions);
        }
export type GetSupportRequestStatusesQueryHookResult = ReturnType<typeof useGetSupportRequestStatusesQuery>;
export type GetSupportRequestStatusesLazyQueryHookResult = ReturnType<typeof useGetSupportRequestStatusesLazyQuery>;
export type GetSupportRequestStatusesQueryResult = ApolloReactCommon.QueryResult<GetSupportRequestStatusesQuery, GetSupportRequestStatusesQueryVariables>;
export const GetSupportRequestsDocument = gql`
    query GetSupportRequests($first: PaginationAmount, $after: String!, $orderBy: SupportRequestInfoDtoSort, $where: SupportRequestInfoDtoFilter) {
  supportRequestsExactByCurrentUserMobile(
    first: $first
    after: $after
    order_by: $orderBy
    where: $where
  ) {
    edges {
      node {
        supportRequestId
        supportRequestTitle
        supportRequestCode
        supportRequestStatusName
        supportRequestStatusDescription
        requestTypeId
        requestTypeName
        requestTypeDescription
        productId
        productName
        productDetailPath
        productType
        createdDatetime
      }
      cursor
    }
  }
}
    `;

/**
 * __useGetSupportRequestsQuery__
 *
 * To run a query within a React component, call `useGetSupportRequestsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSupportRequestsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSupportRequestsQuery({
 *   variables: {
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetSupportRequestsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSupportRequestsQuery, GetSupportRequestsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSupportRequestsQuery, GetSupportRequestsQueryVariables>(GetSupportRequestsDocument, baseOptions);
      }
export function useGetSupportRequestsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSupportRequestsQuery, GetSupportRequestsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSupportRequestsQuery, GetSupportRequestsQueryVariables>(GetSupportRequestsDocument, baseOptions);
        }
export type GetSupportRequestsQueryHookResult = ReturnType<typeof useGetSupportRequestsQuery>;
export type GetSupportRequestsLazyQueryHookResult = ReturnType<typeof useGetSupportRequestsLazyQuery>;
export type GetSupportRequestsQueryResult = ApolloReactCommon.QueryResult<GetSupportRequestsQuery, GetSupportRequestsQueryVariables>;
export const GenerateTopenMapTplAccessTokenDocument = gql`
    mutation GenerateTopenMapTPLAccessToken($payload: GenerateTopenMapTPLAccessTokenInput!) {
  generateTopenMapTPLAccessToken(request: $payload) {
    authToken
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type GenerateTopenMapTplAccessTokenMutationFn = ApolloReactCommon.MutationFunction<GenerateTopenMapTplAccessTokenMutation, GenerateTopenMapTplAccessTokenMutationVariables>;

/**
 * __useGenerateTopenMapTplAccessTokenMutation__
 *
 * To run a mutation, you first call `useGenerateTopenMapTplAccessTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateTopenMapTplAccessTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateTopenMapTplAccessTokenMutation, { data, loading, error }] = useGenerateTopenMapTplAccessTokenMutation({
 *   variables: {
 *      payload: // value for 'payload'
 *   },
 * });
 */
export function useGenerateTopenMapTplAccessTokenMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<GenerateTopenMapTplAccessTokenMutation, GenerateTopenMapTplAccessTokenMutationVariables>) {
        return ApolloReactHooks.useMutation<GenerateTopenMapTplAccessTokenMutation, GenerateTopenMapTplAccessTokenMutationVariables>(GenerateTopenMapTplAccessTokenDocument, baseOptions);
      }
export type GenerateTopenMapTplAccessTokenMutationHookResult = ReturnType<typeof useGenerateTopenMapTplAccessTokenMutation>;
export type GenerateTopenMapTplAccessTokenMutationResult = ApolloReactCommon.MutationResult<GenerateTopenMapTplAccessTokenMutation>;
export type GenerateTopenMapTplAccessTokenMutationOptions = ApolloReactCommon.BaseMutationOptions<GenerateTopenMapTplAccessTokenMutation, GenerateTopenMapTplAccessTokenMutationVariables>;
export const BookingTransactionsByPropertyPostIdDocument = gql`
    query BookingTransactionsByPropertyPostId($propertyPostId: Uuid!) {
  bookingTransactionsByPropertyPostId(propertyPostId: $propertyPostId) {
    edges {
      transactionStatus
      transactionStatusName
      bookingCode
      transactionType
      bookingTransactionId
      customerInfo {
        customerEmail
        customerContactAddress
        customerFirstName
        customerId
        customerLastName
        customerNationalId
        customerNationalIdIssueDate
        customerNationalIdIssuePlace
        customerPhone
      }
      saleAgentInfo {
        agentCode
        agentId
        firstName
        lastName
        profilePhoto
        rating
      }
      ableConfirmRefund
    }
  }
}
    `;

/**
 * __useBookingTransactionsByPropertyPostIdQuery__
 *
 * To run a query within a React component, call `useBookingTransactionsByPropertyPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useBookingTransactionsByPropertyPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBookingTransactionsByPropertyPostIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useBookingTransactionsByPropertyPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<BookingTransactionsByPropertyPostIdQuery, BookingTransactionsByPropertyPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<BookingTransactionsByPropertyPostIdQuery, BookingTransactionsByPropertyPostIdQueryVariables>(BookingTransactionsByPropertyPostIdDocument, baseOptions);
      }
export function useBookingTransactionsByPropertyPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<BookingTransactionsByPropertyPostIdQuery, BookingTransactionsByPropertyPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<BookingTransactionsByPropertyPostIdQuery, BookingTransactionsByPropertyPostIdQueryVariables>(BookingTransactionsByPropertyPostIdDocument, baseOptions);
        }
export type BookingTransactionsByPropertyPostIdQueryHookResult = ReturnType<typeof useBookingTransactionsByPropertyPostIdQuery>;
export type BookingTransactionsByPropertyPostIdLazyQueryHookResult = ReturnType<typeof useBookingTransactionsByPropertyPostIdLazyQuery>;
export type BookingTransactionsByPropertyPostIdQueryResult = ApolloReactCommon.QueryResult<BookingTransactionsByPropertyPostIdQuery, BookingTransactionsByPropertyPostIdQueryVariables>;
export const CheckBookingTransactionIsRatedDocument = gql`
    query CheckBookingTransactionIsRated($input: String!) {
  checkBookingTransactionIsRated(input: $input)
}
    `;

/**
 * __useCheckBookingTransactionIsRatedQuery__
 *
 * To run a query within a React component, call `useCheckBookingTransactionIsRatedQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckBookingTransactionIsRatedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckBookingTransactionIsRatedQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCheckBookingTransactionIsRatedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CheckBookingTransactionIsRatedQuery, CheckBookingTransactionIsRatedQueryVariables>) {
        return ApolloReactHooks.useQuery<CheckBookingTransactionIsRatedQuery, CheckBookingTransactionIsRatedQueryVariables>(CheckBookingTransactionIsRatedDocument, baseOptions);
      }
export function useCheckBookingTransactionIsRatedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CheckBookingTransactionIsRatedQuery, CheckBookingTransactionIsRatedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<CheckBookingTransactionIsRatedQuery, CheckBookingTransactionIsRatedQueryVariables>(CheckBookingTransactionIsRatedDocument, baseOptions);
        }
export type CheckBookingTransactionIsRatedQueryHookResult = ReturnType<typeof useCheckBookingTransactionIsRatedQuery>;
export type CheckBookingTransactionIsRatedLazyQueryHookResult = ReturnType<typeof useCheckBookingTransactionIsRatedLazyQuery>;
export type CheckBookingTransactionIsRatedQueryResult = ApolloReactCommon.QueryResult<CheckBookingTransactionIsRatedQuery, CheckBookingTransactionIsRatedQueryVariables>;
export const DepositeTransactionsByPropertyPostIdDocument = gql`
    query DepositeTransactionsByPropertyPostId($propertyPostId: Uuid!) {
  depositeTransactionsByPropertyPostId(propertyPostId: $propertyPostId) {
    edges {
      transactionStatus
      transactionStatusName
      bookingCode
      transactionType
      bookingTransactionId
      customerInfo {
        customerEmail
        customerContactAddress
        customerFirstName
        customerId
        customerLastName
        customerNationalId
        customerNationalIdIssueDate
        customerNationalIdIssuePlace
        customerPhone
      }
      saleAgentInfo {
        agentCode
        agentId
        firstName
        lastName
        profilePhoto
        rating
      }
      ableConfirmRefund
    }
  }
}
    `;

/**
 * __useDepositeTransactionsByPropertyPostIdQuery__
 *
 * To run a query within a React component, call `useDepositeTransactionsByPropertyPostIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useDepositeTransactionsByPropertyPostIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useDepositeTransactionsByPropertyPostIdQuery({
 *   variables: {
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useDepositeTransactionsByPropertyPostIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<DepositeTransactionsByPropertyPostIdQuery, DepositeTransactionsByPropertyPostIdQueryVariables>) {
        return ApolloReactHooks.useQuery<DepositeTransactionsByPropertyPostIdQuery, DepositeTransactionsByPropertyPostIdQueryVariables>(DepositeTransactionsByPropertyPostIdDocument, baseOptions);
      }
export function useDepositeTransactionsByPropertyPostIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<DepositeTransactionsByPropertyPostIdQuery, DepositeTransactionsByPropertyPostIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<DepositeTransactionsByPropertyPostIdQuery, DepositeTransactionsByPropertyPostIdQueryVariables>(DepositeTransactionsByPropertyPostIdDocument, baseOptions);
        }
export type DepositeTransactionsByPropertyPostIdQueryHookResult = ReturnType<typeof useDepositeTransactionsByPropertyPostIdQuery>;
export type DepositeTransactionsByPropertyPostIdLazyQueryHookResult = ReturnType<typeof useDepositeTransactionsByPropertyPostIdLazyQuery>;
export type DepositeTransactionsByPropertyPostIdQueryResult = ApolloReactCommon.QueryResult<DepositeTransactionsByPropertyPostIdQuery, DepositeTransactionsByPropertyPostIdQueryVariables>;
export const GetBookingHistoriesByBuyerIdCursorDocument = gql`
    query GetBookingHistoriesByBuyerIdCursor($input: GetTransactionsByBuyerIdAdvancedInput!, $first: PaginationAmount, $after: String!, $orderBy: TransactionsByBuyerIdDtoSort, $where: TransactionsByBuyerIdDtoFilter) {
  bookingHistoriesByBuyerIdCursor(
    request: $input
    first: $first
    after: $after
    order_by: $orderBy
    where: $where
  ) {
    edges {
      node {
        buyerId
        propertyPostInfo
        transactionAmount
        bookingCode
        propertyCode
        projectName
        paymentDatetime
        transactionDatetime
        depositeCode
        propertyPostId
        transactionStatusDescription
        endDepositeTimeInSecond
        transactionStatusName
        bookingTransactionId
        depositeTransactionId
        transactionType
        saleAgentInfo {
          firstName
          lastName
        }
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetBookingHistoriesByBuyerIdCursorQuery__
 *
 * To run a query within a React component, call `useGetBookingHistoriesByBuyerIdCursorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookingHistoriesByBuyerIdCursorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookingHistoriesByBuyerIdCursorQuery({
 *   variables: {
 *      input: // value for 'input'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetBookingHistoriesByBuyerIdCursorQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBookingHistoriesByBuyerIdCursorQuery, GetBookingHistoriesByBuyerIdCursorQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBookingHistoriesByBuyerIdCursorQuery, GetBookingHistoriesByBuyerIdCursorQueryVariables>(GetBookingHistoriesByBuyerIdCursorDocument, baseOptions);
      }
export function useGetBookingHistoriesByBuyerIdCursorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBookingHistoriesByBuyerIdCursorQuery, GetBookingHistoriesByBuyerIdCursorQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBookingHistoriesByBuyerIdCursorQuery, GetBookingHistoriesByBuyerIdCursorQueryVariables>(GetBookingHistoriesByBuyerIdCursorDocument, baseOptions);
        }
export type GetBookingHistoriesByBuyerIdCursorQueryHookResult = ReturnType<typeof useGetBookingHistoriesByBuyerIdCursorQuery>;
export type GetBookingHistoriesByBuyerIdCursorLazyQueryHookResult = ReturnType<typeof useGetBookingHistoriesByBuyerIdCursorLazyQuery>;
export type GetBookingHistoriesByBuyerIdCursorQueryResult = ApolloReactCommon.QueryResult<GetBookingHistoriesByBuyerIdCursorQuery, GetBookingHistoriesByBuyerIdCursorQueryVariables>;
export const GetBookingTransactionDetailDocument = gql`
    query GetBookingTransactionDetail($transactionId: Uuid!, $propertyPostId: Uuid!) {
  bookingTransactionDetail(
    bookingTransactionId: $transactionId
    propertyPostId: $propertyPostId
  ) {
    bookingTransactionId
    bookingCode
    depositeCode
    depositeTransactionId
    documentName
    buyCommission
    documentUrl
    confirmedBookingDatetime
    confirmedDepositeDatetime
    transactionAmount
    transactionIndex
    transactionType
    endDepositeTimeInSecond
    transactionStatus
    transactionStatusName
    beginDepositeDatetime
    endDepositeDatetime
    isBuyer
    isCancelled
    paidAmount
    paymentUnit
    ableConfirmDeposite
    endDepositeDatetimeByPropertyPostId
    cancelReason
    contractDueDate
    changeToTransaction {
      bookingCode
      changeAnotherPropertyDatetime
      depositeCode
      changeToPropertyPostId
      depositeTransactionId
    }
    consultantInfo {
      staffId
      staffCode
      fullName
      profilePhoto
      email
      rating
      phoneNumber
    }
    customerInfo {
      customerId
    }
    propertyPostInfo {
      blockCode
      blockName
      numberOfFloor
      floor
      price
      priceVat
      priceNoVat
      propertyCode
      propertyName
      propertyPostId
      propertyTypeName
      propertyTypeId
      projectInfo {
        projectId
        projectCode
        projectName
      }
      saleSeasonInfo {
        saleSeasonId
        seasonName
        isSkipBooking
        startBookingDatetime
        endBookingDatetime
        openDatetime
        closeDatetime
      }
    }
    refundReady
  }
}
    `;

/**
 * __useGetBookingTransactionDetailQuery__
 *
 * To run a query within a React component, call `useGetBookingTransactionDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookingTransactionDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookingTransactionDetailQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetBookingTransactionDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBookingTransactionDetailQuery, GetBookingTransactionDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBookingTransactionDetailQuery, GetBookingTransactionDetailQueryVariables>(GetBookingTransactionDetailDocument, baseOptions);
      }
export function useGetBookingTransactionDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBookingTransactionDetailQuery, GetBookingTransactionDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBookingTransactionDetailQuery, GetBookingTransactionDetailQueryVariables>(GetBookingTransactionDetailDocument, baseOptions);
        }
export type GetBookingTransactionDetailQueryHookResult = ReturnType<typeof useGetBookingTransactionDetailQuery>;
export type GetBookingTransactionDetailLazyQueryHookResult = ReturnType<typeof useGetBookingTransactionDetailLazyQuery>;
export type GetBookingTransactionDetailQueryResult = ApolloReactCommon.QueryResult<GetBookingTransactionDetailQuery, GetBookingTransactionDetailQueryVariables>;
export const GetBookingTransactionDetailForRatingDocument = gql`
    query GetBookingTransactionDetailForRating($bookingTransactionId: Uuid!) {
  bookingTransactionDetailForRating(bookingTransactionId: $bookingTransactionId) {
    bookingCode
    depositeCode
    propertyCode
    projectName
    buyAgentInfo {
      agentId
      agentCode
      firstName
      lastName
      profilePhoto
    }
    saleAgentInfo {
      agentId
      agentCode
      firstName
      lastName
      profilePhoto
    }
  }
}
    `;

/**
 * __useGetBookingTransactionDetailForRatingQuery__
 *
 * To run a query within a React component, call `useGetBookingTransactionDetailForRatingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetBookingTransactionDetailForRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetBookingTransactionDetailForRatingQuery({
 *   variables: {
 *      bookingTransactionId: // value for 'bookingTransactionId'
 *   },
 * });
 */
export function useGetBookingTransactionDetailForRatingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetBookingTransactionDetailForRatingQuery, GetBookingTransactionDetailForRatingQueryVariables>) {
        return ApolloReactHooks.useQuery<GetBookingTransactionDetailForRatingQuery, GetBookingTransactionDetailForRatingQueryVariables>(GetBookingTransactionDetailForRatingDocument, baseOptions);
      }
export function useGetBookingTransactionDetailForRatingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetBookingTransactionDetailForRatingQuery, GetBookingTransactionDetailForRatingQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetBookingTransactionDetailForRatingQuery, GetBookingTransactionDetailForRatingQueryVariables>(GetBookingTransactionDetailForRatingDocument, baseOptions);
        }
export type GetBookingTransactionDetailForRatingQueryHookResult = ReturnType<typeof useGetBookingTransactionDetailForRatingQuery>;
export type GetBookingTransactionDetailForRatingLazyQueryHookResult = ReturnType<typeof useGetBookingTransactionDetailForRatingLazyQuery>;
export type GetBookingTransactionDetailForRatingQueryResult = ApolloReactCommon.QueryResult<GetBookingTransactionDetailForRatingQuery, GetBookingTransactionDetailForRatingQueryVariables>;
export const GetCustomerByIdDocument = gql`
    query GetCustomerById($customerId: Uuid) {
  customerById(customerId: $customerId) {
    customerId
    customerContactAddress
    customerEmail
    customerFirstName
    customerLastName
    customerNationalId
    customerNationalIdIssueDate
    customerNationalIdIssuePlace
    customerPhone
    permanentAddress
    customerPhone
    nationalIdType
    customerDob
    gender
  }
}
    `;

/**
 * __useGetCustomerByIdQuery__
 *
 * To run a query within a React component, call `useGetCustomerByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerByIdQuery({
 *   variables: {
 *      customerId: // value for 'customerId'
 *   },
 * });
 */
export function useGetCustomerByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCustomerByIdQuery, GetCustomerByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCustomerByIdQuery, GetCustomerByIdQueryVariables>(GetCustomerByIdDocument, baseOptions);
      }
export function useGetCustomerByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCustomerByIdQuery, GetCustomerByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCustomerByIdQuery, GetCustomerByIdQueryVariables>(GetCustomerByIdDocument, baseOptions);
        }
export type GetCustomerByIdQueryHookResult = ReturnType<typeof useGetCustomerByIdQuery>;
export type GetCustomerByIdLazyQueryHookResult = ReturnType<typeof useGetCustomerByIdLazyQuery>;
export type GetCustomerByIdQueryResult = ApolloReactCommon.QueryResult<GetCustomerByIdQuery, GetCustomerByIdQueryVariables>;
export const GetCustomerInfoChangeHistoriesForFoDocument = gql`
    query GetCustomerInfoChangeHistoriesForFO($page: Int, $pageSize: Int, $orderBy: CustomerInfoChangeHistoryDtoSort, $depositTransactionId: Uuid!) {
  getCustomerInfoChangeHistoriesForFO(
    page: $page
    pageSize: $pageSize
    order_by: $orderBy
    depositTransactionId: $depositTransactionId
  ) {
    edges {
      index
      customerInfoChangeHistoryId
      depositTransactionId
      customerId
      customerFullNameNew
      customerFullNameOld
      createdDatetime
      createdByUserId
    }
    totalCount
  }
}
    `;

/**
 * __useGetCustomerInfoChangeHistoriesForFoQuery__
 *
 * To run a query within a React component, call `useGetCustomerInfoChangeHistoriesForFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerInfoChangeHistoriesForFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerInfoChangeHistoriesForFoQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *      orderBy: // value for 'orderBy'
 *      depositTransactionId: // value for 'depositTransactionId'
 *   },
 * });
 */
export function useGetCustomerInfoChangeHistoriesForFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCustomerInfoChangeHistoriesForFoQuery, GetCustomerInfoChangeHistoriesForFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCustomerInfoChangeHistoriesForFoQuery, GetCustomerInfoChangeHistoriesForFoQueryVariables>(GetCustomerInfoChangeHistoriesForFoDocument, baseOptions);
      }
export function useGetCustomerInfoChangeHistoriesForFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCustomerInfoChangeHistoriesForFoQuery, GetCustomerInfoChangeHistoriesForFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCustomerInfoChangeHistoriesForFoQuery, GetCustomerInfoChangeHistoriesForFoQueryVariables>(GetCustomerInfoChangeHistoriesForFoDocument, baseOptions);
        }
export type GetCustomerInfoChangeHistoriesForFoQueryHookResult = ReturnType<typeof useGetCustomerInfoChangeHistoriesForFoQuery>;
export type GetCustomerInfoChangeHistoriesForFoLazyQueryHookResult = ReturnType<typeof useGetCustomerInfoChangeHistoriesForFoLazyQuery>;
export type GetCustomerInfoChangeHistoriesForFoQueryResult = ApolloReactCommon.QueryResult<GetCustomerInfoChangeHistoriesForFoQuery, GetCustomerInfoChangeHistoriesForFoQueryVariables>;
export const GetCustomerInfoChangeHistoryByIdForFoDocument = gql`
    query GetCustomerInfoChangeHistoryByIdForFO($id: Uuid!) {
  getCustomerInfoChangeHistoryByIdForFO(customerInfoChangeHistoryId: $id) {
    customerInfoChangeHistoryDto {
      index
      customerInfoChangeHistoryId
      depositTransactionId
      customerId
      newData
      oldData
      createdDatetime
      createdByUserId
    }
  }
}
    `;

/**
 * __useGetCustomerInfoChangeHistoryByIdForFoQuery__
 *
 * To run a query within a React component, call `useGetCustomerInfoChangeHistoryByIdForFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCustomerInfoChangeHistoryByIdForFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCustomerInfoChangeHistoryByIdForFoQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useGetCustomerInfoChangeHistoryByIdForFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCustomerInfoChangeHistoryByIdForFoQuery, GetCustomerInfoChangeHistoryByIdForFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCustomerInfoChangeHistoryByIdForFoQuery, GetCustomerInfoChangeHistoryByIdForFoQueryVariables>(GetCustomerInfoChangeHistoryByIdForFoDocument, baseOptions);
      }
export function useGetCustomerInfoChangeHistoryByIdForFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCustomerInfoChangeHistoryByIdForFoQuery, GetCustomerInfoChangeHistoryByIdForFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCustomerInfoChangeHistoryByIdForFoQuery, GetCustomerInfoChangeHistoryByIdForFoQueryVariables>(GetCustomerInfoChangeHistoryByIdForFoDocument, baseOptions);
        }
export type GetCustomerInfoChangeHistoryByIdForFoQueryHookResult = ReturnType<typeof useGetCustomerInfoChangeHistoryByIdForFoQuery>;
export type GetCustomerInfoChangeHistoryByIdForFoLazyQueryHookResult = ReturnType<typeof useGetCustomerInfoChangeHistoryByIdForFoLazyQuery>;
export type GetCustomerInfoChangeHistoryByIdForFoQueryResult = ApolloReactCommon.QueryResult<GetCustomerInfoChangeHistoryByIdForFoQuery, GetCustomerInfoChangeHistoryByIdForFoQueryVariables>;
export const GetDepositHistoriesByBuyerIdCursorDocument = gql`
    query GetDepositHistoriesByBuyerIdCursor($input: GetTransactionsByBuyerIdAdvancedInput!, $first: PaginationAmount, $after: String!, $orderBy: TransactionsByBuyerIdDtoSort, $where: TransactionsByBuyerIdDtoFilter) {
  depositHistoriesByBuyerIdCursor(
    request: $input
    first: $first
    after: $after
    order_by: $orderBy
    where: $where
  ) {
    edges {
      node {
        propertyPostId
        buyerId
        propertyPostInfo
        transactionAmount
        bookingCode
        propertyCode
        projectName
        paymentDatetime
        transactionDatetime
        depositeCode
        transactionStatusDescription
        transactionStatusName
        bookingTransactionId
        depositeTransactionId
        transactionType
        saleAgentInfo {
          firstName
          lastName
        }
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useGetDepositHistoriesByBuyerIdCursorQuery__
 *
 * To run a query within a React component, call `useGetDepositHistoriesByBuyerIdCursorQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositHistoriesByBuyerIdCursorQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositHistoriesByBuyerIdCursorQuery({
 *   variables: {
 *      input: // value for 'input'
 *      first: // value for 'first'
 *      after: // value for 'after'
 *      orderBy: // value for 'orderBy'
 *      where: // value for 'where'
 *   },
 * });
 */
export function useGetDepositHistoriesByBuyerIdCursorQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDepositHistoriesByBuyerIdCursorQuery, GetDepositHistoriesByBuyerIdCursorQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDepositHistoriesByBuyerIdCursorQuery, GetDepositHistoriesByBuyerIdCursorQueryVariables>(GetDepositHistoriesByBuyerIdCursorDocument, baseOptions);
      }
export function useGetDepositHistoriesByBuyerIdCursorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDepositHistoriesByBuyerIdCursorQuery, GetDepositHistoriesByBuyerIdCursorQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDepositHistoriesByBuyerIdCursorQuery, GetDepositHistoriesByBuyerIdCursorQueryVariables>(GetDepositHistoriesByBuyerIdCursorDocument, baseOptions);
        }
export type GetDepositHistoriesByBuyerIdCursorQueryHookResult = ReturnType<typeof useGetDepositHistoriesByBuyerIdCursorQuery>;
export type GetDepositHistoriesByBuyerIdCursorLazyQueryHookResult = ReturnType<typeof useGetDepositHistoriesByBuyerIdCursorLazyQuery>;
export type GetDepositHistoriesByBuyerIdCursorQueryResult = ApolloReactCommon.QueryResult<GetDepositHistoriesByBuyerIdCursorQuery, GetDepositHistoriesByBuyerIdCursorQueryVariables>;
export const GetDepositTransactionDetailDocument = gql`
    query GetDepositTransactionDetail($transactionId: Uuid!, $propertyPostId: Uuid!) {
  depositTransactionDetail(
    depositTransactionId: $transactionId
    propertyPostId: $propertyPostId
  ) {
    bookingTransactionId
    bookingCode
    depositeCode
    depositeTransactionId
    documentName
    documentUrl
    hasCustomerInfoChangeHistory
    allowUpdateCustomer
    confirmedBookingDatetime
    confirmedDepositeDatetime
    transactionAmount
    transactionIndex
    transactionType
    transactionStatus
    contractDueDate
    transactionStatusName
    isBuyer
    isCancelled
    buyCommission
    paidAmount
    paymentUnit
    cancelReason
    changeToTransaction {
      bookingCode
      bookingTransactionId
      changeAnotherPropertyDatetime
      depositeCode
      depositeTransactionId
      paymentUnit
      priorPropertyPostId
    }
    consultantInfo {
      staffId
      staffCode
      fullName
      profilePhoto
      email
      rating
      phoneNumber
    }
    customerInfo {
      customerId
    }
    propertyPostInfo {
      blockCode
      blockName
      numberOfFloor
      floor
      price
      priceVat
      priceNoVat
      propertyCode
      propertyName
      propertyPostId
      propertyTypeName
      propertyTypeId
      projectInfo {
        projectId
        projectCode
        projectName
      }
      saleSeasonInfo {
        saleSeasonId
        seasonName
        isSkipBooking
        startBookingDatetime
        endBookingDatetime
        openDatetime
        closeDatetime
      }
    }
    priorBookingTransactionId
    priorTransaction {
      priorBookingTransactionId
      priorPropertyPostId
    }
    refundReady
  }
}
    `;

/**
 * __useGetDepositTransactionDetailQuery__
 *
 * To run a query within a React component, call `useGetDepositTransactionDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositTransactionDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositTransactionDetailQuery({
 *   variables: {
 *      transactionId: // value for 'transactionId'
 *      propertyPostId: // value for 'propertyPostId'
 *   },
 * });
 */
export function useGetDepositTransactionDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDepositTransactionDetailQuery, GetDepositTransactionDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDepositTransactionDetailQuery, GetDepositTransactionDetailQueryVariables>(GetDepositTransactionDetailDocument, baseOptions);
      }
export function useGetDepositTransactionDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDepositTransactionDetailQuery, GetDepositTransactionDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDepositTransactionDetailQuery, GetDepositTransactionDetailQueryVariables>(GetDepositTransactionDetailDocument, baseOptions);
        }
export type GetDepositTransactionDetailQueryHookResult = ReturnType<typeof useGetDepositTransactionDetailQuery>;
export type GetDepositTransactionDetailLazyQueryHookResult = ReturnType<typeof useGetDepositTransactionDetailLazyQuery>;
export type GetDepositTransactionDetailQueryResult = ApolloReactCommon.QueryResult<GetDepositTransactionDetailQuery, GetDepositTransactionDetailQueryVariables>;
export const GetDepositTransactionDetailForRatingDocument = gql`
    query GetDepositTransactionDetailForRating($depositeTransactionId: Uuid!) {
  depositeTransactionDetailForRating(
    depositeTransactionId: $depositeTransactionId
  ) {
    bookingCode
    depositeCode
    propertyCode
    projectName
    buyAgentInfo {
      agentId
      agentCode
      firstName
      lastName
      profilePhoto
    }
    saleAgentInfo {
      agentId
      agentCode
      firstName
      lastName
      profilePhoto
    }
  }
}
    `;

/**
 * __useGetDepositTransactionDetailForRatingQuery__
 *
 * To run a query within a React component, call `useGetDepositTransactionDetailForRatingQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetDepositTransactionDetailForRatingQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetDepositTransactionDetailForRatingQuery({
 *   variables: {
 *      depositeTransactionId: // value for 'depositeTransactionId'
 *   },
 * });
 */
export function useGetDepositTransactionDetailForRatingQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetDepositTransactionDetailForRatingQuery, GetDepositTransactionDetailForRatingQueryVariables>) {
        return ApolloReactHooks.useQuery<GetDepositTransactionDetailForRatingQuery, GetDepositTransactionDetailForRatingQueryVariables>(GetDepositTransactionDetailForRatingDocument, baseOptions);
      }
export function useGetDepositTransactionDetailForRatingLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetDepositTransactionDetailForRatingQuery, GetDepositTransactionDetailForRatingQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetDepositTransactionDetailForRatingQuery, GetDepositTransactionDetailForRatingQueryVariables>(GetDepositTransactionDetailForRatingDocument, baseOptions);
        }
export type GetDepositTransactionDetailForRatingQueryHookResult = ReturnType<typeof useGetDepositTransactionDetailForRatingQuery>;
export type GetDepositTransactionDetailForRatingLazyQueryHookResult = ReturnType<typeof useGetDepositTransactionDetailForRatingLazyQuery>;
export type GetDepositTransactionDetailForRatingQueryResult = ApolloReactCommon.QueryResult<GetDepositTransactionDetailForRatingQuery, GetDepositTransactionDetailForRatingQueryVariables>;
export const GetSimpleTransactionDetailDocument = gql`
    query GetSimpleTransactionDetail($input: simpleTransactionDetailInput!) {
  simpleTransactionDetail(simpleTransactionDetailInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
    transactionDetailDto {
      transactionId
      transactionCode
      transactionAmount
      projectId
      transactionIndex
      transactionType
      propertyPostInfo {
        blockName
        floor
        propertyCode
        propertyTypeName
        propertyPostId
        projectInfo {
          projectName
        }
      }
    }
  }
}
    `;

/**
 * __useGetSimpleTransactionDetailQuery__
 *
 * To run a query within a React component, call `useGetSimpleTransactionDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSimpleTransactionDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSimpleTransactionDetailQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSimpleTransactionDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetSimpleTransactionDetailQuery, GetSimpleTransactionDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetSimpleTransactionDetailQuery, GetSimpleTransactionDetailQueryVariables>(GetSimpleTransactionDetailDocument, baseOptions);
      }
export function useGetSimpleTransactionDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetSimpleTransactionDetailQuery, GetSimpleTransactionDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetSimpleTransactionDetailQuery, GetSimpleTransactionDetailQueryVariables>(GetSimpleTransactionDetailDocument, baseOptions);
        }
export type GetSimpleTransactionDetailQueryHookResult = ReturnType<typeof useGetSimpleTransactionDetailQuery>;
export type GetSimpleTransactionDetailLazyQueryHookResult = ReturnType<typeof useGetSimpleTransactionDetailLazyQuery>;
export type GetSimpleTransactionDetailQueryResult = ApolloReactCommon.QueryResult<GetSimpleTransactionDetailQuery, GetSimpleTransactionDetailQueryVariables>;
export const SendOtpToUpdateCustomerForDepositTransactionDocument = gql`
    mutation SendOtpToUpdateCustomerForDepositTransaction($request: SendOtpToUpdateCustomerForDepositTransactionInput!) {
  sendOtpToUpdateCustomerForDepositTransaction(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    __typename
  }
}
    `;
export type SendOtpToUpdateCustomerForDepositTransactionMutationFn = ApolloReactCommon.MutationFunction<SendOtpToUpdateCustomerForDepositTransactionMutation, SendOtpToUpdateCustomerForDepositTransactionMutationVariables>;

/**
 * __useSendOtpToUpdateCustomerForDepositTransactionMutation__
 *
 * To run a mutation, you first call `useSendOtpToUpdateCustomerForDepositTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendOtpToUpdateCustomerForDepositTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendOtpToUpdateCustomerForDepositTransactionMutation, { data, loading, error }] = useSendOtpToUpdateCustomerForDepositTransactionMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useSendOtpToUpdateCustomerForDepositTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendOtpToUpdateCustomerForDepositTransactionMutation, SendOtpToUpdateCustomerForDepositTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<SendOtpToUpdateCustomerForDepositTransactionMutation, SendOtpToUpdateCustomerForDepositTransactionMutationVariables>(SendOtpToUpdateCustomerForDepositTransactionDocument, baseOptions);
      }
export type SendOtpToUpdateCustomerForDepositTransactionMutationHookResult = ReturnType<typeof useSendOtpToUpdateCustomerForDepositTransactionMutation>;
export type SendOtpToUpdateCustomerForDepositTransactionMutationResult = ApolloReactCommon.MutationResult<SendOtpToUpdateCustomerForDepositTransactionMutation>;
export type SendOtpToUpdateCustomerForDepositTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<SendOtpToUpdateCustomerForDepositTransactionMutation, SendOtpToUpdateCustomerForDepositTransactionMutationVariables>;
export const SendPhoneVerificationTokenForTransactionDocument = gql`
    mutation SendPhoneVerificationTokenForTransaction($input: SendPhoneVerificationTokenForTransactionInput!) {
  sendPhoneVerificationTokenForTransaction(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
    __typename
  }
}
    `;
export type SendPhoneVerificationTokenForTransactionMutationFn = ApolloReactCommon.MutationFunction<SendPhoneVerificationTokenForTransactionMutation, SendPhoneVerificationTokenForTransactionMutationVariables>;

/**
 * __useSendPhoneVerificationTokenForTransactionMutation__
 *
 * To run a mutation, you first call `useSendPhoneVerificationTokenForTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendPhoneVerificationTokenForTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendPhoneVerificationTokenForTransactionMutation, { data, loading, error }] = useSendPhoneVerificationTokenForTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendPhoneVerificationTokenForTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendPhoneVerificationTokenForTransactionMutation, SendPhoneVerificationTokenForTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<SendPhoneVerificationTokenForTransactionMutation, SendPhoneVerificationTokenForTransactionMutationVariables>(SendPhoneVerificationTokenForTransactionDocument, baseOptions);
      }
export type SendPhoneVerificationTokenForTransactionMutationHookResult = ReturnType<typeof useSendPhoneVerificationTokenForTransactionMutation>;
export type SendPhoneVerificationTokenForTransactionMutationResult = ApolloReactCommon.MutationResult<SendPhoneVerificationTokenForTransactionMutation>;
export type SendPhoneVerificationTokenForTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<SendPhoneVerificationTokenForTransactionMutation, SendPhoneVerificationTokenForTransactionMutationVariables>;
export const TransactionsByBuyerIdAdvancedDocument = gql`
    query TransactionsByBuyerIdAdvanced($input: GetTransactionsByBuyerIdAdvancedInput!, $pageSize: PaginationAmount, $cursor: String, $orderBy: TransactionsByBuyerIdDtoSort) {
  curTransactionsByBuyerIdAdvanced(
    request: $input
    first: $pageSize
    after: $cursor
    order_by: $orderBy
  ) {
    edges {
      node {
        buyerId
        propertyPostInfo
        transactionAmount
        bookingCode
        propertyCode
        projectName
        transactionDatetime
        depositeCode
        transactionStatusDescription
        transactionStatusName
        bookingTransactionId
        depositeTransactionId
        transactionType
        saleAgentInfo {
          firstName
          lastName
        }
      }
      cursor
    }
    totalCount
  }
}
    `;

/**
 * __useTransactionsByBuyerIdAdvancedQuery__
 *
 * To run a query within a React component, call `useTransactionsByBuyerIdAdvancedQuery` and pass it any options that fit your needs.
 * When your component renders, `useTransactionsByBuyerIdAdvancedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useTransactionsByBuyerIdAdvancedQuery({
 *   variables: {
 *      input: // value for 'input'
 *      pageSize: // value for 'pageSize'
 *      cursor: // value for 'cursor'
 *      orderBy: // value for 'orderBy'
 *   },
 * });
 */
export function useTransactionsByBuyerIdAdvancedQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<TransactionsByBuyerIdAdvancedQuery, TransactionsByBuyerIdAdvancedQueryVariables>) {
        return ApolloReactHooks.useQuery<TransactionsByBuyerIdAdvancedQuery, TransactionsByBuyerIdAdvancedQueryVariables>(TransactionsByBuyerIdAdvancedDocument, baseOptions);
      }
export function useTransactionsByBuyerIdAdvancedLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<TransactionsByBuyerIdAdvancedQuery, TransactionsByBuyerIdAdvancedQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<TransactionsByBuyerIdAdvancedQuery, TransactionsByBuyerIdAdvancedQueryVariables>(TransactionsByBuyerIdAdvancedDocument, baseOptions);
        }
export type TransactionsByBuyerIdAdvancedQueryHookResult = ReturnType<typeof useTransactionsByBuyerIdAdvancedQuery>;
export type TransactionsByBuyerIdAdvancedLazyQueryHookResult = ReturnType<typeof useTransactionsByBuyerIdAdvancedLazyQuery>;
export type TransactionsByBuyerIdAdvancedQueryResult = ApolloReactCommon.QueryResult<TransactionsByBuyerIdAdvancedQuery, TransactionsByBuyerIdAdvancedQueryVariables>;
export const UpdateAgentRatingDocument = gql`
    mutation UpdateAgentRating($input: UpdateAgentRatingInput!) {
  updateAgentRating(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateAgentRatingMutationFn = ApolloReactCommon.MutationFunction<UpdateAgentRatingMutation, UpdateAgentRatingMutationVariables>;

/**
 * __useUpdateAgentRatingMutation__
 *
 * To run a mutation, you first call `useUpdateAgentRatingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgentRatingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgentRatingMutation, { data, loading, error }] = useUpdateAgentRatingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateAgentRatingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateAgentRatingMutation, UpdateAgentRatingMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateAgentRatingMutation, UpdateAgentRatingMutationVariables>(UpdateAgentRatingDocument, baseOptions);
      }
export type UpdateAgentRatingMutationHookResult = ReturnType<typeof useUpdateAgentRatingMutation>;
export type UpdateAgentRatingMutationResult = ApolloReactCommon.MutationResult<UpdateAgentRatingMutation>;
export type UpdateAgentRatingMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateAgentRatingMutation, UpdateAgentRatingMutationVariables>;
export const UpdateCustomerInfoForDepositTransactionDocument = gql`
    mutation UpdateCustomerInfoForDepositTransaction($request: UpdateCustomerInfoForDepositTransactionInput!) {
  updateCustomerInfoForDepositTransaction(request: $request) {
    errorCode
    errorMessage
    errorMessageCode
    __typename
  }
}
    `;
export type UpdateCustomerInfoForDepositTransactionMutationFn = ApolloReactCommon.MutationFunction<UpdateCustomerInfoForDepositTransactionMutation, UpdateCustomerInfoForDepositTransactionMutationVariables>;

/**
 * __useUpdateCustomerInfoForDepositTransactionMutation__
 *
 * To run a mutation, you first call `useUpdateCustomerInfoForDepositTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateCustomerInfoForDepositTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateCustomerInfoForDepositTransactionMutation, { data, loading, error }] = useUpdateCustomerInfoForDepositTransactionMutation({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useUpdateCustomerInfoForDepositTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateCustomerInfoForDepositTransactionMutation, UpdateCustomerInfoForDepositTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateCustomerInfoForDepositTransactionMutation, UpdateCustomerInfoForDepositTransactionMutationVariables>(UpdateCustomerInfoForDepositTransactionDocument, baseOptions);
      }
export type UpdateCustomerInfoForDepositTransactionMutationHookResult = ReturnType<typeof useUpdateCustomerInfoForDepositTransactionMutation>;
export type UpdateCustomerInfoForDepositTransactionMutationResult = ApolloReactCommon.MutationResult<UpdateCustomerInfoForDepositTransactionMutation>;
export type UpdateCustomerInfoForDepositTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateCustomerInfoForDepositTransactionMutation, UpdateCustomerInfoForDepositTransactionMutationVariables>;
export const UpdateTopenerInfoForTransactionDocument = gql`
    mutation updateTopenerInfoForTransaction($input: UpdateTopenerInfoForTransactionInput!) {
  updateTopenerInfoForTransaction(input: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateTopenerInfoForTransactionMutationFn = ApolloReactCommon.MutationFunction<UpdateTopenerInfoForTransactionMutation, UpdateTopenerInfoForTransactionMutationVariables>;

/**
 * __useUpdateTopenerInfoForTransactionMutation__
 *
 * To run a mutation, you first call `useUpdateTopenerInfoForTransactionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTopenerInfoForTransactionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTopenerInfoForTransactionMutation, { data, loading, error }] = useUpdateTopenerInfoForTransactionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateTopenerInfoForTransactionMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTopenerInfoForTransactionMutation, UpdateTopenerInfoForTransactionMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTopenerInfoForTransactionMutation, UpdateTopenerInfoForTransactionMutationVariables>(UpdateTopenerInfoForTransactionDocument, baseOptions);
      }
export type UpdateTopenerInfoForTransactionMutationHookResult = ReturnType<typeof useUpdateTopenerInfoForTransactionMutation>;
export type UpdateTopenerInfoForTransactionMutationResult = ApolloReactCommon.MutationResult<UpdateTopenerInfoForTransactionMutation>;
export type UpdateTopenerInfoForTransactionMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTopenerInfoForTransactionMutation, UpdateTopenerInfoForTransactionMutationVariables>;
export const CreateProfilePhotoDocument = gql`
    mutation CreateProfilePhoto($input: createProfilePhotoInput!) {
  createProfilePhoto(request: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateProfilePhotoMutationFn = ApolloReactCommon.MutationFunction<CreateProfilePhotoMutation, CreateProfilePhotoMutationVariables>;

/**
 * __useCreateProfilePhotoMutation__
 *
 * To run a mutation, you first call `useCreateProfilePhotoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateProfilePhotoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createProfilePhotoMutation, { data, loading, error }] = useCreateProfilePhotoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateProfilePhotoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateProfilePhotoMutation, CreateProfilePhotoMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateProfilePhotoMutation, CreateProfilePhotoMutationVariables>(CreateProfilePhotoDocument, baseOptions);
      }
export type CreateProfilePhotoMutationHookResult = ReturnType<typeof useCreateProfilePhotoMutation>;
export type CreateProfilePhotoMutationResult = ApolloReactCommon.MutationResult<CreateProfilePhotoMutation>;
export type CreateProfilePhotoMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateProfilePhotoMutation, CreateProfilePhotoMutationVariables>;
export const CreateTopenerBankAccountFoDocument = gql`
    mutation CreateTopenerBankAccountFO($input: CreateTopenerBankAccountFOInput!) {
  createTopenerBankAccountFO(createTopenerBankAccountFOInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type CreateTopenerBankAccountFoMutationFn = ApolloReactCommon.MutationFunction<CreateTopenerBankAccountFoMutation, CreateTopenerBankAccountFoMutationVariables>;

/**
 * __useCreateTopenerBankAccountFoMutation__
 *
 * To run a mutation, you first call `useCreateTopenerBankAccountFoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateTopenerBankAccountFoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createTopenerBankAccountFoMutation, { data, loading, error }] = useCreateTopenerBankAccountFoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateTopenerBankAccountFoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<CreateTopenerBankAccountFoMutation, CreateTopenerBankAccountFoMutationVariables>) {
        return ApolloReactHooks.useMutation<CreateTopenerBankAccountFoMutation, CreateTopenerBankAccountFoMutationVariables>(CreateTopenerBankAccountFoDocument, baseOptions);
      }
export type CreateTopenerBankAccountFoMutationHookResult = ReturnType<typeof useCreateTopenerBankAccountFoMutation>;
export type CreateTopenerBankAccountFoMutationResult = ApolloReactCommon.MutationResult<CreateTopenerBankAccountFoMutation>;
export type CreateTopenerBankAccountFoMutationOptions = ApolloReactCommon.BaseMutationOptions<CreateTopenerBankAccountFoMutation, CreateTopenerBankAccountFoMutationVariables>;
export const DeleteTopenerBankAccountFoDocument = gql`
    mutation DeleteTopenerBankAccountFO($input: DeleteTopenerBankAccountFOInput!) {
  deleteTopenerBankAccountFO(deleteTopenerBankAccountFOInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type DeleteTopenerBankAccountFoMutationFn = ApolloReactCommon.MutationFunction<DeleteTopenerBankAccountFoMutation, DeleteTopenerBankAccountFoMutationVariables>;

/**
 * __useDeleteTopenerBankAccountFoMutation__
 *
 * To run a mutation, you first call `useDeleteTopenerBankAccountFoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteTopenerBankAccountFoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteTopenerBankAccountFoMutation, { data, loading, error }] = useDeleteTopenerBankAccountFoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteTopenerBankAccountFoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteTopenerBankAccountFoMutation, DeleteTopenerBankAccountFoMutationVariables>) {
        return ApolloReactHooks.useMutation<DeleteTopenerBankAccountFoMutation, DeleteTopenerBankAccountFoMutationVariables>(DeleteTopenerBankAccountFoDocument, baseOptions);
      }
export type DeleteTopenerBankAccountFoMutationHookResult = ReturnType<typeof useDeleteTopenerBankAccountFoMutation>;
export type DeleteTopenerBankAccountFoMutationResult = ApolloReactCommon.MutationResult<DeleteTopenerBankAccountFoMutation>;
export type DeleteTopenerBankAccountFoMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteTopenerBankAccountFoMutation, DeleteTopenerBankAccountFoMutationVariables>;
export const GetC2CPropertyPostsViewedByCurrentUserFoDocument = gql`
    query GetC2CPropertyPostsViewedByCurrentUserFO($page: Int, $pageSize: Int) {
  getC2CPropertyPostsViewedByCurrentUserFO(page: $page, pageSize: $pageSize) {
    edges {
      propertyPostId
      images
      price
      postTitle
      propertyTypeId
      buildingArea
      direction
      propertyAddress {
        countryId
        cityId
        districtId
        districtName
        wardId
        homeAddress
        streetName
        cityName
        wardName
      }
    }
    totalCount
  }
}
    `;

/**
 * __useGetC2CPropertyPostsViewedByCurrentUserFoQuery__
 *
 * To run a query within a React component, call `useGetC2CPropertyPostsViewedByCurrentUserFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetC2CPropertyPostsViewedByCurrentUserFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetC2CPropertyPostsViewedByCurrentUserFoQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetC2CPropertyPostsViewedByCurrentUserFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetC2CPropertyPostsViewedByCurrentUserFoQuery, GetC2CPropertyPostsViewedByCurrentUserFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetC2CPropertyPostsViewedByCurrentUserFoQuery, GetC2CPropertyPostsViewedByCurrentUserFoQueryVariables>(GetC2CPropertyPostsViewedByCurrentUserFoDocument, baseOptions);
      }
export function useGetC2CPropertyPostsViewedByCurrentUserFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetC2CPropertyPostsViewedByCurrentUserFoQuery, GetC2CPropertyPostsViewedByCurrentUserFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetC2CPropertyPostsViewedByCurrentUserFoQuery, GetC2CPropertyPostsViewedByCurrentUserFoQueryVariables>(GetC2CPropertyPostsViewedByCurrentUserFoDocument, baseOptions);
        }
export type GetC2CPropertyPostsViewedByCurrentUserFoQueryHookResult = ReturnType<typeof useGetC2CPropertyPostsViewedByCurrentUserFoQuery>;
export type GetC2CPropertyPostsViewedByCurrentUserFoLazyQueryHookResult = ReturnType<typeof useGetC2CPropertyPostsViewedByCurrentUserFoLazyQuery>;
export type GetC2CPropertyPostsViewedByCurrentUserFoQueryResult = ApolloReactCommon.QueryResult<GetC2CPropertyPostsViewedByCurrentUserFoQuery, GetC2CPropertyPostsViewedByCurrentUserFoQueryVariables>;
export const GetC2CPropertyPostViewedByIdsForFoDocument = gql`
    query GetC2CPropertyPostViewedByIdsForFO($getC2CPropertyPostViewedByIdsForFOInput: GetC2CPropertyPostViewedByIdsForFOInput!) {
  getC2CPropertyPostViewedByIdsForFO(
    propertyPostIds: $getC2CPropertyPostViewedByIdsForFOInput
  ) {
    c2CPropertyPostViewedDtos {
      propertyPostId
      images
      price
      postTitle
      propertyTypeId
      buildingArea
      direction
      detailPathForSale
      detailPathForRent
      forRent
      forSale
      propertyAddress {
        countryId
        cityId
        districtId
        districtName
        wardId
        homeAddress
        streetName
        cityName
        wardName
      }
    }
  }
}
    `;

/**
 * __useGetC2CPropertyPostViewedByIdsForFoQuery__
 *
 * To run a query within a React component, call `useGetC2CPropertyPostViewedByIdsForFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetC2CPropertyPostViewedByIdsForFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetC2CPropertyPostViewedByIdsForFoQuery({
 *   variables: {
 *      getC2CPropertyPostViewedByIdsForFOInput: // value for 'getC2CPropertyPostViewedByIdsForFOInput'
 *   },
 * });
 */
export function useGetC2CPropertyPostViewedByIdsForFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetC2CPropertyPostViewedByIdsForFoQuery, GetC2CPropertyPostViewedByIdsForFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetC2CPropertyPostViewedByIdsForFoQuery, GetC2CPropertyPostViewedByIdsForFoQueryVariables>(GetC2CPropertyPostViewedByIdsForFoDocument, baseOptions);
      }
export function useGetC2CPropertyPostViewedByIdsForFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetC2CPropertyPostViewedByIdsForFoQuery, GetC2CPropertyPostViewedByIdsForFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetC2CPropertyPostViewedByIdsForFoQuery, GetC2CPropertyPostViewedByIdsForFoQueryVariables>(GetC2CPropertyPostViewedByIdsForFoDocument, baseOptions);
        }
export type GetC2CPropertyPostViewedByIdsForFoQueryHookResult = ReturnType<typeof useGetC2CPropertyPostViewedByIdsForFoQuery>;
export type GetC2CPropertyPostViewedByIdsForFoLazyQueryHookResult = ReturnType<typeof useGetC2CPropertyPostViewedByIdsForFoLazyQuery>;
export type GetC2CPropertyPostViewedByIdsForFoQueryResult = ApolloReactCommon.QueryResult<GetC2CPropertyPostViewedByIdsForFoQuery, GetC2CPropertyPostViewedByIdsForFoQueryVariables>;
export const GetCurrentTopenerDocument = gql`
    query GetCurrentTopener {
  getCurrentTopener {
    errorCode
    errorMessage
    errorMessageCode
    topenerInfo {
      contactAddress
      dob
      email
      firstName
      fullName
      gender
      isCompletedProfile
      lastName
      nationalId
      nationalIdIssueDate
      nationalIdIssuePlace
      nationalIdType
      permanentAddress
      phoneNumber
      userId
    }
  }
}
    `;

/**
 * __useGetCurrentTopenerQuery__
 *
 * To run a query within a React component, call `useGetCurrentTopenerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentTopenerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentTopenerQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetCurrentTopenerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetCurrentTopenerQuery, GetCurrentTopenerQueryVariables>) {
        return ApolloReactHooks.useQuery<GetCurrentTopenerQuery, GetCurrentTopenerQueryVariables>(GetCurrentTopenerDocument, baseOptions);
      }
export function useGetCurrentTopenerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetCurrentTopenerQuery, GetCurrentTopenerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetCurrentTopenerQuery, GetCurrentTopenerQueryVariables>(GetCurrentTopenerDocument, baseOptions);
        }
export type GetCurrentTopenerQueryHookResult = ReturnType<typeof useGetCurrentTopenerQuery>;
export type GetCurrentTopenerLazyQueryHookResult = ReturnType<typeof useGetCurrentTopenerLazyQuery>;
export type GetCurrentTopenerQueryResult = ApolloReactCommon.QueryResult<GetCurrentTopenerQuery, GetCurrentTopenerQueryVariables>;
export const GetTopenerBankAccountsByCurrentUserFoDocument = gql`
    query GetTopenerBankAccountsByCurrentUserFO($page: Int, $pageSize: Int) {
  getTopenerBankAccountsByCurrentUserFO(page: $page, pageSize: $pageSize) {
    edges {
      topenerBankAccountId
      topenerId
      bankId
      bankAccountNumber
      bankAccountBranch
      bankAccountHolderName
      isDefault
      recordVersion
    }
  }
}
    `;

/**
 * __useGetTopenerBankAccountsByCurrentUserFoQuery__
 *
 * To run a query within a React component, call `useGetTopenerBankAccountsByCurrentUserFoQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTopenerBankAccountsByCurrentUserFoQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTopenerBankAccountsByCurrentUserFoQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useGetTopenerBankAccountsByCurrentUserFoQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetTopenerBankAccountsByCurrentUserFoQuery, GetTopenerBankAccountsByCurrentUserFoQueryVariables>) {
        return ApolloReactHooks.useQuery<GetTopenerBankAccountsByCurrentUserFoQuery, GetTopenerBankAccountsByCurrentUserFoQueryVariables>(GetTopenerBankAccountsByCurrentUserFoDocument, baseOptions);
      }
export function useGetTopenerBankAccountsByCurrentUserFoLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetTopenerBankAccountsByCurrentUserFoQuery, GetTopenerBankAccountsByCurrentUserFoQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetTopenerBankAccountsByCurrentUserFoQuery, GetTopenerBankAccountsByCurrentUserFoQueryVariables>(GetTopenerBankAccountsByCurrentUserFoDocument, baseOptions);
        }
export type GetTopenerBankAccountsByCurrentUserFoQueryHookResult = ReturnType<typeof useGetTopenerBankAccountsByCurrentUserFoQuery>;
export type GetTopenerBankAccountsByCurrentUserFoLazyQueryHookResult = ReturnType<typeof useGetTopenerBankAccountsByCurrentUserFoLazyQuery>;
export type GetTopenerBankAccountsByCurrentUserFoQueryResult = ApolloReactCommon.QueryResult<GetTopenerBankAccountsByCurrentUserFoQuery, GetTopenerBankAccountsByCurrentUserFoQueryVariables>;
export const GetUserByIdDocument = gql`
    query GetUserById($userId: Uuid) {
  userById(userId: $userId) {
    errorCode
    errorMessage
    errorMessageCode
    userDto {
      firstName
      lastName
      userName
      phoneNumber
      email
      emailConfirmed
      dob {
        toDateTime
      }
      referralCode
      gender
      userId
      roleId
      roleName
      profilePhoto
      profilePhotos
      updatedDatetime
      createdDatetime
      pushNotificationId
      isVerifyProfilePhoto
    }
  }
}
    `;

/**
 * __useGetUserByIdQuery__
 *
 * To run a query within a React component, call `useGetUserByIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserByIdQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserByIdQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserByIdQuery, GetUserByIdQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserByIdQuery, GetUserByIdQueryVariables>(GetUserByIdDocument, baseOptions);
      }
export function useGetUserByIdLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserByIdQuery, GetUserByIdQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserByIdQuery, GetUserByIdQueryVariables>(GetUserByIdDocument, baseOptions);
        }
export type GetUserByIdQueryHookResult = ReturnType<typeof useGetUserByIdQuery>;
export type GetUserByIdLazyQueryHookResult = ReturnType<typeof useGetUserByIdLazyQuery>;
export type GetUserByIdQueryResult = ApolloReactCommon.QueryResult<GetUserByIdQuery, GetUserByIdQueryVariables>;
export const GetUserFollowOnPostsByPropertyPostIdsDocument = gql`
    query GetUserFollowOnPostsByPropertyPostIds($input: GetUserFollowOnPostsByPropertyPostIdsInput!) {
  getUserFollowOnPostsByPropertyPostIds(
    getUserFollowOnPostsByPropertyPostIdsInput: $input
  ) {
    userFollowOnPostDtos {
      isFollowed
      propertyPostId
    }
  }
}
    `;

/**
 * __useGetUserFollowOnPostsByPropertyPostIdsQuery__
 *
 * To run a query within a React component, call `useGetUserFollowOnPostsByPropertyPostIdsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserFollowOnPostsByPropertyPostIdsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserFollowOnPostsByPropertyPostIdsQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetUserFollowOnPostsByPropertyPostIdsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserFollowOnPostsByPropertyPostIdsQuery, GetUserFollowOnPostsByPropertyPostIdsQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserFollowOnPostsByPropertyPostIdsQuery, GetUserFollowOnPostsByPropertyPostIdsQueryVariables>(GetUserFollowOnPostsByPropertyPostIdsDocument, baseOptions);
      }
export function useGetUserFollowOnPostsByPropertyPostIdsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserFollowOnPostsByPropertyPostIdsQuery, GetUserFollowOnPostsByPropertyPostIdsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserFollowOnPostsByPropertyPostIdsQuery, GetUserFollowOnPostsByPropertyPostIdsQueryVariables>(GetUserFollowOnPostsByPropertyPostIdsDocument, baseOptions);
        }
export type GetUserFollowOnPostsByPropertyPostIdsQueryHookResult = ReturnType<typeof useGetUserFollowOnPostsByPropertyPostIdsQuery>;
export type GetUserFollowOnPostsByPropertyPostIdsLazyQueryHookResult = ReturnType<typeof useGetUserFollowOnPostsByPropertyPostIdsLazyQuery>;
export type GetUserFollowOnPostsByPropertyPostIdsQueryResult = ApolloReactCommon.QueryResult<GetUserFollowOnPostsByPropertyPostIdsQuery, GetUserFollowOnPostsByPropertyPostIdsQueryVariables>;
export const GetUserPushNotificationDocument = gql`
    query GetUserPushNotification($userId: Uuid) {
  userById(userId: $userId) {
    errorCode
    errorMessage
    errorMessageCode
    userDto {
      pushNotificationId
    }
  }
}
    `;

/**
 * __useGetUserPushNotificationQuery__
 *
 * To run a query within a React component, call `useGetUserPushNotificationQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserPushNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserPushNotificationQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserPushNotificationQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserPushNotificationQuery, GetUserPushNotificationQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserPushNotificationQuery, GetUserPushNotificationQueryVariables>(GetUserPushNotificationDocument, baseOptions);
      }
export function useGetUserPushNotificationLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserPushNotificationQuery, GetUserPushNotificationQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserPushNotificationQuery, GetUserPushNotificationQueryVariables>(GetUserPushNotificationDocument, baseOptions);
        }
export type GetUserPushNotificationQueryHookResult = ReturnType<typeof useGetUserPushNotificationQuery>;
export type GetUserPushNotificationLazyQueryHookResult = ReturnType<typeof useGetUserPushNotificationLazyQuery>;
export type GetUserPushNotificationQueryResult = ApolloReactCommon.QueryResult<GetUserPushNotificationQuery, GetUserPushNotificationQueryVariables>;
export const GetUsersForMessengerDocument = gql`
    query GetUsersForMessenger($request: GetUsersForMessengerInput!) {
  getUsersForMessenger(request: $request) {
    users {
      userId
      firstName
      lastName
      fullName
      profilePhoto
      email
      phoneNumber
      roleNames
    }
  }
}
    `;

/**
 * __useGetUsersForMessengerQuery__
 *
 * To run a query within a React component, call `useGetUsersForMessengerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUsersForMessengerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUsersForMessengerQuery({
 *   variables: {
 *      request: // value for 'request'
 *   },
 * });
 */
export function useGetUsersForMessengerQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUsersForMessengerQuery, GetUsersForMessengerQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUsersForMessengerQuery, GetUsersForMessengerQueryVariables>(GetUsersForMessengerDocument, baseOptions);
      }
export function useGetUsersForMessengerLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUsersForMessengerQuery, GetUsersForMessengerQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUsersForMessengerQuery, GetUsersForMessengerQueryVariables>(GetUsersForMessengerDocument, baseOptions);
        }
export type GetUsersForMessengerQueryHookResult = ReturnType<typeof useGetUsersForMessengerQuery>;
export type GetUsersForMessengerLazyQueryHookResult = ReturnType<typeof useGetUsersForMessengerLazyQuery>;
export type GetUsersForMessengerQueryResult = ApolloReactCommon.QueryResult<GetUsersForMessengerQuery, GetUsersForMessengerQueryVariables>;
export const SendLinkVerifyEmailDocument = gql`
    mutation SendLinkVerifyEmail($input: SendLinkVerifyEmailFOInput!) {
  sendLinkVerifyEmailFO(sendLinkVerifyEmailFOInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type SendLinkVerifyEmailMutationFn = ApolloReactCommon.MutationFunction<SendLinkVerifyEmailMutation, SendLinkVerifyEmailMutationVariables>;

/**
 * __useSendLinkVerifyEmailMutation__
 *
 * To run a mutation, you first call `useSendLinkVerifyEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendLinkVerifyEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendLinkVerifyEmailMutation, { data, loading, error }] = useSendLinkVerifyEmailMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSendLinkVerifyEmailMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SendLinkVerifyEmailMutation, SendLinkVerifyEmailMutationVariables>) {
        return ApolloReactHooks.useMutation<SendLinkVerifyEmailMutation, SendLinkVerifyEmailMutationVariables>(SendLinkVerifyEmailDocument, baseOptions);
      }
export type SendLinkVerifyEmailMutationHookResult = ReturnType<typeof useSendLinkVerifyEmailMutation>;
export type SendLinkVerifyEmailMutationResult = ApolloReactCommon.MutationResult<SendLinkVerifyEmailMutation>;
export type SendLinkVerifyEmailMutationOptions = ApolloReactCommon.BaseMutationOptions<SendLinkVerifyEmailMutation, SendLinkVerifyEmailMutationVariables>;
export const UpdateTopenerBankAccountFoDocument = gql`
    mutation UpdateTopenerBankAccountFO($input: UpdateTopenerBankAccountFOInput!) {
  updateTopenerBankAccountFO(updateTopenerBankAccountFOInput: $input) {
    errorCode
    errorMessage
    errorMessageCode
  }
}
    `;
export type UpdateTopenerBankAccountFoMutationFn = ApolloReactCommon.MutationFunction<UpdateTopenerBankAccountFoMutation, UpdateTopenerBankAccountFoMutationVariables>;

/**
 * __useUpdateTopenerBankAccountFoMutation__
 *
 * To run a mutation, you first call `useUpdateTopenerBankAccountFoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateTopenerBankAccountFoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateTopenerBankAccountFoMutation, { data, loading, error }] = useUpdateTopenerBankAccountFoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateTopenerBankAccountFoMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateTopenerBankAccountFoMutation, UpdateTopenerBankAccountFoMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateTopenerBankAccountFoMutation, UpdateTopenerBankAccountFoMutationVariables>(UpdateTopenerBankAccountFoDocument, baseOptions);
      }
export type UpdateTopenerBankAccountFoMutationHookResult = ReturnType<typeof useUpdateTopenerBankAccountFoMutation>;
export type UpdateTopenerBankAccountFoMutationResult = ApolloReactCommon.MutationResult<UpdateTopenerBankAccountFoMutation>;
export type UpdateTopenerBankAccountFoMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateTopenerBankAccountFoMutation, UpdateTopenerBankAccountFoMutationVariables>;
export const UpdateUserDocument = gql`
    mutation UpdateUser($updateUserInput: UpdateUserInput!) {
  updateUser(updateUserInput: $updateUserInput) {
    errorCode
    errorMessage
    errorMessageCode
    userDto {
      firstName
      lastName
      userName
      phoneNumber
      email
      emailConfirmed
      dob {
        toDateTime
      }
      gender
      userId
      roleId
      roleName
      profilePhoto
      updatedDatetime
      createdDatetime
      pushNotificationId
    }
  }
}
    `;
export type UpdateUserMutationFn = ApolloReactCommon.MutationFunction<UpdateUserMutation, UpdateUserMutationVariables>;

/**
 * __useUpdateUserMutation__
 *
 * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({
 *   variables: {
 *      updateUserInput: // value for 'updateUserInput'
 *   },
 * });
 */
export function useUpdateUserMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<UpdateUserMutation, UpdateUserMutationVariables>) {
        return ApolloReactHooks.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(UpdateUserDocument, baseOptions);
      }
export type UpdateUserMutationHookResult = ReturnType<typeof useUpdateUserMutation>;
export type UpdateUserMutationResult = ApolloReactCommon.MutationResult<UpdateUserMutation>;
export type UpdateUserMutationOptions = ApolloReactCommon.BaseMutationOptions<UpdateUserMutation, UpdateUserMutationVariables>;
export const GetAvatarDocument = gql`
    query GetAvatar($userId: Uuid) {
  userById(userId: $userId) {
    userDto {
      profilePhoto
      profilePhotos
    }
  }
}
    `;

/**
 * __useGetAvatarQuery__
 *
 * To run a query within a React component, call `useGetAvatarQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAvatarQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAvatarQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetAvatarQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetAvatarQuery, GetAvatarQueryVariables>) {
        return ApolloReactHooks.useQuery<GetAvatarQuery, GetAvatarQueryVariables>(GetAvatarDocument, baseOptions);
      }
export function useGetAvatarLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetAvatarQuery, GetAvatarQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetAvatarQuery, GetAvatarQueryVariables>(GetAvatarDocument, baseOptions);
        }
export type GetAvatarQueryHookResult = ReturnType<typeof useGetAvatarQuery>;
export type GetAvatarLazyQueryHookResult = ReturnType<typeof useGetAvatarLazyQuery>;
export type GetAvatarQueryResult = ApolloReactCommon.QueryResult<GetAvatarQuery, GetAvatarQueryVariables>;
export const GetUserDetailDocument = gql`
    query GetUserDetail($userId: Uuid) {
  userById(userId: $userId) {
    userDto {
      userId
      firstName
      lastName
      profilePhoto
      profilePhotos
      roleName
      updatedDatetime
      createdDatetime
      phoneNumber
      email
      isVerifyProfilePhoto
      gender
    }
  }
}
    `;

/**
 * __useGetUserDetailQuery__
 *
 * To run a query within a React component, call `useGetUserDetailQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserDetailQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserDetailQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserDetailQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<GetUserDetailQuery, GetUserDetailQueryVariables>) {
        return ApolloReactHooks.useQuery<GetUserDetailQuery, GetUserDetailQueryVariables>(GetUserDetailDocument, baseOptions);
      }
export function useGetUserDetailLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<GetUserDetailQuery, GetUserDetailQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<GetUserDetailQuery, GetUserDetailQueryVariables>(GetUserDetailDocument, baseOptions);
        }
export type GetUserDetailQueryHookResult = ReturnType<typeof useGetUserDetailQuery>;
export type GetUserDetailLazyQueryHookResult = ReturnType<typeof useGetUserDetailLazyQuery>;
export type GetUserDetailQueryResult = ApolloReactCommon.QueryResult<GetUserDetailQuery, GetUserDetailQueryVariables>;