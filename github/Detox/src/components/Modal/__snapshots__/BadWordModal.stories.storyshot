// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Storyshots z|c2c/BadWordModal default 1`] = `
Array [
  <Text
    style={
      Object {
        "display": "none",
      }
    }
    testID="storyConfigId"
  >
    {"notHaveTestId":"isHtmlLoading"}
  </Text>,
  <Modal
    animationType="slide"
    hardwareAccelerated={false}
    presentationStyle="overFullScreen"
    transparent={true}
    visible={true}
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "#0005",
            "flex": 1,
            "justifyContent": "center",
            "padding": 16,
          },
          undefined,
        ]
      }
    >
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "bottom": 0,
            "left": 0,
            "opacity": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      />
      <View
        style={
          Object {
            "alignSelf": "center",
            "backgroundColor": "#FFFFFF",
            "borderRadius": 16,
            "overflow": "hidden",
            "paddingTop": 24,
            "width": 718,
          }
        }
      >
        <Text
          style={
            Object {
              "fontFamily": "Nunito-Bold",
              "fontSize": 20,
              "includeFontPadding": true,
              "textAlign": "center",
            }
          }
        >
          Từ ngữ không hợp lệ
        </Text>
        <RCTScrollView
          style={
            Object {
              "height": 300,
              "marginTop": 32,
              "paddingHorizontal": 16,
            }
          }
        >
          <View>
            <View
              style={
                Object {
                  "marginBottom": 16,
                }
              }
            >
              <View
                accessibilityLabel="isHtmlLoading"
                style={
                  Object {
                    "height": 0,
                  }
                }
                testID="isHtmlLoading"
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      undefined,
                    ]
                  }
                >
                  <RNCWebView
                    cacheEnabled={true}
                    customStyle="
  @font-face {
    font-family: 'Nunito-Regular';
    src: local('Nunito-Regular'), url('Nunito-Regular.ttf');
  }
  body {
    font-family: Nunito-Regular;
    font-size: 16px;
    line-height: 24px;
  }
  .content {
    font-family: Nunito-Regular;
    font-size: 16px;
    line-height: 24px;
  }
  b {
    color:red;
    background-color:rgba(233, 69, 69, 0.3);
    font-weight:400;
    padding:1;
    line-height:24px;
  }
  body {
    font-size:15px
  }"
                    injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
                    injectedJavaScriptForMainFrameOnly={true}
                    javaScriptEnabled={true}
                    messagingEnabled={true}
                    onContentProcessDidTerminate={[Function]}
                    onHttpError={[Function]}
                    onLoadingError={[Function]}
                    onLoadingFinish={[Function]}
                    onLoadingProgress={[Function]}
                    onLoadingStart={[Function]}
                    onMessage={[Function]}
                    onShouldStartLoadWithRequest={[Function]}
                    onSizeUpdated={[Function]}
                    scrollEnabled={false}
                    showsHorizontalScrollIndicator={false}
                    showsVerticalScrollIndicator={false}
                    source={
                      Object {
                        "baseUrl": "",
                        "html": "
  Lorem ipsum dolor sit amet, <b>consectetur</b> adipiscing elit, sed do eiusmod tempor <b>incididunt</b> ut labore et dolore magna aliqua.
  <script>
  // prevents code colissions with global scope
  (function() {
    
    var styleElement = document.createElement('style');
    styleElement.innerHTML = '\\\\n  body {\\\\n    margin: 0;\\\\n    padding: 0;\\\\n  }\\\\n\\\\n  @font-face {\\\\n    font-family: \\\\'Nunito-Regular\\\\';\\\\n    src: local(\\\\'Nunito-Regular\\\\'), url(\\\\'Nunito-Regular.ttf\\\\');\\\\n  }\\\\n  body {\\\\n    font-family: Nunito-Regular;\\\\n    font-size: 16px;\\\\n    line-height: 24px;\\\\n  }\\\\n  .content {\\\\n    font-family: Nunito-Regular;\\\\n    font-size: 16px;\\\\n    line-height: 24px;\\\\n  }\\\\n  b {\\\\n    color:red;\\\\n    background-color:rgba(233, 69, 69, 0.3);\\\\n    font-weight:400;\\\\n    padding:1;\\\\n    line-height:24px;\\\\n  }\\\\n  body {\\\\n    font-size:15px\\\\n  }';
    document.head.appendChild(styleElement);
    
  ;
  if (!document.getElementById(\\"rnahw-wrapper\\")) {
    var wrapper = document.createElement('div');
    wrapper.id = 'rnahw-wrapper';
    while (document.body.firstChild instanceof Node) {
      wrapper.appendChild(document.body.firstChild);
    }
    document.body.appendChild(wrapper);
  }
  
  var usingScale = undefined ? screen.width / window.innerWidth : 1;
  var scaling = false;
  var zoomedin = false;
  var lastHeight = 0;
  var heightTheSameTimes = 0;
  var maxHeightTheSameTimes = 5;
  var forceRefreshDelay = 1000;
  var forceRefreshTimeout;
  var checkPostMessageTimeout;

  function updateSize() {
    if (zoomedin || scaling || document.fullscreenElement) {
      return;
    }
    if (
      !window.hasOwnProperty('ReactNativeWebView') || 
      !window.ReactNativeWebView.hasOwnProperty('postMessage')
    ) {
      checkPostMessageTimeout = setTimeout(updateSize, 200);
      return;
    }

    clearTimeout(checkPostMessageTimeout);
    var result = wrapper.getBoundingClientRect()
    height = result.height + result.top;
    if(!height) {
      height = wrapper.offsetHeight || document.documentElement.offsetHeight
    }
    width = result.width;
    if(!width) {
      width = wrapper.offsetWidth || document.documentElement.offsetWidth
    }


    window.ReactNativeWebView.postMessage(JSON.stringify({ width: Math.min(width, screen.width), height: height * usingScale }));

    // Make additional height checks (required to fix issues wit twitter embeds)
    clearTimeout(forceRefreshTimeout);

    if (lastHeight !== height) {
      heightTheSameTimes = 1;
    } else {
      heightTheSameTimes++;
    }

    lastHeight = height;

    if (heightTheSameTimes <= maxHeightTheSameTimes) {
      forceRefreshTimeout = setTimeout(
        updateSize,
        heightTheSameTimes * forceRefreshDelay
      );
    }
  }
  
  window.addEventListener('load', updateSize);
  window.addEventListener('resize', updateSize);
  
  var MutationObserver =
    window.MutationObserver || window.WebKitMutationObserver;
  var observer = new MutationObserver(updateSize);
  observer.observe(document, {
    subtree: true,
    attributes: true
  });

  
    var meta = document.createElement(\\"meta\\");
    meta.setAttribute(\\"name\\", \\"viewport\\");
    meta.setAttribute(\\"content\\", \\"width=device-width, user-scalable=no\\");
    document.getElementsByTagName(\\"head\\")[0].appendChild(meta);
  
  
  updateSize();
  
  
  })();
  </script>
",
                      }
                    }
                    style={
                      Array [
                        Object {
                          "flex": 1,
                          "overflow": "hidden",
                        },
                        Object {
                          "backgroundColor": "#ffffff",
                        },
                        Array [
                          Object {
                            "backgroundColor": "transparent",
                          },
                          Object {
                            "height": 0,
                            "width": 750,
                          },
                          Array [
                            Object {
                              "width": "100%",
                            },
                            Object {
                              "flex": 1,
                              "minHeight": 200,
                              "opacity": 0.99,
                            },
                          ],
                        ],
                      ]
                    }
                    textInteractionEnabled={true}
                    useSharedProcessPool={true}
                    viewportContent="width=device-width, user-scalable=no"
                  />
                </View>
              </View>
            </View>
            <View
              style={
                Object {
                  "marginBottom": 16,
                }
              }
            >
              <View
                accessibilityLabel="isHtmlLoading"
                style={
                  Object {
                    "height": 0,
                  }
                }
                testID="isHtmlLoading"
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      undefined,
                    ]
                  }
                >
                  <RNCWebView
                    cacheEnabled={true}
                    customStyle="
  @font-face {
    font-family: 'Nunito-Regular';
    src: local('Nunito-Regular'), url('Nunito-Regular.ttf');
  }
  body {
    font-family: Nunito-Regular;
    font-size: 16px;
    line-height: 24px;
  }
  .content {
    font-family: Nunito-Regular;
    font-size: 16px;
    line-height: 24px;
  }
  b {
    color:red;
    background-color:rgba(233, 69, 69, 0.3);
    font-weight:400;
    padding:1;
    line-height:24px;
  }
  body {
    font-size:15px
  }"
                    injectedJavaScriptBeforeContentLoadedForMainFrameOnly={true}
                    injectedJavaScriptForMainFrameOnly={true}
                    javaScriptEnabled={true}
                    messagingEnabled={true}
                    onContentProcessDidTerminate={[Function]}
                    onHttpError={[Function]}
                    onLoadingError={[Function]}
                    onLoadingFinish={[Function]}
                    onLoadingProgress={[Function]}
                    onLoadingStart={[Function]}
                    onMessage={[Function]}
                    onShouldStartLoadWithRequest={[Function]}
                    onSizeUpdated={[Function]}
                    scrollEnabled={false}
                    showsHorizontalScrollIndicator={false}
                    showsVerticalScrollIndicator={false}
                    source={
                      Object {
                        "baseUrl": "",
                        "html": "
  Lorem ipsum dolor sit amet, <b>consectetur</b> adipiscing elit, sed do eiusmod tempor <b>incididunt</b> ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in <b>voluptate</b> velit esse cillum dolore eu fugiat nulla pariatur. <b>Excepteur</b> sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
  <script>
  // prevents code colissions with global scope
  (function() {
    
    var styleElement = document.createElement('style');
    styleElement.innerHTML = '\\\\n  body {\\\\n    margin: 0;\\\\n    padding: 0;\\\\n  }\\\\n\\\\n  @font-face {\\\\n    font-family: \\\\'Nunito-Regular\\\\';\\\\n    src: local(\\\\'Nunito-Regular\\\\'), url(\\\\'Nunito-Regular.ttf\\\\');\\\\n  }\\\\n  body {\\\\n    font-family: Nunito-Regular;\\\\n    font-size: 16px;\\\\n    line-height: 24px;\\\\n  }\\\\n  .content {\\\\n    font-family: Nunito-Regular;\\\\n    font-size: 16px;\\\\n    line-height: 24px;\\\\n  }\\\\n  b {\\\\n    color:red;\\\\n    background-color:rgba(233, 69, 69, 0.3);\\\\n    font-weight:400;\\\\n    padding:1;\\\\n    line-height:24px;\\\\n  }\\\\n  body {\\\\n    font-size:15px\\\\n  }';
    document.head.appendChild(styleElement);
    
  ;
  if (!document.getElementById(\\"rnahw-wrapper\\")) {
    var wrapper = document.createElement('div');
    wrapper.id = 'rnahw-wrapper';
    while (document.body.firstChild instanceof Node) {
      wrapper.appendChild(document.body.firstChild);
    }
    document.body.appendChild(wrapper);
  }
  
  var usingScale = undefined ? screen.width / window.innerWidth : 1;
  var scaling = false;
  var zoomedin = false;
  var lastHeight = 0;
  var heightTheSameTimes = 0;
  var maxHeightTheSameTimes = 5;
  var forceRefreshDelay = 1000;
  var forceRefreshTimeout;
  var checkPostMessageTimeout;

  function updateSize() {
    if (zoomedin || scaling || document.fullscreenElement) {
      return;
    }
    if (
      !window.hasOwnProperty('ReactNativeWebView') || 
      !window.ReactNativeWebView.hasOwnProperty('postMessage')
    ) {
      checkPostMessageTimeout = setTimeout(updateSize, 200);
      return;
    }

    clearTimeout(checkPostMessageTimeout);
    var result = wrapper.getBoundingClientRect()
    height = result.height + result.top;
    if(!height) {
      height = wrapper.offsetHeight || document.documentElement.offsetHeight
    }
    width = result.width;
    if(!width) {
      width = wrapper.offsetWidth || document.documentElement.offsetWidth
    }


    window.ReactNativeWebView.postMessage(JSON.stringify({ width: Math.min(width, screen.width), height: height * usingScale }));

    // Make additional height checks (required to fix issues wit twitter embeds)
    clearTimeout(forceRefreshTimeout);

    if (lastHeight !== height) {
      heightTheSameTimes = 1;
    } else {
      heightTheSameTimes++;
    }

    lastHeight = height;

    if (heightTheSameTimes <= maxHeightTheSameTimes) {
      forceRefreshTimeout = setTimeout(
        updateSize,
        heightTheSameTimes * forceRefreshDelay
      );
    }
  }
  
  window.addEventListener('load', updateSize);
  window.addEventListener('resize', updateSize);
  
  var MutationObserver =
    window.MutationObserver || window.WebKitMutationObserver;
  var observer = new MutationObserver(updateSize);
  observer.observe(document, {
    subtree: true,
    attributes: true
  });

  
    var meta = document.createElement(\\"meta\\");
    meta.setAttribute(\\"name\\", \\"viewport\\");
    meta.setAttribute(\\"content\\", \\"width=device-width, user-scalable=no\\");
    document.getElementsByTagName(\\"head\\")[0].appendChild(meta);
  
  
  updateSize();
  
  
  })();
  </script>
",
                      }
                    }
                    style={
                      Array [
                        Object {
                          "flex": 1,
                          "overflow": "hidden",
                        },
                        Object {
                          "backgroundColor": "#ffffff",
                        },
                        Array [
                          Object {
                            "backgroundColor": "transparent",
                          },
                          Object {
                            "height": 0,
                            "width": 750,
                          },
                          Array [
                            Object {
                              "width": "100%",
                            },
                            Object {
                              "flex": 1,
                              "minHeight": 200,
                              "opacity": 0.99,
                            },
                          ],
                        ],
                      ]
                    }
                    textInteractionEnabled={true}
                    useSharedProcessPool={true}
                    viewportContent="width=device-width, user-scalable=no"
                  />
                </View>
              </View>
            </View>
          </View>
        </RCTScrollView>
        <View
          style={
            Object {
              "backgroundColor": "#FFFFFF",
              "elevation": 5,
              "flexDirection": "row",
              "padding": 16,
              "shadowColor": "#3b4a74",
              "shadowOffset": Object {
                "height": 3,
                "width": 3,
              },
              "shadowOpacity": 0.02,
              "shadowRadius": 30,
            }
          }
        >
          <View
            accessibilityState={
              Object {
                "disabled": false,
              }
            }
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "#26894F",
                "borderRadius": 8,
                "flex": 1,
                "flexDirection": "row",
                "height": 45,
                "justifyContent": "center",
                "opacity": 1,
                "paddingBottom": 12,
                "paddingTop": 10,
              }
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "color": "#FFFFFF",
                    "fontFamily": "Nunito-Bold",
                    "fontSize": 16,
                    "includeFontPadding": true,
                    "marginHorizontal": 8,
                  },
                  Object {
                    "color": "#FFFFFF",
                  },
                  Object {
                    "color": "#FFFFFF",
                    "fontFamily": "Nunito-Bold",
                    "fontSize": 14,
                    "includeFontPadding": true,
                  },
                ]
              }
            >
              Đóng
            </Text>
          </View>
        </View>
      </View>
    </View>
  </Modal>,
]
`;
